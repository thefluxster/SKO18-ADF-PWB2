/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var common_1 = require("@angular/common");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_alfresco_datatable_1 = require("ng2-alfresco-datatable");
var ShareDataTableAdapter = (function () {
    function ShareDataTableAdapter(documentListService, basePath, schema) {
        this.documentListService = documentListService;
        this.basePath = basePath;
        this.ERR_ROW_NOT_FOUND = 'Row not found';
        this.ERR_COL_NOT_FOUND = 'Column not found';
        this.DEFAULT_DATE_FORMAT = 'medium';
        this.thumbnails = false;
        this.rows = [];
        this.columns = schema || [];
    }
    ShareDataTableAdapter.prototype.getRows = function () {
        return this.rows;
    };
    ShareDataTableAdapter.prototype.setRows = function (rows) {
        this.rows = rows || [];
        this.sort();
    };
    ShareDataTableAdapter.prototype.getColumns = function () {
        return this.columns;
    };
    ShareDataTableAdapter.prototype.setColumns = function (columns) {
        this.columns = columns || [];
    };
    ShareDataTableAdapter.prototype.getValue = function (row, col) {
        if (!row) {
            throw new Error(this.ERR_ROW_NOT_FOUND);
        }
        if (!col) {
            throw new Error(this.ERR_COL_NOT_FOUND);
        }
        var dataRow = row;
        var value = row.getValue(col.key);
        if (dataRow.cache[col.key] !== undefined) {
            return dataRow.cache[col.key];
        }
        if (col.type === 'date') {
            var datePipe = new common_1.DatePipe('en-US');
            var format = col.format || this.DEFAULT_DATE_FORMAT;
            try {
                var result = datePipe.transform(value, format);
                return dataRow.cacheValue(col.key, result);
            }
            catch (err) {
                console.error("Error parsing date " + value + " to format " + format);
                return 'Error';
            }
        }
        if (col.type === 'image') {
            if (this.imageResolver) {
                var resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
            if (col.key === '$thumbnail') {
                var node = row.node;
                if (node.entry.isFolder) {
                    return this.getImagePath('ft_ic_folder.svg');
                }
                if (node.entry.isFile) {
                    if (this.thumbnails) {
                        if (this.documentListService) {
                            return this.documentListService.getDocumentThumbnailUrl(node);
                        }
                        return null;
                    }
                    if (node.entry.content) {
                        var mimeType = node.entry.content.mimeType;
                        if (mimeType) {
                            var icon = this.documentListService.getMimeTypeIcon(mimeType);
                            if (icon) {
                                return this.getImagePath(icon);
                            }
                        }
                    }
                }
                return this.getImagePath('ft_ic_miscellaneous.svg');
            }
        }
        return dataRow.cacheValue(col.key, value);
    };
    ShareDataTableAdapter.prototype.getSorting = function () {
        return this.sorting;
    };
    ShareDataTableAdapter.prototype.setSorting = function (sorting) {
        this.sorting = sorting;
        this.sortRows(this.rows, this.sorting);
    };
    ShareDataTableAdapter.prototype.sort = function (key, direction) {
        var sorting = this.sorting || new ng2_alfresco_datatable_1.DataSorting();
        if (key) {
            sorting.key = key;
            sorting.direction = direction || 'asc';
        }
        this.setSorting(sorting);
    };
    ShareDataTableAdapter.prototype.setFilter = function (filter) {
        this.filter = filter;
    };
    ShareDataTableAdapter.prototype.setImageResolver = function (resolver) {
        this.imageResolver = resolver;
    };
    ShareDataTableAdapter.prototype.sortRows = function (rows, sorting) {
        if (sorting && sorting.key && rows && rows.length > 0) {
            rows.sort(function (a, b) {
                if (a.node.entry.isFolder !== b.node.entry.isFolder) {
                    return a.node.entry.isFolder ? -1 : 1;
                }
                var left = a.getValue(sorting.key);
                if (left) {
                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                }
                else {
                    left = '';
                }
                var right = b.getValue(sorting.key);
                if (right) {
                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                }
                else {
                    right = '';
                }
                return sorting.direction === 'asc'
                    ? left.localeCompare(right)
                    : right.localeCompare(left);
            });
        }
    };
    ShareDataTableAdapter.prototype.loadPage = function (page) {
        this.page = page;
        var rows = [];
        if (page && page.list) {
            var data = page.list.entries;
            if (data && data.length > 0) {
                rows = data.map(function (item) { return new ShareDataRow(item); });
                if (this.filter) {
                    rows = rows.filter(this.filter);
                }
                if (this.columns && this.columns.length > 0) {
                    var sorting = this.getSorting();
                    if (sorting) {
                        this.sortRows(rows, sorting);
                    }
                    else {
                        var sortable = this.columns.filter(function (c) { return c.sortable; });
                        if (sortable.length > 0) {
                            this.sort(sortable[0].key, 'asc');
                        }
                        else {
                            this.sort(this.columns[0].key, 'asc');
                        }
                    }
                }
            }
        }
        this.rows = rows;
    };
    ShareDataTableAdapter.prototype.getImagePath = function (id) {
        return this.basePath + "/assets/images/" + id;
    };
    return ShareDataTableAdapter;
}());
exports.ShareDataTableAdapter = ShareDataTableAdapter;
var ShareDataRow = (function () {
    function ShareDataRow(obj) {
        this.obj = obj;
        this.cache = {};
        this.isSelected = false;
        if (!obj) {
            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);
        }
    }
    Object.defineProperty(ShareDataRow.prototype, "node", {
        get: function () {
            return this.obj;
        },
        enumerable: true,
        configurable: true
    });
    ShareDataRow.prototype.cacheValue = function (key, value) {
        this.cache[key] = value;
        return value;
    };
    ShareDataRow.prototype.getValue = function (key) {
        if (this.cache[key] !== undefined) {
            return this.cache[key];
        }
        return ng2_alfresco_core_1.ObjectUtils.getValue(this.obj.entry, key);
    };
    ShareDataRow.prototype.hasValue = function (key) {
        return this.getValue(key) ? true : false;
    };
    return ShareDataRow;
}());
ShareDataRow.ERR_OBJECT_NOT_FOUND = 'Object source not found';
exports.ShareDataRow = ShareDataRow;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
