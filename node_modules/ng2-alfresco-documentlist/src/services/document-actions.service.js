/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var document_list_service_1 = require("./document-list.service");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var DocumentActionsService = (function () {
    function DocumentActionsService(documentListService, contentService) {
        this.documentListService = documentListService;
        this.contentService = contentService;
        this.handlers = {};
        this.setupActionHandlers();
    }
    DocumentActionsService.prototype.getHandler = function (key) {
        if (key) {
            var lkey = key.toLowerCase();
            return this.handlers[lkey] || null;
        }
        return null;
    };
    DocumentActionsService.prototype.setHandler = function (key, handler) {
        if (key) {
            var lkey = key.toLowerCase();
            this.handlers[lkey] = handler;
            return true;
        }
        return false;
    };
    DocumentActionsService.prototype.canExecuteAction = function (obj) {
        return this.documentListService && obj && obj.entry.isFile === true;
    };
    DocumentActionsService.prototype.setupActionHandlers = function () {
        this.handlers['download'] = this.download.bind(this);
        this.handlers['delete'] = this.deleteNode.bind(this);
        this.handlers['system1'] = this.handleStandardAction1.bind(this);
        this.handlers['system2'] = this.handleStandardAction2.bind(this);
    };
    DocumentActionsService.prototype.handleStandardAction1 = function (obj) {
        window.alert('standard document action 1');
    };
    DocumentActionsService.prototype.handleStandardAction2 = function (obj) {
        window.alert('standard document action 2');
    };
    DocumentActionsService.prototype.download = function (obj) {
        if (this.canExecuteAction(obj) && this.contentService) {
            var link = document.createElement('a');
            document.body.appendChild(link);
            link.setAttribute('download', 'download');
            link.href = this.contentService.getContentUrl(obj);
            link.click();
            document.body.removeChild(link);
            return true;
        }
        return false;
    };
    DocumentActionsService.prototype.deleteNode = function (obj, target) {
        if (this.canExecuteAction(obj) && obj.entry && obj.entry.id) {
            this.documentListService.deleteNode(obj.entry.id).subscribe(function () {
                if (target && typeof target.reload === 'function') {
                    target.reload();
                }
            });
        }
    };
    return DocumentActionsService;
}());
DocumentActionsService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [document_list_service_1.DocumentListService,
        ng2_alfresco_core_1.AlfrescoContentService])
], DocumentActionsService);
exports.DocumentActionsService = DocumentActionsService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2RvY3VtZW50LWFjdGlvbnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7O0FBRUgsc0NBQTJDO0FBRTNDLGlFQUE4RDtBQUM5RCx1REFBMkQ7QUFHM0QsSUFBYSxzQkFBc0I7SUFHL0IsZ0NBQW9CLG1CQUF5QyxFQUN6QyxjQUF1QztRQUR2Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXNCO1FBQ3pDLG1CQUFjLEdBQWQsY0FBYyxDQUF5QjtRQUhuRCxhQUFRLEdBQTRDLEVBQUUsQ0FBQztRQUkzRCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsMkNBQVUsR0FBVixVQUFXLEdBQVc7UUFDbEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNOLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDdkMsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELDJDQUFVLEdBQVYsVUFBVyxHQUFXLEVBQUUsT0FBNkI7UUFDakQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNOLElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQztZQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxpREFBZ0IsR0FBaEIsVUFBaUIsR0FBUTtRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUM7SUFDeEUsQ0FBQztJQUVPLG9EQUFtQixHQUEzQjtRQUNJLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUdyRCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFHTyxzREFBcUIsR0FBN0IsVUFBOEIsR0FBUTtRQUNsQyxNQUFNLENBQUMsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUdPLHNEQUFxQixHQUE3QixVQUE4QixHQUFRO1FBQ2xDLE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU8seUNBQVEsR0FBaEIsVUFBaUIsR0FBUTtRQUNyQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDcEQsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMxQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNiLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVPLDJDQUFVLEdBQWxCLFVBQW1CLEdBQVEsRUFBRSxNQUFZO1FBQ3JDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDO2dCQUN4RCxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksT0FBTyxNQUFNLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQ2hELE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDcEIsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztJQUNMLENBQUM7SUFDTCw2QkFBQztBQUFELENBdEVBLEFBc0VDLElBQUE7QUF0RVksc0JBQXNCO0lBRGxDLGlCQUFVLEVBQUU7cUNBSWlDLDJDQUFtQjtRQUN4QiwwQ0FBc0I7R0FKbEQsc0JBQXNCLENBc0VsQztBQXRFWSx3REFBc0IiLCJmaWxlIjoic2VydmljZXMvZG9jdW1lbnQtYWN0aW9ucy5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udGVudEFjdGlvbkhhbmRsZXIgfSBmcm9tICcuLi9tb2RlbHMvY29udGVudC1hY3Rpb24ubW9kZWwnO1xuaW1wb3J0IHsgRG9jdW1lbnRMaXN0U2VydmljZSB9IGZyb20gJy4vZG9jdW1lbnQtbGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IEFsZnJlc2NvQ29udGVudFNlcnZpY2UgfSBmcm9tICduZzItYWxmcmVzY28tY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEb2N1bWVudEFjdGlvbnNTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGhhbmRsZXJzOiB7IFtpZDogc3RyaW5nXTogQ29udGVudEFjdGlvbkhhbmRsZXI7IH0gPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZG9jdW1lbnRMaXN0U2VydmljZT86IERvY3VtZW50TGlzdFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50U2VydmljZT86IEFsZnJlc2NvQ29udGVudFNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5zZXR1cEFjdGlvbkhhbmRsZXJzKCk7XG4gICAgfVxuXG4gICAgZ2V0SGFuZGxlcihrZXk6IHN0cmluZyk6IENvbnRlbnRBY3Rpb25IYW5kbGVyIHtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgbGV0IGxrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZXJzW2xrZXldIHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc2V0SGFuZGxlcihrZXk6IHN0cmluZywgaGFuZGxlcjogQ29udGVudEFjdGlvbkhhbmRsZXIpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgbGV0IGxrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlcnNbbGtleV0gPSBoYW5kbGVyO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNhbkV4ZWN1dGVBY3Rpb24ob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRMaXN0U2VydmljZSAmJiBvYmogJiYgb2JqLmVudHJ5LmlzRmlsZSA9PT0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHVwQWN0aW9uSGFuZGxlcnMoKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnNbJ2Rvd25sb2FkJ10gPSB0aGlzLmRvd25sb2FkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlcnNbJ2RlbGV0ZSddID0gdGhpcy5kZWxldGVOb2RlLmJpbmQodGhpcyk7XG5cbiAgICAgICAgLy8gVE9ETzogZm9yIGRlbW8gcHVycG9zZXMgb25seSwgd2lsbCBiZSByZW1vdmVkIGR1cmluZyBmdXR1cmUgcmV2aXNpb25zXG4gICAgICAgIHRoaXMuaGFuZGxlcnNbJ3N5c3RlbTEnXSA9IHRoaXMuaGFuZGxlU3RhbmRhcmRBY3Rpb24xLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlcnNbJ3N5c3RlbTInXSA9IHRoaXMuaGFuZGxlU3RhbmRhcmRBY3Rpb24yLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogZm9yIGRlbW8gcHVycG9zZXMgb25seSwgd2lsbCBiZSByZW1vdmVkIGR1cmluZyBmdXR1cmUgcmV2aXNpb25zXG4gICAgcHJpdmF0ZSBoYW5kbGVTdGFuZGFyZEFjdGlvbjEob2JqOiBhbnkpIHtcbiAgICAgICAgd2luZG93LmFsZXJ0KCdzdGFuZGFyZCBkb2N1bWVudCBhY3Rpb24gMScpO1xuICAgIH1cblxuICAgIC8vIFRPRE86IGZvciBkZW1vIHB1cnBvc2VzIG9ubHksIHdpbGwgYmUgcmVtb3ZlZCBkdXJpbmcgZnV0dXJlIHJldmlzaW9uc1xuICAgIHByaXZhdGUgaGFuZGxlU3RhbmRhcmRBY3Rpb24yKG9iajogYW55KSB7XG4gICAgICAgIHdpbmRvdy5hbGVydCgnc3RhbmRhcmQgZG9jdW1lbnQgYWN0aW9uIDInKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRvd25sb2FkKG9iajogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmNhbkV4ZWN1dGVBY3Rpb24ob2JqKSAmJiB0aGlzLmNvbnRlbnRTZXJ2aWNlKSB7XG4gICAgICAgICAgICBsZXQgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCAnZG93bmxvYWQnKTtcbiAgICAgICAgICAgIGxpbmsuaHJlZiA9IHRoaXMuY29udGVudFNlcnZpY2UuZ2V0Q29udGVudFVybChvYmopO1xuICAgICAgICAgICAgbGluay5jbGljaygpO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRlbGV0ZU5vZGUob2JqOiBhbnksIHRhcmdldD86IGFueSkge1xuICAgICAgICBpZiAodGhpcy5jYW5FeGVjdXRlQWN0aW9uKG9iaikgJiYgb2JqLmVudHJ5ICYmIG9iai5lbnRyeS5pZCkge1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlLmRlbGV0ZU5vZGUob2JqLmVudHJ5LmlkKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldC5yZWxvYWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
