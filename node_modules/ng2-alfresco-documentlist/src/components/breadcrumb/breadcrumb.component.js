/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var document_list_component_1 = require("../document-list.component");
var DocumentListBreadcrumbComponent = (function () {
    function DocumentListBreadcrumbComponent() {
        this.route = [];
        this.navigate = new core_1.EventEmitter();
    }
    DocumentListBreadcrumbComponent.prototype.ngOnChanges = function (changes) {
        if (changes['folderNode']) {
            var node = changes['folderNode'].currentValue;
            if (node) {
                var route = (node.path.elements || []);
                route.push({
                    id: node.id,
                    name: node.name
                });
                this.route = route;
            }
        }
    };
    DocumentListBreadcrumbComponent.prototype.onRoutePathClick = function (route, e) {
        if (e) {
            e.preventDefault();
        }
        if (route) {
            this.navigate.emit({
                value: route
            });
            if (this.target) {
                this.target.loadFolderByNodeId(route.id);
            }
        }
    };
    return DocumentListBreadcrumbComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DocumentListBreadcrumbComponent.prototype, "folderNode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", document_list_component_1.DocumentListComponent)
], DocumentListBreadcrumbComponent.prototype, "target", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DocumentListBreadcrumbComponent.prototype, "navigate", void 0);
DocumentListBreadcrumbComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alfresco-document-list-breadcrumb',
        template: "<div>     <ol *ngIf=\"folderNode\" data-automation-id=\"breadcrumb\" class=\"breadcrumb\">         <li *ngFor=\"let r of route; let last = last\" [class.active]=\"last\" [ngSwitch]=\"last\">             <span *ngSwitchCase=\"true\">{{r.name}}</span>             <a *ngSwitchDefault href=\"#\" [attr.data-automation-id]=\"'breadcrumb_' + r.name\" (click)=\"onRoutePathClick(r, $event)\">                 {{r.name}}             </a>         </li>     </ol> </div>",
        styles: ["/* breadcrumb */  :host .breadcrumb {     text-align: left;     padding: 8px 15px;     list-style: none;     background-color: #fafafa;     margin: 0 0 4px; }  :host .breadcrumb > li {     display: inline-block;     box-sizing: border-box; }  :host .breadcrumb > li+li:before {     content: \">\\00a0\";     padding: 0 0 0 5px;     opacity: 0.54;     color: #000000; }  :host .breadcrumb > li > a {     text-decoration: none;     opacity: 0.54;     font-family: 'Muli', \"Helvetica\", \"Arial\", sans-serif;     font-size: 14px;     font-weight: 600;     line-height: 1.43;     letter-spacing: -0.2px;     color: #000000; }  :host .breadcrumb > li:hover > a, :host .breadcrumb > .active {     opacity: 0.87;     font-size: 14px;     font-weight: 600;     line-height: 1.43;     letter-spacing: -0.2px;     color: #000000; }"]
    })
], DocumentListBreadcrumbComponent);
exports.DocumentListBreadcrumbComponent = DocumentListBreadcrumbComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYnJlYWRjcnVtYi9icmVhZGNydW1iLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7O0FBRUgsc0NBQWlHO0FBRWpHLHNFQUFtRTtBQVFuRSxJQUFhLCtCQUErQjtJQU41QztRQWNJLFVBQUssR0FBd0IsRUFBRSxDQUFDO1FBR2hDLGFBQVEsR0FBc0IsSUFBSSxtQkFBWSxFQUFFLENBQUM7SUFpQ3JELENBQUM7SUEvQkcscURBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQzlCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFeEIsSUFBSSxJQUFJLEdBQTJCLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxZQUFZLENBQUM7WUFDdEUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFFUCxJQUFJLEtBQUssR0FBeUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDN0QsS0FBSyxDQUFDLElBQUksQ0FBcUI7b0JBQzNCLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtvQkFDWCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7aUJBQ2xCLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUN2QixDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFFRCwwREFBZ0IsR0FBaEIsVUFBaUIsS0FBd0IsRUFBRSxDQUFTO1FBQ2hELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDSixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDUixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztnQkFDZixLQUFLLEVBQUUsS0FBSzthQUNmLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzdDLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUNMLHNDQUFDO0FBQUQsQ0E1Q0EsQUE0Q0MsSUFBQTtBQXpDRztJQURDLFlBQUssRUFBRTs7bUVBQzJCO0FBR25DO0lBREMsWUFBSyxFQUFFOzhCQUNBLCtDQUFxQjsrREFBQztBQUs5QjtJQURDLGFBQU0sRUFBRTs4QkFDQyxtQkFBWTtpRUFBMkI7QUFYeEMsK0JBQStCO0lBTjNDLGdCQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbkIsUUFBUSxFQUFFLG1DQUFtQztRQUM3QyxRQUFRLEVBQUUsK2NBQStjO1FBQ3pkLE1BQU0sRUFBRSxDQUFDLHl6QkFBeXpCLENBQUM7S0FDdDBCLENBQUM7R0FDVywrQkFBK0IsQ0E0QzNDO0FBNUNZLDBFQUErQiIsImZpbGUiOiJjb21wb25lbnRzL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNaW5pbWFsTm9kZUVudHJ5RW50aXR5LCBQYXRoRWxlbWVudEVudGl0eSB9IGZyb20gJ2FsZnJlc2NvLWpzLWFwaSc7XG5pbXBvcnQgeyBEb2N1bWVudExpc3RDb21wb25lbnQgfSBmcm9tICcuLi9kb2N1bWVudC1saXN0LmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgc2VsZWN0b3I6ICdhbGZyZXNjby1kb2N1bWVudC1saXN0LWJyZWFkY3J1bWInLFxuICAgIHRlbXBsYXRlOiBcIjxkaXY+ICAgICA8b2wgKm5nSWY9XFxcImZvbGRlck5vZGVcXFwiIGRhdGEtYXV0b21hdGlvbi1pZD1cXFwiYnJlYWRjcnVtYlxcXCIgY2xhc3M9XFxcImJyZWFkY3J1bWJcXFwiPiAgICAgICAgIDxsaSAqbmdGb3I9XFxcImxldCByIG9mIHJvdXRlOyBsZXQgbGFzdCA9IGxhc3RcXFwiIFtjbGFzcy5hY3RpdmVdPVxcXCJsYXN0XFxcIiBbbmdTd2l0Y2hdPVxcXCJsYXN0XFxcIj4gICAgICAgICAgICAgPHNwYW4gKm5nU3dpdGNoQ2FzZT1cXFwidHJ1ZVxcXCI+e3tyLm5hbWV9fTwvc3Bhbj4gICAgICAgICAgICAgPGEgKm5nU3dpdGNoRGVmYXVsdCBocmVmPVxcXCIjXFxcIiBbYXR0ci5kYXRhLWF1dG9tYXRpb24taWRdPVxcXCInYnJlYWRjcnVtYl8nICsgci5uYW1lXFxcIiAoY2xpY2spPVxcXCJvblJvdXRlUGF0aENsaWNrKHIsICRldmVudClcXFwiPiAgICAgICAgICAgICAgICAge3tyLm5hbWV9fSAgICAgICAgICAgICA8L2E+ICAgICAgICAgPC9saT4gICAgIDwvb2w+IDwvZGl2PlwiLFxuICAgIHN0eWxlczogW1wiLyogYnJlYWRjcnVtYiAqLyAgOmhvc3QgLmJyZWFkY3J1bWIgeyAgICAgdGV4dC1hbGlnbjogbGVmdDsgICAgIHBhZGRpbmc6IDhweCAxNXB4OyAgICAgbGlzdC1zdHlsZTogbm9uZTsgICAgIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZmE7ICAgICBtYXJnaW46IDAgMCA0cHg7IH0gIDpob3N0IC5icmVhZGNydW1iID4gbGkgeyAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfSAgOmhvc3QgLmJyZWFkY3J1bWIgPiBsaStsaTpiZWZvcmUgeyAgICAgY29udGVudDogXFxcIj5cXFxcMDBhMFxcXCI7ICAgICBwYWRkaW5nOiAwIDAgMCA1cHg7ICAgICBvcGFjaXR5OiAwLjU0OyAgICAgY29sb3I6ICMwMDAwMDA7IH0gIDpob3N0IC5icmVhZGNydW1iID4gbGkgPiBhIHsgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgICAgIG9wYWNpdHk6IDAuNTQ7ICAgICBmb250LWZhbWlseTogJ011bGknLCBcXFwiSGVsdmV0aWNhXFxcIiwgXFxcIkFyaWFsXFxcIiwgc2Fucy1zZXJpZjsgICAgIGZvbnQtc2l6ZTogMTRweDsgICAgIGZvbnQtd2VpZ2h0OiA2MDA7ICAgICBsaW5lLWhlaWdodDogMS40MzsgICAgIGxldHRlci1zcGFjaW5nOiAtMC4ycHg7ICAgICBjb2xvcjogIzAwMDAwMDsgfSAgOmhvc3QgLmJyZWFkY3J1bWIgPiBsaTpob3ZlciA+IGEsIDpob3N0IC5icmVhZGNydW1iID4gLmFjdGl2ZSB7ICAgICBvcGFjaXR5OiAwLjg3OyAgICAgZm9udC1zaXplOiAxNHB4OyAgICAgZm9udC13ZWlnaHQ6IDYwMDsgICAgIGxpbmUtaGVpZ2h0OiAxLjQzOyAgICAgbGV0dGVyLXNwYWNpbmc6IC0wLjJweDsgICAgIGNvbG9yOiAjMDAwMDAwOyB9XCJdXG59KVxuZXhwb3J0IGNsYXNzIERvY3VtZW50TGlzdEJyZWFkY3J1bWJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gICAgQElucHV0KClcbiAgICBmb2xkZXJOb2RlOiBNaW5pbWFsTm9kZUVudHJ5RW50aXR5O1xuXG4gICAgQElucHV0KClcbiAgICB0YXJnZXQ6IERvY3VtZW50TGlzdENvbXBvbmVudDtcblxuICAgIHJvdXRlOiBQYXRoRWxlbWVudEVudGl0eVtdID0gW107XG5cbiAgICBAT3V0cHV0KClcbiAgICBuYXZpZ2F0ZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzWydmb2xkZXJOb2RlJ10pIHtcblxuICAgICAgICAgICAgbGV0IG5vZGU6IE1pbmltYWxOb2RlRW50cnlFbnRpdHkgPSBjaGFuZ2VzWydmb2xkZXJOb2RlJ10uY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL0FsZnJlc2NvL2FsZnJlc2NvLWpzLWFwaS9pc3N1ZXMvMTM5XG4gICAgICAgICAgICAgICAgbGV0IHJvdXRlID0gPFBhdGhFbGVtZW50RW50aXR5W10+IChub2RlLnBhdGguZWxlbWVudHMgfHwgW10pO1xuICAgICAgICAgICAgICAgIHJvdXRlLnB1c2goPFBhdGhFbGVtZW50RW50aXR5PiB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBub2RlLmlkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBub2RlLm5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlID0gcm91dGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblJvdXRlUGF0aENsaWNrKHJvdXRlOiBQYXRoRWxlbWVudEVudGl0eSwgZT86IEV2ZW50KSB7XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocm91dGUpIHtcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGUuZW1pdCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHJvdXRlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQubG9hZEZvbGRlckJ5Tm9kZUlkKHJvdXRlLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
