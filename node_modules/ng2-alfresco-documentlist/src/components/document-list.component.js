/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_alfresco_datatable_1 = require("ng2-alfresco-datatable");
var document_list_service_1 = require("./../services/document-list.service");
var share_datatable_adapter_1 = require("./../data/share-datatable-adapter");
var DocumentListComponent = DocumentListComponent_1 = (function () {
    function DocumentListComponent(documentListService, ngZone, translateService) {
        this.documentListService = documentListService;
        this.ngZone = ngZone;
        this.translateService = translateService;
        this.baseComponentPath = module.id.replace('/components/document-list.component.js', '');
        this.fallbackThumbnail = this.baseComponentPath + '/assets/images/ft_ic_miscellaneous.svg';
        this.navigate = true;
        this.navigationMode = DocumentListComponent_1.DOUBLE_CLICK_NAVIGATION;
        this.thumbnails = false;
        this.multiselect = false;
        this.enablePagination = true;
        this.contentActions = false;
        this.contextMenuActions = false;
        this.creationMenuActions = true;
        this.pageSize = DocumentListComponent_1.DEFAULT_PAGE_SIZE;
        this.skipCount = 0;
        this.currentFolderId = null;
        this.folderNode = null;
        this.node = null;
        this.nodeClick = new core_1.EventEmitter();
        this.nodeDblClick = new core_1.EventEmitter();
        this.folderChange = new core_1.EventEmitter();
        this.preview = new core_1.EventEmitter();
        this.success = new core_1.EventEmitter();
        this.error = new core_1.EventEmitter();
        this.actions = [];
        this.contextActionHandler = new Rx_1.Subject();
        this.data = new share_datatable_adapter_1.ShareDataTableAdapter(this.documentListService, this.baseComponentPath, []);
        if (translateService) {
            translateService.addTranslationFolder('ng2-alfresco-documentlist', 'node_modules/ng2-alfresco-documentlist/src');
        }
    }
    Object.defineProperty(DocumentListComponent.prototype, "rowFilter", {
        set: function (value) {
            if (this.data && value && this.currentFolderId) {
                this.data.setFilter(value);
                this.loadFolderNodesByFolderNodeId(this.currentFolderId, this.pageSize, this.skipCount);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(DocumentListComponent.prototype, "imageResolver", {
        set: function (value) {
            if (this.data) {
                this.data.setImageResolver(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    DocumentListComponent.prototype.getContextActions = function (node) {
        var _this = this;
        if (node && node.entry) {
            var actions = this.getNodeActions(node);
            if (actions && actions.length > 0) {
                return actions.map(function (a) {
                    return {
                        model: a,
                        node: node,
                        subject: _this.contextActionHandler
                    };
                });
            }
        }
        return null;
    };
    DocumentListComponent.prototype.contextActionCallback = function (action) {
        if (action) {
            this.executeContentAction(action.node, action.model);
        }
    };
    DocumentListComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.data.thumbnails = this.thumbnails;
        this.contextActionHandler.subscribe(function (val) { return _this.contextActionCallback(val); });
        this.enforceSingleClickNavigationForMobile();
    };
    DocumentListComponent.prototype.enforceSingleClickNavigationForMobile = function () {
        if (this.isMobile()) {
            this.navigationMode = DocumentListComponent_1.SINGLE_CLICK_NAVIGATION;
        }
    };
    DocumentListComponent.prototype.ngAfterContentInit = function () {
        var columns = this.data.getColumns();
        if (!columns || columns.length === 0) {
            this.setupDefaultColumns();
        }
    };
    DocumentListComponent.prototype.ngOnChanges = function (changes) {
        if (changes['folderNode'] && changes['folderNode'].currentValue) {
            this.loadFolder();
            return;
        }
        if (changes['currentFolderId'] && changes['currentFolderId'].currentValue) {
            this.loadFolderByNodeId(changes['currentFolderId'].currentValue);
            return;
        }
        if (changes['node'] && changes['node'].currentValue) {
            this.data.loadPage(changes['node'].currentValue);
            return;
        }
    };
    DocumentListComponent.prototype.reload = function () {
        var _this = this;
        this.ngZone.run(function () {
            if (_this.folderNode) {
                _this.loadFolder();
                return;
            }
            if (_this.currentFolderId) {
                _this.loadFolderByNodeId(_this.currentFolderId);
                return;
            }
            if (_this.node) {
                _this.data.loadPage(_this.node);
                return;
            }
        });
    };
    DocumentListComponent.prototype.isEmptyTemplateDefined = function () {
        if (this.dataTable) {
            if (this.emptyFolderTemplate) {
                return true;
            }
        }
        return false;
    };
    DocumentListComponent.prototype.isMobile = function () {
        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    };
    DocumentListComponent.prototype.getNodeActions = function (node) {
        var target = null;
        if (node && node.entry) {
            if (node.entry.isFile) {
                target = 'document';
            }
            if (node.entry.isFolder) {
                target = 'folder';
            }
            if (target) {
                var ltarget_1 = target.toLowerCase();
                return this.actions.filter(function (entry) {
                    return entry.target.toLowerCase() === ltarget_1;
                });
            }
        }
        return [];
    };
    DocumentListComponent.prototype.onShowContextMenu = function (e) {
        if (e) {
            e.preventDefault();
        }
    };
    DocumentListComponent.prototype.performNavigation = function (node) {
        if (node && node.entry && node.entry.isFolder) {
            this.currentFolderId = node.entry.id;
            this.folderNode = node.entry;
            this.loadFolder();
            this.folderChange.emit({ node: node.entry });
            return true;
        }
        return false;
    };
    DocumentListComponent.prototype.executeContentAction = function (node, action) {
        if (node && node.entry && action) {
            action.handler(node, this);
        }
    };
    DocumentListComponent.prototype.loadFolder = function () {
        var _this = this;
        var nodeId = this.folderNode ? this.folderNode.id : this.currentFolderId;
        if (nodeId) {
            this.loadFolderNodesByFolderNodeId(nodeId, this.pageSize, this.skipCount).catch(function (err) { return _this.error.emit(err); });
        }
    };
    DocumentListComponent.prototype.loadFolderByNodeId = function (nodeId) {
        var _this = this;
        this.documentListService.getFolderNode(nodeId).then(function (node) {
            _this.folderNode = node;
            _this.currentFolderId = node.id;
            _this.loadFolderNodesByFolderNodeId(node.id, _this.pageSize, _this.skipCount).catch(function (err) { return _this.error.emit(err); });
        })
            .catch(function (err) { return _this.error.emit(err); });
    };
    DocumentListComponent.prototype.loadFolderNodesByFolderNodeId = function (id, maxItems, skipCount) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (id && _this.documentListService) {
                _this.documentListService
                    .getFolder(null, {
                    maxItems: maxItems,
                    skipCount: skipCount,
                    rootFolderId: id
                })
                    .subscribe(function (val) {
                    _this.data.loadPage(val);
                    _this.pagination = val.list.pagination;
                    resolve(true);
                }, function (error) {
                    reject(error);
                });
            }
            else {
                resolve(false);
            }
        });
    };
    DocumentListComponent.prototype.setupDefaultColumns = function () {
        var colThumbnail = new ng2_alfresco_datatable_1.ObjectDataColumn({
            type: 'image',
            key: '$thumbnail',
            title: '',
            srTitle: 'Thumbnail'
        });
        var colName = new ng2_alfresco_datatable_1.ObjectDataColumn({
            type: 'text',
            key: 'name',
            title: 'Name',
            cssClass: 'full-width',
            sortable: true
        });
        this.data.setColumns([colThumbnail, colName]);
    };
    DocumentListComponent.prototype.onPreviewFile = function (node) {
        if (node) {
            this.preview.emit({
                value: node
            });
        }
    };
    DocumentListComponent.prototype.onNodeClick = function (node) {
        this.nodeClick.emit({
            value: node
        });
        if (this.navigate && this.navigationMode === DocumentListComponent_1.SINGLE_CLICK_NAVIGATION) {
            if (node && node.entry) {
                if (node.entry.isFile) {
                    this.onPreviewFile(node);
                }
                if (node.entry.isFolder) {
                    this.performNavigation(node);
                }
            }
        }
    };
    DocumentListComponent.prototype.onRowClick = function (event) {
        var item = event.value.node;
        this.onNodeClick(item);
    };
    DocumentListComponent.prototype.onNodeDblClick = function (node) {
        this.nodeDblClick.emit({
            value: node
        });
        if (this.navigate && this.navigationMode === DocumentListComponent_1.DOUBLE_CLICK_NAVIGATION) {
            if (node && node.entry) {
                if (node.entry.isFile) {
                    this.onPreviewFile(node);
                }
                if (node.entry.isFolder) {
                    this.performNavigation(node);
                }
            }
        }
    };
    DocumentListComponent.prototype.onRowDblClick = function (event) {
        var item = event.value.node;
        this.onNodeDblClick(item);
    };
    DocumentListComponent.prototype.onShowRowContextMenu = function (event) {
        if (this.contextMenuActions) {
            var args = event.args;
            var node = args.row.node;
            if (node) {
                args.actions = this.getContextActions(node) || [];
            }
        }
    };
    DocumentListComponent.prototype.onShowRowActionsMenu = function (event) {
        if (this.contentActions) {
            var args = event.args;
            var node = args.row.node;
            if (node) {
                args.actions = this.getNodeActions(node) || [];
            }
        }
    };
    DocumentListComponent.prototype.onExecuteRowAction = function (event) {
        if (this.contentActions) {
            var args = event.args;
            var node = args.row.node;
            var action = args.action;
            this.executeContentAction(node, action);
        }
    };
    DocumentListComponent.prototype.onActionMenuError = function (event) {
        this.error.emit(event);
    };
    DocumentListComponent.prototype.onActionMenuSuccess = function (event) {
        this.reload();
        this.success.emit(event);
    };
    DocumentListComponent.prototype.onChangePageSize = function (event) {
        this.pageSize = event.maxItems;
        this.reload();
    };
    DocumentListComponent.prototype.onNextPage = function (event) {
        this.skipCount = event.skipCount;
        this.reload();
    };
    DocumentListComponent.prototype.onPrevPage = function (event) {
        this.skipCount = event.skipCount;
        this.reload();
    };
    return DocumentListComponent;
}());
DocumentListComponent.SINGLE_CLICK_NAVIGATION = 'click';
DocumentListComponent.DOUBLE_CLICK_NAVIGATION = 'dblclick';
DocumentListComponent.DEFAULT_PAGE_SIZE = 20;
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DocumentListComponent.prototype, "fallbackThumbnail", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DocumentListComponent.prototype, "navigate", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DocumentListComponent.prototype, "navigationMode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DocumentListComponent.prototype, "thumbnails", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DocumentListComponent.prototype, "multiselect", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DocumentListComponent.prototype, "enablePagination", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DocumentListComponent.prototype, "contentActions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DocumentListComponent.prototype, "contextMenuActions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DocumentListComponent.prototype, "creationMenuActions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DocumentListComponent.prototype, "pageSize", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], DocumentListComponent.prototype, "rowFilter", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function])
], DocumentListComponent.prototype, "imageResolver", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DocumentListComponent.prototype, "currentFolderId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DocumentListComponent.prototype, "folderNode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DocumentListComponent.prototype, "node", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DocumentListComponent.prototype, "nodeClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DocumentListComponent.prototype, "nodeDblClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DocumentListComponent.prototype, "folderChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DocumentListComponent.prototype, "preview", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DocumentListComponent.prototype, "success", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DocumentListComponent.prototype, "error", void 0);
__decorate([
    core_1.ViewChild(ng2_alfresco_datatable_1.DataTableComponent),
    __metadata("design:type", ng2_alfresco_datatable_1.DataTableComponent)
], DocumentListComponent.prototype, "dataTable", void 0);
__decorate([
    core_1.HostListener('contextmenu', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Event]),
    __metadata("design:returntype", void 0)
], DocumentListComponent.prototype, "onShowContextMenu", null);
DocumentListComponent = DocumentListComponent_1 = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alfresco-document-list',
        styles: [".document-list_empty_template {     text-align: center;     margin-top: 20px;     margin-bottom: 20px; }  .document-list__this-space-is-empty {     height: 32px;     opacity: 0.26;     font-family: Muli, Helvetica, Arial, sans-serif;     font-size: 24px;     line-height: 1.33;     letter-spacing: -1px;     color: #000000; }  .document-list__drag-drop {     height: 56px;     opacity: 0.54;     font-family: Muli, Helvetica, Arial, sans-serif;     font-size: 56px;     line-height: 1;     letter-spacing: -2px;     color: #000000;     margin-top: 40px; }  .document-list__any-files-here-to-add {     height: 24px;     opacity: 0.54;     font-family: Muli, Helvetica, Arial, sans-serif;     font-size: 16px;     line-height: 1.5;     letter-spacing: -0.4px;     color: #000000;     margin-top: 17px; }  .document-list__empty_doc_lib {     width: 565px;     height: 161px;     object-fit: contain;     margin-top: 17px; }"],
        template: "<alfresco-document-menu-action     *ngIf=\"creationMenuActions\"     [folderId]=\"currentFolderId\"     (success)=\"onActionMenuSuccess($event)\"     (error)=\"onActionMenuError($event)\"> </alfresco-document-menu-action> <alfresco-datatable     [data]=\"data\"     [actions]=\"contentActions\"     [multiselect]=\"multiselect\"     [fallbackThumbnail]=\"fallbackThumbnail\"     (showRowContextMenu)=\"onShowRowContextMenu($event)\"     (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"     (executeRowAction)=\"onExecuteRowAction($event)\"     (rowClick)=\"onRowClick($event)\"     (rowDblClick)=\"onRowDblClick($event)\">     <div *ngIf=\"!isEmptyTemplateDefined()\">         <no-content-template>             <template>                 <div class=\"document-list_empty_template\">                     <div class=\"document-list__this-space-is-empty\">This folder is empty</div>                     <div class=\"document-list__drag-drop\">Drag and Drop</div>                     <div class=\"document-list__any-files-here-to-add\">any files here to add</div>                     <img [src]=\"baseComponentPath + '/assets/images/empty_doc_lib.svg'\" class=\"document-list__empty_doc_lib\">                 </div>             </template>         </no-content-template>     </div> </alfresco-datatable> <alfresco-pagination *ngIf=\"enablePagination\"     (changePageSize)=\"onChangePageSize($event)\"     (nextPage)=\"onNextPage($event)\"     (prevPage)=\"onPrevPage($event)\"     [pagination]=\"pagination\"     [supportedPageSizes]=\"[5, 10, 15, 20]\"> </alfresco-pagination>"
    }),
    __metadata("design:paramtypes", [document_list_service_1.DocumentListService,
        core_1.NgZone,
        ng2_alfresco_core_1.AlfrescoTranslationService])
], DocumentListComponent);
exports.DocumentListComponent = DocumentListComponent;
var DocumentListComponent_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
