/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var document_list_service_1 = require("./../services/document-list.service");
var ERROR_FOLDER_ALREADY_EXIST = 409;
var DocumentMenuActionComponent = (function () {
    function DocumentMenuActionComponent(documentListService, translateService, logService) {
        this.documentListService = documentListService;
        this.translateService = translateService;
        this.logService = logService;
        this.success = new core_1.EventEmitter();
        this.error = new core_1.EventEmitter();
        this.actions = [];
        this.folderName = '';
        if (translateService) {
            translateService.addTranslationFolder('ng2-alfresco-documentlist', 'node_modules/ng2-alfresco-documentlist/src');
        }
    }
    DocumentMenuActionComponent.prototype.createFolder = function (name) {
        var _this = this;
        this.cancel();
        this.documentListService.createFolder(name, this.folderId)
            .subscribe(function (res) {
            _this.folderName = '';
            _this.logService.info(res.entry);
            _this.success.emit({ node: res.entry });
        }, function (error) {
            var errorMessagePlaceholder = _this.getErrorMessage(error.response);
            if (errorMessagePlaceholder) {
                _this.message = _this.formatString(errorMessagePlaceholder, [name]);
                _this.error.emit({ message: _this.message });
                _this.logService.error(_this.message);
            }
            else {
                _this.error.emit(error);
                _this.logService.error(error);
            }
        });
    };
    DocumentMenuActionComponent.prototype.showDialog = function () {
        if (!this.dialog.nativeElement.showModal) {
            dialogPolyfill.registerDialog(this.dialog.nativeElement);
        }
        this.dialog.nativeElement.showModal();
    };
    DocumentMenuActionComponent.prototype.cancel = function () {
        if (this.dialog) {
            this.dialog.nativeElement.close();
        }
    };
    DocumentMenuActionComponent.prototype.getErrorMessage = function (response) {
        if (response.body && response.body.error.statusCode === ERROR_FOLDER_ALREADY_EXIST) {
            var errorMessage = void 0;
            errorMessage = this.translateService.get('FILE_UPLOAD.MESSAGES.FOLDER_ALREADY_EXIST');
            return errorMessage.value;
        }
    };
    DocumentMenuActionComponent.prototype.formatString = function (message, keys) {
        var i = keys.length;
        while (i--) {
            message = message.replace(new RegExp('\\{' + i + '\\}', 'gm'), keys[i]);
        }
        return message;
    };
    DocumentMenuActionComponent.prototype.isFolderNameEmpty = function () {
        return this.folderName === '' ? true : false;
    };
    return DocumentMenuActionComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DocumentMenuActionComponent.prototype, "folderId", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DocumentMenuActionComponent.prototype, "success", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DocumentMenuActionComponent.prototype, "error", void 0);
__decorate([
    core_1.ViewChild('dialog'),
    __metadata("design:type", Object)
], DocumentMenuActionComponent.prototype, "dialog", void 0);
DocumentMenuActionComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alfresco-document-menu-action',
        styles: [".container {     display: -webkit-box;     display: -moz-box;     display: -ms-flexbox;     display: -webkit-flex;     display: flex;     -webkit-flex-direction: row;     flex-direction: row;     background-color: #fafafa;     border-bottom: 1px solid transparent;     border-top: 1px solid #e5e5e5;     -webkit-box-shadow: 0 2px 4px rgba(0,0,0,.2);     box-shadow: 0 2px 4px rgba(0,0,0,.2);     height: 53px;     position: relative;     -webkit-transition: height .35s cubic-bezier(0.4,0.0,1,1),border-color .4s;     transition: height .35s cubic-bezier(0.4,0.0,1,1),border-color .4s;     z-index: 5; }  .action {     max-width: 394px;     min-width: 150px; }  .action {     -webkit-align-items: flex-end;     align-items: flex-end;     display: -webkit-box;     display: -moz-box;     display: -ms-flexbox;     display: -webkit-flex;     display: flex;     -webkit-box-sizing: border-box;     box-sizing: border-box;     padding: 13px 0 11px 30px;     -webkit-transition: padding .35s cubic-bezier(0.4, 0.0, 1, 1);     transition: padding .35s cubic-bezier(0.4, 0.0, 1, 1); }  .mdl-menu__item-primary-content {     box-sizing: border-box;     display: -webkit-flex;     display: -ms-flexbox;     display: flex;     -webkit-align-items: center;     -ms-flex-align: center;     align-items: center; }  .mdl-menu__item-primary-content {     -webkit-order: 0;     -ms-flex-order: 0;     order: 0;     -webkit-flex-grow: 2;     -ms-flex-positive: 2;     flex-grow: 2;     text-decoration: none; }  .mdl-menu__item-primary-content {     box-sizing: border-box;     display: -webkit-flex;     display: -ms-flexbox;     display: flex;     -webkit-align-items: center;     -ms-flex-align: center;     align-items: center;  }  .mdl-menu__item-icon {     margin-right: 32px;     margin-top: 10px;     margin-left: 10px; }  .mdl-menu--bottom-left {     width: 200px; }  .mdl-menu__text {     float: right;     margin-right: 22px; }"],
        template: "<div class=\"container\">     <div class=\"action\">         <button id=\"actions\" class=\"mdl-button mdl-js-button mdl-button--raised\">             <i class=\"material-icons\">add</i> {{ 'BUTTON.ACTION_CREATE' | translate }}         </button>         <ul alfresco-mdl-menu class=\"mdl-menu--bottom-left\"             [attr.for]=\"'actions'\">             <li class=\"mdl-menu__item\"                 (click)=\"showDialog()\" >                 <i style=\"float: left;\" class=\"material-icons mdl-menu__item-icon\">folder</i>                 <span class=\"mdl-menu__text\">{{ 'BUTTON.ACTION_NEW_FOLDER' | translate }}</span>             </li>         </ul>     </div> </div>  <dialog class=\"mdl-dialog\" #dialog>     <h4 class=\"mdl-dialog__title\">{{ 'BUTTON.ACTION_NEW_FOLDER' | translate }}</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <input                     type=\"text\"                     class=\"mdl-textfield__input\"                     id=\"name\"                     required                     [(ngModel)]=\"folderName\"                     placeholder=\"Folder name\"                     data-automation-id=\"name\"                     autocapitalize=\"none\" #name/>         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" [disabled]=\"isFolderNameEmpty()\" (click)=\"createFolder(folderName)\" class=\"mdl-button\">{{ 'BUTTON.CREATE' | translate }}</button>         <button type=\"button\" (click)=\"cancel()\" class=\"mdl-button close\">{{ 'BUTTON.CANCEL' | translate}}</button>     </div> </dialog>"
    }),
    __metadata("design:paramtypes", [document_list_service_1.DocumentListService,
        ng2_alfresco_core_1.AlfrescoTranslationService,
        ng2_alfresco_core_1.LogService])
], DocumentMenuActionComponent);
exports.DocumentMenuActionComponent = DocumentMenuActionComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
