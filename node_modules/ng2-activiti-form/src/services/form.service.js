/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var form_definition_model_1 = require("../models/form-definition.model");
var ecm_model_service_1 = require("./ecm-model.service");
var FormService = FormService_1 = (function () {
    function FormService(ecmModelService, apiService, logService) {
        this.ecmModelService = ecmModelService;
        this.apiService = apiService;
        this.logService = logService;
        this.formLoaded = new Rx_1.Subject();
        this.formFieldValueChanged = new Rx_1.Subject();
        this.taskCompleted = new Rx_1.Subject();
        this.taskCompletedError = new Rx_1.Subject();
        this.taskSaved = new Rx_1.Subject();
        this.taskSavedError = new Rx_1.Subject();
    }
    FormService.prototype.createFormFromANode = function (formName) {
        var _this = this;
        return Rx_1.Observable.create(function (observer) {
            _this.createForm(formName).subscribe(function (form) {
                _this.ecmModelService.searchEcmType(formName, ecm_model_service_1.EcmModelService.MODEL_NAME).subscribe(function (customType) {
                    var formDefinitionModel = new form_definition_model_1.FormDefinitionModel(form.id, form.name, form.lastUpdatedByFullName, form.lastUpdated, customType.entry.properties);
                    _this.addFieldsToAForm(form.id, formDefinitionModel).subscribe(function (formData) {
                        observer.next(formData);
                        observer.complete();
                    }, function (err) { return _this.handleError(err); });
                }, function (err) { return _this.handleError(err); });
            }, function (err) { return _this.handleError(err); });
        });
    };
    FormService.prototype.createForm = function (formName) {
        var dataModel = {
            name: formName,
            description: '',
            modelType: 2,
            stencilSet: 0
        };
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.modelsApi.createModel(dataModel));
    };
    FormService.prototype.addFieldsToAForm = function (formId, formModel) {
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.editorApi.saveForm(formId, formModel));
    };
    FormService.prototype.searchFrom = function (name) {
        var _this = this;
        var opts = {
            'modelType': 2
        };
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.modelsApi.getModels(opts))
            .map(function (forms) {
            return forms.data.find(function (formdata) { return formdata.name === name; });
        })
            .catch(function (err) { return _this.handleError(err); });
    };
    FormService.prototype.getForms = function () {
        var opts = {
            'modelType': 2
        };
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.modelsApi.getModels(opts));
    };
    FormService.prototype.getProcessDefinitions = function () {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.getProcessDefinitions({}))
            .map(this.toJsonArray)
            .catch(function (err) { return _this.handleError(err); });
    };
    FormService.prototype.getTasks = function () {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.listTasks({}))
            .map(this.toJsonArray)
            .catch(function (err) { return _this.handleError(err); });
    };
    FormService.prototype.getTask = function (taskId) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.getTask(taskId))
            .map(this.toJson)
            .catch(function (err) { return _this.handleError(err); });
    };
    FormService.prototype.saveTaskForm = function (taskId, formValues) {
        var _this = this;
        var body = JSON.stringify({ values: formValues });
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.saveTaskForm(taskId, body))
            .catch(function (err) { return _this.handleError(err); });
    };
    FormService.prototype.completeTaskForm = function (taskId, formValues, outcome) {
        var _this = this;
        var data = { values: formValues };
        if (outcome) {
            data.outcome = outcome;
        }
        var body = JSON.stringify(data);
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.completeTaskForm(taskId, body))
            .catch(function (err) { return _this.handleError(err); });
    };
    FormService.prototype.getTaskForm = function (taskId) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.getTaskForm(taskId))
            .map(this.toJson)
            .catch(function (err) { return _this.handleError(err); });
    };
    FormService.prototype.getFormDefinitionById = function (formId) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.editorApi.getForm(formId))
            .map(this.toJson)
            .catch(function (err) { return _this.handleError(err); });
    };
    FormService.prototype.getFormDefinitionByName = function (name) {
        var _this = this;
        var opts = {
            'filter': 'myReusableForms',
            'filterText': name,
            'modelType': 2
        };
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.modelsApi.getModels(opts))
            .map(this.getFormId)
            .catch(function (err) { return _this.handleError(err); });
    };
    FormService.prototype.getStartFormInstance = function (processId) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.getProcessInstanceStartForm(processId))
            .map(this.toJson)
            .catch(function (err) { return _this.handleError(err); });
    };
    FormService.prototype.getStartFormDefinition = function (processId) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.getProcessDefinitionStartForm(processId))
            .map(this.toJson)
            .catch(function (err) { return _this.handleError(err); });
    };
    FormService.prototype.createTemporaryRawRelatedContent = function (file) {
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.contentApi.createTemporaryRawRelatedContent(file));
    };
    FormService.prototype.getRestFieldValues = function (taskId, field) {
        var alfrescoApi = this.apiService.getInstance();
        return Rx_1.Observable.fromPromise(alfrescoApi.activiti.taskApi.getRestFieldValues(taskId, field));
    };
    FormService.prototype.getRestFieldValuesByProcessId = function (processDefinitionId, field) {
        var alfrescoApi = this.apiService.getInstance();
        return Rx_1.Observable.fromPromise(alfrescoApi.activiti.processApi.getRestFieldValues(processDefinitionId, field));
    };
    FormService.prototype.getRestFieldValuesColumnByProcessId = function (processDefinitionId, field, column) {
        var alfrescoApi = this.apiService.getInstance();
        return Rx_1.Observable.fromPromise(alfrescoApi.activiti.processApi.getRestTableFieldValues(processDefinitionId, field, column));
    };
    FormService.prototype.getRestFieldValuesColumn = function (taskId, field, column) {
        var alfrescoApi = this.apiService.getInstance();
        return Rx_1.Observable.fromPromise(alfrescoApi.activiti.taskApi.getRestFieldValuesColumn(taskId, field, column));
    };
    FormService.prototype.getWorkflowGroups = function (filter, groupId) {
        var _this = this;
        return Rx_1.Observable.create(function (observer) {
            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        var json = JSON.parse(xhr.response);
                        var data = (json.data || []).map(function (item) { return item; });
                        observer.next(data);
                        observer.complete();
                    }
                    else {
                        _this.logService.error(xhr.response);
                        Rx_1.Observable.throw(new Error(xhr.response));
                    }
                }
            };
            var host = _this.apiService.getInstance().config.hostBpm;
            var url = host + "/activiti-app/app/rest/workflow-groups?filter=" + filter;
            if (groupId) {
                url += "&groupId=" + groupId;
            }
            xhr.open('GET', url, true);
            xhr.setRequestHeader('Authorization', _this.apiService.getInstance().getTicketBpm());
            xhr.send();
        });
    };
    FormService.prototype.getWorkflowUsers = function (filter, groupId) {
        var _this = this;
        return Rx_1.Observable.create(function (observer) {
            var xhr = new XMLHttpRequest();
            xhr.withCredentials = true;
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        var json = JSON.parse(xhr.response);
                        var data = (json.data || []).map(function (item) { return item; });
                        observer.next(data);
                        observer.complete();
                    }
                    else {
                        _this.logService.error(xhr.response);
                        Rx_1.Observable.throw(new Error(xhr.response));
                    }
                }
            };
            var host = _this.apiService.getInstance().config.hostBpm;
            var url = host + "/activiti-app/app/rest/workflow-users?filter=" + filter;
            if (groupId) {
                url += "&groupId=" + groupId;
            }
            xhr.open('GET', url, true);
            xhr.setRequestHeader('Authorization', _this.apiService.getInstance().getTicketBpm());
            xhr.send();
        });
    };
    FormService.prototype.getFormId = function (res) {
        var result = null;
        if (res && res.data && res.data.length > 0) {
            result = res.data[0].id;
        }
        return result;
    };
    FormService.prototype.toJson = function (res) {
        if (res) {
            return res || {};
        }
        return {};
    };
    FormService.prototype.toJsonArray = function (res) {
        if (res) {
            return res.data || [];
        }
        return [];
    };
    FormService.prototype.handleError = function (error) {
        var errMsg = FormService_1.UNKNOWN_ERROR_MESSAGE;
        if (error) {
            errMsg = (error.message) ? error.message :
                error.status ? error.status + " - " + error.statusText : FormService_1.GENERIC_ERROR_MESSAGE;
        }
        this.logService.error(errMsg);
        return Rx_1.Observable.throw(errMsg);
    };
    return FormService;
}());
FormService.UNKNOWN_ERROR_MESSAGE = 'Unknown error';
FormService.GENERIC_ERROR_MESSAGE = 'Server error';
FormService = FormService_1 = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [ecm_model_service_1.EcmModelService,
        ng2_alfresco_core_1.AlfrescoApiService,
        ng2_alfresco_core_1.LogService])
], FormService);
exports.FormService = FormService;
var FormService_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
