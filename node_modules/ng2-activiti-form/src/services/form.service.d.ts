/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Observable, Subject } from 'rxjs/Rx';
import { AlfrescoApiService, LogService } from 'ng2-alfresco-core';
import { FormValues } from './../components/widgets/core/index';
import { FormDefinitionModel } from '../models/form-definition.model';
import { EcmModelService } from './ecm-model.service';
import { GroupModel } from './../components/widgets/core/group.model';
import { GroupUserModel } from './../components/widgets/core/group-user.model';
import { FormEvent, FormErrorEvent, FormFieldEvent } from './../events/index';
export declare class FormService {
    private ecmModelService;
    private apiService;
    private logService;
    static UNKNOWN_ERROR_MESSAGE: string;
    static GENERIC_ERROR_MESSAGE: string;
    formLoaded: Subject<FormEvent>;
    formFieldValueChanged: Subject<FormFieldEvent>;
    taskCompleted: Subject<FormEvent>;
    taskCompletedError: Subject<FormErrorEvent>;
    taskSaved: Subject<FormEvent>;
    taskSavedError: Subject<FormErrorEvent>;
    constructor(ecmModelService: EcmModelService, apiService: AlfrescoApiService, logService: LogService);
    createFormFromANode(formName: string): Observable<any>;
    createForm(formName: string): Observable<any>;
    addFieldsToAForm(formId: string, formModel: FormDefinitionModel): Observable<any>;
    searchFrom(name: string): Observable<any>;
    getForms(): Observable<any>;
    getProcessDefinitions(): Observable<any>;
    getTasks(): Observable<any>;
    getTask(taskId: string): Observable<any>;
    saveTaskForm(taskId: string, formValues: FormValues): Observable<any>;
    completeTaskForm(taskId: string, formValues: FormValues, outcome?: string): Observable<any>;
    getTaskForm(taskId: string): Observable<any>;
    getFormDefinitionById(formId: string): Observable<any>;
    getFormDefinitionByName(name: string): Observable<any>;
    getStartFormInstance(processId: string): Observable<any>;
    getStartFormDefinition(processId: string): Observable<any>;
    createTemporaryRawRelatedContent(file: any): Observable<any>;
    getRestFieldValues(taskId: string, field: string): Observable<any>;
    getRestFieldValuesByProcessId(processDefinitionId: string, field: string): Observable<any>;
    getRestFieldValuesColumnByProcessId(processDefinitionId: string, field: string, column?: string): Observable<any>;
    getRestFieldValuesColumn(taskId: string, field: string, column?: string): Observable<any>;
    getWorkflowGroups(filter: string, groupId?: string): Observable<GroupModel[]>;
    getWorkflowUsers(filter: string, groupId?: string): Observable<GroupUserModel[]>;
    getFormId(res: any): string;
    toJson(res: any): any;
    toJsonArray(res: any): any;
    handleError(error: any): Observable<any>;
}
