/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var Rx_1 = require("rxjs/Rx");
var node_metadata_model_1 = require("../models/node-metadata.model");
var NodeService = (function () {
    function NodeService(apiService) {
        this.apiService = apiService;
    }
    NodeService.prototype.getNodeMetadata = function (nodeId) {
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().nodes.getNodeInfo(nodeId)).map(this.cleanMetadataFromSemicolon);
    };
    NodeService.prototype.createNodeMetadata = function (nodeType, nameSpace, data, path, name) {
        var properties = {};
        for (var key in data) {
            if (data[key]) {
                properties[nameSpace + ':' + key] = data[key];
            }
        }
        return this.createNode(name || this.generateUuid(), nodeType, properties, path);
    };
    NodeService.prototype.createNode = function (name, nodeType, properties, path) {
        var body = {
            name: name,
            nodeType: nodeType,
            properties: properties,
            relativePath: path
        };
        var apiService = this.apiService.getInstance();
        return Rx_1.Observable.fromPromise(apiService.nodes.addNode('-root-', body, {}));
    };
    NodeService.prototype.generateUuid = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    NodeService.prototype.cleanMetadataFromSemicolon = function (data) {
        var metadata = {};
        if (data && data.properties) {
            for (var key in data.properties) {
                if (key) {
                    if (key.indexOf(':') !== -1) {
                        metadata[key.split(':')[1]] = data.properties[key];
                    }
                    else {
                        metadata[key] = data.properties[key];
                    }
                }
            }
        }
        return new node_metadata_model_1.NodeMetadata(metadata, data.nodeType);
    };
    return NodeService;
}());
NodeService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService])
], NodeService);
exports.NodeService = NodeService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL25vZGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7O0FBRUgsc0NBQTJDO0FBQzNDLHVEQUF1RDtBQUN2RCw4QkFBcUM7QUFDckMscUVBQTZEO0FBRzdELElBQWEsV0FBVztJQUVwQixxQkFBb0IsVUFBOEI7UUFBOUIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7SUFDbEQsQ0FBQztJQU9NLHFDQUFlLEdBQXRCLFVBQXVCLE1BQWM7UUFDakMsTUFBTSxDQUFDLGVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQ2hJLENBQUM7SUFVTSx3Q0FBa0IsR0FBekIsVUFBMEIsUUFBZ0IsRUFBRSxTQUFjLEVBQUUsSUFBUyxFQUFFLElBQVksRUFBRSxJQUFhO1FBQzlGLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNwQixHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ25CLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1osVUFBVSxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xELENBQUM7UUFDTCxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFVTSxnQ0FBVSxHQUFqQixVQUFrQixJQUFZLEVBQUUsUUFBZ0IsRUFBRSxVQUFlLEVBQUUsSUFBWTtRQUMzRSxJQUFJLElBQUksR0FBRztZQUNQLElBQUksRUFBRSxJQUFJO1lBQ1YsUUFBUSxFQUFFLFFBQVE7WUFDbEIsVUFBVSxFQUFFLFVBQVU7WUFDdEIsWUFBWSxFQUFFLElBQUk7U0FDckIsQ0FBQztRQUdGLElBQUksVUFBVSxHQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEQsTUFBTSxDQUFDLGVBQVUsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFTyxrQ0FBWSxHQUFwQjtRQUNJLE1BQU0sQ0FBQyxzQ0FBc0MsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQztZQUN0RSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ3BFLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLGdEQUEwQixHQUFsQyxVQUFtQyxJQUFTO1FBQ3hDLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUVsQixFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDMUIsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ04sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzFCLFFBQVEsQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDeEQsQ0FBQztvQkFBQyxJQUFJLENBQUMsQ0FBQzt3QkFDSixRQUFRLENBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDMUMsQ0FBQztnQkFDTCxDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxrQ0FBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUNMLGtCQUFDO0FBQUQsQ0E5RUEsQUE4RUMsSUFBQTtBQTlFWSxXQUFXO0lBRHZCLGlCQUFVLEVBQUU7cUNBR3VCLHNDQUFrQjtHQUZ6QyxXQUFXLENBOEV2QjtBQTlFWSxrQ0FBVyIsImZpbGUiOiJzZXJ2aWNlcy9ub2RlLnNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UgfSBmcm9tICduZzItYWxmcmVzY28tY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9SeCc7XG5pbXBvcnQgeyBOb2RlTWV0YWRhdGEgfSBmcm9tICcuLi9tb2RlbHMvbm9kZS1tZXRhZGF0YS5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOb2RlU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBBbGwgdGhlIG1ldGFkYXRhIGFuZCB0aGUgbm9kZVR5cGUgZm9yIGEgbm9kZUlkIGNsZWFuZWQgYnkgdGhlIHByZWZpeFxuICAgICAqIEBwYXJhbSBub2RlSWQgTm9kZSBJZFxuICAgICAqIEByZXR1cm5zIE5vZGVNZXRhZGF0YVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXROb2RlTWV0YWRhdGEobm9kZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPE5vZGVNZXRhZGF0YT4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5ub2Rlcy5nZXROb2RlSW5mbyhub2RlSWQpKS5tYXAodGhpcy5jbGVhbk1ldGFkYXRhRnJvbVNlbWljb2xvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IE5vZGUgZnJvbSBmb3JtIG1ldGFkYXRhXG4gICAgICogQHBhcmFtIHBhdGggcGF0aFxuICAgICAqIEBwYXJhbSBub2RlVHlwZSBub2RlIHR5cGVcbiAgICAgKiBAcGFyYW0gbmFtZVNwYWNlIG5hbWVzcGFjZSBub2RlXG4gICAgICogQHBhcmFtIGRhdGEgZGF0YSB0byBzdG9yZVxuICAgICAqIEByZXR1cm5zIE5vZGVNZXRhZGF0YVxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVOb2RlTWV0YWRhdGEobm9kZVR5cGU6IHN0cmluZywgbmFtZVNwYWNlOiBhbnksIGRhdGE6IGFueSwgcGF0aDogc3RyaW5nLCBuYW1lPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgbGV0IHByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhW2tleV0pIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzW25hbWVTcGFjZSArICc6JyArIGtleV0gPSBkYXRhW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVOb2RlKG5hbWUgfHwgdGhpcy5nZW5lcmF0ZVV1aWQoKSwgbm9kZVR5cGUsIHByb3BlcnRpZXMsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBOb2RlIGZyb20gZm9ybSBtZXRhZGF0YVxuICAgICAqIEBwYXJhbSBuYW1lIHBhdGhcbiAgICAgKiBAcGFyYW0gbm9kZVR5cGUgbm9kZSB0eXBlXG4gICAgICogQHBhcmFtIHByb3BlcnRpZXMgbmFtZXNwYWNlIG5vZGVcbiAgICAgKiBAcGFyYW0gcGF0aCBwYXRoXG4gICAgICogQHJldHVybnMgTm9kZU1ldGFkYXRhXG4gICAgICovXG4gICAgcHVibGljIGNyZWF0ZU5vZGUobmFtZTogc3RyaW5nLCBub2RlVHlwZTogc3RyaW5nLCBwcm9wZXJ0aWVzOiBhbnksIHBhdGg6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGxldCBib2R5ID0ge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIG5vZGVUeXBlOiBub2RlVHlwZSxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG4gICAgICAgICAgICByZWxhdGl2ZVBhdGg6IHBhdGhcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBUT0RPOiByZXF1aXJlcyB1cGRhdGUgdG8gYWxmcmVzY28tanMtYXBpIHR5cGluZ3NcbiAgICAgICAgbGV0IGFwaVNlcnZpY2U6IGFueSA9IHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZShhcGlTZXJ2aWNlLm5vZGVzLmFkZE5vZGUoJy1yb290LScsIGJvZHksIHt9KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVV1aWQoKSB7XG4gICAgICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICBsZXQgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDAsIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNsZWFuTWV0YWRhdGFGcm9tU2VtaWNvbG9uKGRhdGE6IGFueSk6IE5vZGVNZXRhZGF0YSB7XG4gICAgICAgIGxldCBtZXRhZGF0YSA9IHt9O1xuXG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEucHJvcGVydGllcykge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGRhdGEucHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKCc6JykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YSBba2V5LnNwbGl0KCc6JylbMV1dID0gZGF0YS5wcm9wZXJ0aWVzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YSBba2V5XSA9IGRhdGEucHJvcGVydGllc1trZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlTWV0YWRhdGEobWV0YWRhdGEsIGRhdGEubm9kZVR5cGUpO1xuICAgIH1cbn1cbiJdfQ==
