/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var index_1 = require("./../components/widgets/index");
var FormRenderingService = (function () {
    function FormRenderingService() {
        this.types = {
            'text': DefaultTypeResolver.fromType(index_1.TextWidget),
            'integer': DefaultTypeResolver.fromType(index_1.NumberWidget),
            'multi-line-text': DefaultTypeResolver.fromType(index_1.MultilineTextWidget),
            'boolean': DefaultTypeResolver.fromType(index_1.CheckboxWidget),
            'dropdown': DefaultTypeResolver.fromType(index_1.DropdownWidget),
            'date': DefaultTypeResolver.fromType(index_1.DateWidget),
            'amount': DefaultTypeResolver.fromType(index_1.AmountWidget),
            'radio-buttons': DefaultTypeResolver.fromType(index_1.RadioButtonsWidget),
            'hyperlink': DefaultTypeResolver.fromType(index_1.HyperlinkWidget),
            'readonly': DefaultTypeResolver.fromType(index_1.DisplayValueWidget),
            'readonly-text': DefaultTypeResolver.fromType(index_1.DisplayTextWidget),
            'typeahead': DefaultTypeResolver.fromType(index_1.TypeaheadWidget),
            'people': DefaultTypeResolver.fromType(index_1.PeopleWidget),
            'functional-group': DefaultTypeResolver.fromType(index_1.FunctionalGroupWidget),
            'dynamic-table': DefaultTypeResolver.fromType(index_1.DynamicTableWidget),
            'container': DefaultTypeResolver.fromType(index_1.ContainerWidget),
            'group': DefaultTypeResolver.fromType(index_1.ContainerWidget)
        };
        this.types['upload'] = function (field) {
            if (field) {
                var params = field.params;
                if (params && params.link) {
                    return index_1.AttachWidget;
                }
                return index_1.UploadWidget;
            }
            return index_1.UnknownWidget;
        };
    }
    FormRenderingService.prototype.getComponentTypeResolver = function (fieldType, defaultValue) {
        if (defaultValue === void 0) { defaultValue = index_1.UnknownWidget; }
        if (fieldType) {
            return this.types[fieldType] || DefaultTypeResolver.fromType(defaultValue);
        }
        return DefaultTypeResolver.fromType(defaultValue);
    };
    FormRenderingService.prototype.setComponentTypeResolver = function (fieldType, resolver, override) {
        if (override === void 0) { override = false; }
        if (!fieldType) {
            throw new Error("fieldType is null or not defined");
        }
        if (!resolver) {
            throw new Error("resolver is null or not defined");
        }
        var existing = this.types[fieldType];
        if (existing && !override) {
            throw new Error("already mapped, use override option if you intend replacing existing mapping.");
        }
        this.types[fieldType] = resolver;
    };
    FormRenderingService.prototype.resolveComponentType = function (field, defaultValue) {
        if (defaultValue === void 0) { defaultValue = index_1.UnknownWidget; }
        if (field) {
            var resolver = this.getComponentTypeResolver(field.type, defaultValue);
            return resolver(field);
        }
        return defaultValue;
    };
    return FormRenderingService;
}());
FormRenderingService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], FormRenderingService);
exports.FormRenderingService = FormRenderingService;
var DefaultTypeResolver = (function () {
    function DefaultTypeResolver() {
    }
    DefaultTypeResolver.fromType = function (type) {
        return function (field) {
            return type;
        };
    };
    return DefaultTypeResolver;
}());
exports.DefaultTypeResolver = DefaultTypeResolver;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
