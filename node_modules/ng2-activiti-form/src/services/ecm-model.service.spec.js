/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ecm_model_service_1 = require("./ecm-model.service");
var form_model_1 = require("./../components/widgets/core/form.model");
describe('EcmModelService', function () {
    var service;
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            providers: [
                ecm_model_service_1.EcmModelService
            ]
        });
        service = testing_1.TestBed.get(ecm_model_service_1.EcmModelService);
    });
    beforeEach(function () {
        jasmine.Ajax.install();
    });
    afterEach(function () {
        jasmine.Ajax.uninstall();
    });
    it('Should fetch ECM models', function (done) {
        service.getEcmModels().subscribe(function () {
            expect(jasmine.Ajax.requests.mostRecent().url.endsWith('alfresco/versions/1/cmm')).toBeTruthy();
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({})
        });
    });
    it('Should fetch ECM types', function (done) {
        var modelName = 'modelTest';
        service.getEcmType(modelName).subscribe(function () {
            expect(jasmine.Ajax.requests.mostRecent().url.endsWith('versions/1/cmm/' + modelName + '/types')).toBeTruthy();
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({})
        });
    });
    it('Should create ECM types', function (done) {
        var typeName = 'typeTest';
        service.createEcmType(typeName, ecm_model_service_1.EcmModelService.MODEL_NAME, ecm_model_service_1.EcmModelService.TYPE_MODEL).subscribe(function () {
            expect(jasmine.Ajax.requests.mostRecent().url.endsWith('versions/1/cmm/' + ecm_model_service_1.EcmModelService.MODEL_NAME + '/types')).toBeTruthy();
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).name).toEqual(typeName);
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).title).toEqual(typeName);
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).parentName).toEqual(ecm_model_service_1.EcmModelService.TYPE_MODEL);
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({})
        });
    });
    it('Should create ECM types with a clean and preserv real name in the title', function (done) {
        var typeName = 'typeTest:testName@#$*!';
        var cleanName = 'testName';
        service.createEcmType(typeName, ecm_model_service_1.EcmModelService.MODEL_NAME, ecm_model_service_1.EcmModelService.TYPE_MODEL).subscribe(function () {
            expect(jasmine.Ajax.requests.mostRecent().url.endsWith('versions/1/cmm/' + ecm_model_service_1.EcmModelService.MODEL_NAME + '/types')).toBeTruthy();
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).name).toEqual(cleanName);
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).title).toEqual(typeName);
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).parentName).toEqual(ecm_model_service_1.EcmModelService.TYPE_MODEL);
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({})
        });
    });
    it('Should add propery to a type', function (done) {
        var typeName = 'typeTest';
        var formFields = {
            values: {
                test: 'test',
                test2: 'test2'
            }
        };
        service.addPropertyToAType(ecm_model_service_1.EcmModelService.MODEL_NAME, typeName, formFields).subscribe(function () {
            expect(jasmine.Ajax.requests.mostRecent().url.endsWith('1/cmm/' + ecm_model_service_1.EcmModelService.MODEL_NAME + '/types/' + typeName + '?select=props')).toBeTruthy();
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).name).toEqual(typeName);
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).properties).toEqual([{
                    name: 'test',
                    title: 'test',
                    description: 'test',
                    dataType: 'd:text',
                    multiValued: false,
                    mandatory: false,
                    mandatoryEnforced: false
                }, {
                    name: 'test2',
                    title: 'test2',
                    description: 'test2',
                    dataType: 'd:text',
                    multiValued: false,
                    mandatory: false,
                    mandatoryEnforced: false
                }]);
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({})
        });
    });
    it('Should add propery to a type and clean name type', function (done) {
        var typeName = 'typeTest:testName@#$*!';
        var cleanName = 'testName';
        var formFields = {
            values: {
                test: 'test',
                test2: 'test2'
            }
        };
        service.addPropertyToAType(ecm_model_service_1.EcmModelService.MODEL_NAME, typeName, formFields).subscribe(function () {
            expect(jasmine.Ajax.requests.mostRecent().url.endsWith('1/cmm/' + ecm_model_service_1.EcmModelService.MODEL_NAME + '/types/' + cleanName + '?select=props')).toBeTruthy();
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).name).toEqual(cleanName);
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).properties).toEqual([{
                    name: 'test',
                    title: 'test',
                    description: 'test',
                    dataType: 'd:text',
                    multiValued: false,
                    mandatory: false,
                    mandatoryEnforced: false
                }, {
                    name: 'test2',
                    title: 'test2',
                    description: 'test2',
                    dataType: 'd:text',
                    multiValued: false,
                    mandatory: false,
                    mandatoryEnforced: false
                }]);
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({})
        });
    });
    it('Should create ECM model', function (done) {
        service.createEcmModel(ecm_model_service_1.EcmModelService.MODEL_NAME, ecm_model_service_1.EcmModelService.MODEL_NAMESPACE).subscribe(function () {
            expect(jasmine.Ajax.requests.mostRecent().url.endsWith('alfresco/versions/1/cmm')).toBeTruthy();
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).status).toEqual('DRAFT');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({})
        });
    });
    it('Should activate ECM model', function (done) {
        service.activeEcmModel(ecm_model_service_1.EcmModelService.MODEL_NAME).subscribe(function () {
            expect(jasmine.Ajax.requests.mostRecent().url.endsWith('alfresco/versions/1/cmm/' + ecm_model_service_1.EcmModelService.MODEL_NAME + '?select=status')).toBeTruthy();
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).status).toEqual('ACTIVE');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({})
        });
    });
    it('Should create an ECM type with properties', function (done) {
        spyOn(service, 'createEcmType').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next();
                observer.complete();
            });
        });
        spyOn(service, 'addPropertyToAType').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next();
                observer.complete();
            });
        });
        service.createEcmTypeWithProperties('nameType', new form_model_1.FormModel()).subscribe(function () {
            expect(service.createEcmType).toHaveBeenCalled();
            expect(service.addPropertyToAType).toHaveBeenCalled();
            done();
        });
    });
    it('Should return the already existing type', function (done) {
        spyOn(service, 'searchEcmType').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next({ test: 'I-EXIST' });
                observer.complete();
            });
        });
        spyOn(service, 'createEcmTypeWithProperties').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next();
                observer.complete();
            });
        });
        service.saveFomType('nameType', new form_model_1.FormModel()).subscribe(function () {
            expect(service.searchEcmType).toHaveBeenCalled();
            expect(service.createEcmTypeWithProperties).not.toHaveBeenCalled();
            done();
        });
    });
    it('Should create an ECM type with properties if the ecm Type is not defined already', function (done) {
        spyOn(service, 'searchEcmType').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next();
                observer.complete();
            });
        });
        spyOn(service, 'createEcmTypeWithProperties').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next();
                observer.complete();
            });
        });
        service.saveFomType('nameType', new form_model_1.FormModel()).subscribe(function () {
            expect(service.searchEcmType).toHaveBeenCalled();
            expect(service.createEcmTypeWithProperties).toHaveBeenCalled();
            done();
        });
    });
    it('Should create an ECM model for the activiti if not defined already', function (done) {
        spyOn(service, 'searchActivitiEcmModel').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next();
                observer.complete();
            });
        });
        spyOn(service, 'createActivitiEcmModel').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next();
                observer.complete();
            });
        });
        service.createEcmTypeForActivitiForm('nameType', new form_model_1.FormModel()).subscribe(function () {
            expect(service.searchActivitiEcmModel).toHaveBeenCalled();
            expect(service.createActivitiEcmModel).toHaveBeenCalled();
            done();
        });
    });
    it('If a model for the activiti is already define has to save the new type', function (done) {
        spyOn(service, 'searchActivitiEcmModel').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next({ test: 'I-EXIST' });
                observer.complete();
            });
        });
        spyOn(service, 'saveFomType').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next();
                observer.complete();
            });
        });
        service.createEcmTypeForActivitiForm('nameType', new form_model_1.FormModel()).subscribe(function () {
            expect(service.searchActivitiEcmModel).toHaveBeenCalled();
            expect(service.saveFomType).toHaveBeenCalled();
            done();
        });
    });
});
//# sourceMappingURL=ecm-model.service.spec.js.map