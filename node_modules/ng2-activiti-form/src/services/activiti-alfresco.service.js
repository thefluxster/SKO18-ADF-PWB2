/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ActivitiAlfrescoContentService = ActivitiAlfrescoContentService_1 = (function () {
    function ActivitiAlfrescoContentService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    ActivitiAlfrescoContentService.prototype.getAlfrescoNodes = function (accountId, folderId) {
        var _this = this;
        var apiService = this.apiService.getInstance();
        var accountShortId = accountId.replace('alfresco-', '');
        return Rx_1.Observable.fromPromise(apiService.activiti.alfrescoApi.getContentInFolder(accountShortId, folderId))
            .map(this.toJsonArray)
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiAlfrescoContentService.prototype.linkAlfrescoNode = function (accountId, node, siteId) {
        var _this = this;
        var apiService = this.apiService.getInstance();
        return Rx_1.Observable.fromPromise(apiService.activiti.contentApi.createTemporaryRelatedContent({
            link: true,
            name: node.title,
            simpleType: node.simpleType,
            source: accountId,
            sourceId: node.id + '@' + siteId
        })).map(this.toJson).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiAlfrescoContentService.prototype.toJson = function (res) {
        if (res) {
            return res || {};
        }
        return {};
    };
    ActivitiAlfrescoContentService.prototype.toJsonArray = function (res) {
        if (res) {
            return res.data || [];
        }
        return [];
    };
    ActivitiAlfrescoContentService.prototype.handleError = function (error) {
        var errMsg = ActivitiAlfrescoContentService_1.UNKNOWN_ERROR_MESSAGE;
        if (error) {
            errMsg = (error.message) ? error.message :
                error.status ? error.status + " - " + error.statusText : ActivitiAlfrescoContentService_1.GENERIC_ERROR_MESSAGE;
        }
        this.logService.error(errMsg);
        return Rx_1.Observable.throw(errMsg);
    };
    return ActivitiAlfrescoContentService;
}());
ActivitiAlfrescoContentService.UNKNOWN_ERROR_MESSAGE = 'Unknown error';
ActivitiAlfrescoContentService.GENERIC_ERROR_MESSAGE = 'Server error';
ActivitiAlfrescoContentService = ActivitiAlfrescoContentService_1 = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService,
        ng2_alfresco_core_1.LogService])
], ActivitiAlfrescoContentService);
exports.ActivitiAlfrescoContentService = ActivitiAlfrescoContentService;
var ActivitiAlfrescoContentService_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2FjdGl2aXRpLWFsZnJlc2NvLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOzs7Ozs7Ozs7OztBQUVILHNDQUEyQztBQUMzQyw4QkFBcUM7QUFDckMsdURBQW1FO0FBTW5FLElBQWEsOEJBQThCO0lBS3ZDLHdDQUFvQixVQUE4QixFQUM5QixVQUFzQjtRQUR0QixlQUFVLEdBQVYsVUFBVSxDQUFvQjtRQUM5QixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQzFDLENBQUM7SUFTRCx5REFBZ0IsR0FBaEIsVUFBaUIsU0FBaUIsRUFBRSxRQUFnQjtRQUFwRCxpQkFNQztRQUxHLElBQUksVUFBVSxHQUFnQixJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVELElBQUksY0FBYyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxlQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUN0RyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQzthQUNyQixLQUFLLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQVVELHlEQUFnQixHQUFoQixVQUFpQixTQUFpQixFQUFFLElBQXFCLEVBQUUsTUFBYztRQUF6RSxpQkFTQztRQVJHLElBQUksVUFBVSxHQUFnQixJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVELE1BQU0sQ0FBQyxlQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLDZCQUE2QixDQUFDO1lBQ3ZGLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2hCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixNQUFNLEVBQUUsU0FBUztZQUNqQixRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsTUFBTTtTQUNuQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsK0NBQU0sR0FBTixVQUFPLEdBQVE7UUFDWCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUM7UUFDckIsQ0FBQztRQUNELE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsb0RBQVcsR0FBWCxVQUFZLEdBQVE7UUFDaEIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMxQixDQUFDO1FBQ0QsTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxvREFBVyxHQUFYLFVBQVksS0FBVTtRQUNsQixJQUFJLE1BQU0sR0FBRyxnQ0FBOEIsQ0FBQyxxQkFBcUIsQ0FBQztRQUNsRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1IsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPO2dCQUNwQyxLQUFLLENBQUMsTUFBTSxHQUFNLEtBQUssQ0FBQyxNQUFNLFdBQU0sS0FBSyxDQUFDLFVBQVksR0FBRyxnQ0FBOEIsQ0FBQyxxQkFBcUIsQ0FBQztRQUN0SCxDQUFDO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLGVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNMLHFDQUFDO0FBQUQsQ0FsRUEsQUFrRUMsSUFBQTtBQWhFVSxvREFBcUIsR0FBVyxlQUFlLENBQUM7QUFDaEQsb0RBQXFCLEdBQVcsY0FBYyxDQUFDO0FBSDdDLDhCQUE4QjtJQUQxQyxpQkFBVSxFQUFFO3FDQU11QixzQ0FBa0I7UUFDbEIsOEJBQVU7R0FOakMsOEJBQThCLENBa0UxQztBQWxFWSx3RUFBOEIiLCJmaWxlIjoic2VydmljZXMvYWN0aXZpdGktYWxmcmVzY28uc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL1J4JztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSwgTG9nU2VydmljZSB9IGZyb20gJ25nMi1hbGZyZXNjby1jb3JlJztcbmltcG9ydCB7IEV4dGVybmFsQ29udGVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvd2lkZ2V0cy9jb3JlL2V4dGVybmFsLWNvbnRlbnQnO1xuaW1wb3J0IHsgRXh0ZXJuYWxDb250ZW50TGluayB9IGZyb20gJy4uL2NvbXBvbmVudHMvd2lkZ2V0cy9jb3JlL2V4dGVybmFsLWNvbnRlbnQtbGluayc7XG5pbXBvcnQgeyBBbGZyZXNjb0FwaSB9IGZyb20gICdhbGZyZXNjby1qcy1hcGknO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWN0aXZpdGlBbGZyZXNjb0NvbnRlbnRTZXJ2aWNlIHtcblxuICAgIHN0YXRpYyBVTktOT1dOX0VSUk9SX01FU1NBR0U6IHN0cmluZyA9ICdVbmtub3duIGVycm9yJztcbiAgICBzdGF0aWMgR0VORVJJQ19FUlJPUl9NRVNTQUdFOiBzdHJpbmcgPSAnU2VydmVyIGVycm9yJztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGNoaWxkIG5vZGVzIGJlbG93IHRoZSBzcGVjaWZpZWQgZm9sZGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWNjb3VudElkXG4gICAgICogQHBhcmFtIGZvbGRlcklkXG4gICAgICogQHJldHVybnMge251bGx9XG4gICAgICovXG4gICAgZ2V0QWxmcmVzY29Ob2RlcyhhY2NvdW50SWQ6IHN0cmluZywgZm9sZGVySWQ6IHN0cmluZyk6IE9ic2VydmFibGU8W0V4dGVybmFsQ29udGVudF0+IHtcbiAgICAgICAgbGV0IGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpID0gdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgICAgIGxldCBhY2NvdW50U2hvcnRJZCA9IGFjY291bnRJZC5yZXBsYWNlKCdhbGZyZXNjby0nLCAnJyk7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmZyb21Qcm9taXNlKGFwaVNlcnZpY2UuYWN0aXZpdGkuYWxmcmVzY29BcGkuZ2V0Q29udGVudEluRm9sZGVyKGFjY291bnRTaG9ydElkLCBmb2xkZXJJZCkpXG4gICAgICAgICAgICAubWFwKHRoaXMudG9Kc29uQXJyYXkpXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgY2hpbGQgbm9kZXMgYmVsb3cgdGhlIHNwZWNpZmllZCBmb2xkZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY2NvdW50SWRcbiAgICAgKiBAcGFyYW0gbm9kZVxuICAgICAqIEBwYXJhbSBzaXRlSWRcbiAgICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICAgKi9cbiAgICBsaW5rQWxmcmVzY29Ob2RlKGFjY291bnRJZDogc3RyaW5nLCBub2RlOiBFeHRlcm5hbENvbnRlbnQsIHNpdGVJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxFeHRlcm5hbENvbnRlbnRMaW5rPiB7XG4gICAgICAgIGxldCBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaSA9IHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZShhcGlTZXJ2aWNlLmFjdGl2aXRpLmNvbnRlbnRBcGkuY3JlYXRlVGVtcG9yYXJ5UmVsYXRlZENvbnRlbnQoe1xuICAgICAgICAgICAgbGluazogdHJ1ZSxcbiAgICAgICAgICAgIG5hbWU6IG5vZGUudGl0bGUsXG4gICAgICAgICAgICBzaW1wbGVUeXBlOiBub2RlLnNpbXBsZVR5cGUsXG4gICAgICAgICAgICBzb3VyY2U6IGFjY291bnRJZCxcbiAgICAgICAgICAgIHNvdXJjZUlkOiBub2RlLmlkICsgJ0AnICsgc2l0ZUlkXG4gICAgICAgIH0pKS5tYXAodGhpcy50b0pzb24pLmNhdGNoKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpO1xuICAgIH1cblxuICAgIHRvSnNvbihyZXM6IGFueSkge1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzIHx8IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICB0b0pzb25BcnJheShyZXM6IGFueSkge1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLmRhdGEgfHwgW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBsZXQgZXJyTXNnID0gQWN0aXZpdGlBbGZyZXNjb0NvbnRlbnRTZXJ2aWNlLlVOS05PV05fRVJST1JfTUVTU0FHRTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBlcnJNc2cgPSAoZXJyb3IubWVzc2FnZSkgPyBlcnJvci5tZXNzYWdlIDpcbiAgICAgICAgICAgICAgICBlcnJvci5zdGF0dXMgPyBgJHtlcnJvci5zdGF0dXN9IC0gJHtlcnJvci5zdGF0dXNUZXh0fWAgOiBBY3Rpdml0aUFsZnJlc2NvQ29udGVudFNlcnZpY2UuR0VORVJJQ19FUlJPUl9NRVNTQUdFO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlcnJNc2cpO1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJNc2cpO1xuICAgIH1cbn1cbiJdfQ==
