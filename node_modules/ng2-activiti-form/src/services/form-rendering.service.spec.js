/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var form_rendering_service_1 = require("./form-rendering.service");
var index_1 = require("./../components/widgets/index");
describe('FormRenderingService', function () {
    var service;
    beforeEach(function () {
        service = new form_rendering_service_1.FormRenderingService();
    });
    it('should resolve Upload field as Attach widget', function () {
        var field = new index_1.FormFieldModel(null, {
            type: index_1.FormFieldTypes.UPLOAD,
            params: {
                link: 'link'
            }
        });
        var type = service.resolveComponentType(field);
        expect(type).toBe(index_1.AttachWidget);
    });
    it('should resolve Upload field as Upload widget', function () {
        var field = new index_1.FormFieldModel(null, {
            type: index_1.FormFieldTypes.UPLOAD,
            params: {
                link: null
            }
        });
        var type = service.resolveComponentType(field);
        expect(type).toBe(index_1.UploadWidget);
    });
    it('should resolve Unknown widget for Upload field', function () {
        var resolver = service.getComponentTypeResolver(index_1.FormFieldTypes.UPLOAD);
        var type = resolver(null);
        expect(type).toBe(index_1.UnknownWidget);
    });
    it('should resolve Uknown widget for unknown field type', function () {
        var resolver = service.getComponentTypeResolver('missing-type');
        var type = resolver(null);
        expect(type).toBe(index_1.UnknownWidget);
    });
    it('shoulld resolve custom value for unknown field type', function () {
        var resolver = service.getComponentTypeResolver('missing-type', index_1.AttachWidget);
        var type = resolver(null);
        expect(type).toBe(index_1.AttachWidget);
    });
    it('should fallback to default resolver when field type missing', function () {
        var resolver = service.getComponentTypeResolver(null);
        var type = resolver(null);
        expect(type).toBe(index_1.UnknownWidget);
    });
    it('should fallback to custom resolver when field type missing', function () {
        var resolver = service.getComponentTypeResolver(null, index_1.UploadWidget);
        var type = resolver(null);
        expect(type).toBe(index_1.UploadWidget);
    });
    it('should require field type to set resolver for type', function () {
        expect(function () { return service.setComponentTypeResolver(null, form_rendering_service_1.DefaultTypeResolver.fromType(index_1.UnknownWidget)); }).toThrowError('fieldType is null or not defined');
    });
    it('should require type resolver instance to set resolver for type', function () {
        expect(function () { return service.setComponentTypeResolver(index_1.FormFieldTypes.TEXT, null); }).toThrowError('resolver is null or not defined');
    });
    it('should fail overriding existing resolver without explicit flag', function () {
        expect(function () { return service.setComponentTypeResolver(index_1.FormFieldTypes.TEXT, form_rendering_service_1.DefaultTypeResolver.fromType(index_1.UnknownWidget)); }).toThrowError('already mapped, use override option if you intend replacing existing mapping.');
    });
    it('should override existing resolver with explicit flag', function () {
        var customResolver = form_rendering_service_1.DefaultTypeResolver.fromType(index_1.UnknownWidget);
        service.setComponentTypeResolver(index_1.FormFieldTypes.TEXT, customResolver, true);
        expect(service.getComponentTypeResolver(index_1.FormFieldTypes.TEXT)).toBe(customResolver);
    });
    it('should return default value when resolving with no field', function () {
        expect(service.resolveComponentType(null)).toBe(index_1.UnknownWidget);
    });
    it('should return custom value when resolving with no field', function () {
        expect(service.resolveComponentType(null, index_1.AttachWidget)).toBe(index_1.AttachWidget);
    });
});
//# sourceMappingURL=form-rendering.service.spec.js.map