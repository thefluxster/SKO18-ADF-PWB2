/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var form_service_1 = require("../../../services/form.service");
var widget_component_1 = require("./../widget.component");
var widget_visibility_service_1 = require("../../../services/widget-visibility.service");
var DropdownWidget = (function (_super) {
    __extends(DropdownWidget, _super);
    function DropdownWidget(formService, visibilityService, logService) {
        var _this = _super.call(this) || this;
        _this.formService = formService;
        _this.visibilityService = visibilityService;
        _this.logService = logService;
        return _this;
    }
    DropdownWidget.prototype.ngOnInit = function () {
        if (this.field && this.field.restUrl) {
            if (this.field.form.taskId) {
                this.getValuesByTaskId();
            }
            else {
                this.getValuesByProcessDefinitionId();
            }
        }
    };
    DropdownWidget.prototype.getValuesByTaskId = function () {
        var _this = this;
        this.formService
            .getRestFieldValues(this.field.form.taskId, this.field.id)
            .subscribe(function (result) {
            var options = [];
            if (_this.field.emptyOption) {
                options.push(_this.field.emptyOption);
            }
            _this.field.options = options.concat((result || []));
            _this.field.updateForm();
        }, function (err) { return _this.handleError(err); });
    };
    DropdownWidget.prototype.getValuesByProcessDefinitionId = function () {
        var _this = this;
        this.formService
            .getRestFieldValuesByProcessId(this.field.form.processDefinitionId, this.field.id)
            .subscribe(function (result) {
            var options = [];
            if (_this.field.emptyOption) {
                options.push(_this.field.emptyOption);
            }
            _this.field.options = options.concat((result || []));
            _this.field.updateForm();
        }, function (err) { return _this.handleError(err); });
    };
    DropdownWidget.prototype.getOptionValue = function (option, fieldValue) {
        var optionValue = '';
        if (option.id === 'empty' || option.name !== fieldValue) {
            optionValue = option.id;
        }
        else {
            optionValue = option.name;
        }
        return optionValue;
    };
    DropdownWidget.prototype.checkVisibility = function () {
        this.visibilityService.refreshVisibility(this.field.form);
    };
    DropdownWidget.prototype.handleError = function (error) {
        this.logService.error(error);
    };
    return DropdownWidget;
}(widget_component_1.WidgetComponent));
DropdownWidget = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'dropdown-widget',
        template: "<div class=\"dropdown-widget\"      [class.dropdown-widget__invalid]=\"!field.isValid\" *ngIf=\"field?.isVisible\">     <label class=\"dropdown-widget__label\" [attr.for]=\"field.id\">{{field.name}}</label>     <select class=\"dropdown-widget__select\"             [attr.id]=\"field.id\"             [(ngModel)]=\"field.value\"             (ngModelChange)=\"checkVisibility(field)\">         <option *ngFor=\"let opt of field.options\" [value]=\"getOptionValue(opt, field.value)\" [id]=\"opt.id\">{{opt.name}}</option>     </select>     <span *ngIf=\"field.validationSummary\" class=\"mdl-textfield__error\">{{field.validationSummary}}</span> </div>",
        styles: [".dropdown-widget {     width: 100%;     padding-top: 20px;     padding-bottom: 20px; }  .dropdown-widget__select {     width: 100%;     margin-top: 5px;     margin-bottom: 5px; }  .dropdown-widget__invalid .dropdown-widget__select {     border-color: #d50000; }  .dropdown-widget__invalid .dropdown-widget__label {     color: #d50000; }  .dropdown-widget__invalid .dropdown-widget__label:after {     background-color: #d50000; }  .dropdown-widget__invalid .mdl-textfield__error {     visibility: visible !important; }"]
    }),
    __metadata("design:paramtypes", [form_service_1.FormService,
        widget_visibility_service_1.WidgetVisibilityService,
        ng2_alfresco_core_1.LogService])
], DropdownWidget);
exports.DropdownWidget = DropdownWidget;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9kcm9wZG93bi9kcm9wZG93bi53aWRnZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOzs7Ozs7Ozs7Ozs7Ozs7O0FBRUgsc0NBQWtEO0FBQ2xELHVEQUErQztBQUMvQywrREFBNkQ7QUFDN0QsMERBQXdEO0FBRXhELHlGQUFzRjtBQVF0RixJQUFhLGNBQWM7SUFBUyxrQ0FBZTtJQUUvQyx3QkFBb0IsV0FBd0IsRUFDeEIsaUJBQTBDLEVBQzFDLFVBQXNCO1FBRjFDLFlBR0ksaUJBQU8sU0FDVjtRQUptQixpQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4Qix1QkFBaUIsR0FBakIsaUJBQWlCLENBQXlCO1FBQzFDLGdCQUFVLEdBQVYsVUFBVSxDQUFZOztJQUUxQyxDQUFDO0lBRUQsaUNBQVEsR0FBUjtRQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ25DLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQzdCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixJQUFJLENBQUMsOEJBQThCLEVBQUUsQ0FBQztZQUMxQyxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFFRCwwQ0FBaUIsR0FBakI7UUFBQSxpQkFpQkM7UUFoQkcsSUFBSSxDQUFDLFdBQVc7YUFDWCxrQkFBa0IsQ0FDZixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUNoQjthQUNBLFNBQVMsQ0FDTixVQUFDLE1BQXlCO1lBQ3RCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNqQixFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN6QyxDQUFDO1lBQ0QsS0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3BELEtBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDNUIsQ0FBQyxFQUNELFVBQUEsR0FBRyxJQUFJLE9BQUEsS0FBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBckIsQ0FBcUIsQ0FDL0IsQ0FBQztJQUNWLENBQUM7SUFFRCx1REFBOEIsR0FBOUI7UUFBQSxpQkFpQkM7UUFoQkcsSUFBSSxDQUFDLFdBQVc7YUFDWCw2QkFBNkIsQ0FDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUNoQjthQUNBLFNBQVMsQ0FDTixVQUFDLE1BQXlCO1lBQ3RCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNqQixFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN6QyxDQUFDO1lBQ0QsS0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3BELEtBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDNUIsQ0FBQyxFQUNELFVBQUEsR0FBRyxJQUFJLE9BQUEsS0FBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBckIsQ0FBcUIsQ0FDL0IsQ0FBQztJQUNWLENBQUM7SUFFRCx1Q0FBYyxHQUFkLFVBQWUsTUFBdUIsRUFBRSxVQUFrQjtRQUN0RCxJQUFJLFdBQVcsR0FBVyxFQUFFLENBQUM7UUFDN0IsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3RELFdBQVcsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQzVCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQzlCLENBQUM7UUFDRCxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCx3Q0FBZSxHQUFmO1FBQ0ksSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELG9DQUFXLEdBQVgsVUFBWSxLQUFVO1FBQ2xCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTCxxQkFBQztBQUFELENBMUVBLEFBMEVDLENBMUVtQyxrQ0FBZSxHQTBFbEQ7QUExRVksY0FBYztJQU4xQixnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFBRSxpQkFBaUI7UUFDM0IsUUFBUSxFQUFFLDJvQkFBMm9CO1FBQ3JwQixNQUFNLEVBQUUsQ0FBQyx1Z0JBQXVnQixDQUFDO0tBQ3BoQixDQUFDO3FDQUdtQywwQkFBVztRQUNMLG1EQUF1QjtRQUM5Qiw4QkFBVTtHQUpqQyxjQUFjLENBMEUxQjtBQTFFWSx3Q0FBYyIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMvZHJvcGRvd24vZHJvcGRvd24ud2lkZ2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvZ1NlcnZpY2UgfSBmcm9tICduZzItYWxmcmVzY28tY29yZSc7XG5pbXBvcnQgeyBGb3JtU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL2Zvcm0uc2VydmljZSc7XG5pbXBvcnQgeyBXaWRnZXRDb21wb25lbnQgfSBmcm9tICcuLy4uL3dpZGdldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRm9ybUZpZWxkT3B0aW9uIH0gZnJvbSAnLi8uLi9jb3JlL2Zvcm0tZmllbGQtb3B0aW9uJztcbmltcG9ydCB7IFdpZGdldFZpc2liaWxpdHlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvd2lkZ2V0LXZpc2liaWxpdHkuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgc2VsZWN0b3I6ICdkcm9wZG93bi13aWRnZXQnLFxuICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcImRyb3Bkb3duLXdpZGdldFxcXCIgICAgICBbY2xhc3MuZHJvcGRvd24td2lkZ2V0X19pbnZhbGlkXT1cXFwiIWZpZWxkLmlzVmFsaWRcXFwiICpuZ0lmPVxcXCJmaWVsZD8uaXNWaXNpYmxlXFxcIj4gICAgIDxsYWJlbCBjbGFzcz1cXFwiZHJvcGRvd24td2lkZ2V0X19sYWJlbFxcXCIgW2F0dHIuZm9yXT1cXFwiZmllbGQuaWRcXFwiPnt7ZmllbGQubmFtZX19PC9sYWJlbD4gICAgIDxzZWxlY3QgY2xhc3M9XFxcImRyb3Bkb3duLXdpZGdldF9fc2VsZWN0XFxcIiAgICAgICAgICAgICBbYXR0ci5pZF09XFxcImZpZWxkLmlkXFxcIiAgICAgICAgICAgICBbKG5nTW9kZWwpXT1cXFwiZmllbGQudmFsdWVcXFwiICAgICAgICAgICAgIChuZ01vZGVsQ2hhbmdlKT1cXFwiY2hlY2tWaXNpYmlsaXR5KGZpZWxkKVxcXCI+ICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XFxcImxldCBvcHQgb2YgZmllbGQub3B0aW9uc1xcXCIgW3ZhbHVlXT1cXFwiZ2V0T3B0aW9uVmFsdWUob3B0LCBmaWVsZC52YWx1ZSlcXFwiIFtpZF09XFxcIm9wdC5pZFxcXCI+e3tvcHQubmFtZX19PC9vcHRpb24+ICAgICA8L3NlbGVjdD4gICAgIDxzcGFuICpuZ0lmPVxcXCJmaWVsZC52YWxpZGF0aW9uU3VtbWFyeVxcXCIgY2xhc3M9XFxcIm1kbC10ZXh0ZmllbGRfX2Vycm9yXFxcIj57e2ZpZWxkLnZhbGlkYXRpb25TdW1tYXJ5fX08L3NwYW4+IDwvZGl2PlwiLFxuICAgIHN0eWxlczogW1wiLmRyb3Bkb3duLXdpZGdldCB7ICAgICB3aWR0aDogMTAwJTsgICAgIHBhZGRpbmctdG9wOiAyMHB4OyAgICAgcGFkZGluZy1ib3R0b206IDIwcHg7IH0gIC5kcm9wZG93bi13aWRnZXRfX3NlbGVjdCB7ICAgICB3aWR0aDogMTAwJTsgICAgIG1hcmdpbi10b3A6IDVweDsgICAgIG1hcmdpbi1ib3R0b206IDVweDsgfSAgLmRyb3Bkb3duLXdpZGdldF9faW52YWxpZCAuZHJvcGRvd24td2lkZ2V0X19zZWxlY3QgeyAgICAgYm9yZGVyLWNvbG9yOiAjZDUwMDAwOyB9ICAuZHJvcGRvd24td2lkZ2V0X19pbnZhbGlkIC5kcm9wZG93bi13aWRnZXRfX2xhYmVsIHsgICAgIGNvbG9yOiAjZDUwMDAwOyB9ICAuZHJvcGRvd24td2lkZ2V0X19pbnZhbGlkIC5kcm9wZG93bi13aWRnZXRfX2xhYmVsOmFmdGVyIHsgICAgIGJhY2tncm91bmQtY29sb3I6ICNkNTAwMDA7IH0gIC5kcm9wZG93bi13aWRnZXRfX2ludmFsaWQgLm1kbC10ZXh0ZmllbGRfX2Vycm9yIHsgICAgIHZpc2liaWxpdHk6IHZpc2libGUgIWltcG9ydGFudDsgfVwiXVxufSlcbmV4cG9ydCBjbGFzcyBEcm9wZG93bldpZGdldCBleHRlbmRzIFdpZGdldENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZvcm1TZXJ2aWNlOiBGb3JtU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHZpc2liaWxpdHlTZXJ2aWNlOiBXaWRnZXRWaXNpYmlsaXR5U2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmllbGQgJiYgdGhpcy5maWVsZC5yZXN0VXJsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5maWVsZC5mb3JtLnRhc2tJZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0VmFsdWVzQnlUYXNrSWQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRWYWx1ZXNCeVByb2Nlc3NEZWZpbml0aW9uSWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFZhbHVlc0J5VGFza0lkKCkge1xuICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlXG4gICAgICAgICAgICAuZ2V0UmVzdEZpZWxkVmFsdWVzKFxuICAgICAgICAgICAgICAgIHRoaXMuZmllbGQuZm9ybS50YXNrSWQsXG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZC5pZFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAocmVzdWx0OiBGb3JtRmllbGRPcHRpb25bXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgb3B0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5maWVsZC5lbXB0eU9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKHRoaXMuZmllbGQuZW1wdHlPcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGQub3B0aW9ucyA9IG9wdGlvbnMuY29uY2F0KChyZXN1bHQgfHwgW10pKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZC51cGRhdGVGb3JtKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFZhbHVlc0J5UHJvY2Vzc0RlZmluaXRpb25JZCgpIHtcbiAgICAgICAgdGhpcy5mb3JtU2VydmljZVxuICAgICAgICAgICAgLmdldFJlc3RGaWVsZFZhbHVlc0J5UHJvY2Vzc0lkKFxuICAgICAgICAgICAgICAgIHRoaXMuZmllbGQuZm9ybS5wcm9jZXNzRGVmaW5pdGlvbklkLFxuICAgICAgICAgICAgICAgIHRoaXMuZmllbGQuaWRcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHJlc3VsdDogRm9ybUZpZWxkT3B0aW9uW10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZmllbGQuZW1wdHlPcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHVzaCh0aGlzLmZpZWxkLmVtcHR5T3B0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLm9wdGlvbnMgPSBvcHRpb25zLmNvbmNhdCgocmVzdWx0IHx8IFtdKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGQudXBkYXRlRm9ybSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRPcHRpb25WYWx1ZShvcHRpb246IEZvcm1GaWVsZE9wdGlvbiwgZmllbGRWYWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG9wdGlvblZhbHVlOiBzdHJpbmcgPSAnJztcbiAgICAgICAgaWYgKG9wdGlvbi5pZCA9PT0gJ2VtcHR5JyB8fCBvcHRpb24ubmFtZSAhPT0gZmllbGRWYWx1ZSkge1xuICAgICAgICAgICAgb3B0aW9uVmFsdWUgPSBvcHRpb24uaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25WYWx1ZSA9IG9wdGlvbi5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb25WYWx1ZTtcbiAgICB9XG5cbiAgICBjaGVja1Zpc2liaWxpdHkoKSB7XG4gICAgICAgIHRoaXMudmlzaWJpbGl0eVNlcnZpY2UucmVmcmVzaFZpc2liaWxpdHkodGhpcy5maWVsZC5mb3JtKTtcbiAgICB9XG5cbiAgICBoYW5kbGVFcnJvcihlcnJvcjogYW55KSB7XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlcnJvcik7XG4gICAgfVxuXG59XG4iXX0=
