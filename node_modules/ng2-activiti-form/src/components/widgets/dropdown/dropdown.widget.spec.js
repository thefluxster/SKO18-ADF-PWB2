/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var form_service_1 = require("../../../services/form.service");
var dropdown_widget_1 = require("./dropdown.widget");
var form_model_1 = require("./../core/form.model");
var form_field_model_1 = require("./../core/form-field.model");
var ecm_model_service_1 = require("../../../services/ecm-model.service");
var widget_visibility_service_1 = require("../../../services/widget-visibility.service");
describe('DropdownWidget', function () {
    var formService;
    var widget;
    var visibilityService;
    beforeEach(function () {
        formService = new form_service_1.FormService(null, null, null);
        visibilityService = new widget_visibility_service_1.WidgetVisibilityService(null, null);
        widget = new dropdown_widget_1.DropdownWidget(formService, visibilityService, null);
        widget.field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel());
    });
    it('should require field with restUrl', function () {
        spyOn(formService, 'getRestFieldValues').and.stub();
        widget.field = null;
        widget.ngOnInit();
        expect(formService.getRestFieldValues).not.toHaveBeenCalled();
        widget.field = new form_field_model_1.FormFieldModel(null, { restUrl: null });
        widget.ngOnInit();
        expect(formService.getRestFieldValues).not.toHaveBeenCalled();
    });
    it('should request field values from service', function () {
        var taskId = '<form-id>';
        var fieldId = '<field-id>';
        var form = new form_model_1.FormModel({
            taskId: taskId
        });
        widget.field = new form_field_model_1.FormFieldModel(form, {
            id: fieldId,
            restUrl: '<url>'
        });
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(null);
            observer.complete();
        }));
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalledWith(taskId, fieldId);
    });
    it('should preserve empty option when loading fields', function () {
        var restFieldValue = { id: '1', name: 'Option1' };
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next([restFieldValue]);
            observer.complete();
        }));
        var form = new form_model_1.FormModel({ taskId: '<id>' });
        var emptyOption = { id: 'empty', name: 'Empty' };
        widget.field = new form_field_model_1.FormFieldModel(form, {
            id: '<id>',
            restUrl: '/some/url/address',
            hasEmptyValue: true,
            options: [emptyOption]
        });
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalled();
        expect(widget.field.options.length).toBe(2);
        expect(widget.field.options[0]).toBe(emptyOption);
        expect(widget.field.options[1]).toBe(restFieldValue);
    });
    describe('when template is ready', function () {
        var dropDownWidget;
        var fixture;
        var element;
        var componentHandler;
        var stubFormService;
        var fakeOptionList = [{
                id: 'opt_1',
                name: 'option_1'
            }, {
                id: 'opt_2',
                name: 'option_2'
            }, { id: 'opt_3', name: 'option_3' }];
        beforeEach(testing_1.async(function () {
            componentHandler = jasmine.createSpyObj('componentHandler', ['upgradeAllRegistered', 'upgradeElement']);
            window['componentHandler'] = componentHandler;
            testing_1.TestBed.configureTestingModule({
                imports: [ng2_alfresco_core_1.CoreModule],
                declarations: [dropdown_widget_1.DropdownWidget],
                providers: [form_service_1.FormService, ecm_model_service_1.EcmModelService, widget_visibility_service_1.WidgetVisibilityService]
            }).compileComponents().then(function () {
                fixture = testing_1.TestBed.createComponent(dropdown_widget_1.DropdownWidget);
                dropDownWidget = fixture.componentInstance;
                element = fixture.nativeElement;
            });
        }));
        describe('and dropdown is populated via taskId', function () {
            beforeEach(testing_1.async(function () {
                stubFormService = fixture.debugElement.injector.get(form_service_1.FormService);
                visibilityService = fixture.debugElement.injector.get(widget_visibility_service_1.WidgetVisibilityService);
                spyOn(visibilityService, 'refreshVisibility').and.stub();
                spyOn(stubFormService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.of(fakeOptionList));
                dropDownWidget.field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel({ taskId: 'fake-task-id' }), {
                    id: 'dropdown-id',
                    name: 'date-name',
                    type: 'dropdown',
                    readOnly: 'false',
                    restUrl: 'fake-rest-url'
                });
                dropDownWidget.field.emptyOption = { id: 'empty', name: 'Choose one...' };
                dropDownWidget.field.isVisible = true;
                fixture.detectChanges();
            }));
            it('should show visible dropdown widget', testing_1.async(function () {
                expect(element.querySelector('#dropdown-id')).toBeDefined();
                expect(element.querySelector('#dropdown-id')).not.toBeNull();
                expect(element.querySelector('#opt_1')).not.toBeNull();
                expect(element.querySelector('#opt_2')).not.toBeNull();
                expect(element.querySelector('#opt_3')).not.toBeNull();
            }));
            it('should select the default value when an option is chosen as default', testing_1.async(function () {
                dropDownWidget.field.value = 'option_2';
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    var dropDownElement = element.querySelector('#dropdown-id');
                    expect(dropDownElement).not.toBeNull();
                    expect(element.querySelector('#opt_2')).not.toBeNull();
                    expect(dropDownElement.value).toBe('option_2');
                    expect(dropDownElement.selectedOptions[0].textContent).toBe('option_2');
                });
            }));
            it('should select the empty value when no default is chosen', testing_1.async(function () {
                dropDownWidget.field.value = 'empty';
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    var dropDownElement = element.querySelector('#dropdown-id');
                    expect(dropDownElement).not.toBeNull();
                    expect(dropDownElement.value).toBe('empty');
                    expect(dropDownElement.selectedOptions[0].textContent).toBe('Choose one...');
                });
            }));
            it('should be not visibile when isVisible is false', testing_1.async(function () {
                dropDownWidget.field.isVisible = false;
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    var dropDownElement = element.querySelector('#dropdown-id');
                    expect(dropDownElement).toBeNull();
                });
            }));
            it('should became visibile when isVisible is true', testing_1.async(function () {
                dropDownWidget.field.isVisible = false;
                fixture.detectChanges();
                expect(element.querySelector('#dropdown-id')).toBeNull();
                dropDownWidget.field.isVisible = true;
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    expect(element.querySelector('#dropdown-id')).not.toBeNull();
                });
            }));
        });
        describe('and dropdown is populated via processDefinitionId', function () {
            beforeEach(testing_1.async(function () {
                stubFormService = fixture.debugElement.injector.get(form_service_1.FormService);
                visibilityService = fixture.debugElement.injector.get(widget_visibility_service_1.WidgetVisibilityService);
                spyOn(visibilityService, 'refreshVisibility').and.stub();
                spyOn(stubFormService, 'getRestFieldValuesByProcessId').and.returnValue(Rx_1.Observable.of(fakeOptionList));
                dropDownWidget.field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel({ processDefinitionId: 'fake-process-id' }), {
                    id: 'dropdown-id',
                    name: 'date-name',
                    type: 'dropdown',
                    readOnly: 'false',
                    restUrl: 'fake-rest-url'
                });
                dropDownWidget.field.emptyOption = { id: 'empty', name: 'Choose one...' };
                dropDownWidget.field.isVisible = true;
                fixture.detectChanges();
            }));
            it('should show visible dropdown widget', testing_1.async(function () {
                expect(element.querySelector('#dropdown-id')).toBeDefined();
                expect(element.querySelector('#dropdown-id')).not.toBeNull();
                expect(element.querySelector('#opt_1')).not.toBeNull();
                expect(element.querySelector('#opt_2')).not.toBeNull();
                expect(element.querySelector('#opt_3')).not.toBeNull();
            }));
            it('should select the default value when an option is chosen as default', testing_1.async(function () {
                dropDownWidget.field.value = 'option_2';
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    var dropDownElement = element.querySelector('#dropdown-id');
                    expect(dropDownElement).not.toBeNull();
                    expect(element.querySelector('#opt_2')).not.toBeNull();
                    expect(dropDownElement.value).toBe('option_2');
                    expect(dropDownElement.selectedOptions[0].textContent).toBe('option_2');
                });
            }));
            it('should select the empty value when no default is chosen', testing_1.async(function () {
                dropDownWidget.field.value = 'empty';
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    var dropDownElement = element.querySelector('#dropdown-id');
                    expect(dropDownElement).not.toBeNull();
                    expect(dropDownElement.value).toBe('empty');
                    expect(dropDownElement.selectedOptions[0].textContent).toBe('Choose one...');
                });
            }));
        });
    });
});
//# sourceMappingURL=dropdown.widget.spec.js.map