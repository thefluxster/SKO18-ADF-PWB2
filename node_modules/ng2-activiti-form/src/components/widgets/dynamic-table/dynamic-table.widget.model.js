/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var form_widget_model_1 = require("./../core/form-widget.model");
var form_field_model_1 = require("./../core/form-field.model");
var moment = require("moment");
var DynamicTableModel = (function (_super) {
    __extends(DynamicTableModel, _super);
    function DynamicTableModel(form, json) {
        var _this = _super.call(this, form, json) || this;
        _this.columns = [];
        _this.visibleColumns = [];
        _this.rows = [];
        _this._validators = [];
        if (json) {
            _this.field = new form_field_model_1.FormFieldModel(form, json);
            if (json.columnDefinitions) {
                _this.columns = json.columnDefinitions.map(function (obj) { return obj; });
                _this.visibleColumns = _this.columns.filter(function (col) { return col.visible; });
            }
            if (json.value) {
                _this.rows = json.value.map(function (obj) { return ({ selected: false, value: obj }); });
            }
        }
        _this._validators = [
            new RequiredCellValidator(),
            new DateCellValidator(),
            new NumberCellValidator()
        ];
        return _this;
    }
    Object.defineProperty(DynamicTableModel.prototype, "selectedRow", {
        get: function () {
            return this._selectedRow;
        },
        set: function (value) {
            if (this._selectedRow && this._selectedRow === value) {
                this._selectedRow.selected = false;
                this._selectedRow = null;
                return;
            }
            this.rows.forEach(function (row) { return row.selected = false; });
            this._selectedRow = value;
            if (value) {
                this._selectedRow.selected = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    DynamicTableModel.prototype.flushValue = function () {
        if (this.field) {
            this.field.value = this.rows.map(function (r) { return r.value; });
            this.field.updateForm();
        }
    };
    DynamicTableModel.prototype.moveRow = function (row, offset) {
        var oldIndex = this.rows.indexOf(row);
        if (oldIndex > -1) {
            var newIndex = (oldIndex + offset);
            if (newIndex < 0) {
                newIndex = 0;
            }
            else if (newIndex >= this.rows.length) {
                newIndex = this.rows.length;
            }
            var arr = this.rows.slice();
            arr.splice(oldIndex, 1);
            arr.splice(newIndex, 0, row);
            this.rows = arr;
            this.flushValue();
        }
    };
    DynamicTableModel.prototype.deleteRow = function (row) {
        if (row) {
            if (this.selectedRow === row) {
                this.selectedRow = null;
            }
            var idx = this.rows.indexOf(row);
            if (idx > -1) {
                this.rows.splice(idx, 1);
                this.flushValue();
            }
        }
    };
    DynamicTableModel.prototype.addRow = function (row) {
        if (row) {
            this.rows.push(row);
        }
    };
    DynamicTableModel.prototype.validateRow = function (row) {
        var summary = {
            isValid: true,
            text: null
        };
        if (row) {
            for (var _i = 0, _a = this.columns; _i < _a.length; _i++) {
                var col = _a[_i];
                for (var _b = 0, _c = this._validators; _b < _c.length; _b++) {
                    var validator = _c[_b];
                    if (!validator.validate(row, col, summary)) {
                        return summary;
                    }
                }
            }
        }
        return summary;
    };
    DynamicTableModel.prototype.getCellValue = function (row, column) {
        var result = row.value[column.id];
        if (column.type === 'Dropdown') {
            if (result) {
                return result.name;
            }
        }
        if (column.type === 'Boolean') {
            return result ? true : false;
        }
        if (column.type === 'Date') {
            if (result) {
                return moment(result.split('T')[0], 'YYYY-MM-DD').format('DD-MM-YYYY');
            }
        }
        return result || '';
    };
    DynamicTableModel.prototype.getDisplayText = function (column) {
        var result = column.name;
        if (column.type === 'Amount') {
            var currency = column.amountCurrency || '$';
            result = column.name + " (" + currency + ")";
        }
        return result;
    };
    return DynamicTableModel;
}(form_widget_model_1.FormWidgetModel));
exports.DynamicTableModel = DynamicTableModel;
var RequiredCellValidator = (function () {
    function RequiredCellValidator() {
        this.supportedTypes = [
            'String',
            'Number',
            'Amount',
            'Date',
            'Dropdown'
        ];
    }
    RequiredCellValidator.prototype.isSupported = function (column) {
        return column && column.required && this.supportedTypes.indexOf(column.type) > -1;
    };
    RequiredCellValidator.prototype.validate = function (row, column, summary) {
        if (this.isSupported(column)) {
            var value = row.value[column.id];
            if (column.required) {
                if (value === null || value === undefined || value === '') {
                    if (summary) {
                        summary.isValid = false;
                        summary.text = "Field '" + column.name + "' is required.";
                    }
                    return false;
                }
            }
        }
        return true;
    };
    return RequiredCellValidator;
}());
exports.RequiredCellValidator = RequiredCellValidator;
var DateCellValidator = (function () {
    function DateCellValidator() {
        this.supportedTypes = [
            'Date'
        ];
    }
    DateCellValidator.prototype.isSupported = function (column) {
        return column && column.editable && this.supportedTypes.indexOf(column.type) > -1;
    };
    DateCellValidator.prototype.validate = function (row, column, summary) {
        if (this.isSupported(column)) {
            var value = row.value[column.id];
            var dateValue = moment(value, 'D-M-YYYY');
            if (!dateValue.isValid()) {
                if (summary) {
                    summary.isValid = false;
                    summary.text = "Invalid '" + column.name + "' format.";
                }
                return false;
            }
        }
        return true;
    };
    return DateCellValidator;
}());
exports.DateCellValidator = DateCellValidator;
var NumberCellValidator = (function () {
    function NumberCellValidator() {
        this.supportedTypes = [
            'Number',
            'Amount'
        ];
    }
    NumberCellValidator.prototype.isSupported = function (column) {
        return column && column.required && this.supportedTypes.indexOf(column.type) > -1;
    };
    NumberCellValidator.prototype.isNumber = function (value) {
        if (value === null || value === undefined || value === '') {
            return false;
        }
        return !isNaN(+value);
    };
    NumberCellValidator.prototype.validate = function (row, column, summary) {
        if (this.isSupported(column)) {
            var value = row.value[column.id];
            if (value === null ||
                value === undefined ||
                value === '' ||
                this.isNumber(value)) {
                return true;
            }
            if (summary) {
                summary.isValid = false;
                summary.text = "Field '" + column.name + "' must be a number.";
            }
            return false;
        }
        return true;
    };
    return NumberCellValidator;
}());
exports.NumberCellValidator = NumberCellValidator;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
