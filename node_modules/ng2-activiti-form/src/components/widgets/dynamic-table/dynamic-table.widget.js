/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var widget_component_1 = require("./../widget.component");
var dynamic_table_widget_model_1 = require("./dynamic-table.widget.model");
var widget_visibility_service_1 = require("../../../services/widget-visibility.service");
var DynamicTableWidget = (function (_super) {
    __extends(DynamicTableWidget, _super);
    function DynamicTableWidget(elementRef, visibilityService, logService) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.visibilityService = visibilityService;
        _this.logService = logService;
        _this.ERROR_MODEL_NOT_FOUND = 'Table model not found';
        _this.editMode = false;
        _this.editRow = null;
        return _this;
    }
    DynamicTableWidget.prototype.ngOnInit = function () {
        if (this.field) {
            this.content = new dynamic_table_widget_model_1.DynamicTableModel(this.field.form, this.field.json);
            this.visibilityService.refreshVisibility(this.field.form);
        }
    };
    DynamicTableWidget.prototype.isValid = function () {
        var result = true;
        if (this.content && this.content.field) {
            result = this.content.field.isValid;
        }
        return result;
    };
    DynamicTableWidget.prototype.onRowClicked = function (row) {
        if (this.content) {
            this.content.selectedRow = row;
        }
    };
    DynamicTableWidget.prototype.hasSelection = function () {
        return !!(this.content && this.content.selectedRow);
    };
    DynamicTableWidget.prototype.moveSelectionUp = function () {
        if (this.content) {
            this.content.moveRow(this.content.selectedRow, -1);
            return true;
        }
        return false;
    };
    DynamicTableWidget.prototype.moveSelectionDown = function () {
        if (this.content) {
            this.content.moveRow(this.content.selectedRow, 1);
            return true;
        }
        return false;
    };
    DynamicTableWidget.prototype.deleteSelection = function () {
        if (this.content) {
            this.content.deleteRow(this.content.selectedRow);
            return true;
        }
        return false;
    };
    DynamicTableWidget.prototype.addNewRow = function () {
        if (this.content) {
            this.editRow = {
                isNew: true,
                selected: false,
                value: {}
            };
            this.editMode = true;
            return true;
        }
        return false;
    };
    DynamicTableWidget.prototype.editSelection = function () {
        if (this.content) {
            this.editRow = this.copyRow(this.content.selectedRow);
            this.editMode = true;
            return true;
        }
        return false;
    };
    DynamicTableWidget.prototype.getCellValue = function (row, column) {
        if (this.content) {
            var result = this.content.getCellValue(row, column);
            if (column.type === 'Amount') {
                return (column.amountCurrency || '$') + ' ' + (result || 0);
            }
            return result;
        }
        return null;
    };
    DynamicTableWidget.prototype.onSaveChanges = function () {
        if (this.content) {
            if (this.editRow.isNew) {
                var row = this.copyRow(this.editRow);
                this.content.selectedRow = null;
                this.content.addRow(row);
                this.editRow.isNew = false;
            }
            else {
                this.content.selectedRow.value = this.copyObject(this.editRow.value);
            }
            this.content.flushValue();
        }
        else {
            this.logService.error(this.ERROR_MODEL_NOT_FOUND);
        }
        this.editMode = false;
    };
    DynamicTableWidget.prototype.onCancelChanges = function () {
        this.editMode = false;
        this.editRow = null;
    };
    DynamicTableWidget.prototype.copyRow = function (row) {
        return {
            value: this.copyObject(row.value)
        };
    };
    DynamicTableWidget.prototype.copyObject = function (obj) {
        var _this = this;
        var result = obj;
        if (typeof obj === 'object' && obj !== null && obj !== undefined) {
            result = Object.assign({}, obj);
            Object.keys(obj).forEach(function (key) {
                if (typeof obj[key] === 'object') {
                    result[key] = _this.copyObject(obj[key]);
                }
            });
        }
        return result;
    };
    return DynamicTableWidget;
}(widget_component_1.WidgetComponent));
DynamicTableWidget = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'dynamic-table-widget',
        template: "<div class=\"dynamic-table-widget\"     [class.dynamic-table-widget__invalid]=\"!isValid()\" *ngIf=\"field?.isVisible\">      <div class=\"dynamic-table-widget__label\">{{content.name}}</div>       <div *ngIf=\"!editMode\">          <div class=\"dynamic-table-widget__table-container\">             <table class=\"mdl-data-table mdl-js-data-table dynamic-table-widget__table\">                 <thead>                     <tr>                         <th *ngFor=\"let column of content.visibleColumns\"                             class=\"mdl-data-table__cell--non-numeric\">                             {{column.name}}                         </th>                     </tr>                 </thead>                 <tbody>                     <tr *ngFor=\"let row of content.rows\"                         [class.dynamic-table-widget__row-selected]=\"row.selected\">                         <td *ngFor=\"let column of content.visibleColumns\"                             class=\"mdl-data-table__cell--non-numeric\"                             (click)=\"onRowClicked(row)\">                             {{ getCellValue(row, column) }}                         </td>                     </tr>                 </tbody>             </table>          </div>          <div class=\"dynamic-table-widget__buttons\">             <button class=\"mdl-button mdl-js-button mdl-button--icon\"                     [disabled]=\"!hasSelection()\"                     (click)=\"moveSelectionUp()\">                 <i class=\"material-icons\">arrow_upward</i>             </button>             <button class=\"mdl-button mdl-js-button mdl-button--icon\"                     [disabled]=\"!hasSelection()\"                     (click)=\"moveSelectionDown()\">                 <i class=\"material-icons\">arrow_downward</i>             </button>             <button class=\"mdl-button mdl-js-button mdl-button--icon\"                     (click)=\"addNewRow()\">                 <i class=\"material-icons\">add_circle_outline</i>             </button>             <button class=\"mdl-button mdl-js-button mdl-button--icon\"                     [disabled]=\"!hasSelection()\"                     (click)=\"deleteSelection()\">                 <i class=\"material-icons\">remove_circle_outline</i>             </button>             <button class=\"mdl-button mdl-js-button mdl-button--icon\"                     [disabled]=\"!hasSelection()\"                     (click)=\"editSelection()\">                 <i class=\"material-icons\">edit</i>             </button>         </div>      </div>       <row-editor *ngIf=\"editMode\"         [table]=\"content\"         [row]=\"editRow\"         [column]=\"column\"         (save)=\"onSaveChanges()\"         (cancel)=\"onCancelChanges()\">      </row-editor>       <div class=\"dynamic-table-widget__summary\">{{content?.field.validationSummary}}</div>  </div>",
        styles: [".dynamic-table-widget {     padding: 8px; }  .dynamic-table-widget__buttons {     margin-top: 10px; }  .dynamic-table-widget__row-selected, .dynamic-table-widget__row-selected:hover {     background-color: #eef !important; }  .dynamic-table-widget__table-container {     overflow-y: auto;     width: 100%; }  .dynamic-table-widget__table {     width: 100%; }  .dynamic-table-widget__invalid .dynamic-table-widget__label {     color: #d50000; }  .dynamic-table-widget__invalid .dynamic-table-widget__table-container {     border: 1px solid #d50000; }  .dynamic-table-widget__invalid .dynamic-table-widget__table {     border: none; }  .dynamic-table-widget__summary {     visibility: hidden;     color: #d50000; }  .dynamic-table-widget__invalid .dynamic-table-widget__summary {     visibility: visible !important; }"]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        widget_visibility_service_1.WidgetVisibilityService,
        ng2_alfresco_core_1.LogService])
], DynamicTableWidget);
exports.DynamicTableWidget = DynamicTableWidget;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
