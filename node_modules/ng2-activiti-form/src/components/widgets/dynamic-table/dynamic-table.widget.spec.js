/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var dynamic_table_widget_1 = require("./dynamic-table.widget");
var dynamic_table_widget_model_1 = require("./dynamic-table.widget.model");
var index_1 = require("./../core/index");
var widget_visibility_service_1 = require("../../../services/widget-visibility.service");
describe('DynamicTableWidget', function () {
    var widget;
    var table;
    var visibilityService;
    var logService;
    beforeEach(function () {
        logService = new ng2_alfresco_core_1.LogServiceMock();
        table = new dynamic_table_widget_model_1.DynamicTableModel(null);
        visibilityService = new widget_visibility_service_1.WidgetVisibilityService(null, logService);
        widget = new dynamic_table_widget_1.DynamicTableWidget(null, visibilityService, logService);
        widget.content = table;
    });
    it('should select row on click', function () {
        var row = { selected: false };
        widget.onRowClicked(row);
        expect(row.selected).toBeTruthy();
        expect(widget.content.selectedRow).toBe(row);
    });
    it('should requre table to select clicked row', function () {
        var row = { selected: false };
        widget.content = null;
        widget.onRowClicked(row);
        expect(row.selected).toBeFalsy();
    });
    it('should reset selected row', function () {
        var row = { selected: false };
        widget.content.rows.push(row);
        widget.content.selectedRow = row;
        expect(widget.content.selectedRow).toBe(row);
        expect(row.selected).toBeTruthy();
        widget.onRowClicked(null);
        expect(widget.content.selectedRow).toBeNull();
        expect(row.selected).toBeFalsy();
    });
    it('should check selection', function () {
        var row = { selected: false };
        widget.content.rows.push(row);
        widget.content.selectedRow = row;
        expect(widget.hasSelection()).toBeTruthy();
        widget.content.selectedRow = null;
        expect(widget.hasSelection()).toBeFalsy();
        widget.content = null;
        expect(widget.hasSelection()).toBeFalsy();
    });
    it('should require table to move selection up', function () {
        widget.content = null;
        expect(widget.moveSelectionUp()).toBeFalsy();
    });
    it('should move selection up', function () {
        var row1 = {};
        var row2 = {};
        (_a = widget.content.rows).push.apply(_a, [row1, row2]);
        widget.content.selectedRow = row2;
        expect(widget.moveSelectionUp()).toBeTruthy();
        expect(widget.content.rows.indexOf(row2)).toBe(0);
        var _a;
    });
    it('should require table to move selection down', function () {
        widget.content = null;
        expect(widget.moveSelectionDown()).toBeFalsy();
    });
    it('should move selection down', function () {
        var row1 = {};
        var row2 = {};
        (_a = widget.content.rows).push.apply(_a, [row1, row2]);
        widget.content.selectedRow = row1;
        expect(widget.moveSelectionDown()).toBeTruthy();
        expect(widget.content.rows.indexOf(row1)).toBe(1);
        var _a;
    });
    it('should require table to delete selection', function () {
        widget.content = null;
        expect(widget.deleteSelection()).toBeFalsy();
    });
    it('should delete selected row', function () {
        var row = {};
        widget.content.rows.push(row);
        widget.content.selectedRow = row;
        widget.deleteSelection();
        expect(widget.content.rows.length).toBe(0);
    });
    it('should require table to add new row', function () {
        widget.content = null;
        expect(widget.addNewRow()).toBeFalsy();
    });
    it('should start editing new row', function () {
        expect(widget.editMode).toBeFalsy();
        expect(widget.editRow).toBeNull();
        expect(widget.addNewRow()).toBeTruthy();
        expect(widget.editRow).not.toBeNull();
        expect(widget.editMode).toBeTruthy();
    });
    it('should require table to edit selected row', function () {
        widget.content = null;
        expect(widget.editSelection()).toBeFalsy();
    });
    it('should start editing selected row', function () {
        expect(widget.editMode).toBeFalsy();
        expect(widget.editRow).toBeFalsy();
        var row = { value: true };
        widget.content.selectedRow = row;
        expect(widget.editSelection()).toBeTruthy();
        expect(widget.editMode).toBeTruthy();
        expect(widget.editRow).not.toBeNull();
        expect(widget.editRow.value).toEqual(row.value);
    });
    it('should copy row', function () {
        var row = { value: { opt: { key: '1', value: 1 } } };
        var copy = widget.copyRow(row);
        expect(copy.value).toEqual(row.value);
    });
    it('should require table to retrieve cell value', function () {
        widget.content = null;
        expect(widget.getCellValue(null, null)).toBeNull();
    });
    it('should retrieve cell value', function () {
        var value = '<value>';
        var row = { value: { key: value } };
        var column = { id: 'key' };
        expect(widget.getCellValue(row, column)).toBe(value);
    });
    it('should save changes and add new row', function () {
        var row = { isNew: true, value: { key: 'value' } };
        widget.editMode = true;
        widget.editRow = row;
        widget.onSaveChanges();
        expect(row.isNew).toBeFalsy();
        expect(widget.content.selectedRow).toBeNull();
        expect(widget.content.rows.length).toBe(1);
        expect(widget.content.rows[0].value).toEqual(row.value);
    });
    it('should save changes and update row', function () {
        var row = { isNew: false, value: { key: 'value' } };
        widget.editMode = true;
        widget.editRow = row;
        widget.content.selectedRow = row;
        widget.onSaveChanges();
        expect(widget.content.selectedRow.value).toEqual(row.value);
    });
    it('should require table to save changes', function () {
        spyOn(logService, 'error').and.stub();
        widget.editMode = true;
        widget.content = null;
        widget.onSaveChanges();
        expect(widget.editMode).toBeFalsy();
        expect(logService.error).toHaveBeenCalledWith(widget.ERROR_MODEL_NOT_FOUND);
    });
    it('should cancel changes', function () {
        widget.editMode = true;
        widget.editRow = {};
        widget.onCancelChanges();
        expect(widget.editMode).toBeFalsy();
        expect(widget.editRow).toBeNull();
    });
    it('should be valid by default', function () {
        widget.content.field = null;
        expect(widget.isValid()).toBeTruthy();
        widget.content = null;
        expect(widget.isValid()).toBeTruthy();
    });
    it('should take validation state from underlying field', function () {
        var form = new index_1.FormModel();
        widget.content = new dynamic_table_widget_model_1.DynamicTableModel(form, {
            type: index_1.FormFieldTypes.DYNAMIC_TABLE,
            required: true,
            value: null
        });
        expect(widget.content.field.validate()).toBeFalsy();
        expect(widget.isValid()).toBe(widget.content.field.isValid);
        expect(widget.content.field.isValid).toBeFalsy();
        widget.content.field.value = [{}];
        expect(widget.content.field.validate()).toBeTruthy();
        expect(widget.isValid()).toBe(widget.content.field.isValid);
        expect(widget.content.field.isValid).toBeTruthy();
    });
    it('should prepend default currency for amount columns', function () {
        var row = { value: { key: '100' } };
        var column = { id: 'key', type: 'Amount' };
        var actual = widget.getCellValue(row, column);
        expect(actual).toBe('$ 100');
    });
    it('should prepend custom currency for amount columns', function () {
        var row = { value: { key: '100' } };
        var column = { id: 'key', type: 'Amount', amountCurrency: 'GBP' };
        var actual = widget.getCellValue(row, column);
        expect(actual).toBe('GBP 100');
    });
});
//# sourceMappingURL=dynamic-table.widget.spec.js.map