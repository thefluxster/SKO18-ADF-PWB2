/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var dynamic_table_widget_model_1 = require("./../../dynamic-table.widget.model");
var moment = require("moment");
var DateEditorComponent = (function () {
    function DateEditorComponent(elementRef) {
        this.elementRef = elementRef;
        this.DATE_FORMAT = 'DD-MM-YYYY';
    }
    DateEditorComponent.prototype.ngOnInit = function () {
        this.settings = {
            type: 'date',
            past: moment().subtract(100, 'years'),
            future: moment().add(100, 'years')
        };
        this.value = this.table.getCellValue(this.row, this.column);
        if (this.value) {
            this.settings.init = moment(this.value, this.DATE_FORMAT);
        }
        this.datePicker = new mdDateTimePicker.default(this.settings);
        if (this.elementRef) {
            this.datePicker.trigger = this.elementRef.nativeElement.querySelector('#dateInput');
        }
    };
    DateEditorComponent.prototype.onDateChanged = function (event) {
        var newValue = event.target.value;
        var dateValue = moment(newValue, this.DATE_FORMAT);
        this.datePicker.time = dateValue;
        this.row.value[this.column.id] = dateValue.format('YYYY-MM-DD') + "T00:00:00.000Z";
        this.table.flushValue();
    };
    ;
    DateEditorComponent.prototype.onDateSelected = function (event) {
        this.value = this.datePicker.time.format('DD-MM-YYYY');
        var newValue = this.datePicker.time.format('YYYY-MM-DD');
        this.row.value[this.column.id] = newValue + "T00:00:00.000Z";
        this.table.flushValue();
        if (this.elementRef) {
            this.updateMaterialTextField(this.elementRef, newValue);
        }
    };
    DateEditorComponent.prototype.updateMaterialTextField = function (elementRef, value) {
        if (elementRef) {
            var el = elementRef.nativeElement;
            if (el) {
                var container = el.querySelector('.mdl-textfield');
                if (container) {
                    container.MaterialTextfield.change(value);
                    return true;
                }
            }
        }
        return false;
    };
    return DateEditorComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", dynamic_table_widget_model_1.DynamicTableModel)
], DateEditorComponent.prototype, "table", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DateEditorComponent.prototype, "row", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DateEditorComponent.prototype, "column", void 0);
DateEditorComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alf-date-editor',
        template: "<div class=\"mdl-grid\">     <div class=\"mdl-cell mdl-cell--11-col\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label date-editor\">             <input id=\"dateInput\"                 class=\"mdl-textfield__input\"                 type=\"text\"                 [value]=\"value\"                 [attr.id]=\"column.id\"                 [required]=\"column.required\"                 [disabled]=\"!column.editable\"                 (keyup)=\"onDateChanged($event)\"                 (onOk)=\"onDateSelected($event)\">             <label class=\"mdl-textfield__label\" [attr.for]=\"column.id\">{{column.name}} (d-M-yyyy)</label>         </div>     </div>     <div *ngIf=\"column.editable\" class=\"mdl-cell mdl-cell--1-col\">         <button             class=\"mdl-button mdl-js-button mdl-button--icon date-editor--button\"             (click)=\"datePicker.toggle()\">             <i class=\"material-icons\">date_range</i>         </button>     </div> </div>",
        styles: [".date-editor {     width: 100%; }  .date-editor--button {     margin-top: 15px; }"]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], DateEditorComponent);
exports.DateEditorComponent = DateEditorComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
