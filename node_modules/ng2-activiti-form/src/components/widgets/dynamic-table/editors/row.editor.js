/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var dynamic_table_widget_model_1 = require("./../dynamic-table.widget.model");
var RowEditorComponent = (function () {
    function RowEditorComponent() {
        this.save = new core_1.EventEmitter();
        this.cancel = new core_1.EventEmitter();
        this.validationSummary = { isValid: true, text: null };
    }
    RowEditorComponent.prototype.onCancelChanges = function () {
        this.cancel.emit({
            table: this.table,
            row: this.row,
            column: this.column
        });
    };
    RowEditorComponent.prototype.onSaveChanges = function () {
        this.validate();
        if (this.isValid()) {
            this.save.emit({
                table: this.table,
                row: this.row,
                column: this.column
            });
        }
    };
    RowEditorComponent.prototype.isValid = function () {
        return this.validationSummary && this.validationSummary.isValid;
    };
    RowEditorComponent.prototype.validate = function () {
        this.validationSummary = this.table.validateRow(this.row);
    };
    return RowEditorComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", dynamic_table_widget_model_1.DynamicTableModel)
], RowEditorComponent.prototype, "table", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RowEditorComponent.prototype, "row", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RowEditorComponent.prototype, "column", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], RowEditorComponent.prototype, "save", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], RowEditorComponent.prototype, "cancel", void 0);
RowEditorComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'row-editor',
        template: "<div class=\"row-editor mdl-shadow--2dp\"     [class.row-editor__invalid]=\"!validationSummary.isValid\">     <div class=\"mdl-grid\" *ngFor=\"let column of table.columns\">         <div class=\"mdl-cell mdl-cell--6-col\" [ngSwitch]=\"column.type\">             <div *ngSwitchCase=\"'Dropdown'\">                 <alf-dropdown-editor                     [table]=\"table\"                     [row]=\"row\"                     [column]=\"column\">                 </alf-dropdown-editor>                 </div>                 <div *ngSwitchCase=\"'Date'\">                     <alf-date-editor                     [table]=\"table\"                     [row]=\"row\"                     [column]=\"column\">                 </alf-date-editor>                 </div>                  <div *ngSwitchCase=\"'Boolean'\">                 <alf-boolean-editor                     [table]=\"table\"                     [row]=\"row\"                     [column]=\"column\">                 </alf-boolean-editor>                 </div>                 <div *ngSwitchDefault>                 <alf-text-editor                     [table]=\"table\"                     [row]=\"row\"                     [column]=\"column\">                 </alf-text-editor>             </div>         </div>     </div>     <div class=\"row-editor__validation-summary\" *ngIf=\"!validationSummary.isValid\">{{validationSummary.text}}</div>     <div>         <button             class=\"mdl-button mdl-js-button mdl-js-ripple-effect\"             (click)=\"onCancelChanges()\">Cancel</button>         <button             class=\"mdl-button mdl-js-button mdl-js-ripple-effect\"             (click)=\"onSaveChanges()\">Save</button>     </div> </div>",
        styles: [".row-editor {     padding: 8px; }  .row-editor__validation-summary {     visibility: hidden; }  .row-editor__invalid .row-editor__validation-summary {     padding-left: 16px;     padding-right: 16px;     padding-top: 8px;     padding-bottom: 8px;     color: #d50000;     visibility: visible; }"]
    })
], RowEditorComponent);
exports.RowEditorComponent = RowEditorComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9keW5hbWljLXRhYmxlL2VkaXRvcnMvcm93LmVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7O0FBRUgsc0NBQXVFO0FBQ3ZFLDhFQUFzSTtBQVF0SSxJQUFhLGtCQUFrQjtJQU4vQjtRQWtCSSxTQUFJLEdBQXNCLElBQUksbUJBQVksRUFBTyxDQUFDO1FBR2xELFdBQU0sR0FBc0IsSUFBSSxtQkFBWSxFQUFPLENBQUM7UUFFcEQsc0JBQWlCLEdBQThELEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7SUE2QmpILENBQUM7SUEzQkcsNENBQWUsR0FBZjtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtTQUN0QixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsMENBQWEsR0FBYjtRQUNJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNYLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2dCQUNiLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTthQUN0QixDQUFDLENBQUM7UUFDUCxDQUFDO0lBQ0wsQ0FBQztJQUVPLG9DQUFPLEdBQWY7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7SUFDcEUsQ0FBQztJQUVPLHFDQUFRLEdBQWhCO1FBQ0ksSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUwseUJBQUM7QUFBRCxDQTlDQSxBQThDQyxJQUFBO0FBM0NHO0lBREMsWUFBSyxFQUFFOzhCQUNELDhDQUFpQjtpREFBQztBQUd6QjtJQURDLFlBQUssRUFBRTs7K0NBQ2E7QUFHckI7SUFEQyxZQUFLLEVBQUU7O2tEQUNtQjtBQUczQjtJQURDLGFBQU0sRUFBRTs4QkFDSCxtQkFBWTtnREFBZ0M7QUFHbEQ7SUFEQyxhQUFNLEVBQUU7OEJBQ0QsbUJBQVk7a0RBQWdDO0FBZjNDLGtCQUFrQjtJQU45QixnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFBRSxZQUFZO1FBQ3RCLFFBQVEsRUFBRSx1ckRBQXVyRDtRQUNqc0QsTUFBTSxFQUFFLENBQUMsdVNBQXVTLENBQUM7S0FDcFQsQ0FBQztHQUNXLGtCQUFrQixDQThDOUI7QUE5Q1ksZ0RBQWtCIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy9keW5hbWljLXRhYmxlL2VkaXRvcnMvcm93LmVkaXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEeW5hbWljVGFibGVNb2RlbCwgRHluYW1pY1RhYmxlUm93LCBEeW5hbWljVGFibGVDb2x1bW4sIER5bmFtaWNSb3dWYWxpZGF0aW9uU3VtbWFyeSB9IGZyb20gJy4vLi4vZHluYW1pYy10YWJsZS53aWRnZXQubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHNlbGVjdG9yOiAncm93LWVkaXRvcicsXG4gICAgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz1cXFwicm93LWVkaXRvciBtZGwtc2hhZG93LS0yZHBcXFwiICAgICBbY2xhc3Mucm93LWVkaXRvcl9faW52YWxpZF09XFxcIiF2YWxpZGF0aW9uU3VtbWFyeS5pc1ZhbGlkXFxcIj4gICAgIDxkaXYgY2xhc3M9XFxcIm1kbC1ncmlkXFxcIiAqbmdGb3I9XFxcImxldCBjb2x1bW4gb2YgdGFibGUuY29sdW1uc1xcXCI+ICAgICAgICAgPGRpdiBjbGFzcz1cXFwibWRsLWNlbGwgbWRsLWNlbGwtLTYtY29sXFxcIiBbbmdTd2l0Y2hdPVxcXCJjb2x1bW4udHlwZVxcXCI+ICAgICAgICAgICAgIDxkaXYgKm5nU3dpdGNoQ2FzZT1cXFwiJ0Ryb3Bkb3duJ1xcXCI+ICAgICAgICAgICAgICAgICA8YWxmLWRyb3Bkb3duLWVkaXRvciAgICAgICAgICAgICAgICAgICAgIFt0YWJsZV09XFxcInRhYmxlXFxcIiAgICAgICAgICAgICAgICAgICAgIFtyb3ddPVxcXCJyb3dcXFwiICAgICAgICAgICAgICAgICAgICAgW2NvbHVtbl09XFxcImNvbHVtblxcXCI+ICAgICAgICAgICAgICAgICA8L2FsZi1kcm9wZG93bi1lZGl0b3I+ICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgIDxkaXYgKm5nU3dpdGNoQ2FzZT1cXFwiJ0RhdGUnXFxcIj4gICAgICAgICAgICAgICAgICAgICA8YWxmLWRhdGUtZWRpdG9yICAgICAgICAgICAgICAgICAgICAgW3RhYmxlXT1cXFwidGFibGVcXFwiICAgICAgICAgICAgICAgICAgICAgW3Jvd109XFxcInJvd1xcXCIgICAgICAgICAgICAgICAgICAgICBbY29sdW1uXT1cXFwiY29sdW1uXFxcIj4gICAgICAgICAgICAgICAgIDwvYWxmLWRhdGUtZWRpdG9yPiAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgPGRpdiAqbmdTd2l0Y2hDYXNlPVxcXCInQm9vbGVhbidcXFwiPiAgICAgICAgICAgICAgICAgPGFsZi1ib29sZWFuLWVkaXRvciAgICAgICAgICAgICAgICAgICAgIFt0YWJsZV09XFxcInRhYmxlXFxcIiAgICAgICAgICAgICAgICAgICAgIFtyb3ddPVxcXCJyb3dcXFwiICAgICAgICAgICAgICAgICAgICAgW2NvbHVtbl09XFxcImNvbHVtblxcXCI+ICAgICAgICAgICAgICAgICA8L2FsZi1ib29sZWFuLWVkaXRvcj4gICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgPGRpdiAqbmdTd2l0Y2hEZWZhdWx0PiAgICAgICAgICAgICAgICAgPGFsZi10ZXh0LWVkaXRvciAgICAgICAgICAgICAgICAgICAgIFt0YWJsZV09XFxcInRhYmxlXFxcIiAgICAgICAgICAgICAgICAgICAgIFtyb3ddPVxcXCJyb3dcXFwiICAgICAgICAgICAgICAgICAgICAgW2NvbHVtbl09XFxcImNvbHVtblxcXCI+ICAgICAgICAgICAgICAgICA8L2FsZi10ZXh0LWVkaXRvcj4gICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgPC9kaXY+ICAgICA8L2Rpdj4gICAgIDxkaXYgY2xhc3M9XFxcInJvdy1lZGl0b3JfX3ZhbGlkYXRpb24tc3VtbWFyeVxcXCIgKm5nSWY9XFxcIiF2YWxpZGF0aW9uU3VtbWFyeS5pc1ZhbGlkXFxcIj57e3ZhbGlkYXRpb25TdW1tYXJ5LnRleHR9fTwvZGl2PiAgICAgPGRpdj4gICAgICAgICA8YnV0dG9uICAgICAgICAgICAgIGNsYXNzPVxcXCJtZGwtYnV0dG9uIG1kbC1qcy1idXR0b24gbWRsLWpzLXJpcHBsZS1lZmZlY3RcXFwiICAgICAgICAgICAgIChjbGljayk9XFxcIm9uQ2FuY2VsQ2hhbmdlcygpXFxcIj5DYW5jZWw8L2J1dHRvbj4gICAgICAgICA8YnV0dG9uICAgICAgICAgICAgIGNsYXNzPVxcXCJtZGwtYnV0dG9uIG1kbC1qcy1idXR0b24gbWRsLWpzLXJpcHBsZS1lZmZlY3RcXFwiICAgICAgICAgICAgIChjbGljayk9XFxcIm9uU2F2ZUNoYW5nZXMoKVxcXCI+U2F2ZTwvYnV0dG9uPiAgICAgPC9kaXY+IDwvZGl2PlwiLFxuICAgIHN0eWxlczogW1wiLnJvdy1lZGl0b3IgeyAgICAgcGFkZGluZzogOHB4OyB9ICAucm93LWVkaXRvcl9fdmFsaWRhdGlvbi1zdW1tYXJ5IHsgICAgIHZpc2liaWxpdHk6IGhpZGRlbjsgfSAgLnJvdy1lZGl0b3JfX2ludmFsaWQgLnJvdy1lZGl0b3JfX3ZhbGlkYXRpb24tc3VtbWFyeSB7ICAgICBwYWRkaW5nLWxlZnQ6IDE2cHg7ICAgICBwYWRkaW5nLXJpZ2h0OiAxNnB4OyAgICAgcGFkZGluZy10b3A6IDhweDsgICAgIHBhZGRpbmctYm90dG9tOiA4cHg7ICAgICBjb2xvcjogI2Q1MDAwMDsgICAgIHZpc2liaWxpdHk6IHZpc2libGU7IH1cIl1cbn0pXG5leHBvcnQgY2xhc3MgUm93RWRpdG9yQ29tcG9uZW50IHtcblxuICAgIEBJbnB1dCgpXG4gICAgdGFibGU6IER5bmFtaWNUYWJsZU1vZGVsO1xuXG4gICAgQElucHV0KClcbiAgICByb3c6IER5bmFtaWNUYWJsZVJvdztcblxuICAgIEBJbnB1dCgpXG4gICAgY29sdW1uOiBEeW5hbWljVGFibGVDb2x1bW47XG5cbiAgICBAT3V0cHV0KClcbiAgICBzYXZlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgY2FuY2VsOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgdmFsaWRhdGlvblN1bW1hcnk6IER5bmFtaWNSb3dWYWxpZGF0aW9uU3VtbWFyeSA9IDxEeW5hbWljUm93VmFsaWRhdGlvblN1bW1hcnk+IHsgaXNWYWxpZDogdHJ1ZSwgdGV4dDogbnVsbCB9O1xuXG4gICAgb25DYW5jZWxDaGFuZ2VzKCkge1xuICAgICAgICB0aGlzLmNhbmNlbC5lbWl0KHtcbiAgICAgICAgICAgIHRhYmxlOiB0aGlzLnRhYmxlLFxuICAgICAgICAgICAgcm93OiB0aGlzLnJvdyxcbiAgICAgICAgICAgIGNvbHVtbjogdGhpcy5jb2x1bW5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25TYXZlQ2hhbmdlcygpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2F2ZS5lbWl0KHtcbiAgICAgICAgICAgICAgICB0YWJsZTogdGhpcy50YWJsZSxcbiAgICAgICAgICAgICAgICByb3c6IHRoaXMucm93LFxuICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5jb2x1bW5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1ZhbGlkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uU3VtbWFyeSAmJiB0aGlzLnZhbGlkYXRpb25TdW1tYXJ5LmlzVmFsaWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2YWxpZGF0ZSgpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uU3VtbWFyeSA9IHRoaXMudGFibGUudmFsaWRhdGVSb3codGhpcy5yb3cpO1xuICAgIH1cblxufVxuIl19
