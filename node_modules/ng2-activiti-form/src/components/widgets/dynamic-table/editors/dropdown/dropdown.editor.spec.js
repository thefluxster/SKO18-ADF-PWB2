/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var Rx_1 = require("rxjs/Rx");
var dropdown_editor_1 = require("./dropdown.editor");
var dynamic_table_widget_model_1 = require("./../../dynamic-table.widget.model");
var index_1 = require("./../../../core/index");
var form_service_1 = require("./../../../../../services/form.service");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var testing_1 = require("@angular/core/testing");
var ecm_model_service_1 = require("../../../../../services/ecm-model.service");
describe('DropdownEditorComponent', function () {
    var component;
    var formService;
    var form;
    var table;
    var column;
    var row;
    beforeEach(function () {
        formService = new form_service_1.FormService(null, null, null);
        row = { value: { dropdown: 'one' } };
        column = {
            id: 'dropdown',
            options: [
                { id: '1', name: 'one' },
                { id: '2', name: 'two' }
            ]
        };
        form = new index_1.FormModel({ taskId: '<task-id>' });
        table = new dynamic_table_widget_model_1.DynamicTableModel(form, null);
        table.field = new index_1.FormFieldModel(form, { id: '<field-id>' });
        table.rows.push(row);
        table.columns.push(column);
        component = new dropdown_editor_1.DropdownEditorComponent(formService, null);
        component.table = table;
        component.row = row;
        component.column = column;
    });
    it('should require table field to setup', function () {
        table.field = null;
        component.ngOnInit();
        expect(component.value).toBeNull();
        expect(component.options).toEqual([]);
    });
    it('should setup with manual mode', function () {
        row.value[column.id] = 'two';
        component.ngOnInit();
        expect(component.options).toEqual(column.options);
        expect(component.value).toBe(row.value[column.id]);
    });
    it('should setup empty columns for manual mode', function () {
        column.options = null;
        component.ngOnInit();
        expect(component.options).toEqual([]);
    });
    it('should setup with REST mode', function () {
        column.optionType = 'rest';
        row.value[column.id] = 'twelve';
        var restResults = [
            { id: '11', name: 'eleven' },
            { id: '12', name: 'twelve' }
        ];
        spyOn(formService, 'getRestFieldValuesColumn').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(restResults);
            observer.complete();
        }));
        component.ngOnInit();
        expect(formService.getRestFieldValuesColumn).toHaveBeenCalledWith(form.taskId, table.field.id, column.id);
        expect(column.options).toEqual(restResults);
        expect(component.options).toEqual(restResults);
        expect(component.value).toBe(row.value[column.id]);
    });
    it('should create empty options array on REST response', function () {
        column.optionType = 'rest';
        spyOn(formService, 'getRestFieldValuesColumn').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(null);
            observer.complete();
        }));
        component.ngOnInit();
        expect(formService.getRestFieldValuesColumn).toHaveBeenCalledWith(form.taskId, table.field.id, column.id);
        expect(column.options).toEqual([]);
        expect(component.options).toEqual([]);
        expect(component.value).toBe(row.value[column.id]);
    });
    it('should handle REST error gettig options with task id', function () {
        column.optionType = 'rest';
        var error = 'error';
        spyOn(formService, 'getRestFieldValuesColumn').and.returnValue(Rx_1.Observable.throw(error));
        spyOn(component, 'handleError').and.stub();
        component.ngOnInit();
        expect(component.handleError).toHaveBeenCalledWith(error);
    });
    it('should handle REST error getting option with processDefinitionId', function () {
        column.optionType = 'rest';
        var procForm = new index_1.FormModel({ processDefinitionId: '<process-definition-id>' });
        var procTable = new dynamic_table_widget_model_1.DynamicTableModel(procForm, null);
        procTable.field = new index_1.FormFieldModel(form, { id: '<field-id>' });
        component.table = procTable;
        var error = 'error';
        spyOn(formService, 'getRestFieldValuesColumnByProcessId').and.returnValue(Rx_1.Observable.throw(error));
        spyOn(component, 'handleError').and.stub();
        component.ngOnInit();
        expect(component.handleError).toHaveBeenCalledWith(error);
    });
    it('should update row on value change', function () {
        var event = { target: { value: 'two' } };
        component.onValueChanged(row, column, event);
        expect(row.value[column.id]).toBe(column.options[1]);
    });
    describe('when template is ready', function () {
        var dropDownEditorComponent;
        var fixture;
        var element;
        var componentHandler;
        var stubFormService;
        var fakeOptionList = [{
                id: 'opt_1',
                name: 'option_1'
            }, {
                id: 'opt_2',
                name: 'option_2'
            }, { id: 'opt_3', name: 'option_3' }];
        var dynamicTable;
        beforeEach(testing_1.async(function () {
            componentHandler = jasmine.createSpyObj('componentHandler', ['upgradeAllRegistered', 'upgradeElement']);
            window['componentHandler'] = componentHandler;
            testing_1.TestBed.configureTestingModule({
                imports: [ng2_alfresco_core_1.CoreModule],
                declarations: [dropdown_editor_1.DropdownEditorComponent],
                providers: [form_service_1.FormService, ecm_model_service_1.EcmModelService]
            }).compileComponents().then(function () {
                fixture = testing_1.TestBed.createComponent(dropdown_editor_1.DropdownEditorComponent);
                dropDownEditorComponent = fixture.componentInstance;
                element = fixture.nativeElement;
            });
        }));
        afterEach(function () {
            fixture.destroy();
            testing_1.TestBed.resetTestingModule();
        });
        describe('and dropdown is populated via taskId', function () {
            beforeEach(testing_1.async(function () {
                stubFormService = fixture.debugElement.injector.get(form_service_1.FormService);
                spyOn(stubFormService, 'getRestFieldValuesColumn').and.returnValue(Rx_1.Observable.of(fakeOptionList));
                row = { value: { dropdown: 'one' } };
                column = {
                    id: 'column-id',
                    optionType: 'rest',
                    options: [
                        { id: '1', name: 'one' },
                        { id: '2', name: 'two' }
                    ]
                };
                form = new index_1.FormModel({ taskId: '<task-id>' });
                dynamicTable = new dynamic_table_widget_model_1.DynamicTableModel(form, null);
                dynamicTable.field = new index_1.FormFieldModel(form, { id: '<field-id>' });
                dynamicTable.rows.push(row);
                dynamicTable.columns.push(column);
                dropDownEditorComponent.table = dynamicTable;
                dropDownEditorComponent.column = column;
                dropDownEditorComponent.row = row;
                dropDownEditorComponent.table.field = new index_1.FormFieldModel(form, {
                    id: 'dropdown-id',
                    name: 'date-name',
                    type: 'dropdown',
                    readOnly: 'false',
                    restUrl: 'fake-rest-url'
                });
                dropDownEditorComponent.table.field.isVisible = true;
                fixture.detectChanges();
            }));
            it('should show visible dropdown widget', testing_1.async(function () {
                expect(element.querySelector('#column-id')).toBeDefined();
                expect(element.querySelector('#column-id')).not.toBeNull();
                expect(element.querySelector('#opt_1')).not.toBeNull();
                expect(element.querySelector('#opt_2')).not.toBeNull();
                expect(element.querySelector('#opt_3')).not.toBeNull();
            }));
        });
        describe('and dropdown is populated via processDefinitionId', function () {
            beforeEach(testing_1.async(function () {
                stubFormService = fixture.debugElement.injector.get(form_service_1.FormService);
                spyOn(stubFormService, 'getRestFieldValuesColumnByProcessId').and.returnValue(Rx_1.Observable.of(fakeOptionList));
                row = { value: { dropdown: 'one' } };
                column = {
                    id: 'column-id',
                    optionType: 'rest',
                    options: [
                        { id: '1', name: 'one' },
                        { id: '2', name: 'two' }
                    ]
                };
                form = new index_1.FormModel({ processDefinitionId: '<proc-id>' });
                dynamicTable = new dynamic_table_widget_model_1.DynamicTableModel(form, null);
                dynamicTable.field = new index_1.FormFieldModel(form, { id: '<field-id>' });
                dynamicTable.rows.push(row);
                dynamicTable.columns.push(column);
                dropDownEditorComponent.table = dynamicTable;
                dropDownEditorComponent.column = column;
                dropDownEditorComponent.row = row;
                dropDownEditorComponent.table.field = new index_1.FormFieldModel(form, {
                    id: 'dropdown-id',
                    name: 'date-name',
                    type: 'dropdown',
                    readOnly: 'false',
                    restUrl: 'fake-rest-url'
                });
                dropDownEditorComponent.table.field.isVisible = true;
                fixture.detectChanges();
            }));
            it('should show visible dropdown widget', testing_1.async(function () {
                expect(element.querySelector('#column-id')).toBeDefined();
                expect(element.querySelector('#column-id')).not.toBeNull();
                expect(element.querySelector('#opt_1')).not.toBeNull();
                expect(element.querySelector('#opt_2')).not.toBeNull();
                expect(element.querySelector('#opt_3')).not.toBeNull();
            }));
            it('should show visible dropdown widget', testing_1.async(function () {
                expect(element.querySelector('#column-id')).toBeDefined();
                expect(element.querySelector('#column-id')).not.toBeNull();
                expect(element.querySelector('#opt_1')).not.toBeNull();
                expect(element.querySelector('#opt_2')).not.toBeNull();
                expect(element.querySelector('#opt_3')).not.toBeNull();
            }));
        });
    });
});
//# sourceMappingURL=dropdown.editor.spec.js.map