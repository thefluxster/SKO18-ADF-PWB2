/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var row_editor_1 = require("./row.editor");
var dynamic_table_widget_model_1 = require("./../dynamic-table.widget.model");
describe('RowEditorComponent', function () {
    var component;
    beforeEach(function () {
        component = new row_editor_1.RowEditorComponent();
        component.table = new dynamic_table_widget_model_1.DynamicTableModel(null);
        component.row = {};
        component.column = {};
    });
    it('should be valid upon init', function () {
        expect(component.validationSummary.isValid).toBeTruthy();
        expect(component.validationSummary.text).toBeNull();
    });
    it('should emit [cancel] event', function (done) {
        component.cancel.subscribe(function (e) {
            expect(e.table).toBe(component.table);
            expect(e.row).toBe(component.row);
            expect(e.column).toBe(component.column);
            done();
        });
        component.onCancelChanges();
    });
    it('should validate row on save', function () {
        spyOn(component.table, 'validateRow').and.callThrough();
        component.onSaveChanges();
        expect(component.table.validateRow).toHaveBeenCalledWith(component.row);
    });
    it('should emit [save] event', function (done) {
        spyOn(component.table, 'validateRow').and.returnValue({ isValid: true, text: null });
        component.save.subscribe(function (e) {
            expect(e.table).toBe(component.table);
            expect(e.row).toBe(component.row);
            expect(e.column).toBe(component.column);
            done();
        });
        component.onSaveChanges();
    });
    it('should not emit [save] event for invalid row', function () {
        spyOn(component.table, 'validateRow').and.returnValue({ isValid: false, text: 'error' });
        var raised = false;
        component.save.subscribe(function (e) { return raised = true; });
        component.onSaveChanges();
        expect(raised).toBeFalsy();
    });
});
//# sourceMappingURL=row.editor.spec.js.map