/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormWidgetModel } from './../core/form-widget.model';
import { FormModel } from './../core/form.model';
import { FormFieldModel } from './../core/form-field.model';
export declare class DynamicTableModel extends FormWidgetModel {
    field: FormFieldModel;
    columns: DynamicTableColumn[];
    visibleColumns: DynamicTableColumn[];
    rows: DynamicTableRow[];
    private _selectedRow;
    private _validators;
    selectedRow: DynamicTableRow;
    constructor(form: FormModel, json?: any);
    flushValue(): void;
    moveRow(row: DynamicTableRow, offset: number): void;
    deleteRow(row: DynamicTableRow): void;
    addRow(row: DynamicTableRow): void;
    validateRow(row: DynamicTableRow): DynamicRowValidationSummary;
    getCellValue(row: DynamicTableRow, column: DynamicTableColumn): any;
    getDisplayText(column: DynamicTableColumn): string;
}
export interface DynamicRowValidationSummary {
    isValid: boolean;
    text: string;
}
export interface CellValidator {
    isSupported(column: DynamicTableColumn): boolean;
    validate(row: DynamicTableRow, column: DynamicTableColumn, summary?: DynamicRowValidationSummary): boolean;
}
export declare class RequiredCellValidator implements CellValidator {
    private supportedTypes;
    isSupported(column: DynamicTableColumn): boolean;
    validate(row: DynamicTableRow, column: DynamicTableColumn, summary?: DynamicRowValidationSummary): boolean;
}
export declare class DateCellValidator implements CellValidator {
    private supportedTypes;
    isSupported(column: DynamicTableColumn): boolean;
    validate(row: DynamicTableRow, column: DynamicTableColumn, summary?: DynamicRowValidationSummary): boolean;
}
export declare class NumberCellValidator implements CellValidator {
    private supportedTypes;
    isSupported(column: DynamicTableColumn): boolean;
    isNumber(value: any): boolean;
    validate(row: DynamicTableRow, column: DynamicTableColumn, summary?: DynamicRowValidationSummary): boolean;
}
export interface DynamicTableColumn {
    id: string;
    name: string;
    type: string;
    value: any;
    optionType: string;
    options: DynamicTableColumnOption[];
    restResponsePath: string;
    restUrl: string;
    restIdProperty: string;
    restLabelProperty: string;
    amountCurrency: string;
    amountEnableFractions: boolean;
    required: boolean;
    editable: boolean;
    sortable: boolean;
    visible: boolean;
    endpoint: any;
    requestHeaders: any;
}
export interface DynamicTableColumnOption {
    id: string;
    name: string;
}
export interface DynamicTableRow {
    isNew: boolean;
    selected: boolean;
    value: any;
}
