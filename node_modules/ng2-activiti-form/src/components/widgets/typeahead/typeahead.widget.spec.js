/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var typeahead_widget_1 = require("./typeahead.widget");
var form_service_1 = require("../../../services/form.service");
var form_model_1 = require("../core/form.model");
var form_field_model_1 = require("../core/form-field.model");
var ecm_model_service_1 = require("../../../services/ecm-model.service");
var widget_visibility_service_1 = require("../../../services/widget-visibility.service");
var form_field_types_1 = require("../core/form-field-types");
describe('TypeaheadWidget', function () {
    var formService;
    var widget;
    var visibilityService;
    var logService;
    beforeEach(function () {
        logService = new ng2_alfresco_core_1.LogServiceMock();
        formService = new form_service_1.FormService(null, null, logService);
        visibilityService = new widget_visibility_service_1.WidgetVisibilityService(null, logService);
        widget = new typeahead_widget_1.TypeaheadWidget(formService, visibilityService, logService);
        widget.field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel({ taskId: 'task-id' }));
    });
    it('should request field values from service', function () {
        var taskId = '<form-id>';
        var fieldId = '<field-id>';
        var form = new form_model_1.FormModel({
            taskId: taskId
        });
        widget.field = new form_field_model_1.FormFieldModel(form, {
            id: fieldId
        });
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(null);
            observer.complete();
        }));
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalledWith(taskId, fieldId);
    });
    it('should handle error when requesting fields with task id', function () {
        var taskId = '<form-id>';
        var fieldId = '<field-id>';
        var form = new form_model_1.FormModel({
            taskId: taskId
        });
        widget.field = new form_field_model_1.FormFieldModel(form, {
            id: fieldId
        });
        var err = 'Error';
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.throw(err));
        spyOn(widget, 'handleError').and.stub();
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalled();
        expect(widget.handleError).toHaveBeenCalledWith(err);
    });
    it('should handle error when requesting fields with process id', function () {
        var processDefinitionId = '<process-id>';
        var fieldId = '<field-id>';
        var form = new form_model_1.FormModel({
            processDefinitionId: processDefinitionId
        });
        widget.field = new form_field_model_1.FormFieldModel(form, {
            id: fieldId
        });
        var err = 'Error';
        spyOn(formService, 'getRestFieldValuesByProcessId').and.returnValue(Rx_1.Observable.throw(err));
        spyOn(widget, 'handleError').and.stub();
        widget.ngOnInit();
        expect(formService.getRestFieldValuesByProcessId).toHaveBeenCalled();
        expect(widget.handleError).toHaveBeenCalledWith(err);
    });
    it('should show popup on key up', function () {
        spyOn(widget, 'getOptions').and.returnValue([{}, {}]);
        widget.minTermLength = 1;
        widget.value = 'some value';
        widget.popupVisible = false;
        widget.onKeyUp(null);
        expect(widget.popupVisible).toBeTruthy();
    });
    it('should require items to show popup', function () {
        widget.minTermLength = 1;
        widget.value = 'some value';
        widget.popupVisible = false;
        widget.onKeyUp(null);
        expect(widget.popupVisible).toBeFalsy();
    });
    it('should require value to show popup', function () {
        widget.minTermLength = 1;
        widget.value = '';
        widget.popupVisible = false;
        widget.onKeyUp(null);
        expect(widget.popupVisible).toBeFalsy();
    });
    it('should require value to be of min length to show popup', function () {
        spyOn(widget, 'getOptions').and.returnValue([{}, {}]);
        widget.minTermLength = 3;
        widget.value = 'v';
        widget.popupVisible = false;
        widget.onKeyUp(null);
        expect(widget.popupVisible).toBeFalsy();
        widget.value = 'value';
        widget.onKeyUp(null);
        expect(widget.popupVisible).toBeTruthy();
        widget.value = 'va';
        widget.onKeyUp(null);
        expect(widget.popupVisible).toBeFalsy();
    });
    it('should flush value on blur', function (done) {
        spyOn(widget, 'flushValue').and.stub();
        widget.onBlur();
        setTimeout(function () {
            expect(widget.flushValue).toHaveBeenCalled();
            done();
        }, 200);
    });
    it('should prevent default behaviour on option item click', function () {
        var event = jasmine.createSpyObj('event', ['preventDefault']);
        widget.onItemClick(null, event);
        expect(event.preventDefault).toHaveBeenCalled();
    });
    it('should update values on option item click', function () {
        var option = {
            id: '1',
            name: 'name'
        };
        spyOn(visibilityService, 'refreshVisibility').and.stub();
        widget.onItemClick(option, null);
        expect(widget.field.value).toBe(option.id);
        expect(widget.value).toBe(option.name);
    });
    it('should setup initial value', function () {
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next([
                { id: '1', name: 'One' },
                { id: '2', name: 'Two' }
            ]);
            observer.complete();
        }));
        widget.field.value = '2';
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalled();
        expect(widget.value).toBe('Two');
    });
    it('should not setup initial value due to missing option', function () {
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next([
                { id: '1', name: 'One' },
                { id: '2', name: 'Two' }
            ]);
            observer.complete();
        }));
        widget.field.value = '3';
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalled();
        expect(widget.value).toBeUndefined();
    });
    it('should setup field options on load', function () {
        var options = [
            { id: '1', name: 'One' },
            { id: '2', name: 'Two' }
        ];
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(options);
            observer.complete();
        }));
        widget.ngOnInit();
        expect(widget.field.options).toEqual(options);
    });
    it('should update form upon options setup', function () {
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next([]);
            observer.complete();
        }));
        spyOn(widget.field, 'updateForm').and.callThrough();
        widget.ngOnInit();
        expect(widget.field.updateForm).toHaveBeenCalled();
    });
    it('should get filtered options', function () {
        var options = [
            { id: '1', name: 'Item one' },
            { id: '2', name: 'Item two' }
        ];
        widget.field.options = options;
        widget.value = 'tw';
        var filtered = widget.getOptions();
        expect(filtered.length).toBe(1);
        expect(filtered[0]).toEqual(options[1]);
    });
    it('should be case insensitive when filtering options', function () {
        var options = [
            { id: '1', name: 'Item one' },
            { id: '2', name: 'iTEM TWo' }
        ];
        widget.field.options = options;
        widget.value = 'tW';
        var filtered = widget.getOptions();
        expect(filtered.length).toBe(1);
        expect(filtered[0]).toEqual(options[1]);
    });
    it('should hide popup on flush', function () {
        widget.popupVisible = true;
        widget.flushValue();
        expect(widget.popupVisible).toBeFalsy();
    });
    it('should update form on value flush', function () {
        spyOn(widget.field, 'updateForm').and.callThrough();
        widget.flushValue();
        expect(widget.field.updateForm).toHaveBeenCalled();
    });
    it('should flush selected value', function () {
        var options = [
            { id: '1', name: 'Item one' },
            { id: '2', name: 'Item Two' }
        ];
        widget.field.options = options;
        widget.value = 'Item Two';
        widget.flushValue();
        expect(widget.value).toBe(options[1].name);
        expect(widget.field.value).toBe(options[1].id);
    });
    it('should be case insensitive when flushing value', function () {
        var options = [
            { id: '1', name: 'Item one' },
            { id: '2', name: 'iTEM TWo' }
        ];
        widget.field.options = options;
        widget.value = 'ITEM TWO';
        widget.flushValue();
        expect(widget.value).toBe(options[1].name);
        expect(widget.field.value).toBe(options[1].id);
    });
    it('should reset fields when flushing missing option value', function () {
        widget.field.options = [
            { id: '1', name: 'Item one' },
            { id: '2', name: 'Item two' }
        ];
        widget.value = 'Missing item';
        widget.flushValue();
        expect(widget.value).toBeNull();
        expect(widget.field.value).toBeNull();
    });
    it('should reset fields when flushing incorrect value', function () {
        widget.field.options = [
            { id: '1', name: 'Item one' },
            { id: '2', name: 'Item two' }
        ];
        widget.field.value = 'Item two';
        widget.value = 'Item two!';
        widget.flushValue();
        expect(widget.value).toBeNull();
        expect(widget.field.value).toBeNull();
    });
    it('should reset fields when flushing value having no options', function () {
        widget.field.options = null;
        widget.field.value = 'item 1';
        widget.value = 'new item';
        widget.flushValue();
        expect(widget.value).toBeNull();
        expect(widget.field.value).toBeNull();
    });
    it('should emit field change event on item click', function () {
        var event = jasmine.createSpyObj('event', ['preventDefault']);
        var fakeField = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), { id: 'fakeField', value: 'fakeValue' });
        widget.field = fakeField;
        var item = { id: 'fake-id-opt', name: 'fake-name-opt' };
        widget.onItemClick(item, event);
        widget.fieldChanged.subscribe(function (field) {
            expect(field).toBeDefined();
            expect(field.id).toEqual('fakeField');
            expect(field.value).toEqual('fake-id-opt');
        });
    });
    it('should emit field change event on blur', function (done) {
        spyOn(widget, 'flushValue').and.stub();
        var fakeField = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), { id: 'fakeField', value: 'fakeValue' });
        widget.field = fakeField;
        widget.onBlur();
        setTimeout(function () {
            widget.fieldChanged.subscribe(function (field) {
                expect(field).toBeDefined();
                expect(field.id).toEqual('field-id');
                expect(field.value).toEqual('field-value');
            });
            done();
        }, 200);
    });
    describe('when template is ready', function () {
        var typeaheadWidget;
        var fixture;
        var element;
        var componentHandler;
        var stubFormService;
        var fakeOptionList = [{
                id: '1',
                name: 'Fake Name 1 '
            }, {
                id: '2',
                name: 'Fake Name 2'
            }, { id: '3', name: 'Fake Name 3' }];
        beforeEach(testing_1.async(function () {
            componentHandler = jasmine.createSpyObj('componentHandler', ['upgradeAllRegistered', 'upgradeElement']);
            window['componentHandler'] = componentHandler;
            testing_1.TestBed.configureTestingModule({
                imports: [ng2_alfresco_core_1.CoreModule],
                declarations: [typeahead_widget_1.TypeaheadWidget],
                providers: [form_service_1.FormService, ecm_model_service_1.EcmModelService, widget_visibility_service_1.WidgetVisibilityService]
            }).compileComponents().then(function () {
                fixture = testing_1.TestBed.createComponent(typeahead_widget_1.TypeaheadWidget);
                typeaheadWidget = fixture.componentInstance;
                element = fixture.nativeElement;
            });
        }));
        afterEach(function () {
            fixture.destroy();
            testing_1.TestBed.resetTestingModule();
        });
        describe('and typeahead is populated via taskId', function () {
            beforeEach(testing_1.async(function () {
                stubFormService = fixture.debugElement.injector.get(form_service_1.FormService);
                visibilityService = fixture.debugElement.injector.get(widget_visibility_service_1.WidgetVisibilityService);
                spyOn(visibilityService, 'refreshVisibility').and.stub();
                spyOn(stubFormService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.of(fakeOptionList));
                typeaheadWidget.field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel({ taskId: 'fake-task-id' }), {
                    id: 'typeahead-id',
                    name: 'typeahead-name',
                    type: form_field_types_1.FormFieldTypes.TYPEAHEAD,
                    readOnly: false
                });
                typeaheadWidget.field.isVisible = true;
                fixture.detectChanges();
            }));
            it('should show visible typeahead widget', testing_1.async(function () {
                expect(element.querySelector('#typeahead-id')).toBeDefined();
                expect(element.querySelector('#typeahead-id')).not.toBeNull();
            }));
            it('should show typeahead options', testing_1.async(function () {
                typeaheadWidget.value = 'F';
                typeaheadWidget.onKeyUp(null);
                fixture.detectChanges();
                fixture.whenStable().then(function () {
                    expect(element.querySelector('#typeahead-id-1')).toBeDefined();
                    expect(element.querySelector('#typeahead-id-1')).not.toBeNull();
                    expect(element.querySelector('#typeahead-id-2')).toBeDefined();
                    expect(element.querySelector('#typeahead-id-2')).not.toBeNull();
                    expect(element.querySelector('#typeahead-id-3')).toBeDefined();
                    expect(element.querySelector('#typeahead-id-3')).not.toBeNull();
                });
            }));
            it('should hide not visibile typeahead', testing_1.async(function () {
                typeaheadWidget.field.isVisible = false;
                fixture.detectChanges();
                fixture.whenStable().then(function () {
                    expect(element.querySelector('#typeahead-id')).toBeNull();
                });
            }));
        });
        describe('and typeahead is populated via processDefinitionId', function () {
            beforeEach(testing_1.async(function () {
                stubFormService = fixture.debugElement.injector.get(form_service_1.FormService);
                visibilityService = fixture.debugElement.injector.get(widget_visibility_service_1.WidgetVisibilityService);
                spyOn(visibilityService, 'refreshVisibility').and.stub();
                spyOn(stubFormService, 'getRestFieldValuesByProcessId').and.returnValue(Rx_1.Observable.of(fakeOptionList));
                typeaheadWidget.field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel({ processDefinitionId: 'fake-process-id' }), {
                    id: 'typeahead-id',
                    name: 'typeahead-name',
                    type: form_field_types_1.FormFieldTypes.TYPEAHEAD,
                    readOnly: 'false'
                });
                typeaheadWidget.field.emptyOption = { id: 'empty', name: 'Choose one...' };
                typeaheadWidget.field.isVisible = true;
                fixture.detectChanges();
            }));
            it('should show visible typeahead widget', testing_1.async(function () {
                expect(element.querySelector('#typeahead-id')).toBeDefined();
                expect(element.querySelector('#typeahead-id')).not.toBeNull();
            }));
            it('should show typeahead options', testing_1.async(function () {
                typeaheadWidget.value = 'F';
                typeaheadWidget.onKeyUp(null);
                fixture.detectChanges();
                fixture.whenStable().then(function () {
                    expect(element.querySelector('#typeahead-id-1')).toBeDefined();
                    expect(element.querySelector('#typeahead-id-1')).not.toBeNull();
                    expect(element.querySelector('#typeahead-id-2')).toBeDefined();
                    expect(element.querySelector('#typeahead-id-2')).not.toBeNull();
                    expect(element.querySelector('#typeahead-id-3')).toBeDefined();
                    expect(element.querySelector('#typeahead-id-3')).not.toBeNull();
                });
            }));
        });
    });
});
//# sourceMappingURL=typeahead.widget.spec.js.map