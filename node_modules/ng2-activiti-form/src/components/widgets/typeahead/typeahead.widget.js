/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var form_service_1 = require("./../../../services/form.service");
var widget_component_1 = require("./../widget.component");
var widget_visibility_service_1 = require("../../../services/widget-visibility.service");
var TypeaheadWidget = (function (_super) {
    __extends(TypeaheadWidget, _super);
    function TypeaheadWidget(formService, visibilityService, logService) {
        var _this = _super.call(this) || this;
        _this.formService = formService;
        _this.visibilityService = visibilityService;
        _this.logService = logService;
        _this.popupVisible = false;
        _this.minTermLength = 1;
        _this.options = [];
        return _this;
    }
    TypeaheadWidget.prototype.ngOnInit = function () {
        if (this.field.form.taskId) {
            this.getValuesByTaskId();
        }
        else {
            this.getValuesByProcessDefinitionId();
        }
    };
    TypeaheadWidget.prototype.getValuesByTaskId = function () {
        var _this = this;
        this.formService
            .getRestFieldValues(this.field.form.taskId, this.field.id)
            .subscribe(function (result) {
            var options = result || [];
            _this.field.options = options;
            var fieldValue = _this.field.value;
            if (fieldValue) {
                var toSelect = options.find(function (item) { return item.id === fieldValue; });
                if (toSelect) {
                    _this.value = toSelect.name;
                }
            }
            _this.field.updateForm();
            _this.visibilityService.refreshEntityVisibility(_this.field);
        }, function (err) { return _this.handleError(err); });
    };
    TypeaheadWidget.prototype.getValuesByProcessDefinitionId = function () {
        var _this = this;
        this.formService
            .getRestFieldValuesByProcessId(this.field.form.processDefinitionId, this.field.id)
            .subscribe(function (result) {
            var options = result || [];
            _this.field.options = options;
            var fieldValue = _this.field.value;
            if (fieldValue) {
                var toSelect = options.find(function (item) { return item.id === fieldValue; });
                if (toSelect) {
                    _this.value = toSelect.name;
                }
            }
            _this.field.updateForm();
            _this.visibilityService.refreshEntityVisibility(_this.field);
        }, function (err) { return _this.handleError(err); });
    };
    TypeaheadWidget.prototype.getOptions = function () {
        var val = this.value.toLocaleLowerCase();
        return this.field.options.filter(function (item) {
            var name = item.name.toLocaleLowerCase();
            return name.indexOf(val) > -1;
        });
    };
    TypeaheadWidget.prototype.onKeyUp = function (event) {
        if (this.value && this.value.length >= this.minTermLength) {
            this.options = this.getOptions();
            this.popupVisible = this.options.length > 0;
        }
        else {
            this.popupVisible = false;
        }
    };
    TypeaheadWidget.prototype.onBlur = function () {
        var _this = this;
        setTimeout(function () {
            _this.flushValue();
            _this.checkVisibility();
        }, 200);
    };
    TypeaheadWidget.prototype.flushValue = function () {
        this.popupVisible = false;
        var options = this.field.options || [];
        var lValue = this.value ? this.value.toLocaleLowerCase() : null;
        var field = options.find(function (item) { return item.name && item.name.toLocaleLowerCase() === lValue; });
        if (field) {
            this.field.value = field.id;
            this.value = field.name;
        }
        else {
            this.field.value = null;
            this.value = null;
        }
        this.field.updateForm();
    };
    TypeaheadWidget.prototype.onItemClick = function (item, event) {
        if (item) {
            this.field.value = item.id;
            this.value = item.name;
            this.checkVisibility();
        }
        if (event) {
            event.preventDefault();
        }
    };
    TypeaheadWidget.prototype.handleError = function (error) {
        this.logService.error(error);
    };
    TypeaheadWidget.prototype.checkVisibility = function () {
        this.visibilityService.refreshVisibility(this.field.form);
    };
    return TypeaheadWidget;
}(widget_component_1.WidgetComponent));
TypeaheadWidget = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'typeahead-widget',
        template: "<div class=\"mdl-textfield mdl-js-textfield typeahead-widget\"      [class.is-dirty]=\"value\"      [class.typeahead-widget__invalid]=\"!field.isValid\" id=\"typehead-div\" *ngIf=\"field.isVisible\">     <label [attr.for]=\"field.id\">{{field.name}}</label>     <input class=\"mdl-textfield__input\"            type=\"text\"            [attr.id]=\"field.id\"            [(ngModel)]=\"value\"            (keyup)=\"onKeyUp($event)\"            (blur)=\"onBlur()\"            [disabled]=\"field.readOnly\"            placeholder=\"{{field.placeholder}}\">     <span *ngIf=\"field.validationSummary\" class=\"mdl-textfield__error\">{{field.validationSummary}}</span> </div> <div class=\"typeahead-autocomplete mdl-shadow--2dp\" *ngIf=\"options.length > 0 && popupVisible\">     <ul>         <li *ngFor=\"let item of options\"             [attr.id]=\"field.id +'-'+item.id\"             class=\"mdl-menu__item\"             (click)=\"onItemClick(item, $event)\">             {{item.name}}         </li>     </ul> </div>",
        styles: [".typeahead-widget {     width: 100%; }  .typeahead-autocomplete {     background-color: #fff;     position: relative;     max-height: 200px;     overflow-y: auto;     z-index: 5;     color: #555;     margin: -15px 0 0 0; }  .typeahead-autocomplete > ul {     list-style-type: none;     position: static;      height: auto;     width: auto;     min-width: 124px;     padding: 8px 0;     margin: 0;      box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);     border-radius: 2px; }  .typeahead-autocomplete > ul > li {     opacity: 1; }    .typeahead-widget__invalid .mdl-textfield__input {     border-color: #d50000; }  .typeahead-widget__invalid .mdl-textfield__label {     color: #d50000; }  .typeahead-widget__invalid .mdl-textfield__label:after {     background-color: #d50000; }  .typeahead-widget__invalid .mdl-textfield__error {     visibility: visible !important; }"]
    }),
    __metadata("design:paramtypes", [form_service_1.FormService,
        widget_visibility_service_1.WidgetVisibilityService,
        ng2_alfresco_core_1.LogService])
], TypeaheadWidget);
exports.TypeaheadWidget = TypeaheadWidget;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
