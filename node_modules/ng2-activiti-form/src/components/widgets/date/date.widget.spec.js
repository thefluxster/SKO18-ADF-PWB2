/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var date_widget_1 = require("./date.widget");
var form_field_model_1 = require("./../core/form-field.model");
var form_model_1 = require("./../core/form.model");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var testing_1 = require("@angular/core/testing");
var moment = require("moment");
describe('DateWidget', function () {
    var widget;
    var nativeElement;
    var elementRef;
    beforeEach(function () {
        nativeElement = {
            querySelector: function () {
                return null;
            }
        };
        elementRef = new core_1.ElementRef(nativeElement);
        widget = new date_widget_1.DateWidget(elementRef);
        var componentHandler = jasmine.createSpyObj('componentHandler', ['upgradeAllRegistered', 'upgradeElement']);
        window['componentHandler'] = componentHandler;
    });
    it('should setup basic date picker settings on init ', function () {
        expect(widget.datePicker).toBeUndefined();
        widget.ngOnInit();
        expect(widget.datePicker).toBeDefined();
    });
    it('should setup min value for date picker', function () {
        var minValue = '13-03-1982';
        widget.field = new form_field_model_1.FormFieldModel(null, {
            minValue: minValue
        });
        widget.ngOnInit();
        var expected = moment(minValue, widget.DATE_FORMAT);
        expect(widget.datePicker._past.isSame(expected)).toBeTruthy();
    });
    it('should setup max value for date picker', function () {
        var maxValue = '31-03-1982';
        widget.field = new form_field_model_1.FormFieldModel(null, {
            maxValue: maxValue
        });
        widget.ngOnInit();
        var expected = moment(maxValue, widget.DATE_FORMAT);
        expect(widget.datePicker._future.isSame(expected)).toBeTruthy();
    });
    it('should setup default time value for date picker', function () {
        var dateValue = '13-03-1982';
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: 'date',
            value: '1982-03-13'
        });
        widget.ngOnInit();
        var expected = moment(dateValue, widget.DATE_FORMAT);
        expect(widget.datePicker.time.isSame(expected)).toBeTruthy();
    });
    it('should setup trigger element', function () {
        var el = {};
        spyOn(nativeElement, 'querySelector').and.returnValue(el);
        widget.field = new form_field_model_1.FormFieldModel(null, { id: 'fake-id' });
        widget.ngOnInit();
        widget.ngAfterViewChecked();
        expect(widget.datePicker.trigger).toBe(el);
    });
    it('should not setup trigger element', function () {
        var w = new date_widget_1.DateWidget(null);
        w.ngOnInit();
        expect(w.datePicker.trigger).toBeFalsy();
    });
    it('should eval visibility on date changed', function () {
        spyOn(widget, 'checkVisibility').and.callThrough();
        var field = new form_field_model_1.FormFieldModel(null);
        widget.field = field;
        widget.onDateChanged();
        expect(widget.checkVisibility).toHaveBeenCalledWith(field);
    });
    it('should update picker value on input date changed', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: 'date',
            value: '13-03-1982'
        });
        widget.ngOnInit();
        widget.field.value = '31-03-1982';
        widget.onDateChanged();
        var expected = moment('31-03-1982', widget.DATE_FORMAT);
        expect(widget.datePicker.time.isSame(expected)).toBeTruthy();
    });
    it('should update field value on date selected', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, { type: 'date' });
        widget.ngOnInit();
        var date = '13-3-1982';
        widget.datePicker.time = moment(date, widget.DATE_FORMAT);
        widget.onDateSelected();
        expect(widget.field.value).toBe(date);
    });
    it('should update material textfield on date selected', function () {
        spyOn(widget, 'setupMaterialTextField').and.callThrough();
        widget.field = new form_field_model_1.FormFieldModel(null, { type: 'date' });
        widget.ngOnInit();
        widget.datePicker.time = moment();
        widget.onDateSelected();
        expect(widget.setupMaterialTextField).toHaveBeenCalled();
    });
    it('should not update material textfield on date selected', function () {
        var w = new date_widget_1.DateWidget(null);
        spyOn(w, 'setupMaterialTextField').and.callThrough();
        w.field = new form_field_model_1.FormFieldModel(null, { type: 'date' });
        w.ngOnInit();
        w.datePicker.time = moment();
        w.onDateSelected();
        expect(w.setupMaterialTextField).not.toHaveBeenCalled();
    });
    it('should send field change event when a new date is picked from data picker', function (done) {
        var w = new date_widget_1.DateWidget(null);
        spyOn(w, 'setupMaterialTextField').and.callThrough();
        w.field = new form_field_model_1.FormFieldModel(null, { value: '9-9-9999', type: 'date' });
        w.ngOnInit();
        w.datePicker.time = moment('9-9-9999', w.DATE_FORMAT);
        w.fieldChanged.subscribe(function (field) {
            expect(field).toBeDefined();
            expect(field).not.toBeNull();
            expect(field.value).toEqual('9-9-9999');
            done();
        });
        w.onDateSelected();
    });
    it('should send field change event when date is changed in input text', function (done) {
        var w = new date_widget_1.DateWidget(null);
        spyOn(w, 'setupMaterialTextField').and.callThrough();
        w.field = new form_field_model_1.FormFieldModel(null, { value: '9-9-9999', type: 'date' });
        w.ngOnInit();
        w.datePicker.time = moment('9-9-9999', w.DATE_FORMAT);
        w.fieldChanged.subscribe(function (field) {
            expect(field).toBeDefined();
            expect(field).not.toBeNull();
            expect(field.value).toEqual('9-9-9999');
            done();
        });
        w.onDateChanged();
    });
    describe('template check', function () {
        var dateWidget;
        var fixture;
        var element;
        var componentHandler;
        beforeEach(testing_1.async(function () {
            componentHandler = jasmine.createSpyObj('componentHandler', ['upgradeAllRegistered', 'upgradeElement']);
            window['componentHandler'] = componentHandler;
            testing_1.TestBed.configureTestingModule({
                imports: [ng2_alfresco_core_1.CoreModule],
                declarations: [date_widget_1.DateWidget]
            }).compileComponents().then(function () {
                fixture = testing_1.TestBed.createComponent(date_widget_1.DateWidget);
                dateWidget = fixture.componentInstance;
                element = fixture.nativeElement;
            });
        }));
        beforeEach(function () {
            spyOn(dateWidget, 'setupMaterialTextField').and.stub();
            dateWidget.field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                id: 'date-field-id',
                name: 'date-name',
                value: '9-9-9999',
                type: 'date',
                readOnly: 'false'
            });
            dateWidget.field.isVisible = true;
            fixture.detectChanges();
        });
        afterEach(function () {
            fixture.destroy();
            testing_1.TestBed.resetTestingModule();
        });
        it('should show visible date widget', testing_1.async(function () {
            fixture.whenStable()
                .then(function () {
                expect(element.querySelector('#date-field-id')).toBeDefined();
                expect(element.querySelector('#date-field-id')).not.toBeNull();
                var dateElement = element.querySelector('#date-field-id');
                expect(dateElement.value).toEqual('9-9-9999');
            });
        }));
        it('should hide not visible date widget', testing_1.async(function () {
            dateWidget.field.isVisible = false;
            fixture.detectChanges();
            fixture.whenStable()
                .then(function () {
                fixture.detectChanges();
                expect(element.querySelector('#data-widget')).toBeNull();
            });
        }));
        it('should become visibile if the visibility change to true', testing_1.async(function () {
            dateWidget.field.isVisible = false;
            fixture.detectChanges();
            dateWidget.fieldChanged.subscribe(function (field) {
                field.isVisible = true;
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    expect(element.querySelector('#date-field-id')).toBeDefined();
                    expect(element.querySelector('#date-field-id')).not.toBeNull();
                    var dateElement = element.querySelector('#date-field-id');
                    expect(dateElement.value).toEqual('9-9-9999');
                });
            });
            dateWidget.checkVisibility(dateWidget.field);
        }));
        it('should be hided if the visibility change to false', testing_1.async(function () {
            dateWidget.fieldChanged.subscribe(function (field) {
                field.isVisible = false;
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    expect(element.querySelector('#data-widget')).toBeNull();
                });
            });
            dateWidget.checkVisibility(dateWidget.field);
        }));
    });
});
//# sourceMappingURL=date.widget.spec.js.map