/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var widget_component_1 = require("./../widget.component");
var moment = require("moment");
var DateWidget = (function (_super) {
    __extends(DateWidget, _super);
    function DateWidget(elementRef) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.DATE_FORMAT = 'D-M-YYYY';
        return _this;
    }
    DateWidget.prototype.ngOnInit = function () {
        var settings = {
            type: 'date',
            past: moment().subtract(100, 'years'),
            future: moment().add(100, 'years')
        };
        if (this.field) {
            if (this.field.minValue) {
                settings.past = moment(this.field.minValue, this.DATE_FORMAT);
            }
            if (this.field.maxValue) {
                settings.future = moment(this.field.maxValue, this.DATE_FORMAT);
            }
            if (this.field.value) {
                settings.init = moment(this.field.value, this.DATE_FORMAT);
            }
        }
        this.datePicker = new mdDateTimePicker.default(settings);
    };
    DateWidget.prototype.ngAfterViewChecked = function () {
        if (this.elementRef) {
            var dataLocator = '#' + this.field.id;
            this.datePicker.trigger = this.elementRef.nativeElement.querySelector(dataLocator);
        }
    };
    DateWidget.prototype.onDateChanged = function () {
        if (this.field.value) {
            var value = moment(this.field.value, this.DATE_FORMAT);
            if (!value.isValid()) {
                value = moment();
            }
            this.datePicker.time = value;
        }
        this.checkVisibility(this.field);
    };
    DateWidget.prototype.onDateSelected = function () {
        var newValue = this.datePicker.time.format(this.DATE_FORMAT);
        this.field.value = newValue;
        this.checkVisibility(this.field);
        if (this.elementRef) {
            this.setupMaterialTextField(this.elementRef, componentHandler, newValue);
        }
    };
    return DateWidget;
}(widget_component_1.WidgetComponent));
DateWidget = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'date-widget',
        template: "<div class=\"mdl-grid mdl-grid__date-widget\" *ngIf=\"field?.isVisible\" id=\"data-widget\">     <div class=\"mdl-cell mdl-cell--11-col\">         <div class=\"mdl-textfield mdl-js-textfield date-widget\"              [class.date-widget__invalid]=\"!field.isValid\">             <label [attr.for]=\"field.id\">{{field.name}}</label>             <input class=\"mdl-textfield__input mdl-date__input\"                    type=\"text\"                    [attr.id]=\"field.id\"                    [attr.required]=\"isRequired()\"                    [(ngModel)]=\"field.value\"                    (ngModelChange)=\"onDateChanged()\"                    (onOk)=\"onDateSelected()\"                    [disabled]=\"field.readOnly\"                    placeholder=\"{{field.placeholder}}\">             <span *ngIf=\"field.validationSummary\" class=\"mdl-textfield__error\">{{field.validationSummary}}</span>         </div>     </div>     <div class=\"mdl-cell mdl-cell--1-col\">         <button             class=\"mdl-button mdl-js-button mdl-button--icon\"             (click)=\"datePicker.toggle()\">             <i class=\"material-icons\">date_range</i>         </button>     </div> </div>",
        styles: [".date-widget {     width: 100%;     padding-top: 10px;     padding-bottom: 10px; }  .date-widget--button {     margin-top: 10px; }  .mdl-date__input{     padding-top: 5px;     padding-bottom: 5px; }  .mdl-grid__date-widget{     align-items:center;     padding: 0px; }  .date-widget__invalid .mdl-textfield__input {     border-color: #d50000; }  .date-widget__invalid .mdl-textfield__label {     color: #d50000; }  .date-widget__invalid .mdl-textfield__label:after {     background-color: #d50000; }  .date-widget__invalid .mdl-textfield__error {     visibility: visible !important; }  .date-widget-button__cell{     margin-top: 0px;     margin-bottom: 0px; }"]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], DateWidget);
exports.DateWidget = DateWidget;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
