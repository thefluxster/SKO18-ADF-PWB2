/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var moment = require("moment");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var widget_component_1 = require("./../widget.component");
var form_field_types_1 = require("../core/form-field-types");
var form_service_1 = require("../../../services/form.service");
var widget_visibility_service_1 = require("../../../services/widget-visibility.service");
var DisplayValueWidget = (function (_super) {
    __extends(DisplayValueWidget, _super);
    function DisplayValueWidget(formService, visibilityService, logService) {
        var _this = _super.call(this) || this;
        _this.formService = formService;
        _this.visibilityService = visibilityService;
        _this.logService = logService;
        _this.rows = [];
        _this.columns = [];
        _this.visibleColumns = [];
        _this.hasFile = false;
        return _this;
    }
    DisplayValueWidget.prototype.ngOnInit = function () {
        if (this.field) {
            this.value = this.field.value;
            this.visibilityService.refreshEntityVisibility(this.field);
            if (this.field.params) {
                var originalField = this.field.params['field'];
                if (originalField && originalField.type) {
                    this.fieldType = originalField.type;
                    switch (originalField.type) {
                        case form_field_types_1.FormFieldTypes.BOOLEAN:
                            this.value = this.field.value === 'true' ? true : false;
                            break;
                        case form_field_types_1.FormFieldTypes.FUNCTIONAL_GROUP:
                            if (this.field.value) {
                                this.value = this.field.value.name;
                            }
                            else {
                                this.value = null;
                            }
                            break;
                        case form_field_types_1.FormFieldTypes.PEOPLE:
                            var model = this.field.value;
                            if (model) {
                                var displayName = model.firstName + " " + model.lastName;
                                this.value = displayName.trim();
                            }
                            break;
                        case form_field_types_1.FormFieldTypes.UPLOAD:
                            var files = this.field.value || [];
                            if (files.length > 0) {
                                this.value = decodeURI(files[0].name);
                                this.id = files[0].id;
                                this.hasFile = true;
                            }
                            else {
                                this.value = null;
                                this.hasFile = false;
                            }
                            break;
                        case form_field_types_1.FormFieldTypes.TYPEAHEAD:
                            this.loadRestFieldValue();
                            break;
                        case form_field_types_1.FormFieldTypes.DROPDOWN:
                            if (this.field.restUrl) {
                                this.loadRestFieldValue();
                            }
                            else {
                                this.value = this.field.value;
                            }
                            break;
                        case form_field_types_1.FormFieldTypes.RADIO_BUTTONS:
                            if (this.field.restUrl) {
                                this.loadRestFieldValue();
                            }
                            else {
                                this.loadRadioButtonValue();
                            }
                            break;
                        case form_field_types_1.FormFieldTypes.DATE:
                            if (this.value) {
                                var d = moment(this.value.split('T')[0], 'YYYY-M-D');
                                if (d.isValid()) {
                                    this.value = d.format('D-M-YYYY');
                                }
                            }
                            break;
                        case form_field_types_1.FormFieldTypes.AMOUNT:
                            if (this.value) {
                                var currency = this.field.currency || '$';
                                this.value = currency + " " + this.field.value;
                            }
                            break;
                        case form_field_types_1.FormFieldTypes.HYPERLINK:
                            this.linkUrl = this.getHyperlinkUrl(this.field);
                            this.linkText = this.getHyperlinkText(this.field);
                            break;
                        case form_field_types_1.FormFieldTypes.DYNAMIC_TABLE:
                            var json = this.field.json;
                            if (json.columnDefinitions) {
                                this.columns = json.columnDefinitions.map(function (obj) { return obj; });
                                this.visibleColumns = this.columns.filter(function (col) { return col.visible; });
                            }
                            if (json.value) {
                                this.rows = json.value.map(function (obj) { return ({ selected: false, value: obj }); });
                            }
                            break;
                        default:
                            this.value = this.field.value;
                            break;
                    }
                }
            }
            this.visibilityService.refreshVisibility(this.field.form);
        }
    };
    DisplayValueWidget.prototype.loadRadioButtonValue = function () {
        var _this = this;
        var options = this.field.options || [];
        var toSelect = options.find(function (item) { return item.id === _this.field.value; });
        if (toSelect) {
            this.value = toSelect.name;
        }
        else {
            this.value = this.field.value;
        }
    };
    DisplayValueWidget.prototype.loadRestFieldValue = function () {
        if (this.field.form.taskId) {
            this.getValuesByTaskId();
        }
        else {
            this.getValuesByProcessDefinitionId();
        }
    };
    DisplayValueWidget.prototype.getValuesByProcessDefinitionId = function () {
        var _this = this;
        this.formService
            .getRestFieldValuesByProcessId(this.field.form.processDefinitionId, this.field.id)
            .subscribe(function (result) {
            var options = result || [];
            var toSelect = options.find(function (item) { return item.id === _this.field.value; });
            _this.field.options = options;
            if (toSelect) {
                _this.value = toSelect.name;
            }
            else {
                _this.value = _this.field.value;
            }
            _this.visibilityService.refreshVisibility(_this.field.form);
        }, function (error) {
            _this.logService.error(error);
            _this.value = _this.field.value;
        });
    };
    DisplayValueWidget.prototype.getValuesByTaskId = function () {
        var _this = this;
        this.formService
            .getRestFieldValues(this.field.form.taskId, this.field.id)
            .subscribe(function (result) {
            var options = result || [];
            var toSelect = options.find(function (item) { return item.id === _this.field.value; });
            _this.field.options = options;
            if (toSelect) {
                _this.value = toSelect.name;
            }
            else {
                _this.value = _this.field.value;
            }
            _this.visibilityService.refreshVisibility(_this.field.form);
        }, function (error) {
            _this.logService.error(error);
            _this.value = _this.field.value;
        });
    };
    DisplayValueWidget.prototype.getCellValue = function (row, column) {
        var result = row.value[column.id];
        if (column.type === 'Dropdown') {
            if (result) {
                return result.name;
            }
        }
        if (column.type === 'Boolean') {
            return result ? true : false;
        }
        if (column.type === 'Date') {
            if (result) {
                return moment(result.split('T')[0], 'YYYY-MM-DD').format('D-M-YYYY');
            }
        }
        if (column.type === 'Amount') {
            return (column.amountCurrency || '$') + ' ' + (result || 0);
        }
        return result || '';
    };
    return DisplayValueWidget;
}(widget_component_1.WidgetComponent));
DisplayValueWidget = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'display-value-widget',
        template: "<div [ngSwitch]=\"fieldType\" class=\"display-value-widget\" *ngIf=\"field?.isVisible\">     <div *ngSwitchCase=\"'boolean'\">         <label class=\"mdl-checkbox mdl-js-checkbox\" [attr.for]=\"field.id\" >             <input type=\"checkbox\"                    [attr.id]=\"field.id\"                    [checked]=\"field.value\"                    [(ngModel)]=\"value\"                    class=\"mdl-checkbox__input\"                    disabled>             <span class=\"mdl-checkbox__label\">{{field.name}}</span>         </label>     </div>     <div *ngSwitchCase=\"'text'\"          class=\"mdl-textfield mdl-js-textfield text-widget\">         <label [attr.for]=\"field.id\">{{field.name}}</label>         <input             class=\"mdl-textfield__input\"             type=\"text\"             [attr.id]=\"field.id\"             [value]=\"value\"             disabled>     </div>     <div *ngSwitchCase=\"'multi-line-text'\"          class=\"mdl-textfield mdl-js-textfield multiline-text-widget\">         <textarea class=\"mdl-textfield__input\"                   type=\"text\"                   rows=\"3\"                   [value]=\"value\"                   [attr.id]=\"field.id\"                   disabled>         </textarea>         <label class=\"mdl-textfield__label\" [attr.for]=\"field.id\">{{field.name}}</label>     </div>     <div *ngSwitchCase=\"'hyperlink'\" class=\"hyperlink-widget\">         <div>             <div>                 <span>{{field.name}}</span>             </div>             <div>                 <a [href]=\"linkUrl\" target=\"_blank\" rel=\"nofollow\">{{linkText}}</a>             </div>         </div>     </div>     <div *ngSwitchCase=\"'dynamic-table'\">          <div class=\"display-value-widget__dynamic-table\">             <div>{{field.name}}</div>             <div class=\"display-value-dynamic-table-widget__table-container\">                 <table class=\"mdl-data-table mdl-js-data-table\">                     <thead>                     <tr>                         <th *ngFor=\"let column of visibleColumns\"                             class=\"mdl-data-table__cell--non-numeric is-disabled\">                             {{column.name}}                         </th>                     </tr>                     </thead>                     <tbody>                     <tr *ngFor=\"let row of rows\">                         <td *ngFor=\"let column of visibleColumns\"                             class=\"mdl-data-table__cell--non-numeric is-disabled\">                             {{ getCellValue(row, column) }}                         </td>                     </tr>                     </tbody>                 </table>             </div>         </div>     </div>     <div *ngSwitchCase=\"'upload'\">         <div class=\"upload-widget\">             <div>                 <label class=\"upload-widget__label\" [attr.for]=\"field.id\">{{field.name}}</label>             </div>             <div>                 <img *ngIf=\"hasFile\" class=\"img-upload-widget\" src=\"{{settingsService.bpmHost}}/activiti-app/app/rest/content/{{id}}/raw\">             </div>             <div>                 <i *ngIf=\"hasFile\" class=\"material-icons upload-widget__icon\">attachment</i>                 <span *ngIf=\"hasFile\" class=\"upload-widget__file\">{{value}}</span>             </div>         </div>     </div>     <div *ngSwitchDefault          class=\"mdl-textfield mdl-js-textfield text-widget is-disabled is-dirty is-upgraded\">         <label [attr.for]=\"field.id\">{{field.name}}</label>         <input             class=\"mdl-textfield__input\"             type=\"text\"             [attr.id]=\"field.id\"             [value]=\"value\"             disabled>     </div> </div>",
        styles: [".display-value-widget {     width: 100%; }  .display-value-widget__dynamic-table {     padding: 8px; }  .display-value-widget__dynamic-table .is-disabled {     background-color: transparent;     border-bottom: 1px dotted rgba(0, 0, 0, .12);     color: rgba(0, 0, 0, .26); }  .display-value-widget__dynamic-table table {     width: 100%; }  .display-value-dynamic-table-widget__table-container {     overflow-y: auto;     width: 100%; }   .upload-widget {     width: 100%;     word-break: break-all; }  .upload-widget__icon {     float: left;     color: rgba(0, 0, 0, .26); }  .upload-widget__file {     float: left;     margin-top: 4px;     color: rgba(0, 0, 0, .26); }  .upload-widget__label {     color: rgba(0, 0, 0, .26); }  .img-upload-widget {     width: 100px;     height: 100px;     padding: 2px;     border: 1px solid rgba(117, 117, 117, 0.57);     box-shadow: 1px 1px 2px #dddddd;     background-color: #ffffff; }"]
    }),
    __metadata("design:paramtypes", [form_service_1.FormService,
        widget_visibility_service_1.WidgetVisibilityService,
        ng2_alfresco_core_1.LogService])
], DisplayValueWidget);
exports.DisplayValueWidget = DisplayValueWidget;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
