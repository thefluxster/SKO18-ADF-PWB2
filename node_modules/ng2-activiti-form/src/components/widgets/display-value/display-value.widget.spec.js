/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var Rx_1 = require("rxjs/Rx");
var display_value_widget_1 = require("./display-value.widget");
var form_service_1 = require("../../../services/form.service");
var ecm_model_service_1 = require("../../../services/ecm-model.service");
var form_field_model_1 = require("./../core/form-field.model");
var form_field_types_1 = require("../core/form-field-types");
var form_model_1 = require("../core/form.model");
var widget_visibility_service_1 = require("../../../services/widget-visibility.service");
describe('DisplayValueWidget', function () {
    var widget;
    var formService;
    var visibilityService;
    var logService;
    beforeEach(function () {
        logService = new ng2_alfresco_core_1.LogServiceMock();
        formService = new form_service_1.FormService(null, null, logService);
        visibilityService = new widget_visibility_service_1.WidgetVisibilityService(null, logService);
        widget = new display_value_widget_1.DisplayValueWidget(formService, visibilityService, logService);
    });
    it('should require field to setup default value', function () {
        widget.field = null;
        widget.ngOnInit();
        expect(widget.value).toBeUndefined();
    });
    it('should take field value on init', function () {
        var value = '<value>';
        widget.field = new form_field_model_1.FormFieldModel(null, { value: value });
        widget.field.params = null;
        widget.ngOnInit();
        expect(widget.value).toBe(value);
    });
    it('should setup [BOOLEAN] field', function () {
        expect(widget.value).toBeUndefined();
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: 'true',
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.BOOLEAN
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBeTruthy();
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: 'false',
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.BOOLEAN
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBeFalsy();
    });
    it('should setup [FUNCTIONAL-GROUP] field', function () {
        var groupName;
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: {
                name: groupName
            },
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.FUNCTIONAL_GROUP
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBe(groupName);
    });
    it('should not setup [FUNCTIONAL-GROUP] field when missing value', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.FUNCTIONAL_GROUP
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBeNull();
    });
    it('should setup [PEOPLE] field', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: {
                firstName: 'John',
                lastName: 'Doe'
            },
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.PEOPLE
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBe('John Doe');
    });
    it('should not setup [PEOPLE] field whem missing value', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.PEOPLE
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBeUndefined();
    });
    it('should setup [UPLOAD] field', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: [
                { name: 'file1' }
            ],
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.UPLOAD
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBe('file1');
    });
    it('should not setup [UPLOAD] field when missing value', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            value: null,
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.UPLOAD
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBeNull();
    });
    it('should not setup [UPLOAD] field when empty value', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            value: [],
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.UPLOAD
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBeNull();
    });
    it('should setup [TYPEAHEAD] field', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.TYPEAHEAD
                }
            }
        });
        spyOn(widget, 'loadRestFieldValue').and.stub();
        widget.ngOnInit();
        expect(widget.loadRestFieldValue).toHaveBeenCalled();
    });
    it('should setup [DROPDOWN] field with REST config', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            restUrl: 'http://test.com',
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.DROPDOWN
                }
            }
        });
        spyOn(widget, 'loadRestFieldValue').and.stub();
        widget.ngOnInit();
        expect(widget.loadRestFieldValue).toHaveBeenCalled();
    });
    it('should setup [RADIO_BUTTONS] field', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            restUrl: null,
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS
                }
            }
        });
        spyOn(widget, 'loadRadioButtonValue').and.stub();
        widget.ngOnInit();
        expect(widget.loadRadioButtonValue).toHaveBeenCalled();
    });
    it('should setup [RADIO_BUTTONS] value by options', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            restUrl: null,
            value: '2',
            options: [
                { id: '1', name: 'option 1' },
                { id: '2', name: 'option 2' }
            ],
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBe('option 2');
    });
    it('should not setup [RADIO_BUTTONS] value with missing option', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            restUrl: null,
            value: '100',
            options: [
                { id: '1', name: 'option 1' },
                { id: '2', name: 'option 2' }
            ],
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBe('100');
    });
    it('should not setup [RADIO_BUTTONS] when missing options', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            restUrl: null,
            value: '100',
            options: null,
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS
                }
            }
        });
        widget.field.options = null;
        widget.ngOnInit();
        expect(widget.value).toBe('100');
    });
    it('should setup [RADIO_BUTTONS] field with REST config', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            restUrl: '<url>',
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS
                }
            }
        });
        spyOn(widget, 'loadRestFieldValue').and.stub();
        widget.ngOnInit();
        expect(widget.loadRestFieldValue).toHaveBeenCalled();
    });
    it('should setup rest field values with REST options', function () {
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next([
                { id: '1', name: 'option 1' },
                { id: '2', name: 'option 2' }
            ]);
            observer.complete();
        }));
        var form = new form_model_1.FormModel({ taskId: '<id>' });
        widget.field = new form_field_model_1.FormFieldModel(form, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            restUrl: '<url>',
            value: '2',
            options: [
                { id: '1', name: 'option 1' },
                { id: '2', name: 'option 2' }
            ],
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS
                }
            }
        });
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalled();
        expect(widget.value).toBe('option 2');
    });
    it('should not setup rest field values with missing REST option', function () {
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next([
                { id: '1', name: 'option 1' },
                { id: '2', name: 'option 2' }
            ]);
            observer.complete();
        }));
        var form = new form_model_1.FormModel({ taskId: '<id>' });
        widget.field = new form_field_model_1.FormFieldModel(form, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            restUrl: '<url>',
            value: '100',
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS
                }
            }
        });
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalled();
        expect(widget.value).toBe('100');
    });
    it('should not setup rest field values with no REST response', function () {
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(null);
            observer.complete();
        }));
        var form = new form_model_1.FormModel({ taskId: '<id>' });
        widget.field = new form_field_model_1.FormFieldModel(form, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            restUrl: '<url>',
            value: '100',
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS
                }
            }
        });
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalled();
        expect(widget.value).toBe('100');
    });
    it('should handle rest error', function () {
        var error = 'ERROR';
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.throw(error));
        spyOn(logService, 'error').and.stub();
        var form = new form_model_1.FormModel({ taskId: '<id>' });
        widget.field = new form_field_model_1.FormFieldModel(form, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            restUrl: '<url>',
            value: '100',
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS
                }
            }
        });
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalled();
        expect(logService.error).toHaveBeenCalledWith(error);
        expect(widget.value).toBe('100');
    });
    it('should setup [DATE] field with valid date', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: '1982-03-13T00:00:00.000Z',
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.DATE
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBe('13-3-1982');
    });
    it('should setup [DATE] field with invalid date', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: '<invalid value>',
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.DATE
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBe('<invalid value>');
    });
    it('should not setup [DATE] field when missing value', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.DATE
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBeUndefined();
    });
    it('should setup [AMOUNT] field with default currency', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: 11,
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.AMOUNT
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBe('$ 11');
    });
    it('should setup [AMOUNT] field with custom currency', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: 12.6,
            currency: 'UAH',
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.AMOUNT
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBe('UAH 12.6');
    });
    it('should not setup [AMOUNT] field when missing value', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.AMOUNT
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBeUndefined();
    });
    it('should setup [HYPERLINK] field', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            hyperlinkUrl: 'www.some-url.com',
            displayText: 'Custom URL',
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.HYPERLINK
                }
            }
        });
        widget.ngOnInit();
        expect(widget.linkUrl).toBe("http://" + widget.field.hyperlinkUrl);
        expect(widget.linkText).toBe(widget.field.displayText);
    });
    it('should take default value for unknown field type', function () {
        var value = '<value>';
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: value,
            params: {
                field: {
                    type: '<unknown type>'
                }
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBe(value);
    });
    it('should take default value when missing params', function () {
        var value = '<value>';
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: value
        });
        widget.ngOnInit();
        expect(widget.value).toBe(value);
    });
    it('should take default value when missing enclosed field type', function () {
        var value = '<value>';
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            value: value,
            params: {
                field: {}
            }
        });
        widget.ngOnInit();
        expect(widget.value).toBe(value);
    });
    it('should setup [DYNAMIC_TABLE] field', function () {
        var columns = [{ id: '1', visible: false }, { id: '2', visible: true }];
        var rows = [{}, {}];
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.DYNAMIC_TABLE
                }
            },
            columnDefinitions: columns,
            value: rows
        });
        widget.ngOnInit();
        expect(widget.columns.length).toBe(2);
        expect(widget.columns[0].id).toBe(columns[0].id);
        expect(widget.columns[1].id).toBe(columns[1].id);
        expect(widget.visibleColumns.length).toBe(1);
        expect(widget.visibleColumns[0].id).toBe(columns[1].id);
        expect(widget.rows.length).toBe(2);
    });
    it('should setup [DYNAMIC_TABLE] field with empty schema', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
            params: {
                field: {
                    type: form_field_types_1.FormFieldTypes.DYNAMIC_TABLE
                }
            },
            columnDefinitions: null,
            value: null
        });
        widget.ngOnInit();
        expect(widget.value).toBeNull();
        expect(widget.columns).toEqual([]);
        expect(widget.rows).toEqual([]);
    });
    it('should retrieve default cell value', function () {
        var value = '<value>';
        var row = { value: { key: value } };
        var column = { id: 'key' };
        expect(widget.getCellValue(row, column)).toBe(value);
    });
    it('should retrieve dropdown cell value', function () {
        var value = { id: '1', name: 'one' };
        var row = { value: { key: value } };
        var column = { id: 'key', type: 'Dropdown' };
        expect(widget.getCellValue(row, column)).toBe(value.name);
    });
    it('should fallback to empty cell value for dropdown', function () {
        var row = { value: {} };
        var column = { id: 'key', type: 'Dropdown' };
        expect(widget.getCellValue(row, column)).toBe('');
    });
    it('should retrieve boolean cell value', function () {
        var row1 = { value: { key: true } };
        var row2 = { value: { key: 'positive' } };
        var row3 = { value: { key: null } };
        var column = { id: 'key', type: 'Boolean' };
        expect(widget.getCellValue(row1, column)).toBe(true);
        expect(widget.getCellValue(row2, column)).toBe(true);
        expect(widget.getCellValue(row3, column)).toBe(false);
    });
    it('should retrieve date cell value', function () {
        var value = '2016-10-04T00:00:00.000Z';
        var row = { value: { key: value } };
        var column = { id: 'key', type: 'Date' };
        expect(widget.getCellValue(row, column)).toBe('4-10-2016');
    });
    it('should fallback to empty cell value for date', function () {
        var row = { value: {} };
        var column = { id: 'key', type: 'Date' };
        expect(widget.getCellValue(row, column)).toBe('');
    });
    it('should retrieve empty text cell value', function () {
        var row = { value: {} };
        var column = { id: 'key' };
        expect(widget.getCellValue(row, column)).toBe('');
    });
    it('should prepend default amount currency', function () {
        var value = '10';
        var row = { value: { key: value } };
        var column = { id: 'key', type: 'Amount' };
        var expected = "$ " + value;
        expect(widget.getCellValue(row, column)).toBe(expected);
    });
    it('should prepend custom amount currency', function () {
        var value = '10';
        var currency = 'GBP';
        var row = { value: { key: value } };
        var column = { id: 'key', type: 'Amount', amountCurrency: currency };
        var expected = currency + " " + value;
        expect(widget.getCellValue(row, column)).toBe(expected);
    });
    it('should use zero for missing amount', function () {
        var value = null;
        var currency = 'GBP';
        var row = { value: { key: value } };
        var column = { id: 'key', type: 'Amount', amountCurrency: currency };
        var expected = currency + " 0";
        expect(widget.getCellValue(row, column)).toBe(expected);
    });
    describe('UI check', function () {
        var widgetUI;
        var fixture;
        var element;
        var componentHandler;
        beforeEach(testing_1.async(function () {
            componentHandler = jasmine.createSpyObj('componentHandler', ['upgradeAllRegistered', 'upgradeElement']);
            window['componentHandler'] = componentHandler;
            testing_1.TestBed.configureTestingModule({
                imports: [ng2_alfresco_core_1.CoreModule],
                declarations: [display_value_widget_1.DisplayValueWidget],
                providers: [
                    ecm_model_service_1.EcmModelService,
                    form_service_1.FormService,
                    widget_visibility_service_1.WidgetVisibilityService
                ]
            }).compileComponents().then(function () {
                fixture = testing_1.TestBed.createComponent(display_value_widget_1.DisplayValueWidget);
                widgetUI = fixture.componentInstance;
                element = fixture.nativeElement;
            });
        }));
        beforeEach(function () {
            spyOn(widgetUI, 'setupMaterialTextField').and.stub();
        });
        afterEach(function () {
            fixture.destroy();
            testing_1.TestBed.resetTestingModule();
        });
        it('should show the checkbox on when [BOOLEAN] field is true', testing_1.async(function () {
            widgetUI.field = new form_field_model_1.FormFieldModel(null, {
                id: 'fake-checkbox-id',
                type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
                value: 'true',
                params: {
                    field: {
                        type: form_field_types_1.FormFieldTypes.BOOLEAN
                    }
                }
            });
            fixture.detectChanges();
            fixture.whenStable()
                .then(function () {
                var elWidget = element.querySelector('#fake-checkbox-id');
                expect(elWidget).toBeDefined();
                expect(elWidget.checked).toBeTruthy();
            });
        }));
        it('should show the checkbox off when [BOOLEAN] field is false', testing_1.async(function () {
            widgetUI.field = new form_field_model_1.FormFieldModel(null, {
                id: 'fake-checkbox-id',
                type: form_field_types_1.FormFieldTypes.DISPLAY_VALUE,
                value: 'false',
                params: {
                    field: {
                        type: form_field_types_1.FormFieldTypes.BOOLEAN
                    }
                }
            });
            fixture.detectChanges();
            fixture.whenStable()
                .then(function () {
                var elWidget = element.querySelector('#fake-checkbox-id');
                expect(elWidget).toBeDefined();
                expect(elWidget.checked).toBeFalsy();
            });
        }));
    });
});
//# sourceMappingURL=display-value.widget.spec.js.map