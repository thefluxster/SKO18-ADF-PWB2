/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var form_model_1 = require("../core/form.model");
var form_field_model_1 = require("../core/form-field.model");
var widget_visibility_service_mock_1 = require("../../../services/assets/widget-visibility.service.mock");
var tabs_widget_1 = require("./tabs.widget");
var tab_model_1 = require("../core/tab.model");
var index_1 = require("../index");
var form_field_component_1 = require("./../../form-field/form-field.component");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
describe('TabsWidget', function () {
    var componentHandler;
    var widget;
    beforeEach(function () {
        widget = new tabs_widget_1.TabsWidget();
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should check tabs', function () {
        widget.tabs = null;
        expect(widget.hasTabs()).toBeFalsy();
        widget.tabs = [];
        expect(widget.hasTabs()).toBeFalsy();
        widget.tabs = [new tab_model_1.TabModel(null)];
        expect(widget.hasTabs()).toBeTruthy();
    });
    it('should upgrade MDL content on view init', function () {
        widget.ngAfterViewInit();
        expect(componentHandler.upgradeAllRegistered).toHaveBeenCalled();
    });
    it('should setup MDL content only if component handler available', function () {
        expect(widget.setupMaterialComponents()).toBeTruthy();
        window['componentHandler'] = null;
        expect(widget.setupMaterialComponents()).toBeFalsy();
    });
    it('should emit tab changed event', function (done) {
        var field = new form_field_model_1.FormFieldModel(null);
        widget.formTabChanged.subscribe(function (tab) {
            expect(tab).toBe(field);
            done();
        });
        widget.tabChanged(field);
    });
    it('should remove invisible tabs', function () {
        var fakeTab = new tab_model_1.TabModel(null, { id: 'fake-tab-id', title: 'fake-tab-title' });
        fakeTab.isVisible = false;
        widget.tabs.push(fakeTab);
        widget.ngAfterContentChecked();
        expect(widget.visibleTabs.length).toBe(0);
    });
    it('should leave visible tabs', function () {
        var fakeTab = new tab_model_1.TabModel(null, { id: 'fake-tab-id', title: 'fake-tab-title' });
        fakeTab.isVisible = true;
        widget.tabs.push(fakeTab);
        widget.ngAfterContentChecked();
        expect(widget.visibleTabs.length).toBe(1);
        expect(widget.visibleTabs[0].id).toBe('fake-tab-id');
        expect(widget.visibleTabs[0].title).toBe('fake-tab-title');
        expect(widget.visibleTabs[0].isVisible).toBeTruthy();
    });
    describe('when template is ready', function () {
        var tabWidgetComponent;
        var fixture;
        var element;
        var fakeTabVisible;
        var fakeTabInvisible;
        beforeEach(testing_1.async(function () {
            testing_1.TestBed.configureTestingModule({
                imports: [ng2_alfresco_core_1.CoreModule],
                declarations: [form_field_component_1.FormFieldComponent, index_1.WIDGET_DIRECTIVES]
            }).compileComponents().then(function () {
                fixture = testing_1.TestBed.createComponent(tabs_widget_1.TabsWidget);
                tabWidgetComponent = fixture.componentInstance;
                element = fixture.nativeElement;
            });
        }));
        beforeEach(function () {
            componentHandler = jasmine.createSpyObj('componentHandler', ['upgradeAllRegistered', 'upgradeElement', 'downgradeElements']);
            window['componentHandler'] = componentHandler;
            fakeTabVisible = new tab_model_1.TabModel(new form_model_1.FormModel(widget_visibility_service_mock_1.fakeFormJson), {
                id: 'tab-id-visible',
                title: 'tab-title-visible'
            });
            fakeTabVisible.isVisible = true;
            fakeTabInvisible = new tab_model_1.TabModel(new form_model_1.FormModel(widget_visibility_service_mock_1.fakeFormJson), {
                id: 'tab-id-invisible',
                title: 'tab-title-invisible'
            });
            fakeTabInvisible.isVisible = false;
            tabWidgetComponent.tabs.push(fakeTabVisible);
            tabWidgetComponent.tabs.push(fakeTabInvisible);
        });
        afterEach(function () {
            fixture.destroy();
            testing_1.TestBed.resetTestingModule();
        });
        it('should show only visible tabs', function () {
            fixture.detectChanges();
            fixture.whenStable()
                .then(function () {
                expect(element.querySelector('#tab-id-visible')).toBeDefined();
                expect(element.querySelector('#tab-id-visible')).not.toBeNull();
                expect(element.querySelector('#tab-id-invisible')).toBeNull();
                expect(element.querySelector('#title-tab-id-visible')).toBeDefined();
                expect(element.querySelector('#title-tab-id-visible').innerHTML).toContain('tab-title-visible');
            });
        });
        it('should show tab when it became visible', testing_1.async(function () {
            fixture.detectChanges();
            tabWidgetComponent.formTabChanged.subscribe(function (res) {
                tabWidgetComponent.tabs[1].isVisible = true;
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    expect(element.querySelector('#tab-id-invisible')).not.toBeNull();
                    expect(element.querySelector('#title-tab-id-invisible').innerHTML).toContain('tab-title-invisible');
                });
            });
            tabWidgetComponent.tabChanged(null);
        }));
        it('should hide tab when it became not visible', testing_1.async(function () {
            fixture.detectChanges();
            tabWidgetComponent.formTabChanged.subscribe(function (res) {
                tabWidgetComponent.tabs[0].isVisible = false;
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    expect(element.querySelector('#tab-id-visible')).toBeNull();
                    expect(element.querySelector('#title-tab-id-visible')).toBeNull();
                });
            });
            tabWidgetComponent.tabChanged(null);
        }));
    });
});
//# sourceMappingURL=tabs.widget.spec.js.map