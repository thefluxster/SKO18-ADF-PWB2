/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var TabsWidget = (function () {
    function TabsWidget() {
        this.tabs = [];
        this.formTabChanged = new core_1.EventEmitter();
        this.visibleTabs = [];
    }
    TabsWidget.prototype.hasTabs = function () {
        return this.tabs && this.tabs.length > 0;
    };
    TabsWidget.prototype.ngAfterContentChecked = function () {
        this.filterVisibleTabs();
    };
    TabsWidget.prototype.ngAfterViewInit = function () {
        this.setupMaterialComponents();
    };
    TabsWidget.prototype.filterVisibleTabs = function () {
        this.visibleTabs = this.tabs.filter(function (tab) {
            return tab.isVisible;
        });
    };
    TabsWidget.prototype.setupMaterialComponents = function () {
        if (componentHandler) {
            componentHandler.upgradeAllRegistered();
            return true;
        }
        return false;
    };
    TabsWidget.prototype.tabChanged = function (field) {
        this.formTabChanged.emit(field);
    };
    return TabsWidget;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], TabsWidget.prototype, "tabs", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TabsWidget.prototype, "formTabChanged", void 0);
TabsWidget = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'tabs-widget',
        template: "<div *ngIf=\"hasTabs()\" class=\"alfresco-tabs-widget\">     <div alfresco-mdl-tabs>         <div class=\"mdl-tabs__tab-bar\">             <a *ngFor=\"let tab of visibleTabs; let isFirst = first\"                id=\"title-{{tab.id}}\"                [href]=\"'#' + tab.id\"                class=\"mdl-tabs__tab\" [class.is-active]=\"isFirst\">                 {{tab.title}}             </a>         </div>         <div *ngFor=\"let tab of visibleTabs; let isFirst = first\"              class=\"mdl-tabs__panel\"              [class.is-active]=\"isFirst\"              [attr.id]=\"tab.id\">              <div *ngFor=\"let field of tab.fields\">                 <form-field [field]=\"field.field\"></form-field>              </div>         </div>     </div> </div>"
    })
], TabsWidget);
exports.TabsWidget = TabsWidget;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy90YWJzL3RhYnMud2lkZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7Ozs7Ozs7Ozs7QUFFSCxzQ0FBMkc7QUFVM0csSUFBYSxVQUFVO0lBTHZCO1FBUUksU0FBSSxHQUFlLEVBQUUsQ0FBQztRQUd0QixtQkFBYyxHQUFpQyxJQUFJLG1CQUFZLEVBQWtCLENBQUM7UUFFbEYsZ0JBQVcsR0FBZSxFQUFFLENBQUM7SUFpQ2pDLENBQUM7SUEvQkcsNEJBQU8sR0FBUDtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsMENBQXFCLEdBQXJCO1FBQ0ksSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELG9DQUFlLEdBQWY7UUFDSSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRUQsc0NBQWlCLEdBQWpCO1FBQ0ksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLEdBQUc7WUFDbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsNENBQXVCLEdBQXZCO1FBRUksRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQ25CLGdCQUFnQixDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsK0JBQVUsR0FBVixVQUFXLEtBQXFCO1FBQzVCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTCxpQkFBQztBQUFELENBekNBLEFBeUNDLElBQUE7QUF0Q0c7SUFEQyxZQUFLLEVBQUU7O3dDQUNjO0FBR3RCO0lBREMsYUFBTSxFQUFFOzhCQUNPLG1CQUFZO2tEQUFzRDtBQU56RSxVQUFVO0lBTHRCLGdCQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbkIsUUFBUSxFQUFFLGFBQWE7UUFDdkIsUUFBUSxFQUFFLDh2QkFBOHZCO0tBQzN3QixDQUFDO0dBQ1csVUFBVSxDQXlDdEI7QUF6Q1ksZ0NBQVUiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL3RhYnMvdGFicy53aWRnZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRDaGVja2VkLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGFiTW9kZWwsIEZvcm1GaWVsZE1vZGVsIH0gZnJvbSAnLi8uLi9jb3JlL2luZGV4JztcblxuZGVjbGFyZSB2YXIgY29tcG9uZW50SGFuZGxlcjogYW55O1xuXG5AQ29tcG9uZW50KHtcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHNlbGVjdG9yOiAndGFicy13aWRnZXQnLFxuICAgIHRlbXBsYXRlOiBcIjxkaXYgKm5nSWY9XFxcImhhc1RhYnMoKVxcXCIgY2xhc3M9XFxcImFsZnJlc2NvLXRhYnMtd2lkZ2V0XFxcIj4gICAgIDxkaXYgYWxmcmVzY28tbWRsLXRhYnM+ICAgICAgICAgPGRpdiBjbGFzcz1cXFwibWRsLXRhYnNfX3RhYi1iYXJcXFwiPiAgICAgICAgICAgICA8YSAqbmdGb3I9XFxcImxldCB0YWIgb2YgdmlzaWJsZVRhYnM7IGxldCBpc0ZpcnN0ID0gZmlyc3RcXFwiICAgICAgICAgICAgICAgIGlkPVxcXCJ0aXRsZS17e3RhYi5pZH19XFxcIiAgICAgICAgICAgICAgICBbaHJlZl09XFxcIicjJyArIHRhYi5pZFxcXCIgICAgICAgICAgICAgICAgY2xhc3M9XFxcIm1kbC10YWJzX190YWJcXFwiIFtjbGFzcy5pcy1hY3RpdmVdPVxcXCJpc0ZpcnN0XFxcIj4gICAgICAgICAgICAgICAgIHt7dGFiLnRpdGxlfX0gICAgICAgICAgICAgPC9hPiAgICAgICAgIDwvZGl2PiAgICAgICAgIDxkaXYgKm5nRm9yPVxcXCJsZXQgdGFiIG9mIHZpc2libGVUYWJzOyBsZXQgaXNGaXJzdCA9IGZpcnN0XFxcIiAgICAgICAgICAgICAgY2xhc3M9XFxcIm1kbC10YWJzX19wYW5lbFxcXCIgICAgICAgICAgICAgIFtjbGFzcy5pcy1hY3RpdmVdPVxcXCJpc0ZpcnN0XFxcIiAgICAgICAgICAgICAgW2F0dHIuaWRdPVxcXCJ0YWIuaWRcXFwiPiAgICAgICAgICAgICAgPGRpdiAqbmdGb3I9XFxcImxldCBmaWVsZCBvZiB0YWIuZmllbGRzXFxcIj4gICAgICAgICAgICAgICAgIDxmb3JtLWZpZWxkIFtmaWVsZF09XFxcImZpZWxkLmZpZWxkXFxcIj48L2Zvcm0tZmllbGQ+ICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICA8L2Rpdj4gICAgIDwvZGl2PiA8L2Rpdj5cIlxufSlcbmV4cG9ydCBjbGFzcyBUYWJzV2lkZ2V0IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICBASW5wdXQoKVxuICAgIHRhYnM6IFRhYk1vZGVsW10gPSBbXTtcblxuICAgIEBPdXRwdXQoKVxuICAgIGZvcm1UYWJDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8Rm9ybUZpZWxkTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxGb3JtRmllbGRNb2RlbD4oKTtcblxuICAgIHZpc2libGVUYWJzOiBUYWJNb2RlbFtdID0gW107XG5cbiAgICBoYXNUYWJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJzICYmIHRoaXMudGFicy5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJWaXNpYmxlVGFicygpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5zZXR1cE1hdGVyaWFsQ29tcG9uZW50cygpO1xuICAgIH1cblxuICAgIGZpbHRlclZpc2libGVUYWJzKCkge1xuICAgICAgICB0aGlzLnZpc2libGVUYWJzID0gdGhpcy50YWJzLmZpbHRlcih0YWIgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRhYi5pc1Zpc2libGU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldHVwTWF0ZXJpYWxDb21wb25lbnRzKCk6IGJvb2xlYW4ge1xuICAgICAgICAvLyB3b3JrYXJvdW5kIGZvciBNREwgaXNzdWVzIHdpdGggZHluYW1pYyBjb21wb25lbnRzXG4gICAgICAgIGlmIChjb21wb25lbnRIYW5kbGVyKSB7XG4gICAgICAgICAgICBjb21wb25lbnRIYW5kbGVyLnVwZ3JhZGVBbGxSZWdpc3RlcmVkKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGFiQ2hhbmdlZChmaWVsZDogRm9ybUZpZWxkTW9kZWwpIHtcbiAgICAgICAgdGhpcy5mb3JtVGFiQ2hhbmdlZC5lbWl0KGZpZWxkKTtcbiAgICB9XG5cbn1cbiJdfQ==
