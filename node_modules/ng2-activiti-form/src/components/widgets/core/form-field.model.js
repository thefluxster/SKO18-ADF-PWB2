/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var form_widget_model_1 = require("./form-widget.model");
var form_field_types_1 = require("./form-field-types");
var container_column_model_1 = require("./container-column.model");
var form_field_validator_1 = require("./form-field-validator");
var moment = require("moment");
var FormFieldModel = (function (_super) {
    __extends(FormFieldModel, _super);
    function FormFieldModel(form, json) {
        var _this = _super.call(this, form, json) || this;
        _this._readOnly = false;
        _this._isValid = true;
        _this.colspan = 1;
        _this.placeholder = null;
        _this.minLength = 0;
        _this.maxLength = 0;
        _this.options = [];
        _this.params = {};
        _this.isVisible = true;
        _this.visibilityCondition = null;
        _this.enableFractions = false;
        _this.currency = null;
        _this.numberOfColumns = 1;
        _this.fields = [];
        _this.columns = [];
        _this.validators = [];
        if (json) {
            _this.fieldType = json.fieldType;
            _this.id = json.id;
            _this.name = json.name;
            _this.type = json.type;
            _this.required = json.required;
            _this._readOnly = json.readOnly;
            _this.overrideId = json.overrideId;
            _this.tab = json.tab;
            _this.restUrl = json.restUrl;
            _this.restResponsePath = json.restResponsePath;
            _this.restIdProperty = json.restIdProperty;
            _this.restLabelProperty = json.restLabelProperty;
            _this.colspan = json.colspan;
            _this.minLength = json.minLength || 0;
            _this.maxLength = json.maxLength || 0;
            _this.minValue = json.minValue;
            _this.maxValue = json.maxValue;
            _this.regexPattern = json.regexPattern;
            _this.options = json.options || [];
            _this.hasEmptyValue = json.hasEmptyValue;
            _this.className = json.className;
            _this.optionType = json.optionType;
            _this.params = json.params || {};
            _this.hyperlinkUrl = json.hyperlinkUrl;
            _this.displayText = json.displayText;
            _this.visibilityCondition = json.visibilityCondition;
            _this.enableFractions = json.enableFractions;
            _this.currency = json.currency;
            _this._value = _this.parseValue(json);
            if (json.placeholder && json.placeholder !== '' && json.placeholder !== 'null') {
                _this.placeholder = json.placeholder;
            }
            _this.numberOfColumns = json.numberOfColumns;
            var columnSize = 12;
            if (_this.numberOfColumns > 1) {
                columnSize = 12 / _this.numberOfColumns;
            }
            for (var i = 0; i < _this.numberOfColumns; i++) {
                var col = new container_column_model_1.ContainerColumnModel();
                col.size = columnSize;
                _this.columns.push(col);
            }
            if (json.fields) {
                Object.keys(json.fields).map(function (key) {
                    var fields = (json.fields[key] || []).map(function (f) { return new FormFieldModel(form, f); });
                    var col = _this.columns[parseInt(key, 10) - 1];
                    col.fields = fields;
                    (_a = _this.fields).push.apply(_a, fields);
                    var _a;
                });
            }
        }
        if (_this.hasEmptyValue && _this.options && _this.options.length > 0) {
            _this.emptyOption = _this.options[0];
        }
        _this.validators = [
            new form_field_validator_1.RequiredFieldValidator(),
            new form_field_validator_1.NumberFieldValidator(),
            new form_field_validator_1.MinLengthFieldValidator(),
            new form_field_validator_1.MaxLengthFieldValidator(),
            new form_field_validator_1.MinValueFieldValidator(),
            new form_field_validator_1.MaxValueFieldValidator(),
            new form_field_validator_1.RegExFieldValidator(),
            new form_field_validator_1.DateFieldValidator(),
            new form_field_validator_1.MinDateFieldValidator(),
            new form_field_validator_1.MaxDateFieldValidator()
        ];
        _this.updateForm();
        return _this;
    }
    Object.defineProperty(FormFieldModel.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (v) {
            this._value = v;
            this.validate();
            this.updateForm();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormFieldModel.prototype, "readOnly", {
        get: function () {
            if (this.form && this.form.readOnly) {
                return true;
            }
            return this._readOnly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormFieldModel.prototype, "isValid", {
        get: function () {
            return this._isValid;
        },
        enumerable: true,
        configurable: true
    });
    FormFieldModel.prototype.validate = function () {
        this.validationSummary = null;
        if (this.validators && this.validators.length > 0) {
            for (var i = 0; i < this.validators.length; i++) {
                if (!this.validators[i].validate(this)) {
                    this._isValid = false;
                    return this._isValid;
                }
            }
        }
        this._isValid = true;
        return this._isValid;
    };
    FormFieldModel.prototype.parseValue = function (json) {
        var value = json.value;
        if (json.type === form_field_types_1.FormFieldTypes.DROPDOWN) {
            if (json.hasEmptyValue && json.options) {
                var options = json.options || [];
                if (options.length > 0) {
                    var emptyOption = json.options[0];
                    if (value === '' || value === emptyOption.id || value === emptyOption.name) {
                        value = emptyOption.id;
                    }
                }
            }
        }
        if (json.type === form_field_types_1.FormFieldTypes.RADIO_BUTTONS) {
            var entry = this.options.filter(function (opt) { return opt.id === value || opt.name === value; });
            if (entry.length > 0) {
                value = entry[0].id;
            }
        }
        if (json.type === form_field_types_1.FormFieldTypes.DATE) {
            if (value) {
                var d = moment(value.split('T')[0], 'YYYY-M-D');
                if (d.isValid()) {
                    value = d.format('D-M-YYYY');
                }
            }
        }
        return value;
    };
    FormFieldModel.prototype.updateForm = function () {
        var _this = this;
        if (!this.form) {
            return;
        }
        switch (this.type) {
            case form_field_types_1.FormFieldTypes.DROPDOWN:
                if (this.value === 'empty' || this.value === '') {
                    this.form.values[this.id] = {};
                }
                else {
                    var entry = this.options.filter(function (opt) { return opt.id === _this.value; });
                    if (entry.length > 0) {
                        this.form.values[this.id] = entry[0];
                    }
                }
                break;
            case form_field_types_1.FormFieldTypes.RADIO_BUTTONS:
                var rbEntry = this.options.filter(function (opt) { return opt.id === _this.value; });
                if (rbEntry.length > 0) {
                    this.form.values[this.id] = rbEntry[0];
                }
                else if (this.options.length > 0) {
                    this.form.values[this.id] = this.options[0];
                }
                break;
            case form_field_types_1.FormFieldTypes.UPLOAD:
                if (this.value && this.value.length > 0) {
                    this.form.values[this.id] = "" + this.value[0].id;
                }
                else {
                    this.form.values[this.id] = null;
                }
                break;
            case form_field_types_1.FormFieldTypes.TYPEAHEAD:
                var taEntry = this.options.filter(function (opt) { return opt.id === _this.value; });
                if (taEntry.length > 0) {
                    this.form.values[this.id] = taEntry[0];
                }
                else if (this.options.length > 0) {
                    this.form.values[this.id] = null;
                }
                break;
            case form_field_types_1.FormFieldTypes.DATE:
                var d = moment(this.value, 'D-M-YYYY');
                if (d.isValid()) {
                    this.form.values[this.id] = d.format('YYYY-MM-DD') + "T00:00:00.000Z";
                }
                else {
                    this.form.values[this.id] = null;
                }
                break;
            case form_field_types_1.FormFieldTypes.NUMBER:
                this.form.values[this.id] = parseInt(this.value, 10);
                break;
            case form_field_types_1.FormFieldTypes.AMOUNT:
                this.form.values[this.id] = this.enableFractions ? parseFloat(this.value) : parseInt(this.value, 10);
                break;
            default:
                if (!form_field_types_1.FormFieldTypes.isReadOnlyType(this.type) && !this.isInvalidFieldType(this.type)) {
                    this.form.values[this.id] = this.value;
                }
        }
        this.form.onFormFieldChanged(this);
    };
    FormFieldModel.prototype.isInvalidFieldType = function (type) {
        if (type === 'container') {
            return true;
        }
        else {
            return false;
        }
    };
    return FormFieldModel;
}(form_widget_model_1.FormWidgetModel));
exports.FormFieldModel = FormFieldModel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
