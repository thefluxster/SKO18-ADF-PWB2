/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var form_model_1 = require("./form.model");
var tab_model_1 = require("./tab.model");
var container_model_1 = require("./container.model");
var form_outcome_model_1 = require("./form-outcome.model");
var form_field_types_1 = require("./form-field-types");
describe('FormModel', function () {
    it('should store original json', function () {
        var json = {};
        var form = new form_model_1.FormModel(json);
        expect(form.json).toBe(json);
    });
    it('should setup properties with json', function () {
        var json = {
            id: '<id>',
            name: '<name>',
            taskId: '<task-id>',
            taskName: '<task-name>'
        };
        var form = new form_model_1.FormModel(json);
        Object.keys(json).forEach(function (key) {
            expect(form[key]).toEqual(form[key]);
        });
    });
    it('should take form name when task name is missing', function () {
        var json = {
            id: '<id>',
            name: '<name>'
        };
        var form = new form_model_1.FormModel(json);
        expect(form.taskName).toBe(json.name);
    });
    it('should use fallback value for task name', function () {
        var form = new form_model_1.FormModel({});
        expect(form.taskName).toBe(form_model_1.FormModel.UNSET_TASK_NAME);
    });
    it('should set readonly state from params', function () {
        var form = new form_model_1.FormModel({}, null, true);
        expect(form.readOnly).toBeTruthy();
    });
    it('should check tabs', function () {
        var form = new form_model_1.FormModel();
        form.tabs = null;
        expect(form.hasTabs()).toBeFalsy();
        form.tabs = [];
        expect(form.hasTabs()).toBeFalsy();
        form.tabs = [new tab_model_1.TabModel(null)];
        expect(form.hasTabs()).toBeTruthy();
    });
    it('should check fields', function () {
        var form = new form_model_1.FormModel();
        form.fields = null;
        expect(form.hasFields()).toBeFalsy();
        form.fields = [];
        expect(form.hasFields()).toBeFalsy();
        form.fields = [new container_model_1.ContainerModel(null)];
        expect(form.hasFields()).toBeTruthy();
    });
    it('should check outcomes', function () {
        var form = new form_model_1.FormModel();
        form.outcomes = null;
        expect(form.hasOutcomes()).toBeFalsy();
        form.outcomes = [];
        expect(form.hasOutcomes()).toBeFalsy();
        form.outcomes = [new form_outcome_model_1.FormOutcomeModel(null)];
        expect(form.hasOutcomes()).toBeTruthy();
    });
    it('should parse tabs', function () {
        var json = {
            tabs: [
                { id: 'tab1' },
                { id: 'tab2' }
            ]
        };
        var form = new form_model_1.FormModel(json);
        expect(form.tabs.length).toBe(2);
        expect(form.tabs[0].id).toBe('tab1');
        expect(form.tabs[1].id).toBe('tab2');
    });
    it('should parse fields', function () {
        var json = {
            fields: [
                {
                    id: 'field1',
                    type: form_field_types_1.FormFieldTypes.CONTAINER
                },
                {
                    id: 'field2',
                    type: form_field_types_1.FormFieldTypes.CONTAINER
                }
            ]
        };
        var form = new form_model_1.FormModel(json);
        expect(form.fields.length).toBe(2);
        expect(form.fields[0].id).toBe('field1');
        expect(form.fields[1].id).toBe('field2');
    });
    it('should parse fields from the definition', function () {
        var json = {
            fields: null,
            formDefinition: {
                fields: [
                    {
                        id: 'field1',
                        type: form_field_types_1.FormFieldTypes.CONTAINER
                    },
                    {
                        id: 'field2',
                        type: form_field_types_1.FormFieldTypes.CONTAINER
                    }
                ]
            }
        };
        var form = new form_model_1.FormModel(json);
        expect(form.fields.length).toBe(2);
        expect(form.fields[0].id).toBe('field1');
        expect(form.fields[1].id).toBe('field2');
    });
    it('should convert missing fields to empty collection', function () {
        var json = {
            fields: null
        };
        var form = new form_model_1.FormModel(json);
        expect(form.fields).toBeDefined();
        expect(form.fields.length).toBe(0);
    });
    it('should put fields into corresponding tabs', function () {
        var json = {
            tabs: [
                { id: 'tab1' },
                { id: 'tab2' }
            ],
            fields: [
                { id: 'field1', tab: 'tab1', type: form_field_types_1.FormFieldTypes.CONTAINER },
                { id: 'field2', tab: 'tab2', type: form_field_types_1.FormFieldTypes.CONTAINER },
                { id: 'field3', tab: 'tab1', type: form_field_types_1.FormFieldTypes.DYNAMIC_TABLE },
                { id: 'field4', tab: 'missing-tab', type: form_field_types_1.FormFieldTypes.DYNAMIC_TABLE }
            ]
        };
        var form = new form_model_1.FormModel(json);
        expect(form.tabs.length).toBe(2);
        expect(form.fields.length).toBe(4);
        var tab1 = form.tabs[0];
        expect(tab1.fields.length).toBe(2);
        expect(tab1.fields[0].id).toBe('field1');
        expect(tab1.fields[1].id).toBe('field3');
        var tab2 = form.tabs[1];
        expect(tab2.fields.length).toBe(1);
        expect(tab2.fields[0].id).toBe('field2');
    });
    it('should create standard form outcomes', function () {
        var json = {
            fields: [
                { id: 'container1' }
            ]
        };
        var form = new form_model_1.FormModel(json);
        expect(form.outcomes.length).toBe(3);
        expect(form.outcomes[0].id).toBe(form_model_1.FormModel.SAVE_OUTCOME);
        expect(form.outcomes[0].isSystem).toBeTruthy();
        expect(form.outcomes[1].id).toBe(form_model_1.FormModel.COMPLETE_OUTCOME);
        expect(form.outcomes[1].isSystem).toBeTruthy();
        expect(form.outcomes[2].id).toBe(form_model_1.FormModel.START_PROCESS_OUTCOME);
        expect(form.outcomes[2].isSystem).toBeTruthy();
    });
    it('should create outcomes only when fields available', function () {
        var json = {
            fields: null
        };
        var form = new form_model_1.FormModel(json);
        expect(form.outcomes.length).toBe(0);
    });
    it('should use custom form outcomes', function () {
        var json = {
            fields: [
                { id: 'container1' }
            ],
            outcomes: [
                { id: 'custom-1', name: 'custom 1' }
            ]
        };
        var form = new form_model_1.FormModel(json);
        expect(form.outcomes.length).toBe(2);
        expect(form.outcomes[0].id).toBe(form_model_1.FormModel.SAVE_OUTCOME);
        expect(form.outcomes[0].isSystem).toBeTruthy();
        expect(form.outcomes[1].id).toBe('custom-1');
        expect(form.outcomes[1].isSystem).toBeFalsy();
    });
});
//# sourceMappingURL=form.model.spec.js.map