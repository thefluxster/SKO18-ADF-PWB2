/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var form_model_1 = require("./form.model");
var form_field_model_1 = require("./form-field.model");
var form_field_types_1 = require("./form-field-types");
var form_field_validator_1 = require("./form-field-validator");
describe('FormFieldValidator', function () {
    describe('RequiredFieldValidator', function () {
        var validator;
        beforeEach(function () {
            validator = new form_field_validator_1.RequiredFieldValidator();
        });
        it('should require [required] setting', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                value: '<value>'
            });
            field.required = false;
            expect(validator.isSupported(field)).toBeFalsy();
            expect(validator.validate(field)).toBeTruthy();
            field.required = true;
            expect(validator.isSupported(field)).toBeTruthy();
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should skip unsupported type', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), { type: 'wrong-type' });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should fail for dropdown with empty value', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.DROPDOWN,
                value: '<empty>',
                hasEmptyValue: true,
                required: true
            });
            field.emptyOption = { id: '<empty>' };
            expect(validator.validate(field)).toBeFalsy();
            field.value = '<non-empty>';
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should fail for radio buttons', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS,
                required: true,
                value: 'one',
                options: [{ id: 'two', name: 'two' }]
            });
            expect(validator.validate(field)).toBeFalsy();
        });
        it('should succeed for radio buttons', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS,
                required: true,
                value: 'two',
                options: [{ id: 'two', name: 'two' }]
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should fail for upload', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.UPLOAD,
                value: null,
                required: true
            });
            field.value = null;
            expect(validator.validate(field)).toBeFalsy();
            field.value = [];
            expect(validator.validate(field)).toBeFalsy();
        });
        it('should succeed for upload', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.UPLOAD,
                value: [{}],
                required: true
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should fail for text', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                value: null,
                required: true
            });
            field.value = null;
            expect(validator.validate(field)).toBeFalsy();
            field.value = '';
            expect(validator.validate(field)).toBeFalsy();
        });
        it('should succeed for date', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.DATE,
                value: '2016-12-31',
                required: true
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should fail for date', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.DATE,
                value: null,
                required: true
            });
            field.value = null;
            expect(validator.validate(field)).toBeFalsy();
            field.value = '';
            expect(validator.validate(field)).toBeFalsy();
        });
        it('should succeed for text', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                value: '<value>',
                required: true
            });
            expect(validator.validate(field)).toBeTruthy();
        });
    });
    describe('NumberFieldValidator', function () {
        var validator;
        beforeEach(function () {
            validator = new form_field_validator_1.NumberFieldValidator();
        });
        it('should verify number', function () {
            expect(form_field_validator_1.NumberFieldValidator.isNumber('1')).toBeTruthy();
            expect(form_field_validator_1.NumberFieldValidator.isNumber('1.0')).toBeTruthy();
            expect(form_field_validator_1.NumberFieldValidator.isNumber('-1')).toBeTruthy();
            expect(form_field_validator_1.NumberFieldValidator.isNumber(1)).toBeTruthy();
            expect(form_field_validator_1.NumberFieldValidator.isNumber(0)).toBeTruthy();
            expect(form_field_validator_1.NumberFieldValidator.isNumber(-1)).toBeTruthy();
        });
        it('should not verify number', function () {
            expect(form_field_validator_1.NumberFieldValidator.isNumber(null)).toBeFalsy();
            expect(form_field_validator_1.NumberFieldValidator.isNumber(undefined)).toBeFalsy();
            expect(form_field_validator_1.NumberFieldValidator.isNumber('')).toBeFalsy();
            expect(form_field_validator_1.NumberFieldValidator.isNumber('one')).toBeFalsy();
            expect(form_field_validator_1.NumberFieldValidator.isNumber('1q')).toBeFalsy();
        });
        it('should allow empty number value', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                value: null
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should allow number value', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                value: 44
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should allow zero number value', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                value: 0
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should fail for wrong number value', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                value: '<value>'
            });
            field.validationSummary = null;
            expect(validator.validate(field)).toBeFalsy();
            expect(field.validationSummary).not.toBeNull();
        });
    });
    describe('MinLengthFieldValidator', function () {
        var validator;
        beforeEach(function () {
            validator = new form_field_validator_1.MinLengthFieldValidator();
        });
        it('should require minLength defined', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT
            });
            expect(validator.isSupported(field)).toBeFalsy();
            field.minLength = 10;
            expect(validator.isSupported(field)).toBeTruthy();
        });
        it('should allow empty values', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                minLength: 10,
                value: null
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should succeed text validation', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                minLength: 3,
                value: '1234'
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should fail text validation', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                minLength: 3,
                value: '12'
            });
            field.validationSummary = null;
            expect(validator.validate(field)).toBeFalsy();
            expect(field.validationSummary).not.toBeNull();
        });
    });
    describe('MaxLengthFieldValidator', function () {
        var validator;
        beforeEach(function () {
            validator = new form_field_validator_1.MaxLengthFieldValidator();
        });
        it('should require maxLength defined', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT
            });
            expect(validator.isSupported(field)).toBeFalsy();
            field.maxLength = 10;
            expect(validator.isSupported(field)).toBeTruthy();
        });
        it('should allow empty values', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                maxLength: 10,
                value: null
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should succeed text validation', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                maxLength: 3,
                value: '123'
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should fail text validation', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                maxLength: 3,
                value: '1234'
            });
            field.validationSummary = null;
            expect(validator.validate(field)).toBeFalsy();
            expect(field.validationSummary).not.toBeNull();
        });
    });
    describe('MinValueFieldValidator', function () {
        var validator;
        beforeEach(function () {
            validator = new form_field_validator_1.MinValueFieldValidator();
        });
        it('should require minValue defined', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER
            });
            expect(validator.isSupported(field)).toBeFalsy();
            field.minValue = '1';
            expect(validator.isSupported(field)).toBeTruthy();
        });
        it('should support numeric widgets only', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                minValue: '1'
            });
            expect(validator.isSupported(field)).toBeTruthy();
            field.type = form_field_types_1.FormFieldTypes.TEXT;
            expect(validator.isSupported(field)).toBeFalsy();
        });
        it('should allow empty values', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                value: null,
                minValue: '1'
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should succeed for unsupported types', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should succeed validating value', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                value: '10',
                minValue: '10'
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should fail validating value', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                value: '9',
                minValue: '10'
            });
            field.validationSummary = null;
            expect(validator.validate(field)).toBeFalsy();
            expect(field.validationSummary).not.toBeNull();
        });
    });
    describe('MaxValueFieldValidator', function () {
        var validator;
        beforeEach(function () {
            validator = new form_field_validator_1.MaxValueFieldValidator();
        });
        it('should require maxValue defined', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER
            });
            expect(validator.isSupported(field)).toBeFalsy();
            field.maxValue = '1';
            expect(validator.isSupported(field)).toBeTruthy();
        });
        it('should support numeric widgets only', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                maxValue: '1'
            });
            expect(validator.isSupported(field)).toBeTruthy();
            field.type = form_field_types_1.FormFieldTypes.TEXT;
            expect(validator.isSupported(field)).toBeFalsy();
        });
        it('should allow empty values', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                value: null,
                maxValue: '1'
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should succeed for unsupported types', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should succeed validating value', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                value: '10',
                maxValue: '10'
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should fail validating value', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.NUMBER,
                value: '11',
                maxValue: '10'
            });
            field.validationSummary = null;
            expect(validator.validate(field)).toBeFalsy();
            expect(field.validationSummary).not.toBeNull();
        });
    });
    describe('RegExFieldValidator', function () {
        var validator;
        beforeEach(function () {
            validator = new form_field_validator_1.RegExFieldValidator();
        });
        it('should require regex pattern to be defined', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT
            });
            expect(validator.isSupported(field)).toBeFalsy();
            field.regexPattern = '<pattern>';
            expect(validator.isSupported(field)).toBeTruthy();
        });
        it('should allow empty values', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                value: null,
                regexPattern: 'pattern'
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should succeed validating regex', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                value: 'pattern',
                regexPattern: 'pattern'
            });
            expect(validator.validate(field)).toBeTruthy();
        });
        it('should fail validating regex', function () {
            var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
                type: form_field_types_1.FormFieldTypes.TEXT,
                value: 'some value',
                regexPattern: 'pattern'
            });
            expect(validator.validate(field)).toBeFalsy();
        });
    });
});
//# sourceMappingURL=form-field-validator.spec.js.map