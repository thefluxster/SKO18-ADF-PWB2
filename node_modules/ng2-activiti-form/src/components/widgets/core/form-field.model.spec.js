/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var form_field_model_1 = require("./form-field.model");
var form_field_types_1 = require("./form-field-types");
var form_model_1 = require("./form.model");
describe('FormFieldModel', function () {
    it('should store the form reference', function () {
        var form = new form_model_1.FormModel();
        var model = new form_field_model_1.FormFieldModel(form);
        expect(model.form).toBe(form);
    });
    it('should store original json', function () {
        var json = {};
        var model = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), json);
        expect(model.json).toBe(json);
    });
    it('should setup with json config', function () {
        var json = {
            fieldType: '<fieldType>',
            id: '<id>',
            name: '<name>',
            type: '<type>',
            required: true,
            readOnly: true,
            overrideId: true,
            tab: '<tab>',
            restUrl: '<rest-url>',
            restResponsePath: '<rest-path>',
            restIdProperty: '<rest-id>',
            restLabelProperty: '<rest-label>',
            colspan: 1,
            options: [],
            hasEmptyValue: true,
            className: '<class>',
            optionType: '<type>',
            params: {},
            hyperlinkUrl: '<url>',
            displayText: '<text>',
            value: '<value>'
        };
        var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), json);
        Object.keys(json).forEach(function (key) {
            expect(field[key]).toBe(json[key]);
        });
    });
    it('should setup empty options collection', function () {
        var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), null);
        expect(field.options).toBeDefined();
        expect(field.options.length).toBe(0);
        field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), { options: null });
        expect(field.options).toBeDefined();
        expect(field.options.length).toBe(0);
    });
    it('should setup empty params', function () {
        var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), null);
        expect(field.params).toEqual({});
        field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), { params: null });
        expect(field.params).toEqual({});
    });
    it('should update form on every value change', function () {
        var form = new form_model_1.FormModel();
        var field = new form_field_model_1.FormFieldModel(form, { id: 'field1' });
        var value = 10;
        spyOn(field, 'updateForm').and.callThrough();
        field.value = value;
        expect(field.value).toBe(value);
        expect(field.updateForm).toHaveBeenCalled();
        expect(form.values['field1']).toBe(value);
    });
    it('should get form readonly state', function () {
        var form = new form_model_1.FormModel();
        var field = new form_field_model_1.FormFieldModel(form, null);
        expect(field.readOnly).toBeFalsy();
        form.readOnly = true;
        expect(field.readOnly).toBeTruthy();
    });
    it('should take own readonly state if form is writable', function () {
        var form = new form_model_1.FormModel();
        var field = new form_field_model_1.FormFieldModel(form, { readOnly: true });
        expect(form.readOnly).toBeFalsy();
        expect(field.readOnly).toBeTruthy();
    });
    it('should parse and leave dropdown value as is', function () {
        var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
            type: form_field_types_1.FormFieldTypes.DROPDOWN,
            options: [],
            value: 'deferred'
        });
        expect(field.value).toBe('deferred');
    });
    it('should parse and resolve radio button value', function () {
        var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
            type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS,
            options: [
                { id: 'opt1', value: 'Option 1' },
                { id: 'opt2', value: 'Option 2' }
            ],
            value: 'opt2'
        });
        expect(field.value).toBe('opt2');
    });
    it('should parse and leave radio button value as is', function () {
        var field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
            type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS,
            options: [],
            value: 'deferred-radio'
        });
        expect(field.value).toBe('deferred-radio');
    });
    it('should update form with empty dropdown value', function () {
        var form = new form_model_1.FormModel();
        var field = new form_field_model_1.FormFieldModel(form, {
            id: 'dropdown-1',
            type: form_field_types_1.FormFieldTypes.DROPDOWN
        });
        field.value = 'empty';
        expect(form.values['dropdown-1']).toEqual({});
        field.value = '';
        expect(form.values['dropdown-1']).toEqual({});
    });
    it('should update form with dropdown value', function () {
        var form = new form_model_1.FormModel();
        var field = new form_field_model_1.FormFieldModel(form, {
            id: 'dropdown-2',
            type: form_field_types_1.FormFieldTypes.DROPDOWN,
            options: [
                { id: 'opt1', name: 'Option 1' },
                { id: 'opt2', name: 'Option 2' }
            ]
        });
        field.value = 'opt2';
        expect(form.values['dropdown-2']).toEqual(field.options[1]);
    });
    it('should update form with radio button value', function () {
        var form = new form_model_1.FormModel();
        var field = new form_field_model_1.FormFieldModel(form, {
            id: 'radio-1',
            type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS,
            options: [
                { id: 'opt1', value: 'Option 1' },
                { id: 'opt2', value: 'Option 2' }
            ]
        });
        field.value = 'opt2';
        expect(form.values['radio-1']).toEqual(field.options[1]);
    });
    it('should update form with the first radio button value', function () {
        var form = new form_model_1.FormModel();
        var field = new form_field_model_1.FormFieldModel(form, {
            id: 'radio-2',
            type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS,
            options: [
                { id: 'opt1', value: 'Option 1' },
                { id: 'opt2', value: 'Option 2' }
            ]
        });
        field.value = 'missing';
        expect(form.values['radio-2']).toEqual(field.options[0]);
    });
    it('should not update form with display-only field value', function () {
        var form = new form_model_1.FormModel();
        form_field_types_1.FormFieldTypes.READONLY_TYPES.forEach(function (typeName) {
            var field = new form_field_model_1.FormFieldModel(form, {
                id: typeName,
                type: typeName
            });
            field.value = '<some value>';
            expect(form.values[field.id]).toBeUndefined();
        });
    });
});
//# sourceMappingURL=form-field.model.spec.js.map