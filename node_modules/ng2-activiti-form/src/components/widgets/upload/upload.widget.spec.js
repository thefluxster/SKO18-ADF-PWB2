/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var upload_widget_1 = require("./upload.widget");
var form_field_model_1 = require("./../core/form-field.model");
var form_field_types_1 = require("../core/form-field-types");
var form_service_1 = require("../../../services/form.service");
describe('UploadWidget', function () {
    var widget;
    var formService;
    beforeEach(function () {
        formService = new form_service_1.FormService(null, null, null);
        widget = new upload_widget_1.UploadWidget(formService, null);
    });
    it('should setup with field data', function () {
        var fileName = 'hello world';
        var encodedFileName = encodeURI(fileName);
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.UPLOAD,
            value: [
                { name: encodedFileName }
            ]
        });
        widget.ngOnInit();
        expect(widget.hasFile).toBeTruthy();
        expect(widget.fileName).toBe(encodeURI(fileName));
        expect(widget.displayText).toBe(fileName);
    });
    it('should require form field to setup', function () {
        widget.field = null;
        widget.ngOnInit();
        expect(widget.hasFile).toBeFalsy();
        expect(widget.fileName).toBeUndefined();
        expect(widget.displayText).toBeUndefined();
    });
    it('should reset local properties', function () {
        widget.hasFile = true;
        widget.fileName = '<fileName>';
        widget.displayText = '<displayText>';
        widget.reset();
        expect(widget.hasFile).toBeFalsy();
        expect(widget.fileName).toBeNull();
        expect(widget.displayText).toBeNull();
    });
    it('should reset field value', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.UPLOAD,
            value: [
                { name: 'filename' }
            ]
        });
        widget.reset();
        expect(widget.field.value).toBeNull();
        expect(widget.field.json.value).toBeNull();
    });
});
//# sourceMappingURL=upload.widget.spec.js.map