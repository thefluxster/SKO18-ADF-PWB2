/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var widget_component_1 = require("./../widget.component");
var form_service_1 = require("../../../services/form.service");
var UploadWidget = (function (_super) {
    __extends(UploadWidget, _super);
    function UploadWidget(formService, logService) {
        var _this = _super.call(this) || this;
        _this.formService = formService;
        _this.logService = logService;
        return _this;
    }
    UploadWidget.prototype.ngOnInit = function () {
        if (this.field &&
            this.field.value &&
            this.field.value.length > 0) {
            this.hasFile = true;
            var file = this.field.value[0];
            this.fileName = file.name;
            this.displayText = decodeURI(file.name);
        }
    };
    UploadWidget.prototype.reset = function () {
        this.hasFile = false;
        this.fileName = null;
        this.displayText = null;
        if (this.field) {
            this.field.value = null;
            this.field.json.value = null;
        }
    };
    UploadWidget.prototype.onFileChanged = function (event) {
        var _this = this;
        var files = event.target.files;
        if (files && files.length > 0) {
            var file = files[0];
            this.formService.createTemporaryRawRelatedContent(file)
                .subscribe(function (response) {
                _this.logService.info(response);
                _this.field.value = [response];
                _this.field.json.value = [response];
            }, function (error) {
                _this.logService.error(error);
                window.alert('Error uploading file. See console output for more details.');
            });
        }
    };
    return UploadWidget;
}(widget_component_1.WidgetComponent));
UploadWidget = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'upload-widget',
        template: "<div class=\"upload-widget\"      [class.upload-widget__invalid]=\"!field.isValid\">     <label class=\"upload-widget__label\" [attr.for]=\"field.id\">{{field.name}}</label>     <div>         <i *ngIf=\"hasFile\" class=\"material-icons upload-widget__icon\">attachment</i>         <span *ngIf=\"hasFile\" class=\"upload-widget__file\">{{displayText}}</span>         <input *ngIf=\"!hasFile\"                #file                type=\"file\"                [attr.id]=\"field.id\"                class=\"upload-widget__file\"                (change)=\"onFileChanged($event)\">         <button *ngIf=\"hasFile\" (click)=\"reset(file);\"                 class=\"mdl-button mdl-js-button mdl-button--icon upload-widget__reset\">             <i class=\"material-icons\">highlight_off</i>         </button>     </div>     <span *ngIf=\"field.validationSummary\" class=\"mdl-textfield__error\">{{field.validationSummary}}</span> </div>",
        styles: [".upload-widget {     width:100%;     word-break: break-all; }  .upload-widget__icon {     float: left; }  .upload-widget__file {     float: left;     margin-top: 4px; }  .upload-widget__reset {     float: left;     margin-top: -2px; }  .upload-widget__invalid .upload-widget__label {     color: #d50000; }  .upload-widget__invalid .upload-widget__label:after {     background-color: #d50000; }  .upload-widget__invalid .upload-widget__file {     color: #d50000; }  .upload-widget__invalid .mdl-textfield__error {     visibility: visible !important; }"]
    }),
    __metadata("design:paramtypes", [form_service_1.FormService,
        ng2_alfresco_core_1.LogService])
], UploadWidget);
exports.UploadWidget = UploadWidget;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy91cGxvYWQvdXBsb2FkLndpZGdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSCxzQ0FBa0Q7QUFDbEQsdURBQStDO0FBQy9DLDBEQUF3RDtBQUN4RCwrREFBNkQ7QUFRN0QsSUFBYSxZQUFZO0lBQVMsZ0NBQWU7SUFNN0Msc0JBQW9CLFdBQXdCLEVBQ3hCLFVBQXNCO1FBRDFDLFlBRUksaUJBQU8sU0FDVjtRQUhtQixpQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixnQkFBVSxHQUFWLFVBQVUsQ0FBWTs7SUFFMUMsQ0FBQztJQUVELCtCQUFRLEdBQVI7UUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSztZQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSztZQUNoQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNwQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDMUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLENBQUM7SUFDTCxDQUFDO0lBRUQsNEJBQUssR0FBTDtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBRXhCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDakMsQ0FBQztJQUNMLENBQUM7SUFFRCxvQ0FBYSxHQUFiLFVBQWMsS0FBVTtRQUF4QixpQkFjQztRQWJHLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQy9CLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDO2lCQUNsRCxTQUFTLENBQUMsVUFBQyxRQUFhO2dCQUNyQixLQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDL0IsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDOUIsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDdkMsQ0FBQyxFQUFFLFVBQUMsS0FBVTtnQkFDVixLQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDN0IsTUFBTSxDQUFDLEtBQUssQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO1lBQy9FLENBQUMsQ0FBQyxDQUFDO1FBQ1gsQ0FBQztJQUNMLENBQUM7SUFFTCxtQkFBQztBQUFELENBakRBLEFBaURDLENBakRpQyxrQ0FBZSxHQWlEaEQ7QUFqRFksWUFBWTtJQU54QixnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFBRSxlQUFlO1FBQ3pCLFFBQVEsRUFBRSxrNkJBQWs2QjtRQUM1NkIsTUFBTSxFQUFFLENBQUMsd2lCQUF3aUIsQ0FBQztLQUNyakIsQ0FBQztxQ0FPbUMsMEJBQVc7UUFDWiw4QkFBVTtHQVBqQyxZQUFZLENBaUR4QjtBQWpEWSxvQ0FBWSIsImZpbGUiOiJjb21wb25lbnRzL3dpZGdldHMvdXBsb2FkL3VwbG9hZC53aWRnZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9nU2VydmljZSB9IGZyb20gJ25nMi1hbGZyZXNjby1jb3JlJztcbmltcG9ydCB7IFdpZGdldENvbXBvbmVudCB9IGZyb20gJy4vLi4vd2lkZ2V0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGb3JtU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL2Zvcm0uc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgc2VsZWN0b3I6ICd1cGxvYWQtd2lkZ2V0JyxcbiAgICB0ZW1wbGF0ZTogXCI8ZGl2IGNsYXNzPVxcXCJ1cGxvYWQtd2lkZ2V0XFxcIiAgICAgIFtjbGFzcy51cGxvYWQtd2lkZ2V0X19pbnZhbGlkXT1cXFwiIWZpZWxkLmlzVmFsaWRcXFwiPiAgICAgPGxhYmVsIGNsYXNzPVxcXCJ1cGxvYWQtd2lkZ2V0X19sYWJlbFxcXCIgW2F0dHIuZm9yXT1cXFwiZmllbGQuaWRcXFwiPnt7ZmllbGQubmFtZX19PC9sYWJlbD4gICAgIDxkaXY+ICAgICAgICAgPGkgKm5nSWY9XFxcImhhc0ZpbGVcXFwiIGNsYXNzPVxcXCJtYXRlcmlhbC1pY29ucyB1cGxvYWQtd2lkZ2V0X19pY29uXFxcIj5hdHRhY2htZW50PC9pPiAgICAgICAgIDxzcGFuICpuZ0lmPVxcXCJoYXNGaWxlXFxcIiBjbGFzcz1cXFwidXBsb2FkLXdpZGdldF9fZmlsZVxcXCI+e3tkaXNwbGF5VGV4dH19PC9zcGFuPiAgICAgICAgIDxpbnB1dCAqbmdJZj1cXFwiIWhhc0ZpbGVcXFwiICAgICAgICAgICAgICAgICNmaWxlICAgICAgICAgICAgICAgIHR5cGU9XFxcImZpbGVcXFwiICAgICAgICAgICAgICAgIFthdHRyLmlkXT1cXFwiZmllbGQuaWRcXFwiICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJ1cGxvYWQtd2lkZ2V0X19maWxlXFxcIiAgICAgICAgICAgICAgICAoY2hhbmdlKT1cXFwib25GaWxlQ2hhbmdlZCgkZXZlbnQpXFxcIj4gICAgICAgICA8YnV0dG9uICpuZ0lmPVxcXCJoYXNGaWxlXFxcIiAoY2xpY2spPVxcXCJyZXNldChmaWxlKTtcXFwiICAgICAgICAgICAgICAgICBjbGFzcz1cXFwibWRsLWJ1dHRvbiBtZGwtanMtYnV0dG9uIG1kbC1idXR0b24tLWljb24gdXBsb2FkLXdpZGdldF9fcmVzZXRcXFwiPiAgICAgICAgICAgICA8aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPmhpZ2hsaWdodF9vZmY8L2k+ICAgICAgICAgPC9idXR0b24+ICAgICA8L2Rpdj4gICAgIDxzcGFuICpuZ0lmPVxcXCJmaWVsZC52YWxpZGF0aW9uU3VtbWFyeVxcXCIgY2xhc3M9XFxcIm1kbC10ZXh0ZmllbGRfX2Vycm9yXFxcIj57e2ZpZWxkLnZhbGlkYXRpb25TdW1tYXJ5fX08L3NwYW4+IDwvZGl2PlwiLFxuICAgIHN0eWxlczogW1wiLnVwbG9hZC13aWRnZXQgeyAgICAgd2lkdGg6MTAwJTsgICAgIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDsgfSAgLnVwbG9hZC13aWRnZXRfX2ljb24geyAgICAgZmxvYXQ6IGxlZnQ7IH0gIC51cGxvYWQtd2lkZ2V0X19maWxlIHsgICAgIGZsb2F0OiBsZWZ0OyAgICAgbWFyZ2luLXRvcDogNHB4OyB9ICAudXBsb2FkLXdpZGdldF9fcmVzZXQgeyAgICAgZmxvYXQ6IGxlZnQ7ICAgICBtYXJnaW4tdG9wOiAtMnB4OyB9ICAudXBsb2FkLXdpZGdldF9faW52YWxpZCAudXBsb2FkLXdpZGdldF9fbGFiZWwgeyAgICAgY29sb3I6ICNkNTAwMDA7IH0gIC51cGxvYWQtd2lkZ2V0X19pbnZhbGlkIC51cGxvYWQtd2lkZ2V0X19sYWJlbDphZnRlciB7ICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDUwMDAwOyB9ICAudXBsb2FkLXdpZGdldF9faW52YWxpZCAudXBsb2FkLXdpZGdldF9fZmlsZSB7ICAgICBjb2xvcjogI2Q1MDAwMDsgfSAgLnVwbG9hZC13aWRnZXRfX2ludmFsaWQgLm1kbC10ZXh0ZmllbGRfX2Vycm9yIHsgICAgIHZpc2liaWxpdHk6IHZpc2libGUgIWltcG9ydGFudDsgfVwiXVxufSlcbmV4cG9ydCBjbGFzcyBVcGxvYWRXaWRnZXQgZXh0ZW5kcyBXaWRnZXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgaGFzRmlsZTogYm9vbGVhbjtcbiAgICBmaWxlTmFtZTogc3RyaW5nO1xuICAgIGRpc3BsYXlUZXh0OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZvcm1TZXJ2aWNlOiBGb3JtU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmllbGQgJiZcbiAgICAgICAgICAgIHRoaXMuZmllbGQudmFsdWUgJiZcbiAgICAgICAgICAgIHRoaXMuZmllbGQudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5oYXNGaWxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBmaWxlID0gdGhpcy5maWVsZC52YWx1ZVswXTtcbiAgICAgICAgICAgIHRoaXMuZmlsZU5hbWUgPSBmaWxlLm5hbWU7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gZGVjb2RlVVJJKGZpbGUubmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5oYXNGaWxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZmlsZU5hbWUgPSBudWxsO1xuICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5maWVsZCkge1xuICAgICAgICAgICAgdGhpcy5maWVsZC52YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmZpZWxkLmpzb24udmFsdWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25GaWxlQ2hhbmdlZChldmVudDogYW55KSB7XG4gICAgICAgIGxldCBmaWxlcyA9IGV2ZW50LnRhcmdldC5maWxlcztcbiAgICAgICAgaWYgKGZpbGVzICYmIGZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBmaWxlID0gZmlsZXNbMF07XG4gICAgICAgICAgICB0aGlzLmZvcm1TZXJ2aWNlLmNyZWF0ZVRlbXBvcmFyeVJhd1JlbGF0ZWRDb250ZW50KGZpbGUpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgocmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuaW5mbyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGQudmFsdWUgPSBbcmVzcG9uc2VdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkLmpzb24udmFsdWUgPSBbcmVzcG9uc2VdO1xuICAgICAgICAgICAgICAgIH0sIChlcnJvcjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hbGVydCgnRXJyb3IgdXBsb2FkaW5nIGZpbGUuIFNlZSBjb25zb2xlIG91dHB1dCBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=
