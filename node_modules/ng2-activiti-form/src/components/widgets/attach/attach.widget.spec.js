/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var attach_widget_1 = require("./attach.widget");
var activiti_alfresco_service_1 = require("../../../services/activiti-alfresco.service");
var form_field_model_1 = require("./../core/form-field.model");
var form_field_types_1 = require("../core/form-field-types");
describe('AttachWidget', function () {
    var widget;
    var contentService;
    var dialogPolyfill;
    var logService;
    beforeEach(function () {
        logService = new ng2_alfresco_core_1.LogServiceMock();
        contentService = new activiti_alfresco_service_1.ActivitiAlfrescoContentService(null, logService);
        widget = new attach_widget_1.AttachWidget(contentService, logService);
        dialogPolyfill = {
            registerDialog: function (obj) {
                obj.showModal = function () { };
            }
        };
        window['dialogPolyfill'] = dialogPolyfill;
    });
    it('should require field value to check file', function () {
        widget.field = null;
        widget.ngOnInit();
        expect(widget.hasFile()).toBeFalsy();
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.UPLOAD,
            value: null
        });
        widget.ngOnInit();
        expect(widget.hasFile()).toBeFalsy();
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.UPLOAD,
            value: [{ name: 'file' }]
        });
        widget.ngOnInit();
        expect(widget.hasFile()).toBeTruthy();
    });
    it('should setup with form field', function () {
        var nodes = [{}];
        spyOn(contentService, 'getAlfrescoNodes').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(nodes);
            observer.complete();
        }));
        var config = {
            siteId: '<id>',
            site: '<site>',
            pathId: '<pathId>',
            accountId: '<accountId>'
        };
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.UPLOAD,
            params: {
                fileSource: {
                    selectedFolder: config
                }
            }
        });
        widget.ngOnInit();
        expect(widget.selectedFolderSiteId).toBe(config.siteId);
        expect(widget.selectedFolderSiteName).toBe(config.site);
        expect(widget.selectedFolderPathId).toBe(config.pathId);
        expect(widget.selectedFolderAccountId).toBe(config.accountId);
        expect(widget.selectedFolderNodes).toEqual(nodes);
    });
    it('should link file on select', function () {
        var link = {};
        spyOn(contentService, 'linkAlfrescoNode').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(link);
            observer.complete();
        }));
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.UPLOAD
        });
        widget.ngOnInit();
        var node = {};
        widget.selectFile(node, null);
        expect(contentService.linkAlfrescoNode).toHaveBeenCalled();
        expect(widget.selectedFile).toBe(node);
        expect(widget.field.value).toEqual([link]);
        expect(widget.field.json.value).toEqual([link]);
        expect(widget.hasFile()).toBeTruthy();
    });
    it('should reset', function () {
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.UPLOAD,
            value: [{ name: 'filename' }]
        });
        widget.reset();
        expect(widget.hasFile()).toBeFalsy();
        expect(widget.field.value).toBeNull();
        expect(widget.field.json.value).toBeNull();
        expect(widget.hasFile()).toBeFalsy();
    });
    it('should close dialog on cancel', function () {
        var closed = false;
        widget.dialog = {
            nativeElement: {
                close: function () {
                    closed = true;
                }
            }
        };
        widget.cancel();
        expect(closed).toBeTruthy();
    });
    it('should show modal dialog', function () {
        spyOn(contentService, 'getAlfrescoNodes').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next([]);
            observer.complete();
        }));
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.UPLOAD,
            params: {
                fileSource: {
                    selectedFolder: {}
                }
            }
        });
        var modalShown = false;
        widget.dialog = {
            nativeElement: {
                showModal: function () {
                    modalShown = true;
                }
            }
        };
        widget.showDialog();
        expect(modalShown).toBeTruthy();
    });
    it('should select folder and load nodes', function () {
        var nodes = [{}];
        spyOn(contentService, 'getAlfrescoNodes').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(nodes);
            observer.complete();
        }));
        var node = { id: '<id>' };
        widget.selectFolder(node, null);
        expect(widget.selectedFolderPathId).toBe(node.id);
        expect(widget.selectedFolderNodes).toEqual(nodes);
    });
    it('should get linked file name via local variable', function () {
        widget.fileName = '<fileName>';
        widget.selectedFile = null;
        widget.field = null;
        expect(widget.getLinkedFileName()).toBe(widget.fileName);
    });
    it('should get linked file name via selected file', function () {
        widget.fileName = null;
        widget.selectedFile = { title: '<title>' };
        widget.field = null;
        expect(widget.getLinkedFileName()).toBe(widget.selectedFile.title);
    });
    it('should get linked file name via form field', function () {
        widget.fileName = null;
        widget.selectedFile = null;
        var name = '<file>';
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.UPLOAD,
            value: [{ name: name }]
        });
        expect(widget.getLinkedFileName()).toBe(name);
    });
    it('should require form field to setup file browser', function () {
        widget.field = null;
        widget.setupFileBrowser();
        expect(widget.selectedFolderPathId).toBeUndefined();
        expect(widget.selectedFolderAccountId).toBeUndefined();
        var pathId = '<pathId>';
        var accountId = '<accountId>';
        widget.field = new form_field_model_1.FormFieldModel(null, {
            type: form_field_types_1.FormFieldTypes.UPLOAD,
            params: {
                fileSource: {
                    selectedFolder: {
                        pathId: pathId,
                        accountId: accountId
                    }
                }
            }
        });
        widget.setupFileBrowser();
        expect(widget.selectedFolderPathId).toBe(pathId);
        expect(widget.selectedFolderAccountId).toBe(accountId);
    });
    it('should get external content nodes', function () {
        var nodes = [{}];
        spyOn(contentService, 'getAlfrescoNodes').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(nodes);
            observer.complete();
        }));
        var accountId = '<accountId>';
        var pathId = '<pathId>';
        widget.selectedFolderAccountId = accountId;
        widget.selectedFolderPathId = pathId;
        widget.getExternalContentNodes();
        expect(contentService.getAlfrescoNodes).toHaveBeenCalledWith(accountId, pathId);
        expect(widget.selectedFolderNodes).toEqual(nodes);
    });
    it('should handle error', function () {
        var error = 'error';
        spyOn(contentService, 'getAlfrescoNodes').and.returnValue(Rx_1.Observable.throw(error));
        spyOn(logService, 'error').and.stub();
        widget.getExternalContentNodes();
        expect(logService.error).toHaveBeenCalledWith(error);
    });
    it('should register dialog via polyfill', function () {
        widget.dialog = {
            nativeElement: {}
        };
        spyOn(dialogPolyfill, 'registerDialog').and.callThrough();
        spyOn(widget, 'setupFileBrowser').and.stub();
        spyOn(widget, 'getExternalContentNodes').and.stub();
        widget.showDialog();
        expect(dialogPolyfill.registerDialog).toHaveBeenCalledWith(widget.dialog.nativeElement);
    });
    it('should require configured dialog to show modal', function () {
        widget.dialog = null;
        spyOn(widget, 'setupFileBrowser').and.stub();
        spyOn(widget, 'getExternalContentNodes').and.stub();
        expect(widget.showDialog()).toBeFalsy();
    });
});
//# sourceMappingURL=attach.widget.spec.js.map