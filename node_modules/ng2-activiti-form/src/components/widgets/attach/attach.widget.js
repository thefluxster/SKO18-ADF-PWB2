/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var widget_component_1 = require("./../widget.component");
var activiti_alfresco_service_1 = require("../../../services/activiti-alfresco.service");
var form_field_model_1 = require("../core/form-field.model");
var AttachWidget = (function (_super) {
    __extends(AttachWidget, _super);
    function AttachWidget(contentService, logService) {
        var _this = _super.call(this) || this;
        _this.contentService = contentService;
        _this.logService = logService;
        _this.fieldChanged = new core_1.EventEmitter();
        return _this;
    }
    AttachWidget.prototype.ngOnInit = function () {
        if (this.field) {
            var params = this.field.params;
            if (params &&
                params.fileSource &&
                params.fileSource.selectedFolder) {
                this.selectedFolderSiteId = params.fileSource.selectedFolder.siteId;
                this.selectedFolderSiteName = params.fileSource.selectedFolder.site;
                this.setupFileBrowser();
                this.getExternalContentNodes();
            }
        }
    };
    AttachWidget.prototype.setupFileBrowser = function () {
        if (this.field) {
            var params = this.field.params;
            this.selectedFolderPathId = params.fileSource.selectedFolder.pathId;
            this.selectedFolderAccountId = params.fileSource.selectedFolder.accountId;
        }
    };
    AttachWidget.prototype.getLinkedFileName = function () {
        var result = this.fileName;
        if (this.selectedFile &&
            this.selectedFile.title) {
            result = this.selectedFile.title;
        }
        if (this.field &&
            this.field.value &&
            this.field.value.length > 0 &&
            this.field.value[0].name) {
            result = this.field.value[0].name;
        }
        return result;
    };
    AttachWidget.prototype.getExternalContentNodes = function () {
        var _this = this;
        this.contentService.getAlfrescoNodes(this.selectedFolderAccountId, this.selectedFolderPathId)
            .subscribe(function (nodes) { return _this.selectedFolderNodes = nodes; }, function (error) { return _this.logService.error(error); });
    };
    AttachWidget.prototype.selectFile = function (node, $event) {
        var _this = this;
        this.contentService.linkAlfrescoNode(this.selectedFolderAccountId, node, this.selectedFolderSiteId).subscribe(function (link) {
            _this.selectedFile = node;
            _this.field.value = [link];
            _this.field.json.value = [link];
            _this.closeDialog();
            _this.fieldChanged.emit(_this.field);
        });
    };
    AttachWidget.prototype.selectFolder = function (node, $event) {
        this.selectedFolderPathId = node.id;
        this.getExternalContentNodes();
    };
    AttachWidget.prototype.showDialog = function () {
        this.setupFileBrowser();
        this.getExternalContentNodes();
        if (this.dialog) {
            if (!this.dialog.nativeElement.showModal) {
                dialogPolyfill.registerDialog(this.dialog.nativeElement);
            }
            this.dialog.nativeElement.showModal();
            return true;
        }
        return false;
    };
    AttachWidget.prototype.closeDialog = function () {
        if (this.dialog) {
            this.dialog.nativeElement.close();
        }
    };
    AttachWidget.prototype.cancel = function () {
        this.closeDialog();
    };
    AttachWidget.prototype.reset = function () {
        this.field.value = null;
        this.field.json.value = null;
    };
    AttachWidget.prototype.hasFile = function () {
        return this.field && this.field.value;
    };
    return AttachWidget;
}(widget_component_1.WidgetComponent));
__decorate([
    core_1.Input(),
    __metadata("design:type", form_field_model_1.FormFieldModel)
], AttachWidget.prototype, "field", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AttachWidget.prototype, "fieldChanged", void 0);
__decorate([
    core_1.ViewChild('dialog'),
    __metadata("design:type", Object)
], AttachWidget.prototype, "dialog", void 0);
AttachWidget = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'attach-widget',
        template: "<div class=\"attach-widget\">      <label [attr.for]=\"field.id\">{{field.name}}</label>     <div>         <span *ngIf=\"hasFile()\" class=\"attach-widget__file mdl-chip\"><span class=\"mdl-chip__text\">{{getLinkedFileName()}}</span></span>         <button #browseFile (click)=\"showDialog();\" class=\"mdl-button mdl-js-button mdl-js-ripple-effect attach-widget__browser\">             <i class=\"material-icons\">image</i>             Browse {{selectedFolderSiteName}}         </button>         <button *ngIf=\"hasFile\" (click)=\"reset(file);\" class=\"mdl-button mdl-js-button mdl-js-ripple-effect attach-widget__reset\">Clear</button>     </div> </div>  <dialog class=\"mdl-dialog\" #dialog>     <h4 class=\"mdl-dialog__title\">Select content</h4>     <div class=\"mdl-dialog__content\">         <ul class='mdl-list'>             <li class=\"mdl-list__item\" *ngFor=\"let node of selectedFolderNodes\">             <span class=\"mdl-list__item-primary-content\" *ngIf=\"node.folder\">             <i class=\"material-icons mdl-list__item-icon\">folder</i>             <a (click)=\"selectFolder(node, $event)\">{{node.title}}</a>             </span>             <span class=\"mdl-list__item-primary-content\" *ngIf=\"!node.folder\">             <i class=\"material-icons mdl-list__item-icon\">description</i>             <a (click)=\"selectFile(node, $event)\">{{node.title}}</a>             </span>             </li>         </ul>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"cancel()\" class=\"mdl-button close\">Cancel</button>     </div> </dialog>",
        styles: [".attach-widget {     width:100% }  .attach-widget__icon {     float: left; }  .attach-widget__file {     margin-top: 4px; }  .attach-widget__reset {     margin-top: 4px; }"]
    }),
    __metadata("design:paramtypes", [activiti_alfresco_service_1.ActivitiAlfrescoContentService,
        ng2_alfresco_core_1.LogService])
], AttachWidget);
exports.AttachWidget = AttachWidget;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
