/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var widget_component_1 = require("./../widget.component");
var form_service_1 = require("../../../services/form.service");
var PeopleWidget = (function (_super) {
    __extends(PeopleWidget, _super);
    function PeopleWidget(formService, elementRef) {
        var _this = _super.call(this) || this;
        _this.formService = formService;
        _this.elementRef = elementRef;
        _this.popupVisible = false;
        _this.minTermLength = 1;
        _this.users = [];
        return _this;
    }
    PeopleWidget.prototype.ngOnInit = function () {
        var _this = this;
        if (this.field) {
            var user = this.field.value;
            if (user) {
                this.value = this.getDisplayName(user);
            }
            var params = this.field.params;
            if (params && params['restrictWithGroup']) {
                var restrictWithGroup = params['restrictWithGroup'];
                this.groupId = restrictWithGroup.id;
            }
            if (this.value) {
                this.formService
                    .getWorkflowUsers(this.value, this.groupId)
                    .subscribe(function (result) { return _this.users = result || []; });
            }
        }
    };
    PeopleWidget.prototype.onKeyUp = function (event) {
        var _this = this;
        if (this.value && this.value.length >= this.minTermLength) {
            this.formService.getWorkflowUsers(this.value, this.groupId)
                .subscribe(function (result) {
                _this.users = result || [];
                _this.popupVisible = _this.users.length > 0;
            });
        }
        else {
            this.popupVisible = false;
        }
    };
    PeopleWidget.prototype.onBlur = function () {
        var _this = this;
        setTimeout(function () {
            _this.flushValue();
        }, 200);
    };
    PeopleWidget.prototype.flushValue = function () {
        var _this = this;
        this.popupVisible = false;
        var option = this.users.find(function (item) {
            var fullName = _this.getDisplayName(item).toLocaleLowerCase();
            return fullName === _this.value.toLocaleLowerCase();
        });
        if (option) {
            this.field.value = option;
            this.value = this.getDisplayName(option);
        }
        else {
            this.field.value = null;
            this.value = null;
        }
        this.field.updateForm();
    };
    PeopleWidget.prototype.getDisplayName = function (model) {
        if (model) {
            var displayName = (model.firstName || '') + " " + (model.lastName || '');
            return displayName.trim();
        }
        return '';
    };
    PeopleWidget.prototype.onItemClick = function (item, event) {
        if (item) {
            this.field.value = item;
            this.value = this.getDisplayName(item);
        }
        if (event) {
            event.preventDefault();
        }
    };
    PeopleWidget.prototype.setupMaterialComponents = function (handler) {
        _super.prototype.setupMaterialComponents.call(this, handler);
        if (handler) {
            if (this.elementRef && this.value) {
                this.setupMaterialTextField(this.elementRef, handler, this.value);
                return true;
            }
        }
        return false;
    };
    return PeopleWidget;
}(widget_component_1.WidgetComponent));
PeopleWidget = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'people-widget',
        template: "<div class=\"mdl-textfield mdl-js-textfield people-widget\"      [class.people-widget__invalid]=\"!field.isValid\">     <label [attr.for]=\"field.id\">{{field.name}}</label>     <input class=\"mdl-textfield__input\"            type=\"text\"            [attr.id]=\"field.id\"            [(ngModel)]=\"value\"            (ngModelChange)=\"checkVisibility(field)\"            (keyup)=\"onKeyUp($event)\"            (blur)=\"onBlur()\"            [disabled]=\"field.readOnly\"            placeholder=\"{{field.placeholder}}\">     <span *ngIf=\"field.validationSummary\" class=\"mdl-textfield__error\">{{field.validationSummary}}</span> </div> <div class=\"people-widget--autocomplete mdl-shadow--2dp\" *ngIf=\"popupVisible && users.length > 0\">     <ul>         <li *ngFor=\"let item of users\"             class=\"mdl-menu__item\"             (click)=\"onItemClick(item, $event)\">             {{getDisplayName(item)}}         </li>     </ul> </div>",
        styles: [".people-widget {     width: 100%; }  .people-widget--autocomplete {     background-color: #fff;     position: absolute;     z-index: 5;     color: #555;     margin: -15px 0 0 0; }  .people-widget--autocomplete > ul {     list-style-type: none;     position: static;      height: auto;     width: auto;     min-width: 124px;     padding: 8px 0;     margin: 0;      box-shadow: 0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);     border-radius: 2px; }  .people-widget--autocomplete > ul > li {     opacity: 1; }  .people-widget__invalid .mdl-textfield__input {     border-color: #d50000; }  .people-widget__invalid .mdl-textfield__label {     color: #d50000; }  .people-widget__invalid .mdl-textfield__label:after {     background-color: #d50000; }  .people-widget__invalid .mdl-textfield__error {     visibility: visible !important; }"]
    }),
    __metadata("design:paramtypes", [form_service_1.FormService,
        core_1.ElementRef])
], PeopleWidget);
exports.PeopleWidget = PeopleWidget;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
