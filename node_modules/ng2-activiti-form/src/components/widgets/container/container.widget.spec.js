/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var container_widget_1 = require("./container.widget");
var container_widget_model_1 = require("./container.widget.model");
var form_model_1 = require("./../core/form.model");
var form_field_types_1 = require("./../core/form-field-types");
var form_field_model_1 = require("./../core/form-field.model");
var testing_1 = require("@angular/core/testing");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var index_1 = require("../index");
var form_field_component_1 = require("./../../form-field/form-field.component");
var widget_visibility_service_mock_1 = require("../../../services/assets/widget-visibility.service.mock");
describe('ContainerWidget', function () {
    var componentHandler;
    beforeEach(function () {
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should wrap field with model instance', function () {
        var field = new form_field_model_1.FormFieldModel(null);
        var container = new container_widget_1.ContainerWidget();
        container.field = field;
        container.ngOnInit();
        expect(container.content).toBeDefined();
        expect(container.content.field).toBe(field);
    });
    it('should upgrade MDL content on view init', function () {
        var container = new container_widget_1.ContainerWidget();
        container.ngAfterViewInit();
        expect(componentHandler.upgradeAllRegistered).toHaveBeenCalled();
    });
    it('should setup MDL content only if component handler available', function () {
        var container = new container_widget_1.ContainerWidget();
        expect(container.setupMaterialComponents()).toBeTruthy();
        window['componentHandler'] = null;
        expect(container.setupMaterialComponents()).toBeFalsy();
    });
    it('should toggle underlying group container', function () {
        var container = new container_widget_model_1.ContainerWidgetModel(new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
            type: form_field_types_1.FormFieldTypes.GROUP,
            params: {
                allowCollapse: true
            }
        }));
        var widget = new container_widget_1.ContainerWidget();
        widget.content = container;
        expect(container.isExpanded).toBeTruthy();
        widget.onExpanderClicked();
        expect(container.isExpanded).toBeFalsy();
        widget.onExpanderClicked();
        expect(container.isExpanded).toBeTruthy();
    });
    it('should toggle only collapsible container', function () {
        var container = new container_widget_model_1.ContainerWidgetModel(new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
            type: form_field_types_1.FormFieldTypes.GROUP
        }));
        var widget = new container_widget_1.ContainerWidget();
        widget.content = container;
        expect(container.isExpanded).toBeTruthy();
        widget.onExpanderClicked();
        expect(container.isExpanded).toBeTruthy();
    });
    it('should toggle only group container', function () {
        var container = new container_widget_model_1.ContainerWidgetModel(new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
            type: form_field_types_1.FormFieldTypes.CONTAINER,
            params: {
                allowCollapse: true
            }
        }));
        var widget = new container_widget_1.ContainerWidget();
        widget.content = container;
        expect(container.isExpanded).toBeTruthy();
        widget.onExpanderClicked();
        expect(container.isExpanded).toBeTruthy();
    });
    it('should send an event when a value is changed in the form', function (done) {
        var widget = new container_widget_1.ContainerWidget();
        var fakeForm = new form_model_1.FormModel();
        var fakeField = new form_field_model_1.FormFieldModel(fakeForm, { id: 'fakeField', value: 'fakeValue' });
        widget.fieldChanged.subscribe(function (field) {
            expect(field).not.toBe(null);
            expect(field.id).toBe('fakeField');
            expect(field.value).toBe('fakeValue');
            done();
        });
        widget.onFieldChanged(fakeField);
    });
    describe('when template is ready', function () {
        var containerWidgetComponent;
        var fixture;
        var element;
        var fakeContainerVisible;
        var fakeContainerInvisible;
        beforeEach(testing_1.async(function () {
            testing_1.TestBed.configureTestingModule({
                imports: [ng2_alfresco_core_1.CoreModule],
                declarations: [form_field_component_1.FormFieldComponent, index_1.WIDGET_DIRECTIVES]
            }).compileComponents().then(function () {
                fixture = testing_1.TestBed.createComponent(container_widget_1.ContainerWidget);
                containerWidgetComponent = fixture.componentInstance;
                element = fixture.nativeElement;
            });
        }));
        beforeEach(function () {
            componentHandler = jasmine.createSpyObj('componentHandler', ['upgradeAllRegistered', 'upgradeElement']);
            window['componentHandler'] = componentHandler;
            fakeContainerVisible = new container_widget_model_1.ContainerWidgetModel(new form_field_model_1.FormFieldModel(new form_model_1.FormModel(widget_visibility_service_mock_1.fakeFormJson), {
                fieldType: form_field_types_1.FormFieldTypes.GROUP,
                id: 'fake-cont-id-1',
                name: 'fake-cont-1-name',
                type: form_field_types_1.FormFieldTypes.GROUP
            }));
            fakeContainerInvisible = new container_widget_model_1.ContainerWidgetModel(new form_field_model_1.FormFieldModel(new form_model_1.FormModel(widget_visibility_service_mock_1.fakeFormJson), {
                fieldType: form_field_types_1.FormFieldTypes.GROUP,
                id: 'fake-cont-id-2',
                name: 'fake-cont-2-name',
                type: form_field_types_1.FormFieldTypes.GROUP
            }));
            fakeContainerVisible.field.isVisible = true;
            fakeContainerInvisible.field.isVisible = false;
        });
        afterEach(function () {
            fixture.destroy();
            testing_1.TestBed.resetTestingModule();
        });
        it('should show the container header when it is visible', function () {
            containerWidgetComponent.content = fakeContainerVisible;
            fixture.detectChanges();
            fixture.whenStable()
                .then(function () {
                expect(element.querySelector('.container-widget__header').classList.contains('hidden')).toBe(false);
                expect(element.querySelector('#container-header-label')).toBeDefined();
                expect(element.querySelector('#container-header-label').innerHTML).toContain('fake-cont-1-name');
            });
        });
        it('should not show the container header when it is not visible', function () {
            containerWidgetComponent.content = fakeContainerInvisible;
            fixture.detectChanges();
            fixture.whenStable()
                .then(function () {
                expect(element.querySelector('.container-widget__header').classList.contains('hidden')).toBe(true);
            });
        });
        it('should hide header when it becomes not visible', testing_1.async(function () {
            containerWidgetComponent.content = fakeContainerVisible;
            fixture.detectChanges();
            containerWidgetComponent.fieldChanged.subscribe(function (res) {
                containerWidgetComponent.content.field.isVisible = false;
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    expect(element.querySelector('.container-widget__header').classList.contains('hidden')).toBe(true);
                });
            });
            containerWidgetComponent.onFieldChanged(null);
        }));
        it('should show header when it becomes visible', testing_1.async(function () {
            containerWidgetComponent.content = fakeContainerInvisible;
            containerWidgetComponent.fieldChanged.subscribe(function (res) {
                containerWidgetComponent.content.field.isVisible = true;
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    expect(element.querySelector('#container-header')).toBeDefined();
                    expect(element.querySelector('#container-header')).not.toBeNull();
                    expect(element.querySelector('#container-header-label')).toBeDefined();
                    expect(element.querySelector('#container-header-label').innerHTML).toContain('fake-cont-2-name');
                });
            });
            containerWidgetComponent.onFieldChanged(null);
        }));
    });
});
//# sourceMappingURL=container.widget.spec.js.map