/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require("@angular/core");
var container_widget_model_1 = require("./container.widget.model");
var widget_component_1 = require("./../widget.component");
var ContainerWidget = (function (_super) {
    __extends(ContainerWidget, _super);
    function ContainerWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContainerWidget.prototype.onExpanderClicked = function () {
        if (this.content && this.content.isCollapsible()) {
            this.content.isExpanded = !this.content.isExpanded;
        }
    };
    ContainerWidget.prototype.ngOnInit = function () {
        if (this.field) {
            this.content = new container_widget_model_1.ContainerWidgetModel(this.field);
        }
    };
    ContainerWidget.prototype.ngAfterViewInit = function () {
        this.setupMaterialComponents();
    };
    ContainerWidget.prototype.setupMaterialComponents = function () {
        if (componentHandler) {
            componentHandler.upgradeAllRegistered();
            return true;
        }
        return false;
    };
    return ContainerWidget;
}(widget_component_1.WidgetComponent));
ContainerWidget = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'container-widget',
        template: "<div class=\"container-widget\">     <div [ngClass]=\"{'hidden':!(content?.isGroup() && content?.isVisible)}\" class=\"container-widget__header\">         <h4 class=\"container-widget__header-text\" id=\"container-header\"             [class.collapsible]=\"content?.isCollapsible()\">             <button *ngIf=\"content?.isCollapsible()\"                     alfresco-mdl-button                     class=\"mdl-button--icon\"                     (click)=\"onExpanderClicked()\">                 <i class=\"material-icons\">{{ content?.isExpanded ? 'expand_less' : 'expand_more' }}</i>             </button>             <span (click)=\"onExpanderClicked()\" id=\"container-header-label\">{{content.name}}</span>         </h4>     </div>     <div class=\"mdl-grid container-widget__mdl-grid\" [ngClass]=\"{'hidden':!(content?.isVisible && content?.isExpanded)}\">         <div *ngFor=\"let col of content.columns\" class=\"mdl-cell mdl-cell--{{col.size}}-col\">             <div class=\"mdl-grid container-widget__mdl-grid\" *ngIf=\"col.hasFields()\">                 <div *ngFor=\"let field of col.fields\" class=\"mdl-cell mdl-cell--12-col\">                     <form-field [field]=\"field\"></form-field>                 </div>             </div>         </div>     </div> </div>",
        styles: [".container-widget {}  .container-widget__header {}  .container-widget__header-text {     border-bottom: 1px solid rgba(0,0,0,.87);     margin-left: 10px;     margin-right: 10px;     cursor: default;      user-select: none;     -webkit-user-select: none;   /* Chrome/Safari/Opera */     -moz-user-select: none;      /* Firefox */     -ms-user-select: none;       /* IE/Edge */     -webkit-touch-callout: none; /* iOS Safari */ }  .container-widget__header-text.collapsible {     cursor: pointer; }  .container-widget__mdl-grid {     align-items: center; }"]
    })
], ContainerWidget);
exports.ContainerWidget = ContainerWidget;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy9jb250YWluZXIvY29udGFpbmVyLndpZGdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7Ozs7QUFFSCxzQ0FBaUU7QUFDakUsbUVBQWdFO0FBQ2hFLDBEQUF3RDtBQVV4RCxJQUFhLGVBQWU7SUFBUyxtQ0FBZTtJQUFwRDs7SUE0QkEsQ0FBQztJQXhCRywyQ0FBaUIsR0FBakI7UUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDdkQsQ0FBQztJQUNMLENBQUM7SUFFRCxrQ0FBUSxHQUFSO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDYixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksNkNBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hELENBQUM7SUFDTCxDQUFDO0lBRUQseUNBQWUsR0FBZjtRQUNJLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFRCxpREFBdUIsR0FBdkI7UUFFSSxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDbkIsZ0JBQWdCLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztZQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFDTCxzQkFBQztBQUFELENBNUJBLEFBNEJDLENBNUJvQyxrQ0FBZSxHQTRCbkQ7QUE1QlksZUFBZTtJQU4zQixnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIsUUFBUSxFQUFFLG93Q0FBb3dDO1FBQzl3QyxNQUFNLEVBQUUsQ0FBQyw0aUJBQTRpQixDQUFDO0tBQ3pqQixDQUFDO0dBQ1csZUFBZSxDQTRCM0I7QUE1QlksMENBQWUiLCJmaWxlIjoiY29tcG9uZW50cy93aWRnZXRzL2NvbnRhaW5lci9jb250YWluZXIud2lkZ2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBBZnRlclZpZXdJbml0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRhaW5lcldpZGdldE1vZGVsIH0gZnJvbSAnLi9jb250YWluZXIud2lkZ2V0Lm1vZGVsJztcbmltcG9ydCB7IFdpZGdldENvbXBvbmVudCB9IGZyb20gJy4vLi4vd2lkZ2V0LmNvbXBvbmVudCc7XG5cbmRlY2xhcmUgdmFyIGNvbXBvbmVudEhhbmRsZXI6IGFueTtcblxuQENvbXBvbmVudCh7XG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICBzZWxlY3RvcjogJ2NvbnRhaW5lci13aWRnZXQnLFxuICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcImNvbnRhaW5lci13aWRnZXRcXFwiPiAgICAgPGRpdiBbbmdDbGFzc109XFxcInsnaGlkZGVuJzohKGNvbnRlbnQ/LmlzR3JvdXAoKSAmJiBjb250ZW50Py5pc1Zpc2libGUpfVxcXCIgY2xhc3M9XFxcImNvbnRhaW5lci13aWRnZXRfX2hlYWRlclxcXCI+ICAgICAgICAgPGg0IGNsYXNzPVxcXCJjb250YWluZXItd2lkZ2V0X19oZWFkZXItdGV4dFxcXCIgaWQ9XFxcImNvbnRhaW5lci1oZWFkZXJcXFwiICAgICAgICAgICAgIFtjbGFzcy5jb2xsYXBzaWJsZV09XFxcImNvbnRlbnQ/LmlzQ29sbGFwc2libGUoKVxcXCI+ICAgICAgICAgICAgIDxidXR0b24gKm5nSWY9XFxcImNvbnRlbnQ/LmlzQ29sbGFwc2libGUoKVxcXCIgICAgICAgICAgICAgICAgICAgICBhbGZyZXNjby1tZGwtYnV0dG9uICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcIm1kbC1idXR0b24tLWljb25cXFwiICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cXFwib25FeHBhbmRlckNsaWNrZWQoKVxcXCI+ICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnNcXFwiPnt7IGNvbnRlbnQ/LmlzRXhwYW5kZWQgPyAnZXhwYW5kX2xlc3MnIDogJ2V4cGFuZF9tb3JlJyB9fTwvaT4gICAgICAgICAgICAgPC9idXR0b24+ICAgICAgICAgICAgIDxzcGFuIChjbGljayk9XFxcIm9uRXhwYW5kZXJDbGlja2VkKClcXFwiIGlkPVxcXCJjb250YWluZXItaGVhZGVyLWxhYmVsXFxcIj57e2NvbnRlbnQubmFtZX19PC9zcGFuPiAgICAgICAgIDwvaDQ+ICAgICA8L2Rpdj4gICAgIDxkaXYgY2xhc3M9XFxcIm1kbC1ncmlkIGNvbnRhaW5lci13aWRnZXRfX21kbC1ncmlkXFxcIiBbbmdDbGFzc109XFxcInsnaGlkZGVuJzohKGNvbnRlbnQ/LmlzVmlzaWJsZSAmJiBjb250ZW50Py5pc0V4cGFuZGVkKX1cXFwiPiAgICAgICAgIDxkaXYgKm5nRm9yPVxcXCJsZXQgY29sIG9mIGNvbnRlbnQuY29sdW1uc1xcXCIgY2xhc3M9XFxcIm1kbC1jZWxsIG1kbC1jZWxsLS17e2NvbC5zaXplfX0tY29sXFxcIj4gICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibWRsLWdyaWQgY29udGFpbmVyLXdpZGdldF9fbWRsLWdyaWRcXFwiICpuZ0lmPVxcXCJjb2wuaGFzRmllbGRzKClcXFwiPiAgICAgICAgICAgICAgICAgPGRpdiAqbmdGb3I9XFxcImxldCBmaWVsZCBvZiBjb2wuZmllbGRzXFxcIiBjbGFzcz1cXFwibWRsLWNlbGwgbWRsLWNlbGwtLTEyLWNvbFxcXCI+ICAgICAgICAgICAgICAgICAgICAgPGZvcm0tZmllbGQgW2ZpZWxkXT1cXFwiZmllbGRcXFwiPjwvZm9ybS1maWVsZD4gICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICA8L2Rpdj4gICAgIDwvZGl2PiA8L2Rpdj5cIixcbiAgICBzdHlsZXM6IFtcIi5jb250YWluZXItd2lkZ2V0IHt9ICAuY29udGFpbmVyLXdpZGdldF9faGVhZGVyIHt9ICAuY29udGFpbmVyLXdpZGdldF9faGVhZGVyLXRleHQgeyAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMCwwLDAsLjg3KTsgICAgIG1hcmdpbi1sZWZ0OiAxMHB4OyAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4OyAgICAgY3Vyc29yOiBkZWZhdWx0OyAgICAgIHVzZXItc2VsZWN0OiBub25lOyAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTsgICAvKiBDaHJvbWUvU2FmYXJpL09wZXJhICovICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lOyAgICAgIC8qIEZpcmVmb3ggKi8gICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTsgICAgICAgLyogSUUvRWRnZSAqLyAgICAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lOyAvKiBpT1MgU2FmYXJpICovIH0gIC5jb250YWluZXItd2lkZ2V0X19oZWFkZXItdGV4dC5jb2xsYXBzaWJsZSB7ICAgICBjdXJzb3I6IHBvaW50ZXI7IH0gIC5jb250YWluZXItd2lkZ2V0X19tZGwtZ3JpZCB7ICAgICBhbGlnbi1pdGVtczogY2VudGVyOyB9XCJdXG59KVxuZXhwb3J0IGNsYXNzIENvbnRhaW5lcldpZGdldCBleHRlbmRzIFdpZGdldENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICBjb250ZW50OiBDb250YWluZXJXaWRnZXRNb2RlbDtcblxuICAgIG9uRXhwYW5kZXJDbGlja2VkKCkge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50ICYmIHRoaXMuY29udGVudC5pc0NvbGxhcHNpYmxlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5pc0V4cGFuZGVkID0gIXRoaXMuY29udGVudC5pc0V4cGFuZGVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmZpZWxkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBuZXcgQ29udGFpbmVyV2lkZ2V0TW9kZWwodGhpcy5maWVsZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0dXBNYXRlcmlhbENvbXBvbmVudHMoKTtcbiAgICB9XG5cbiAgICBzZXR1cE1hdGVyaWFsQ29tcG9uZW50cygpOiBib29sZWFuIHtcbiAgICAgICAgLy8gd29ya2Fyb3VuZCBmb3IgTURMIGlzc3VlcyB3aXRoIGR5bmFtaWMgY29tcG9uZW50c1xuICAgICAgICBpZiAoY29tcG9uZW50SGFuZGxlcikge1xuICAgICAgICAgICAgY29tcG9uZW50SGFuZGxlci51cGdyYWRlQWxsUmVnaXN0ZXJlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==
