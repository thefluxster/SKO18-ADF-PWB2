/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var container_widget_model_1 = require("./container.widget.model");
var form_model_1 = require("./../core/form.model");
var form_field_model_1 = require("./../core/form-field.model");
var form_field_types_1 = require("./../core/form-field-types");
describe('ContainerWidgetModel', function () {
    it('should store the form reference', function () {
        var form = new form_model_1.FormModel();
        var field = new form_field_model_1.FormFieldModel(form);
        var model = new container_widget_model_1.ContainerWidgetModel(field);
        expect(model.form).toBe(form);
    });
    it('should be expanded by default', function () {
        var container = new container_widget_model_1.ContainerWidgetModel(null);
        expect(container.isExpanded).toBeTruthy();
    });
    it('should wrap fields into columns on setup', function () {
        var form = new form_model_1.FormModel();
        var json = {
            fieldType: '<type>',
            id: '<id>',
            name: '<name>',
            type: '<type>',
            tab: '<tab>',
            numberOfColumns: 3,
            params: {},
            visibilityCondition: {},
            fields: {
                '1': [
                    { id: 'field-1' },
                    { id: 'field-3' }
                ],
                '2': [
                    { id: 'field-2' }
                ],
                '3': null
            }
        };
        var field = new form_field_model_1.FormFieldModel(form, json);
        var container = new container_widget_model_1.ContainerWidgetModel(field);
        expect(container.columns.length).toBe(3);
        var col1 = container.columns[0];
        expect(col1.fields.length).toBe(2);
        expect(col1.fields[0].id).toBe('field-1');
        expect(col1.fields[1].id).toBe('field-3');
        var col2 = container.columns[1];
        expect(col2.fields.length).toBe(1);
        expect(col2.fields[0].id).toBe('field-2');
        var col3 = container.columns[2];
        expect(col3.fields.length).toBe(0);
    });
    it('should allow collapsing only when of a group type', function () {
        var container = new container_widget_model_1.ContainerWidgetModel(new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
            type: form_field_types_1.FormFieldTypes.CONTAINER,
            params: {
                allowCollapse: true
            }
        }));
        expect(container.isCollapsible()).toBeFalsy();
        container = new container_widget_model_1.ContainerWidgetModel(new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
            type: form_field_types_1.FormFieldTypes.GROUP,
            params: {
                allowCollapse: true
            }
        }));
        expect(container.isCollapsible()).toBeTruthy();
    });
    it('should allow collapsing only when explicitly defined in params', function () {
        var container = new container_widget_model_1.ContainerWidgetModel(new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
            type: form_field_types_1.FormFieldTypes.GROUP,
            params: {}
        }));
        expect(container.isCollapsible()).toBeFalsy();
        container = new container_widget_model_1.ContainerWidgetModel(new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
            type: form_field_types_1.FormFieldTypes.GROUP,
            params: {
                allowCollapse: true
            }
        }));
        expect(container.isCollapsible()).toBeTruthy();
    });
    it('should be collapsed by default', function () {
        var container = new container_widget_model_1.ContainerWidgetModel(new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), {
            type: form_field_types_1.FormFieldTypes.GROUP,
            params: {
                allowCollapse: true,
                collapseByDefault: true
            }
        }));
        expect(container.isCollapsedByDefault()).toBeTruthy();
    });
});
//# sourceMappingURL=container.widget.model.spec.js.map