/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var index_1 = require("./core/index");
var WidgetComponent = (function () {
    function WidgetComponent() {
        this.fieldChanged = new core_1.EventEmitter();
    }
    WidgetComponent.prototype.hasField = function () {
        return this.field ? true : false;
    };
    WidgetComponent.prototype.isRequired = function () {
        if (this.field && this.field.required) {
            return true;
        }
        return null;
    };
    WidgetComponent.prototype.hasValue = function () {
        return this.field &&
            this.field.value !== null &&
            this.field.value !== undefined;
    };
    WidgetComponent.prototype.ngAfterViewInit = function () {
        this.setupMaterialComponents(componentHandler);
        this.fieldChanged.emit(this.field);
    };
    WidgetComponent.prototype.setupMaterialComponents = function (handler) {
        if (handler) {
            handler.upgradeAllRegistered();
            return true;
        }
        return false;
    };
    WidgetComponent.prototype.setupMaterialTextField = function (elementRef, handler, value) {
        if (elementRef && handler) {
            var el = elementRef.nativeElement;
            if (el) {
                var container = el.querySelector('.mdl-textfield');
                if (container) {
                    container.MaterialTextfield.change(value);
                    return true;
                }
            }
        }
        return false;
    };
    WidgetComponent.prototype.checkVisibility = function (field) {
        console.log('WidgetComponent.checkVisibility was used only to trigger visibility engine, components should do that internally if needed');
        this.fieldChanged.emit(field);
    };
    WidgetComponent.prototype.onFieldChanged = function (field) {
        console.log('WidgetComponent.onFieldChanged was used only to trigger visibility engine, components should do that internally if needed');
        this.fieldChanged.emit(field);
    };
    WidgetComponent.prototype.getHyperlinkUrl = function (field) {
        var url = WidgetComponent.DEFAULT_HYPERLINK_URL;
        if (field && field.hyperlinkUrl) {
            url = field.hyperlinkUrl;
            if (!/^https?:\/\//i.test(url)) {
                url = "" + WidgetComponent.DEFAULT_HYPERLINK_SCHEME + url;
            }
        }
        return url;
    };
    WidgetComponent.prototype.getHyperlinkText = function (field) {
        if (field) {
            return field.displayText || field.hyperlinkUrl;
        }
        return null;
    };
    return WidgetComponent;
}());
WidgetComponent.DEFAULT_HYPERLINK_URL = '#';
WidgetComponent.DEFAULT_HYPERLINK_SCHEME = 'http://';
__decorate([
    core_1.Input(),
    __metadata("design:type", index_1.FormFieldModel)
], WidgetComponent.prototype, "field", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], WidgetComponent.prototype, "fieldChanged", void 0);
exports.WidgetComponent = WidgetComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
