/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var form_service_1 = require("../../../services/form.service");
var radio_buttons_widget_1 = require("./radio-buttons.widget");
var form_model_1 = require("./../core/form.model");
var form_field_model_1 = require("./../core/form-field.model");
var ecm_model_service_1 = require("../../../services/ecm-model.service");
var widget_visibility_service_1 = require("../../../services/widget-visibility.service");
var form_field_types_1 = require("../core/form-field-types");
var container_model_1 = require("../core/container.model");
describe('RadioButtonsWidget', function () {
    var formService;
    var widget;
    var visibilityService;
    var logService;
    beforeEach(function () {
        logService = new ng2_alfresco_core_1.LogServiceMock();
        formService = new form_service_1.FormService(null, null, logService);
        visibilityService = new widget_visibility_service_1.WidgetVisibilityService(null, logService);
        widget = new radio_buttons_widget_1.RadioButtonsWidget(formService, visibilityService, logService);
        widget.field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel(), { restUrl: '<url>' });
    });
    it('should request field values from service', function () {
        var taskId = '<form-id>';
        var fieldId = '<field-id>';
        var form = new form_model_1.FormModel({
            taskId: taskId
        });
        widget.field = new form_field_model_1.FormFieldModel(form, {
            id: fieldId,
            restUrl: '<url>'
        });
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(null);
            observer.complete();
        }));
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalledWith(taskId, fieldId);
    });
    it('should update form on values fetched', function () {
        var taskId = '<form-id>';
        var fieldId = '<field-id>';
        var form = new form_model_1.FormModel({
            taskId: taskId
        });
        widget.field = new form_field_model_1.FormFieldModel(form, {
            id: fieldId,
            restUrl: '<url>'
        });
        var field = widget.field;
        spyOn(field, 'updateForm').and.stub();
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(null);
            observer.complete();
        }));
        widget.ngOnInit();
        expect(field.updateForm).toHaveBeenCalled();
    });
    it('should require field with rest URL to fetch data', function () {
        var taskId = '<form-id>';
        var fieldId = '<field-id>';
        var form = new form_model_1.FormModel({
            taskId: taskId
        });
        widget.field = new form_field_model_1.FormFieldModel(form, {
            id: fieldId,
            restUrl: '<url>'
        });
        spyOn(formService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.create(function (observer) {
            observer.next(null);
            observer.complete();
        }));
        var field = widget.field;
        widget.field = null;
        widget.ngOnInit();
        expect(formService.getRestFieldValues).not.toHaveBeenCalled();
        widget.field = field;
        widget.field.restUrl = null;
        widget.ngOnInit();
        expect(formService.getRestFieldValues).not.toHaveBeenCalled();
        widget.field.restUrl = '<url>';
        widget.ngOnInit();
        expect(formService.getRestFieldValues).toHaveBeenCalled();
    });
    it('should log error to console by default', function () {
        spyOn(logService, 'error').and.stub();
        widget.handleError('Err');
        expect(logService.error).toHaveBeenCalledWith('Err');
    });
    xit('should update the field value when an option is selected', function () {
        spyOn(widget, 'checkVisibility').and.stub();
        widget.onOptionClick('fake-opt');
        expect(widget.field.value).toEqual('fake-opt');
    });
    describe('when template is ready', function () {
        var radioButtonWidget;
        var fixture;
        var element;
        var componentHandler;
        var stubFormService;
        var stubVisibilityService;
        var restOption = [{ id: 'opt-1', name: 'opt-name-1' }, {
                id: 'opt-2',
                name: 'opt-name-2'
            }];
        beforeEach(testing_1.async(function () {
            componentHandler = jasmine.createSpyObj('componentHandler', ['upgradeAllRegistered', 'upgradeElement']);
            window['componentHandler'] = componentHandler;
            testing_1.TestBed.configureTestingModule({
                imports: [ng2_alfresco_core_1.CoreModule],
                declarations: [radio_buttons_widget_1.RadioButtonsWidget],
                providers: [form_service_1.FormService, ecm_model_service_1.EcmModelService, widget_visibility_service_1.WidgetVisibilityService]
            }).compileComponents().then(function () {
                fixture = testing_1.TestBed.createComponent(radio_buttons_widget_1.RadioButtonsWidget);
                radioButtonWidget = fixture.componentInstance;
                element = fixture.nativeElement;
            });
        }));
        afterEach(function () {
            fixture.destroy();
            testing_1.TestBed.resetTestingModule();
        });
        describe('and radioButton is populated via taskId', function () {
            beforeEach(testing_1.async(function () {
                stubFormService = fixture.debugElement.injector.get(form_service_1.FormService);
                stubVisibilityService = fixture.debugElement.injector.get(widget_visibility_service_1.WidgetVisibilityService);
                spyOn(stubFormService, 'getRestFieldValues').and.returnValue(Rx_1.Observable.of(restOption));
                radioButtonWidget.field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel({ taskId: 'task-id' }), {
                    id: 'radio-id',
                    name: 'radio-name',
                    type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS,
                    restUrl: 'rest-url'
                });
                radioButtonWidget.field.isVisible = true;
                var fakeContainer = new container_model_1.ContainerModel(radioButtonWidget.field);
                radioButtonWidget.field.form.fields.push(fakeContainer);
                fixture.detectChanges();
            }));
            it('should show visible radio buttons', testing_1.async(function () {
                expect(element.querySelector('#radio-id')).toBeDefined();
                expect(element.querySelector('#opt-1')).not.toBeNull();
                expect(element.querySelector('#radio-id-opt-1')).not.toBeNull();
                expect(element.querySelector('#opt-2')).not.toBeNull();
                expect(element.querySelector('#radio-id-opt-2')).not.toBeNull();
            }));
            it('should not show invisible radio buttons', testing_1.async(function () {
                radioButtonWidget.field.isVisible = false;
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    expect(element.querySelector('#radio-id')).toBeNull();
                    expect(element.querySelector('#opt-1')).toBeNull();
                    expect(element.querySelector('#opt-2')).toBeNull();
                });
            }));
            it('should evaluate visibility on option click', testing_1.async(function () {
                spyOn(stubVisibilityService, 'evaluateVisibility').and.returnValue(false);
                var option = element.querySelector('#opt-1');
                expect(element.querySelector('#radio-id')).not.toBeNull();
                expect(option).not.toBeNull();
                option.click();
                fixture.detectChanges();
                fixture.whenStable()
                    .then(function () {
                    expect(element.querySelector('#radio-id')).toBeNull();
                    expect(element.querySelector('#opt-1')).toBeNull();
                });
            }));
        });
        describe('and radioButton is populated via processDefinitionId', function () {
            beforeEach(testing_1.async(function () {
                radioButtonWidget.field = new form_field_model_1.FormFieldModel(new form_model_1.FormModel({ processDefinitionId: 'proc-id' }), {
                    id: 'radio-id',
                    name: 'radio-name',
                    type: form_field_types_1.FormFieldTypes.RADIO_BUTTONS,
                    restUrl: 'rest-url'
                });
                stubFormService = fixture.debugElement.injector.get(form_service_1.FormService);
                spyOn(stubFormService, 'getRestFieldValuesByProcessId').and.returnValue(Rx_1.Observable.of(restOption));
                radioButtonWidget.field.isVisible = true;
                fixture.detectChanges();
            }));
            it('should show visible radio buttons', testing_1.async(function () {
                expect(element.querySelector('#radio-id')).toBeDefined();
                expect(element.querySelector('#opt-1')).not.toBeNull();
                expect(element.querySelector('#radio-id-opt-1')).not.toBeNull();
                expect(element.querySelector('#opt-2')).not.toBeNull();
                expect(element.querySelector('#radio-id-opt-2')).not.toBeNull();
            }));
        });
    });
});
//# sourceMappingURL=radio-buttons.widget.spec.js.map