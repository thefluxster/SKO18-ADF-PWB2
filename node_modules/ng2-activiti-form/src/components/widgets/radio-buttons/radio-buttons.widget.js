/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var widget_component_1 = require("./../widget.component");
var form_service_1 = require("../../../services/form.service");
var widget_visibility_service_1 = require("../../../services/widget-visibility.service");
var RadioButtonsWidget = (function (_super) {
    __extends(RadioButtonsWidget, _super);
    function RadioButtonsWidget(formService, visibilityService, logService) {
        var _this = _super.call(this) || this;
        _this.formService = formService;
        _this.visibilityService = visibilityService;
        _this.logService = logService;
        return _this;
    }
    RadioButtonsWidget.prototype.ngOnInit = function () {
        if (this.field && this.field.restUrl) {
            if (this.field.form.taskId) {
                this.getOptionsByTaskId();
            }
            else {
                this.getOptionsByProcessDefinitionId();
            }
        }
    };
    RadioButtonsWidget.prototype.getOptionsByTaskId = function () {
        var _this = this;
        this.formService
            .getRestFieldValues(this.field.form.taskId, this.field.id)
            .subscribe(function (result) {
            _this.field.options = result || [];
            _this.field.updateForm();
        }, function (err) { return _this.handleError(err); });
    };
    RadioButtonsWidget.prototype.getOptionsByProcessDefinitionId = function () {
        var _this = this;
        this.formService
            .getRestFieldValuesByProcessId(this.field.form.processDefinitionId, this.field.id)
            .subscribe(function (result) {
            _this.field.options = result || [];
            _this.field.updateForm();
        }, function (err) { return _this.handleError(err); });
    };
    RadioButtonsWidget.prototype.onOptionClick = function (optionSelected) {
        this.field.value = optionSelected;
        this.checkVisibility();
    };
    RadioButtonsWidget.prototype.checkVisibility = function () {
        this.visibilityService.refreshVisibility(this.field.form);
    };
    RadioButtonsWidget.prototype.handleError = function (error) {
        this.logService.error(error);
    };
    return RadioButtonsWidget;
}(widget_component_1.WidgetComponent));
RadioButtonsWidget = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'radio-buttons-widget',
        template: "<div class=\"radio-buttons-widget\"      [class.radio-buttons-widget__invalid]=\"!field.isValid\" [id]=\"field.id\" *ngIf=\"field?.isVisible\">     <label class=\"radio-buttons-widget__label\" [attr.for]=\"field.id\">{{field.name}}</label>     <div *ngFor=\"let opt of field.options\">         <label [id]=\"opt.id\" [attr.for]=\"field.id + '-' + opt.id\" class=\"mdl-radio mdl-js-radio\">             <input type=\"radio\"                    class=\"mdl-radio__button\"                    [checked]=\"field.value === opt.id\"                    [attr.id]=\"field.id + '-' + opt.id\"                    [attr.name]=\"field.id\"                    [attr.value]=\"opt.id\"                    [disabled]=\"field.readOnly\"                    (click)=\"onOptionClick(opt.id)\">             <span class=\"mdl-radio__label\">{{opt.name}}</span>         </label>     </div>     <span *ngIf=\"field.validationSummary\" class=\"mdl-textfield__error\">{{field.validationSummary}}</span> </div>",
        styles: [".radio-buttons-widget {}  .radio-buttons-widget__invalid .mdl-radio__label {     color: #d50000; }  .radio-buttons-widget__invalid .radio-buttons-widget__label {     color: #d50000; }  .radio-buttons-widget__invalid .radio-buttons-widget__label:after {     background-color: #d50000; }  .radio-buttons-widget__invalid .mdl-textfield__error {     visibility: visible !important; }"]
    }),
    __metadata("design:paramtypes", [form_service_1.FormService,
        widget_visibility_service_1.WidgetVisibilityService,
        ng2_alfresco_core_1.LogService])
], RadioButtonsWidget);
exports.RadioButtonsWidget = RadioButtonsWidget;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
