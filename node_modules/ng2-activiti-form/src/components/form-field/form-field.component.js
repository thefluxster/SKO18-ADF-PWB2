/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var widget_visibility_service_1 = require("./../../services/widget-visibility.service");
var form_rendering_service_1 = require("./../../services/form-rendering.service");
var index_1 = require("./../widgets/core/index");
var FormFieldComponent = (function () {
    function FormFieldComponent(formRenderingService, componentFactoryResolver, visibilityService, compiler) {
        this.formRenderingService = formRenderingService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.visibilityService = visibilityService;
        this.compiler = compiler;
        this.field = null;
    }
    FormFieldComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.field) {
            var customTemplate = this.field.form.customFieldTemplates[this.field.type];
            if (customTemplate && this.hasController(this.field.type)) {
                var factory = this.getComponentFactorySync(this.field.type, customTemplate);
                this.componentRef = this.container.createComponent(factory);
                var instance = this.componentRef.instance;
                if (instance) {
                    instance.field = this.field;
                }
            }
            else {
                var componentType = this.formRenderingService.resolveComponentType(this.field);
                if (componentType) {
                    var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                    this.componentRef = this.container.createComponent(factory);
                    var instance = this.componentRef.instance;
                    instance.field = this.field;
                    instance.fieldChanged.subscribe(function (field) {
                        if (field && field.form) {
                            _this.visibilityService.refreshVisibility(field.form);
                        }
                    });
                }
            }
        }
    };
    FormFieldComponent.prototype.ngOnDestroy = function () {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    };
    FormFieldComponent.prototype.hasController = function (type) {
        return (adf && adf.components && adf.components[type]);
    };
    FormFieldComponent.prototype.getComponentFactorySync = function (type, template) {
        var componentInfo = adf.components[type];
        if (componentInfo.factory) {
            return componentInfo.factory;
        }
        var metadata = {
            selector: "runtime-component-" + type,
            template: template
        };
        var factory = this.createComponentFactorySync(this.compiler, metadata, componentInfo.class);
        componentInfo.factory = factory;
        return factory;
    };
    FormFieldComponent.prototype.createComponentFactorySync = function (compiler, metadata, componentClass) {
        var cmpClass = componentClass || (function () {
            function RuntimeComponent() {
            }
            return RuntimeComponent;
        }());
        var decoratedCmp = core_1.Component(metadata)(cmpClass);
        var RuntimeComponentModule = (function () {
            function RuntimeComponentModule() {
            }
            return RuntimeComponentModule;
        }());
        RuntimeComponentModule = __decorate([
            core_1.NgModule({ imports: [ng2_alfresco_core_1.CoreModule], declarations: [decoratedCmp] })
        ], RuntimeComponentModule);
        var module = compiler.compileModuleAndAllComponentsSync(RuntimeComponentModule);
        return module.componentFactories.find(function (x) { return x.componentType === decoratedCmp; });
    };
    return FormFieldComponent;
}());
__decorate([
    core_1.ViewChild('container', { read: core_1.ViewContainerRef }),
    __metadata("design:type", core_1.ViewContainerRef)
], FormFieldComponent.prototype, "container", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", index_1.FormFieldModel)
], FormFieldComponent.prototype, "field", void 0);
FormFieldComponent = __decorate([
    core_1.Component({
        selector: 'form-field',
        template: "\n        <div [hidden]=\"!field?.isVisible\">\n            <div #container></div>\n        </div>\n    "
    }),
    __metadata("design:paramtypes", [form_rendering_service_1.FormRenderingService,
        core_1.ComponentFactoryResolver,
        widget_visibility_service_1.WidgetVisibilityService,
        core_1.Compiler])
], FormFieldComponent);
exports.FormFieldComponent = FormFieldComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
