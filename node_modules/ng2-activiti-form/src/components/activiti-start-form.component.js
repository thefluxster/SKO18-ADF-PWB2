/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_form_component_1 = require("./activiti-form.component");
var form_service_1 = require("./../services/form.service");
var widget_visibility_service_1 = require("./../services/widget-visibility.service");
var index_1 = require("./widgets/core/index");
var ActivitiStartForm = (function (_super) {
    __extends(ActivitiStartForm, _super);
    function ActivitiStartForm(translate, formService, visibilityService, logService) {
        var _this = _super.call(this, formService, visibilityService, null, null, logService) || this;
        _this.translate = translate;
        _this.showOutcomeButtons = true;
        _this.showRefreshButton = true;
        _this.readOnlyForm = false;
        _this.outcomeClick = new core_1.EventEmitter();
        _this.outcomesContainer = null;
        if (_this.translate) {
            _this.translate.addTranslationFolder('ng2-activiti-form', 'node_modules/ng2-activiti-form/src');
        }
        _this.showTitle = false;
        return _this;
    }
    ActivitiStartForm.prototype.ngOnChanges = function (changes) {
        var processDefinitionId = changes['processDefinitionId'];
        if (processDefinitionId && processDefinitionId.currentValue) {
            this.visibilityService.cleanProcessVariable();
            this.getStartFormDefinition(processDefinitionId.currentValue);
            return;
        }
        var processId = changes['processId'];
        if (processId && processId.currentValue) {
            this.visibilityService.cleanProcessVariable();
            this.loadStartForm(processId.currentValue);
            return;
        }
    };
    ActivitiStartForm.prototype.loadStartForm = function (processId) {
        var _this = this;
        this.formService
            .getStartFormInstance(processId)
            .subscribe(function (form) {
            _this.formName = form.name;
            form.processDefinitionId = _this.processDefinitionId;
            _this.form = _this.parseForm(form);
            _this.form.readOnly = _this.readOnlyForm;
            _this.formLoaded.emit(_this.form);
        }, function (error) { return _this.handleError(error); });
    };
    ActivitiStartForm.prototype.getStartFormDefinition = function (processId) {
        var _this = this;
        this.formService
            .getStartFormDefinition(processId)
            .subscribe(function (form) {
            _this.formName = form.processDefinitionName;
            _this.form = _this.parseForm(form);
            _this.form.readOnly = _this.readOnlyForm;
            _this.formLoaded.emit(_this.form);
        }, function (error) { return _this.handleError(error); });
    };
    ActivitiStartForm.prototype.isOutcomeButtonVisible = function (outcome, isFormReadOnly) {
        if (outcome && outcome.isSystem && (outcome.name === index_1.FormOutcomeModel.SAVE_ACTION ||
            outcome.name === index_1.FormOutcomeModel.COMPLETE_ACTION)) {
            return false;
        }
        else if (outcome && outcome.name === index_1.FormOutcomeModel.START_PROCESS_ACTION) {
            return true;
        }
        return _super.prototype.isOutcomeButtonVisible.call(this, outcome, isFormReadOnly);
    };
    ActivitiStartForm.prototype.saveTaskForm = function () {
    };
    ActivitiStartForm.prototype.onRefreshClicked = function () {
        if (this.processDefinitionId) {
            this.visibilityService.cleanProcessVariable();
            this.getStartFormDefinition(this.processDefinitionId);
        }
        else if (this.processId) {
            this.visibilityService.cleanProcessVariable();
            this.loadStartForm(this.processId);
        }
    };
    ActivitiStartForm.prototype.completeTaskForm = function (outcome) {
        this.outcomeClick.emit(outcome);
    };
    return ActivitiStartForm;
}(activiti_form_component_1.ActivitiForm));
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiStartForm.prototype, "processDefinitionId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiStartForm.prototype, "processId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiStartForm.prototype, "showOutcomeButtons", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiStartForm.prototype, "showRefreshButton", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiStartForm.prototype, "readOnlyForm", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiStartForm.prototype, "outcomeClick", void 0);
__decorate([
    core_1.ViewChild('outcomesContainer', {}),
    __metadata("design:type", core_1.ElementRef)
], ActivitiStartForm.prototype, "outcomesContainer", void 0);
ActivitiStartForm = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'activiti-start-form',
        template: "<div>     <div *ngIf=\"hasForm()\">         <div class=\"mdl-card mdl-shadow--2dp activiti-form-container\">             <div class=\"mdl-card__title\">                 <i class=\"material-icons\">{{ form.isValid ? 'event_available' : 'event_busy' }}</i>                 <h2 *ngIf=\"isTitleEnabled()\" class=\"mdl-card__title-text\">{{form.taskName}}</h2>             </div>             <div class=\"mdl-card__media\">                 <div *ngIf=\"form.hasTabs()\">                     <tabs-widget [tabs]=\"form.tabs\" (formTabChanged)=\"checkVisibility($event);\"></tabs-widget>                 </div>                  <div *ngIf=\"!form.hasTabs() && form.hasFields()\">                     <div *ngFor=\"let field of form.fields\">                         <form-field [field]=\"field.field\"></form-field>                     </div>                 </div>             </div>             <div *ngIf=\"showOutcomeButtons && form.hasOutcomes()\" class=\"mdl-card__actions mdl-card--border\" #outcomesContainer>                 <button *ngFor=\"let outcome of form.outcomes\"                         alfresco-mdl-button                         [disabled]=\"!isOutcomeButtonEnabled(outcome)\"                         [class.mdl-button--colored]=\"!outcome.isSystem\"                         [class.activiti-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"                         (click)=\"onOutcomeClicked(outcome, $event)\">                     {{outcome.name}}                 </button>             </div>             <div  *ngIf=\"showRefreshButton\" class=\"mdl-card__menu\" >                 <button (click)=\"onRefreshClicked()\"                         class=\"mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect\">                     <i class=\"material-icons\">refresh</i>                 </button>             </div>         </div>     </div> </div>",
        styles: [".activiti-form-container {     width: 100%;     min-height: 100px;     overflow: visible; }  .activiti-form-container > .mdl-card__media {     background-color: #fff; }  .activiti-form-debug-container {     padding: 10px; }  .activiti-form-debug-container .debug-toggle-text {     padding-left: 15px;     cursor: pointer; }  .activiti-form-debug-container .debug-toggle-text:hover {     font-weight: bold; }  .activiti-form-hide-button {     display: none; }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        form_service_1.FormService,
        widget_visibility_service_1.WidgetVisibilityService,
        ng2_alfresco_core_1.LogService])
], ActivitiStartForm);
exports.ActivitiStartForm = ActivitiStartForm;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
