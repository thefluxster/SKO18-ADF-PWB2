/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ecm_model_service_1 = require("./../services/ecm-model.service");
var form_service_1 = require("./../services/form.service");
var node_service_1 = require("./../services/node.service");
var index_1 = require("./widgets/core/index");
var index_2 = require("./../events/index");
var widget_visibility_service_1 = require("./../services/widget-visibility.service");
var ActivitiForm = ActivitiForm_1 = (function () {
    function ActivitiForm(formService, visibilityService, ecmModelService, nodeService, logService) {
        this.formService = formService;
        this.visibilityService = visibilityService;
        this.ecmModelService = ecmModelService;
        this.nodeService = nodeService;
        this.logService = logService;
        this.saveMetadata = false;
        this.showTitle = true;
        this.showCompleteButton = true;
        this.showSaveButton = true;
        this.showDebugButton = true;
        this.readOnly = false;
        this.showRefreshButton = true;
        this.showValidationIcon = true;
        this.formSaved = new core_1.EventEmitter();
        this.formCompleted = new core_1.EventEmitter();
        this.formLoaded = new core_1.EventEmitter();
        this.executeOutcome = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.debugMode = false;
    }
    ActivitiForm.prototype.hasForm = function () {
        return this.form ? true : false;
    };
    ActivitiForm.prototype.isTitleEnabled = function () {
        if (this.showTitle) {
            if (this.form && this.form.taskName) {
                return true;
            }
        }
        return false;
    };
    ActivitiForm.prototype.isOutcomeButtonEnabled = function (outcome) {
        if (this.form.readOnly) {
            return false;
        }
        if (outcome) {
            if (outcome.name === index_1.FormOutcomeModel.SAVE_ACTION) {
                return true;
            }
            return this.form.isValid;
        }
        return false;
    };
    ActivitiForm.prototype.isOutcomeButtonVisible = function (outcome, isFormReadOnly) {
        if (outcome && outcome.name) {
            if (outcome.name === index_1.FormOutcomeModel.COMPLETE_ACTION) {
                return this.showCompleteButton;
            }
            if (isFormReadOnly) {
                return outcome.isSelected;
            }
            if (outcome.name === index_1.FormOutcomeModel.SAVE_ACTION) {
                return this.showSaveButton;
            }
            if (outcome.name === index_1.FormOutcomeModel.START_PROCESS_ACTION) {
                return false;
            }
            return true;
        }
        return false;
    };
    ActivitiForm.prototype.ngOnInit = function () {
        if (this.nodeId) {
            this.loadFormForEcmNode();
        }
        else {
            this.loadForm();
        }
    };
    ActivitiForm.prototype.ngAfterViewChecked = function () {
        this.setupMaterialComponents();
    };
    ActivitiForm.prototype.ngOnChanges = function (changes) {
        var taskId = changes['taskId'];
        if (taskId && taskId.currentValue) {
            this.getFormByTaskId(taskId.currentValue);
            return;
        }
        var formId = changes['formId'];
        if (formId && formId.currentValue) {
            this.getFormDefinitionByFormId(formId.currentValue);
            return;
        }
        var formName = changes['formName'];
        if (formName && formName.currentValue) {
            this.getFormDefinitionByFormName(formName.currentValue);
            return;
        }
    };
    ActivitiForm.prototype.onOutcomeClicked = function (outcome) {
        if (!this.readOnly && outcome && this.form) {
            var args = new index_1.FormOutcomeEvent(outcome);
            this.executeOutcome.emit(args);
            if (args.defaultPrevented) {
                return false;
            }
            if (outcome.isSystem) {
                if (outcome.id === ActivitiForm_1.SAVE_OUTCOME_ID) {
                    this.saveTaskForm();
                    return true;
                }
                if (outcome.id === ActivitiForm_1.COMPLETE_OUTCOME_ID) {
                    this.completeTaskForm();
                    return true;
                }
                if (outcome.id === ActivitiForm_1.START_PROCESS_OUTCOME_ID) {
                    this.completeTaskForm();
                    return true;
                }
                if (outcome.id === ActivitiForm_1.CUSTOM_OUTCOME_ID) {
                    this.onTaskSaved(this.form);
                    this.storeFormAsMetadata();
                    return true;
                }
            }
            else {
                if (outcome.name) {
                    this.onTaskSaved(this.form);
                    this.completeTaskForm(outcome.name);
                    return true;
                }
            }
        }
        return false;
    };
    ActivitiForm.prototype.onRefreshClicked = function () {
        this.loadForm();
    };
    ActivitiForm.prototype.loadForm = function () {
        if (this.taskId) {
            this.getFormByTaskId(this.taskId);
            return;
        }
        if (this.formId) {
            this.getFormDefinitionByFormId(this.formId);
            return;
        }
        if (this.formName) {
            this.getFormDefinitionByFormName(this.formName);
            return;
        }
    };
    ActivitiForm.prototype.loadFormPorcessVariable = function (taskId) {
        var _this = this;
        this.formService.getTask(taskId).subscribe(function (task) {
            if (_this.isAProcessTask(task)) {
                _this.visibilityService.getTaskProcessVariable(taskId).subscribe();
            }
        }, function (error) {
            _this.handleError(error);
        });
    };
    ActivitiForm.prototype.isAProcessTask = function (taskRepresentation) {
        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
    };
    ActivitiForm.prototype.setupMaterialComponents = function () {
        if (componentHandler) {
            componentHandler.upgradeAllRegistered();
            return true;
        }
        return false;
    };
    ActivitiForm.prototype.getFormByTaskId = function (taskId) {
        var _this = this;
        this.loadFormPorcessVariable(this.taskId);
        var data = this.data;
        this.formService
            .getTaskForm(taskId)
            .subscribe(function (form) {
            _this.form = new index_1.FormModel(form, data, _this.readOnly, _this.formService);
            _this.onFormLoaded(_this.form);
        }, function (error) {
            _this.handleError(error);
        });
    };
    ActivitiForm.prototype.getFormDefinitionByFormId = function (formId) {
        var _this = this;
        this.formService
            .getFormDefinitionById(formId)
            .subscribe(function (form) {
            _this.formName = form.name;
            _this.form = _this.parseForm(form);
            _this.onFormLoaded(_this.form);
        }, function (error) {
            _this.handleError(error);
        });
    };
    ActivitiForm.prototype.getFormDefinitionByFormName = function (formName) {
        var _this = this;
        this.formService
            .getFormDefinitionByName(formName)
            .subscribe(function (id) {
            _this.formService.getFormDefinitionById(id).subscribe(function (form) {
                _this.form = _this.parseForm(form);
                _this.onFormLoaded(_this.form);
            }, function (error) {
                _this.handleError(error);
            });
        }, function (error) {
            _this.handleError(error);
        });
    };
    ActivitiForm.prototype.saveTaskForm = function () {
        var _this = this;
        if (this.form && this.form.taskId) {
            this.formService
                .saveTaskForm(this.form.taskId, this.form.values)
                .subscribe(function () {
                _this.onTaskSaved(_this.form);
                _this.storeFormAsMetadata();
            }, function (error) { return _this.onTaskSavedError(_this.form, error); });
        }
    };
    ActivitiForm.prototype.completeTaskForm = function (outcome) {
        var _this = this;
        if (this.form && this.form.taskId) {
            this.formService
                .completeTaskForm(this.form.taskId, this.form.values, outcome)
                .subscribe(function () {
                _this.onTaskCompleted(_this.form);
                _this.storeFormAsMetadata();
            }, function (error) { return _this.onTaskCompletedError(_this.form, error); });
        }
    };
    ActivitiForm.prototype.handleError = function (err) {
        this.logService.error(err);
        this.onError.emit(err);
    };
    ActivitiForm.prototype.parseForm = function (json) {
        if (json) {
            var form = new index_1.FormModel(json, this.data, this.readOnly, this.formService);
            if (!json.fields) {
                form.outcomes = this.getFormDefinitionOutcomes(form);
            }
            return form;
        }
        return null;
    };
    ActivitiForm.prototype.getFormDefinitionOutcomes = function (form) {
        return [
            new index_1.FormOutcomeModel(form, { id: '$custom', name: index_1.FormOutcomeModel.SAVE_ACTION, isSystem: true })
        ];
    };
    ActivitiForm.prototype.checkVisibility = function (field) {
        if (field && field.form) {
            this.visibilityService.refreshVisibility(field.form);
        }
    };
    ActivitiForm.prototype.loadFormForEcmNode = function () {
        var _this = this;
        this.nodeService.getNodeMetadata(this.nodeId).subscribe(function (data) {
            _this.data = data.metadata;
            _this.loadFormFromActiviti(data.nodeType);
        }, this.handleError);
    };
    ActivitiForm.prototype.loadFormFromActiviti = function (nodeType) {
        var _this = this;
        this.formService.searchFrom(nodeType).subscribe(function (form) {
            if (!form) {
                _this.formService.createFormFromANode(nodeType).subscribe(function (formMetadata) {
                    _this.loadFormFromFormId(formMetadata.id);
                });
            }
            else {
                _this.loadFormFromFormId(form.id);
            }
        }, function (error) {
            _this.handleError(error);
        });
    };
    ActivitiForm.prototype.loadFormFromFormId = function (formId) {
        this.formId = formId;
        this.loadForm();
    };
    ActivitiForm.prototype.storeFormAsMetadata = function () {
        var _this = this;
        if (this.saveMetadata) {
            this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe(function (type) {
                _this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, ecm_model_service_1.EcmModelService.MODEL_NAMESPACE, _this.form.values, _this.path, _this.nameNode);
            }, function (error) {
                _this.handleError(error);
            });
        }
    };
    ActivitiForm.prototype.onFormLoaded = function (form) {
        this.formLoaded.emit(form);
        this.formService.formLoaded.next(new index_2.FormEvent(form));
    };
    ActivitiForm.prototype.onTaskSaved = function (form) {
        this.formSaved.emit(form);
        this.formService.taskSaved.next(new index_2.FormEvent(form));
    };
    ActivitiForm.prototype.onTaskSavedError = function (form, error) {
        this.handleError(error);
        this.formService.taskSavedError.next(new index_2.FormErrorEvent(form, error));
    };
    ActivitiForm.prototype.onTaskCompleted = function (form) {
        this.formCompleted.emit(form);
        this.formService.taskCompleted.next(new index_2.FormEvent(form));
    };
    ActivitiForm.prototype.onTaskCompletedError = function (form, error) {
        this.handleError(error);
        this.formService.taskCompletedError.next(new index_2.FormErrorEvent(form, error));
    };
    return ActivitiForm;
}());
ActivitiForm.SAVE_OUTCOME_ID = '$save';
ActivitiForm.COMPLETE_OUTCOME_ID = '$complete';
ActivitiForm.START_PROCESS_OUTCOME_ID = '$startProcess';
ActivitiForm.CUSTOM_OUTCOME_ID = '$custom';
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiForm.prototype, "taskId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiForm.prototype, "nodeId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiForm.prototype, "formId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiForm.prototype, "formName", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiForm.prototype, "saveMetadata", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ActivitiForm.prototype, "data", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiForm.prototype, "path", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiForm.prototype, "nameNode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiForm.prototype, "showTitle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiForm.prototype, "showCompleteButton", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiForm.prototype, "showSaveButton", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiForm.prototype, "showDebugButton", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiForm.prototype, "readOnly", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiForm.prototype, "showRefreshButton", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiForm.prototype, "showValidationIcon", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiForm.prototype, "formSaved", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiForm.prototype, "formCompleted", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiForm.prototype, "formLoaded", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiForm.prototype, "executeOutcome", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiForm.prototype, "onError", void 0);
ActivitiForm = ActivitiForm_1 = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'activiti-form',
        template: "<div>     <div *ngIf=\"!hasForm()\">         <h3 style=\"text-align: center\">Please select a Task</h3>     </div>     <div *ngIf=\"hasForm()\">         <div class=\"mdl-card mdl-shadow--2dp activiti-form-container\">             <div class=\"mdl-card__title\">                 <i *ngIf=\"showValidationIcon\" class=\"material-icons\">{{ form.isValid ? 'event_available' : 'event_busy' }}</i>                 <h2 *ngIf=\"isTitleEnabled()\" class=\"mdl-card__title-text\">{{form.taskName}}</h2>             </div>             <div class=\"mdl-card__media\">                 <div *ngIf=\"form.hasTabs()\">                     <tabs-widget [tabs]=\"form.tabs\" (formTabChanged)=\"checkVisibility($event);\"></tabs-widget>                 </div>                  <div *ngIf=\"!form.hasTabs() && form.hasFields()\">                     <div *ngFor=\"let field of form.fields\">                         <form-field [field]=\"field.field\"></form-field>                     </div>                 </div>             </div>             <div *ngIf=\"form.hasOutcomes()\" class=\"mdl-card__actions mdl-card--border\">                 <button *ngFor=\"let outcome of form.outcomes\"                         alfresco-mdl-button                         [disabled]=\"!isOutcomeButtonEnabled(outcome)\"                         [class.mdl-button--colored]=\"!outcome.isSystem\"                         [class.activiti-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"                         (click)=\"onOutcomeClicked(outcome, $event)\">                     {{outcome.name}}                 </button>             </div>             <div  *ngIf=\"showRefreshButton\" class=\"mdl-card__menu\" >                 <button (click)=\"onRefreshClicked()\"                         class=\"mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect\">                     <i class=\"material-icons\">refresh</i>                 </button>             </div>         </div>     </div> </div> <!-- For debugging and data visualisation purposes, will be removed during future revisions --> <div  *ngIf=\"showDebugButton\" class=\"activiti-form-debug-container\">      <div style=\"float: right\">         <label class=\"mdl-switch mdl-js-switch mdl-js-ripple-effect\" for=\"switch-1\" [class.is-checked]=\"debugMode\">             <input type=\"checkbox\" id=\"switch-1\" class=\"mdl-switch__input\" [(ngModel)]=\"debugMode\">             <span class=\"mdl-switch__label\"></span>             <span class=\"debug-toggle-text\">Debug mode</span>         </label>     </div>      <div *ngIf=\"debugMode && hasForm()\">         <h4>Values</h4>         <pre>{{form.values | json}}</pre>          <h4>Form</h4>         <pre>{{form.json | json}}</pre>     </div> </div>",
        styles: [".activiti-form-container {     width: 100%;     min-height: 100px;     overflow: visible; }  .activiti-form-container > .mdl-card__media {     background-color: #fff; }  .activiti-form-debug-container {     padding: 10px; }  .activiti-form-debug-container .debug-toggle-text {     padding-left: 15px;     cursor: pointer; }  .activiti-form-debug-container .debug-toggle-text:hover {     font-weight: bold; }  .activiti-form-hide-button {     display: none; }"]
    }),
    __metadata("design:paramtypes", [form_service_1.FormService,
        widget_visibility_service_1.WidgetVisibilityService,
        ecm_model_service_1.EcmModelService,
        node_service_1.NodeService,
        ng2_alfresco_core_1.LogService])
], ActivitiForm);
exports.ActivitiForm = ActivitiForm;
var ActivitiForm_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
