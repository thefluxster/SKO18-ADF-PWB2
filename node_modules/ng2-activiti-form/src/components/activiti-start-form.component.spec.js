/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var activiti_start_form_component_1 = require("./activiti-start-form.component");
var form_field_component_1 = require("./form-field/form-field.component");
var index_1 = require("./widgets/index");
var form_service_1 = require("./../services/form.service");
var ecm_model_service_1 = require("./../services/ecm-model.service");
var widget_visibility_service_1 = require("./../services/widget-visibility.service");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var translation_service_mock_1 = require("./../assets/translation.service.mock");
describe('ActivitiStartForm', function () {
    var componentHandler;
    var formService;
    var component;
    var fixture;
    var getStartFormSpy;
    var exampleId1 = 'my:process1';
    var exampleId2 = 'my:process2';
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [ng2_alfresco_core_1.CoreModule.forRoot()],
            declarations: [
                activiti_start_form_component_1.ActivitiStartForm,
                form_field_component_1.FormFieldComponent
            ].concat(index_1.WIDGET_DIRECTIVES),
            providers: [
                { provide: ng2_alfresco_core_1.AlfrescoTranslationService, useClass: translation_service_mock_1.TranslationMock },
                ecm_model_service_1.EcmModelService,
                form_service_1.FormService,
                widget_visibility_service_1.WidgetVisibilityService
            ]
        }).compileComponents();
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(activiti_start_form_component_1.ActivitiStartForm);
        component = fixture.componentInstance;
        formService = fixture.debugElement.injector.get(form_service_1.FormService);
        getStartFormSpy = spyOn(formService, 'getStartFormDefinition').and.returnValue(Rx_1.Observable.of({
            processDefinitionName: 'my:process'
        }));
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered',
            'upgradeElement'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should load start form on change if processDefinitionId defined', function () {
        component.processDefinitionId = exampleId1;
        component.ngOnChanges({ processDefinitionId: new core_1.SimpleChange(exampleId1, exampleId2) });
        expect(formService.getStartFormDefinition).toHaveBeenCalled();
    });
    it('should load start form when processDefinitionId changed', function () {
        component.processDefinitionId = exampleId1;
        component.ngOnChanges({ processDefinitionId: new core_1.SimpleChange(exampleId1, exampleId2) });
        expect(formService.getStartFormDefinition).toHaveBeenCalled();
    });
    it('should not load start form when changes notified but no change to processDefinitionId', function () {
        component.processDefinitionId = exampleId1;
        component.ngOnChanges({ otherProp: new core_1.SimpleChange(exampleId1, exampleId2) });
        expect(formService.getStartFormDefinition).not.toHaveBeenCalled();
    });
    it('should consume errors encountered when loading start form', function () {
        getStartFormSpy.and.returnValue(Rx_1.Observable.throw({}));
        component.processDefinitionId = exampleId1;
        component.ngOnInit();
    });
    it('should show outcome buttons by default', function () {
        getStartFormSpy.and.returnValue(Rx_1.Observable.of({
            id: '1',
            processDefinitionName: 'my:process',
            outcomes: [{
                    id: 'approve',
                    name: 'Approve'
                }]
        }));
        component.processDefinitionId = exampleId1;
        component.ngOnInit();
        component.ngOnChanges({ processDefinitionId: new core_1.SimpleChange(exampleId1, exampleId2) });
        fixture.detectChanges();
        expect(component.outcomesContainer).toBeTruthy();
    });
    it('should show outcome buttons if showOutcomeButtons is true', function () {
        getStartFormSpy.and.returnValue(Rx_1.Observable.of({
            id: '1',
            processDefinitionName: 'my:process',
            outcomes: [{
                    id: 'approve',
                    name: 'Approve'
                }]
        }));
        component.processDefinitionId = exampleId1;
        component.showOutcomeButtons = true;
        component.ngOnChanges({ processDefinitionId: new core_1.SimpleChange(exampleId1, exampleId2) });
        fixture.detectChanges();
        expect(component.outcomesContainer).toBeTruthy();
    });
});
//# sourceMappingURL=activiti-start-form.component.spec.js.map