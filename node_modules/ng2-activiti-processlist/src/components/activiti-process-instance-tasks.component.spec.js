/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_activiti_tasklist_1 = require("ng2-activiti-tasklist");
var activiti_process_instance_tasks_component_1 = require("./activiti-process-instance-tasks.component");
var translation_service_mock_1 = require("./../assets/translation.service.mock");
var task_details_mock_1 = require("./../assets/task-details.mock");
var process_instance_model_1 = require("./../models/process-instance.model");
var activiti_process_service_1 = require("./../services/activiti-process.service");
describe('ActivitiProcessInstanceTasks', function () {
    var componentHandler;
    var component;
    var fixture;
    var debugElement;
    var service;
    var getProcessTasksSpy;
    var exampleProcessInstance = new process_instance_model_1.ProcessInstance({ id: '123' });
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            declarations: [
                activiti_process_instance_tasks_component_1.ActivitiProcessInstanceTasks
            ],
            providers: [
                { provide: ng2_alfresco_core_1.AlfrescoTranslationService, useClass: translation_service_mock_1.TranslationMock },
                activiti_process_service_1.ActivitiProcessService
            ],
            schemas: [core_1.NO_ERRORS_SCHEMA]
        }).compileComponents();
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(activiti_process_instance_tasks_component_1.ActivitiProcessInstanceTasks);
        component = fixture.componentInstance;
        debugElement = fixture.debugElement;
        service = fixture.debugElement.injector.get(activiti_process_service_1.ActivitiProcessService);
        getProcessTasksSpy = spyOn(service, 'getProcessTasks').and.returnValue(Rx_1.Observable.of([new ng2_activiti_tasklist_1.TaskDetailsModel(task_details_mock_1.taskDetailsMock)]));
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered',
            'upgradeElement'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should initially render message about no active tasks if no process instance ID provided', testing_1.async(function () {
        component.processInstanceDetails = undefined;
        fixture.detectChanges();
        fixture.whenStable().then(function () {
            var msgEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="active-tasks-none"]'));
            expect(msgEl).not.toBeNull();
        });
    }));
    it('should initially render message about no completed tasks if no process instance ID provided', testing_1.async(function () {
        component.processInstanceDetails = undefined;
        fixture.detectChanges();
        fixture.whenStable().then(function () {
            var msgEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="completed-tasks-none"]'));
            expect(msgEl).not.toBeNull();
        });
    }));
    it('should not render active tasks list if no process instance ID provided', function () {
        component.processInstanceDetails = undefined;
        fixture.detectChanges();
        var listEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="active-tasks"]'));
        expect(listEl).toBeNull();
    });
    it('should not render completed tasks list if no process instance ID provided', function () {
        component.processInstanceDetails = undefined;
        fixture.detectChanges();
        var listEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="completed-tasks"]'));
        expect(listEl).toBeNull();
    });
    it('should display active tasks', function () {
        var change = new core_1.SimpleChange(null, exampleProcessInstance);
        fixture.detectChanges();
        component.ngOnChanges({ 'processInstanceDetails': change });
        fixture.whenStable().then(function () {
            fixture.detectChanges();
            component.ngOnChanges({ 'processInstanceDetails': change });
            var listEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="active-tasks"]'));
            expect(listEl).not.toBeNull();
            expect(listEl.queryAll(platform_browser_1.By.css('li')).length).toBe(1);
        });
    });
    it('should display completed tasks', function () {
        var change = new core_1.SimpleChange(null, exampleProcessInstance);
        fixture.detectChanges();
        component.ngOnChanges({ 'processInstanceDetails': change });
        fixture.whenStable().then(function () {
            fixture.detectChanges();
            var listEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="completed-tasks"]'));
            expect(listEl).not.toBeNull();
            expect(listEl.queryAll(platform_browser_1.By.css('li')).length).toBe(1);
        });
    });
    describe('task reloading', function () {
        beforeEach(testing_1.async(function () {
            component.processInstanceDetails = exampleProcessInstance;
            fixture.detectChanges();
            fixture.whenStable();
        }));
        it('should render a refresh button by default', function () {
            expect(fixture.debugElement.query(platform_browser_1.By.css('.process-tasks-refresh'))).not.toBeNull();
        });
        it('should render a refresh button if configured to', function () {
            component.showRefreshButton = true;
            fixture.detectChanges();
            expect(fixture.debugElement.query(platform_browser_1.By.css('.process-tasks-refresh'))).not.toBeNull();
        });
        it('should NOT render a refresh button if configured not to', function () {
            component.showRefreshButton = false;
            fixture.detectChanges();
            expect(fixture.debugElement.query(platform_browser_1.By.css('.process-tasks-refresh'))).toBeNull();
        });
        it('should call service to get tasks when reload button clicked', function () {
            getProcessTasksSpy.calls.reset();
            component.onRefreshClicked();
            expect(getProcessTasksSpy).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=activiti-process-instance-tasks.component.spec.js.map