/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var process_instance_model_1 = require("../models/process-instance.model");
var common_1 = require("@angular/common");
var ActivitiProcessInstanceHeader = (function () {
    function ActivitiProcessInstanceHeader(translate, logService) {
        this.translate = translate;
        this.logService = logService;
        this.onError = new core_1.EventEmitter();
        if (translate) {
            translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
        }
    }
    ActivitiProcessInstanceHeader.prototype.getStartedByFullName = function () {
        if (this.processInstance && this.processInstance.startedBy) {
            return (this.processInstance.startedBy.firstName && this.processInstance.startedBy.firstName !== 'null'
                ? this.processInstance.startedBy.firstName + ' ' : '') +
                this.processInstance.startedBy.lastName;
        }
        return '';
    };
    ActivitiProcessInstanceHeader.prototype.getFormatDate = function (value, format) {
        var datePipe = new common_1.DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            this.logService.error("ProcessListInstanceHeader: error parsing date " + value + " to format " + format);
        }
    };
    ActivitiProcessInstanceHeader.prototype.isRunning = function () {
        return this.processInstance && !this.processInstance.ended;
    };
    return ActivitiProcessInstanceHeader;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", process_instance_model_1.ProcessInstance)
], ActivitiProcessInstanceHeader.prototype, "processInstance", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessInstanceHeader.prototype, "onError", void 0);
ActivitiProcessInstanceHeader = __decorate([
    core_1.Component({
        selector: 'activiti-process-instance-header',
        moduleId: module.id,
        template: "<div *ngIf=\"processInstance\">     <div class=\"mdl-grid\">         <div class=\"mdl-cell mdl-cell--4-col\" data-automation-id=\"header-started-by\">             <span class=\"activiti-label\">{{ 'DETAILS.LABELS.STARTED_BY' | translate }}</span>:             <span class=\"activiti-process-header__value\">{{getStartedByFullName()}}</span>         </div>         <div class=\"mdl-cell mdl-cell--4-col\" data-automation-id=\"header-started\">             <span class=\"activiti-label\">{{ 'DETAILS.LABELS.STARTED' | translate }}</span>:             <span class=\"activiti-process-header__value\">{{getFormatDate(processInstance.started, 'medium')}}</span>         </div>         <div class=\"mdl-cell mdl-cell--4-col\">             <activiti-process-instance-comments [processInstanceId]=\"processInstance?.id\"></activiti-process-instance-comments>         </div>         <div class=\"mdl-cell mdl-cell--4-col\" data-automation-id=\"header-status\" *ngIf=\"!isRunning()\">             <span class=\"activiti-label\">{{ 'DETAILS.LABELS.ENDED' | translate }}</span>:             <span class=\"activiti-process-header__value\">{{getFormatDate(processInstance.ended, 'medium')}}</span>         </div>     </div> </div>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }  .activiti-process-header__value {     color: rgb(68, 138, 255); }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        ng2_alfresco_core_1.LogService])
], ActivitiProcessInstanceHeader);
exports.ActivitiProcessInstanceHeader = ActivitiProcessInstanceHeader;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYWN0aXZpdGktcHJvY2Vzcy1pbnN0YW5jZS1oZWFkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7Ozs7Ozs7Ozs7QUFFSCxzQ0FBdUU7QUFDdkUsdURBQTJFO0FBQzNFLDJFQUFtRTtBQUNuRSwwQ0FBMkM7QUFVM0MsSUFBYSw2QkFBNkI7SUFRdEMsdUNBQW9CLFNBQXFDLEVBQ3JDLFVBQXNCO1FBRHRCLGNBQVMsR0FBVCxTQUFTLENBQTRCO1FBQ3JDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFIMUMsWUFBTyxHQUFzQixJQUFJLG1CQUFZLEVBQU8sQ0FBQztRQUtqRCxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ1osU0FBUyxDQUFDLG9CQUFvQixDQUFDLDBCQUEwQixFQUFFLDJDQUEyQyxDQUFDLENBQUM7UUFDNUcsQ0FBQztJQUNMLENBQUM7SUFFRCw0REFBb0IsR0FBcEI7UUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN6RCxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsU0FBUyxLQUFLLE1BQU07a0JBQzdGLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO2dCQUMxRCxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDaEQsQ0FBQztRQUNELE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQscURBQWEsR0FBYixVQUFjLEtBQUssRUFBRSxNQUFjO1FBQy9CLElBQUksUUFBUSxHQUFHLElBQUksaUJBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUM7WUFDRCxNQUFNLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDWCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxtREFBaUQsS0FBSyxtQkFBYyxNQUFRLENBQUMsQ0FBQztRQUN4RyxDQUFDO0lBQ0wsQ0FBQztJQUVELGlEQUFTLEdBQVQ7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDO0lBQy9ELENBQUM7SUFDTCxvQ0FBQztBQUFELENBckNBLEFBcUNDLElBQUE7QUFsQ0c7SUFEQyxZQUFLLEVBQUU7OEJBQ1Msd0NBQWU7c0VBQUM7QUFHakM7SUFEQyxhQUFNLEVBQUU7OEJBQ0EsbUJBQVk7OERBQWdDO0FBTjVDLDZCQUE2QjtJQU56QyxnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGtDQUFrQztRQUM1QyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbkIsUUFBUSxFQUFFLGlzQ0FBaXNDO1FBQzNzQyxNQUFNLEVBQUUsQ0FBQyw2SUFBNkksQ0FBQztLQUMxSixDQUFDO3FDQVNpQyw4Q0FBMEI7UUFDekIsOEJBQVU7R0FUakMsNkJBQTZCLENBcUN6QztBQXJDWSxzRUFBNkIiLCJmaWxlIjoiY29tcG9uZW50cy9hY3Rpdml0aS1wcm9jZXNzLWluc3RhbmNlLWhlYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxmcmVzY29UcmFuc2xhdGlvblNlcnZpY2UsIExvZ1NlcnZpY2UgfSBmcm9tICduZzItYWxmcmVzY28tY29yZSc7XG5pbXBvcnQgeyBQcm9jZXNzSW5zdGFuY2UgfSBmcm9tICcuLi9tb2RlbHMvcHJvY2Vzcy1pbnN0YW5jZS5tb2RlbCc7XG5pbXBvcnQgeyBEYXRlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmRlY2xhcmUgbGV0IGNvbXBvbmVudEhhbmRsZXI6IGFueTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhY3Rpdml0aS1wcm9jZXNzLWluc3RhbmNlLWhlYWRlcicsXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICB0ZW1wbGF0ZTogXCI8ZGl2ICpuZ0lmPVxcXCJwcm9jZXNzSW5zdGFuY2VcXFwiPiAgICAgPGRpdiBjbGFzcz1cXFwibWRsLWdyaWRcXFwiPiAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm1kbC1jZWxsIG1kbC1jZWxsLS00LWNvbFxcXCIgZGF0YS1hdXRvbWF0aW9uLWlkPVxcXCJoZWFkZXItc3RhcnRlZC1ieVxcXCI+ICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJhY3Rpdml0aS1sYWJlbFxcXCI+e3sgJ0RFVEFJTFMuTEFCRUxTLlNUQVJURURfQlknIHwgdHJhbnNsYXRlIH19PC9zcGFuPjogICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImFjdGl2aXRpLXByb2Nlc3MtaGVhZGVyX192YWx1ZVxcXCI+e3tnZXRTdGFydGVkQnlGdWxsTmFtZSgpfX08L3NwYW4+ICAgICAgICAgPC9kaXY+ICAgICAgICAgPGRpdiBjbGFzcz1cXFwibWRsLWNlbGwgbWRsLWNlbGwtLTQtY29sXFxcIiBkYXRhLWF1dG9tYXRpb24taWQ9XFxcImhlYWRlci1zdGFydGVkXFxcIj4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImFjdGl2aXRpLWxhYmVsXFxcIj57eyAnREVUQUlMUy5MQUJFTFMuU1RBUlRFRCcgfCB0cmFuc2xhdGUgfX08L3NwYW4+OiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiYWN0aXZpdGktcHJvY2Vzcy1oZWFkZXJfX3ZhbHVlXFxcIj57e2dldEZvcm1hdERhdGUocHJvY2Vzc0luc3RhbmNlLnN0YXJ0ZWQsICdtZWRpdW0nKX19PC9zcGFuPiAgICAgICAgIDwvZGl2PiAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm1kbC1jZWxsIG1kbC1jZWxsLS00LWNvbFxcXCI+ICAgICAgICAgICAgIDxhY3Rpdml0aS1wcm9jZXNzLWluc3RhbmNlLWNvbW1lbnRzIFtwcm9jZXNzSW5zdGFuY2VJZF09XFxcInByb2Nlc3NJbnN0YW5jZT8uaWRcXFwiPjwvYWN0aXZpdGktcHJvY2Vzcy1pbnN0YW5jZS1jb21tZW50cz4gICAgICAgICA8L2Rpdj4gICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtZGwtY2VsbCBtZGwtY2VsbC0tNC1jb2xcXFwiIGRhdGEtYXV0b21hdGlvbi1pZD1cXFwiaGVhZGVyLXN0YXR1c1xcXCIgKm5nSWY9XFxcIiFpc1J1bm5pbmcoKVxcXCI+ICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJhY3Rpdml0aS1sYWJlbFxcXCI+e3sgJ0RFVEFJTFMuTEFCRUxTLkVOREVEJyB8IHRyYW5zbGF0ZSB9fTwvc3Bhbj46ICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJhY3Rpdml0aS1wcm9jZXNzLWhlYWRlcl9fdmFsdWVcXFwiPnt7Z2V0Rm9ybWF0RGF0ZShwcm9jZXNzSW5zdGFuY2UuZW5kZWQsICdtZWRpdW0nKX19PC9zcGFuPiAgICAgICAgIDwvZGl2PiAgICAgPC9kaXY+IDwvZGl2PlwiLFxuICAgIHN0eWxlczogW1wiOmhvc3QgeyAgICAgd2lkdGg6IDEwMCU7IH0gIC5hY3Rpdml0aS1sYWJlbCB7ICAgICBmb250LXdlaWdodDogYm9sZGVyOyB9ICAuYWN0aXZpdGktcHJvY2Vzcy1oZWFkZXJfX3ZhbHVlIHsgICAgIGNvbG9yOiByZ2IoNjgsIDEzOCwgMjU1KTsgfVwiXVxufSlcbmV4cG9ydCBjbGFzcyBBY3Rpdml0aVByb2Nlc3NJbnN0YW5jZUhlYWRlciB7XG5cbiAgICBASW5wdXQoKVxuICAgIHByb2Nlc3NJbnN0YW5jZTogUHJvY2Vzc0luc3RhbmNlO1xuXG4gICAgQE91dHB1dCgpXG4gICAgb25FcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlOiBBbGZyZXNjb1RyYW5zbGF0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHtcblxuICAgICAgICBpZiAodHJhbnNsYXRlKSB7XG4gICAgICAgICAgICB0cmFuc2xhdGUuYWRkVHJhbnNsYXRpb25Gb2xkZXIoJ25nMi1hY3Rpdml0aS1wcm9jZXNzbGlzdCcsICdub2RlX21vZHVsZXMvbmcyLWFjdGl2aXRpLXByb2Nlc3NsaXN0L3NyYycpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0U3RhcnRlZEJ5RnVsbE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMucHJvY2Vzc0luc3RhbmNlICYmIHRoaXMucHJvY2Vzc0luc3RhbmNlLnN0YXJ0ZWRCeSkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnByb2Nlc3NJbnN0YW5jZS5zdGFydGVkQnkuZmlyc3ROYW1lICYmIHRoaXMucHJvY2Vzc0luc3RhbmNlLnN0YXJ0ZWRCeS5maXJzdE5hbWUgIT09ICdudWxsJ1xuICAgICAgICAgICAgICAgICAgICA/IHRoaXMucHJvY2Vzc0luc3RhbmNlLnN0YXJ0ZWRCeS5maXJzdE5hbWUgKyAnICcgOiAnJykgK1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc0luc3RhbmNlLnN0YXJ0ZWRCeS5sYXN0TmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgZ2V0Rm9ybWF0RGF0ZSh2YWx1ZSwgZm9ybWF0OiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IGRhdGVQaXBlID0gbmV3IERhdGVQaXBlKCdlbi1VUycpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgZm9ybWF0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoYFByb2Nlc3NMaXN0SW5zdGFuY2VIZWFkZXI6IGVycm9yIHBhcnNpbmcgZGF0ZSAke3ZhbHVlfSB0byBmb3JtYXQgJHtmb3JtYXR9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1J1bm5pbmcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NJbnN0YW5jZSAmJiAhdGhpcy5wcm9jZXNzSW5zdGFuY2UuZW5kZWQ7XG4gICAgfVxufVxuIl19
