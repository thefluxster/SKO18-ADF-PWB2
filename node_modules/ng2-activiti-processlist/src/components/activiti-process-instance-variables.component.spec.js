/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_alfresco_datatable_1 = require("ng2-alfresco-datatable");
var activiti_process_instance_variables_component_1 = require("./activiti-process-instance-variables.component");
var activiti_process_service_1 = require("./../services/activiti-process.service");
var translation_service_mock_1 = require("./../assets/translation.service.mock");
describe('ActivitiProcessInstanceVariables', function () {
    var componentHandler;
    var service;
    var component;
    var fixture;
    var getVariablesSpy;
    var createOrUpdateProcessInstanceVariablesSpy;
    var deleteProcessInstanceVariableSpy;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot(),
                ng2_alfresco_datatable_1.DataTableModule.forRoot()
            ],
            declarations: [
                activiti_process_instance_variables_component_1.ActivitiProcessInstanceVariables
            ],
            providers: [
                { provide: ng2_alfresco_core_1.AlfrescoTranslationService, useClass: translation_service_mock_1.TranslationMock },
                activiti_process_service_1.ActivitiProcessService
            ]
        }).compileComponents();
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(activiti_process_instance_variables_component_1.ActivitiProcessInstanceVariables);
        component = fixture.componentInstance;
        service = fixture.debugElement.injector.get(activiti_process_service_1.ActivitiProcessService);
        getVariablesSpy = spyOn(service, 'getProcessInstanceVariables').and.returnValue(Rx_1.Observable.of([{
                name: 'var1',
                value: 'Test1'
            }, {
                name: 'var2',
                value: 'Test2'
            }, {
                name: 'var3',
                value: 'Test3'
            }]));
        createOrUpdateProcessInstanceVariablesSpy = spyOn(service, 'createOrUpdateProcessInstanceVariables').and.returnValue(Rx_1.Observable.of({ id: 123, message: 'Test' }));
        deleteProcessInstanceVariableSpy = spyOn(service, 'deleteProcessInstanceVariable').and.returnValue(Rx_1.Observable.of());
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered',
            'upgradeElement'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should load variables when processInstanceId specified', function () {
        component.processInstanceId = '123';
        fixture.detectChanges();
        expect(getVariablesSpy).toHaveBeenCalled();
    });
    it('should emit an error when an error occurs loading variables', function () {
        var emitSpy = spyOn(component.error, 'emit');
        getVariablesSpy.and.returnValue(Rx_1.Observable.throw({}));
        component.processInstanceId = '123';
        fixture.detectChanges();
        expect(emitSpy).toHaveBeenCalled();
    });
    it('should not fetch variables when no processInstanceId is specified', function () {
        fixture.detectChanges();
        expect(getVariablesSpy).not.toHaveBeenCalled();
    });
    it('should not display list when no processInstanceId is specified', testing_1.fakeAsync(function () {
        fixture.detectChanges();
        fixture.whenStable();
        testing_1.tick();
        var datatable = fixture.debugElement.query(platform_browser_1.By.css('alfresco-datatable'));
        expect(datatable).toBeNull();
    }));
    it('should use the default schemaColumn as default', function () {
        fixture.detectChanges();
        expect(component.data.getColumns()).toBeDefined();
        expect(component.data.getColumns().length).toEqual(3);
    });
    it('should use the schemaColumn passed in input', function () {
        component.data = new ng2_alfresco_datatable_1.ObjectDataTableAdapter([], [
            { type: 'text', key: 'fake-id', title: 'Name' }
        ]);
        fixture.detectChanges();
        expect(component.data.getColumns()).toBeDefined();
        expect(component.data.getColumns().length).toEqual(1);
    });
    it('should display list when the process has variables', testing_1.fakeAsync(function () {
        component.processInstanceId = '123';
        fixture.detectChanges();
        fixture.whenStable();
        testing_1.tick();
        var datatable = fixture.debugElement.query(platform_browser_1.By.css('alfresco-datatable'));
        expect(datatable).not.toBeNull();
    }));
    it('should display correct number of data table rows when the process has variables', testing_1.fakeAsync(function () {
        component.processInstanceId = '123';
        fixture.detectChanges();
        fixture.whenStable();
        testing_1.tick();
        fixture.detectChanges();
        expect(fixture.debugElement.queryAll(platform_browser_1.By.css('tbody tr')).length).toBe(3);
    }));
    describe('change detection', function () {
        var change = new core_1.SimpleChange('123', '456');
        var nullChange = new core_1.SimpleChange('123', null);
        beforeEach(testing_1.async(function () {
            component.processInstanceId = '123';
            fixture.detectChanges();
            fixture.whenStable().then(function () {
                getVariablesSpy.calls.reset();
            });
        }));
        it('should fetch new variables when processInstanceId changed', function () {
            component.ngOnChanges({ 'processInstanceId': change });
            expect(getVariablesSpy).toHaveBeenCalledWith('456');
        });
        it('should NOT fetch new variables when empty changeset made', function () {
            component.ngOnChanges({});
            expect(getVariablesSpy).not.toHaveBeenCalled();
        });
        it('should NOT fetch new variables when processInstanceId changed to null', function () {
            component.ngOnChanges({ 'processInstanceId': nullChange });
            expect(getVariablesSpy).not.toHaveBeenCalled();
        });
        it('should set a placeholder message when processInstanceId changed to null', function () {
            component.ngOnChanges({ 'processInstanceId': nullChange });
            fixture.detectChanges();
            expect(fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="variables-none"]'))).not.toBeNull();
        });
    });
    describe('Add variable', function () {
        beforeEach(testing_1.async(function () {
            component.processInstanceId = '123';
            fixture.detectChanges();
            fixture.whenStable();
        }));
        it('should display a dialog to the user when the Add button clicked', function () {
            var dialogEl = fixture.debugElement.query(platform_browser_1.By.css('.mdl-dialog.add-dialog')).nativeElement;
            var showSpy = spyOn(dialogEl, 'showModal');
            component.showAddDialog();
            expect(showSpy).toHaveBeenCalled();
        });
        it('should call service to add a variable', function () {
            component.showAddDialog();
            component.variableName = 'Test var';
            component.variableValue = 'Test 222';
            component.add();
            var serviceArgs = createOrUpdateProcessInstanceVariablesSpy.calls.mostRecent().args;
            var sentProcessId = serviceArgs[0];
            var sentProcesses = serviceArgs[1];
            expect(serviceArgs.length).toBe(2);
            expect(sentProcessId).toBe('123');
            expect(sentProcesses.length).toBe(1);
            expect(sentProcesses[0].name).toBe('Test var');
            expect(sentProcesses[0].value).toBe('Test 222');
            expect(sentProcesses[0].scope).toBe('global');
        });
        it('should emit an error when an error occurs adding the variable', function () {
            var emitSpy = spyOn(component.error, 'emit');
            createOrUpdateProcessInstanceVariablesSpy.and.returnValue(Rx_1.Observable.throw({}));
            component.showAddDialog();
            component.variableName = 'Test var';
            component.variableValue = 'Test 222';
            component.add();
            expect(emitSpy).toHaveBeenCalled();
        });
        it('should close add dialog when close button clicked', function () {
            var dialogEl = fixture.debugElement.query(platform_browser_1.By.css('.mdl-dialog.add-dialog')).nativeElement;
            var closeSpy = spyOn(dialogEl, 'close');
            component.showAddDialog();
            component.closeAddDialog();
            expect(closeSpy).toHaveBeenCalled();
        });
    });
    describe('Edit variable', function () {
        var fakeVariable = {
            name: 'fakeVar',
            value: 'my value 4',
            scope: 'global'
        };
        beforeEach(testing_1.async(function () {
            component.processInstanceId = '123';
            fixture.detectChanges();
            fixture.whenStable();
        }));
        it('should display a dialog to the user when the Edit action clicked', function () {
            var dialogEl = fixture.debugElement.query(platform_browser_1.By.css('.mdl-dialog.edit-dialog')).nativeElement;
            var showSpy = spyOn(dialogEl, 'showModal');
            component.onExecuteRowAction({
                args: {
                    row: new ng2_alfresco_datatable_1.ObjectDataRow(fakeVariable),
                    action: {
                        id: 'edit'
                    }
                }
            });
            expect(showSpy).toHaveBeenCalled();
        });
        it('should call service to edit a variable', function () {
            component.showEditDialog(new ng2_alfresco_datatable_1.ObjectDataRow(fakeVariable));
            component.variableValue = 'Test 222';
            component.edit();
            var serviceArgs = createOrUpdateProcessInstanceVariablesSpy.calls.mostRecent().args;
            var sentProcessId = serviceArgs[0];
            var sentProcesses = serviceArgs[1];
            expect(serviceArgs.length).toBe(2);
            expect(sentProcessId).toBe('123');
            expect(sentProcesses.length).toBe(1);
            expect(sentProcesses[0].name).toBe(fakeVariable.name);
            expect(sentProcesses[0].value).toBe('Test 222');
            expect(sentProcesses[0].scope).toBe(fakeVariable.scope);
        });
        it('should emit an error when an error occurs editing the variable', function () {
            var emitSpy = spyOn(component.error, 'emit');
            createOrUpdateProcessInstanceVariablesSpy.and.returnValue(Rx_1.Observable.throw({}));
            component.showEditDialog(new ng2_alfresco_datatable_1.ObjectDataRow(fakeVariable));
            component.variableName = 'Test var';
            component.variableValue = 'Test 222';
            component.edit();
            expect(emitSpy).toHaveBeenCalled();
        });
        it('should close edit dialog when close button clicked', function () {
            var dialogEl = fixture.debugElement.query(platform_browser_1.By.css('.mdl-dialog.edit-dialog')).nativeElement;
            var closeSpy = spyOn(dialogEl, 'close');
            component.showEditDialog(new ng2_alfresco_datatable_1.ObjectDataRow(fakeVariable));
            component.closeEditDialog();
            expect(closeSpy).toHaveBeenCalled();
        });
    });
    describe('Delete variable', function () {
        var fakeVariable = {
            name: 'fakeVar',
            value: 'my value 4',
            scope: 'global'
        };
        var deleteAction = {
            id: 'delete'
        };
        beforeEach(testing_1.async(function () {
            component.processInstanceId = '123';
            fixture.detectChanges();
            fixture.whenStable();
        }));
        it('should call service to delete the variable', function () {
            component.variableValue = 'Test 222';
            component.onExecuteRowAction({
                args: {
                    row: new ng2_alfresco_datatable_1.ObjectDataRow(fakeVariable),
                    action: deleteAction
                }
            });
            var serviceArgs = deleteProcessInstanceVariableSpy.calls.mostRecent().args;
            var sentProcessId = serviceArgs[0];
            var sentVariableName = serviceArgs[1];
            expect(serviceArgs.length).toBe(2);
            expect(sentProcessId).toBe('123');
            expect(sentVariableName).toBe(fakeVariable.name);
        });
        it('should emit an error when an error occurs deleting the variable', function () {
            var emitSpy = spyOn(component.error, 'emit');
            deleteProcessInstanceVariableSpy.and.returnValue(Rx_1.Observable.throw({}));
            component.onExecuteRowAction({
                args: {
                    row: new ng2_alfresco_datatable_1.ObjectDataRow(fakeVariable),
                    action: deleteAction
                }
            });
            expect(emitSpy).toHaveBeenCalled();
        });
        it('should display error dialog when an error is triggered', function () {
            var dialogEl = fixture.debugElement.query(platform_browser_1.By.css('.mdl-dialog.error-dialog')).nativeElement;
            var showSpy = spyOn(dialogEl, 'showModal');
            deleteProcessInstanceVariableSpy.and.returnValue(Rx_1.Observable.throw({}));
            component.onExecuteRowAction({
                args: {
                    row: new ng2_alfresco_datatable_1.ObjectDataRow(fakeVariable),
                    action: deleteAction
                }
            });
            expect(showSpy).toHaveBeenCalled();
        });
        it('should close error dialog when close button clicked', function () {
            var dialogEl = fixture.debugElement.query(platform_browser_1.By.css('.mdl-dialog.error-dialog')).nativeElement;
            var closeSpy = spyOn(dialogEl, 'close');
            component.showErrorDialog();
            component.closeErrorDialog();
            expect(closeSpy).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=activiti-process-instance-variables.component.spec.js.map