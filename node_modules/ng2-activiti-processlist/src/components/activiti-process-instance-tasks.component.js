/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_process_service_1 = require("./../services/activiti-process.service");
var ng2_activiti_tasklist_1 = require("ng2-activiti-tasklist");
var process_instance_model_1 = require("../models/process-instance.model");
var ActivitiProcessInstanceTasks = (function () {
    function ActivitiProcessInstanceTasks(translate, activitiProcess, logService) {
        var _this = this;
        this.translate = translate;
        this.activitiProcess = activitiProcess;
        this.logService = logService;
        this.showRefreshButton = true;
        this.activeTasks = [];
        this.completedTasks = [];
        this.taskClick = new core_1.EventEmitter();
        if (translate) {
            translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
        }
        this.task$ = new Rx_1.Observable(function (observer) { return _this.taskObserver = observer; }).share();
        this.completedTask$ = new Rx_1.Observable(function (observer) { return _this.completedTaskObserver = observer; }).share();
    }
    ActivitiProcessInstanceTasks.prototype.ngOnInit = function () {
        var _this = this;
        this.task$.subscribe(function (task) {
            _this.activeTasks.push(task);
        });
        this.completedTask$.subscribe(function (task) {
            _this.completedTasks.push(task);
        });
    };
    ActivitiProcessInstanceTasks.prototype.ngOnChanges = function (changes) {
        var processInstanceDetails = changes['processInstanceDetails'];
        if (processInstanceDetails && processInstanceDetails.currentValue) {
            this.load(processInstanceDetails.currentValue.id);
        }
    };
    ActivitiProcessInstanceTasks.prototype.load = function (processId) {
        this.loadActive(processId);
        this.loadCompleted(processId);
    };
    ActivitiProcessInstanceTasks.prototype.loadActive = function (processId) {
        var _this = this;
        this.activeTasks = [];
        if (processId) {
            this.activitiProcess.getProcessTasks(processId, null).subscribe(function (res) {
                res.forEach(function (task) {
                    _this.taskObserver.next(task);
                });
            }, function (err) {
                _this.logService.error(err);
            });
        }
        else {
            this.activeTasks = [];
        }
    };
    ActivitiProcessInstanceTasks.prototype.loadCompleted = function (processId) {
        var _this = this;
        this.completedTasks = [];
        if (processId) {
            this.activitiProcess.getProcessTasks(processId, 'completed').subscribe(function (res) {
                res.forEach(function (task) {
                    _this.completedTaskObserver.next(task);
                });
            }, function (err) {
                _this.logService.error(err);
            });
        }
        else {
            this.completedTasks = [];
        }
    };
    ActivitiProcessInstanceTasks.prototype.hasStartFormDefined = function () {
        return this.processInstanceDetails && this.processInstanceDetails.startFormDefined === true;
    };
    ActivitiProcessInstanceTasks.prototype.getUserFullName = function (user) {
        if (user) {
            return (user.firstName && user.firstName !== 'null'
                ? user.firstName + ' ' : '') +
                user.lastName;
        }
        return 'Nobody';
    };
    ActivitiProcessInstanceTasks.prototype.getFormatDate = function (value, format) {
        var datePipe = new common_1.DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            this.logService.error("ProcessListInstanceTask: error parsing date " + value + " to format " + format);
        }
    };
    ActivitiProcessInstanceTasks.prototype.clickTask = function ($event, task) {
        var args = new ng2_activiti_tasklist_1.TaskDetailsEvent(task);
        this.taskClick.emit(args);
    };
    ActivitiProcessInstanceTasks.prototype.clickStartTask = function () {
        this.processId = this.processInstanceDetails.id;
        this.showStartDialog();
    };
    ActivitiProcessInstanceTasks.prototype.showStartDialog = function () {
        if (!this.startDialog.nativeElement.showModal) {
            dialogPolyfill.registerDialog(this.startDialog.nativeElement);
        }
        if (this.startDialog) {
            this.startDialog.nativeElement.showModal();
        }
    };
    ActivitiProcessInstanceTasks.prototype.closeSartDialog = function () {
        if (this.startDialog) {
            this.startDialog.nativeElement.close();
        }
    };
    ActivitiProcessInstanceTasks.prototype.onRefreshClicked = function () {
        this.load(this.processInstanceDetails.id);
    };
    return ActivitiProcessInstanceTasks;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", process_instance_model_1.ProcessInstance)
], ActivitiProcessInstanceTasks.prototype, "processInstanceDetails", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiProcessInstanceTasks.prototype, "showRefreshButton", void 0);
__decorate([
    core_1.ViewChild('dialog'),
    __metadata("design:type", Object)
], ActivitiProcessInstanceTasks.prototype, "dialog", void 0);
__decorate([
    core_1.ViewChild('startDialog'),
    __metadata("design:type", Object)
], ActivitiProcessInstanceTasks.prototype, "startDialog", void 0);
__decorate([
    core_1.ViewChild('taskdetails'),
    __metadata("design:type", Object)
], ActivitiProcessInstanceTasks.prototype, "taskdetails", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessInstanceTasks.prototype, "taskClick", void 0);
ActivitiProcessInstanceTasks = __decorate([
    core_1.Component({
        selector: 'activiti-process-instance-tasks',
        moduleId: module.id,
        template: "<div  *ngIf=\"showRefreshButton\" class=\"process-tasks-refresh\" >     <button (click)=\"onRefreshClicked()\" class=\"mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect\">         <i class=\"material-icons\">refresh</i>     </button> </div>  <!-- ACTIVE FORM -->  <span class=\"activiti-label mdl-badge\"       [attr.data-badge]=\"activeTasks?.length\">{{ 'DETAILS.LABELS.TASKS_ACTIVE'|translate }}</span>  <div class=\"menu-container\" *ngIf=\"activeTasks?.length > 0\" data-automation-id=\"active-tasks\">     <ul class='mdl-list'>         <li class=\"mdl-list__item mdl-list__item--two-line process-tasks__task-item\" *ngFor=\"let task of activeTasks\">             <span class=\"mdl-list__item-primary-content\" (click)=\"clickTask($event, task)\">                 <i class=\"material-icons mdl-list__item-icon\">assignment</i>                 <span>{{task.name || 'Nameless task'}}</span>                 <span class=\"mdl-list__item-sub-title\">                     {{ 'DETAILS.LABELS.TASK_SUBTITLE' | translate:{user: getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}                 </span>             </span>         </li>     </ul> </div>  <!-- START FORM -->  <div *ngIf=\"activeTasks?.length === 0\" data-automation-id=\"active-tasks-none\" class=\"no-results\">     {{ 'DETAILS.TASKS.NO_ACTIVE' | translate }} </div>  <div *ngIf=\"hasStartFormDefined()\">     <span class=\"activiti-label\">{{ 'DETAILS.LABELS.START_FORM'|translate }}</span>      <!--IF START TASK COMPLETED -->     <div class=\"menu-container\">         <ul class='mdl-list'>             <li class=\"mdl-list__item mdl-list__item--two-line process-tasks__task-item\">                 <span class=\"mdl-list__item-primary-content\" (click)=\"clickStartTask($event)\">                     <i class=\"material-icons mdl-list__item-icon\">assignment</i>                     <span>{{ 'DETAILS.LABELS.START_FORM'|translate }}</span>                     <span class=\"mdl-list__item-sub-title\">                         {{ 'DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(processInstanceDetails.startedBy), created: getFormatDate(processInstanceDetails.started, 'mediumDate') } }}                     </span>                 </span>             </li>         </ul>     </div>  </div>  <!-- COMPLETED FORM --> <span class=\"activiti-label mdl-badge\"       [attr.data-badge]=\"completedTasks?.length\">{{ 'DETAILS.LABELS.TASKS_COMPLETED'|translate }}</span>  <div class=\"menu-container\" *ngIf=\"completedTasks?.length > 0\" data-automation-id=\"completed-tasks\">     <ul class='mdl-list'>         <li class=\"mdl-list__item mdl-list__item--two-line process-tasks__task-item\" *ngFor=\"let task of completedTasks\">             <span class=\"mdl-list__item-primary-content\" (click)=\"clickTask($event, task)\">                 <i class=\"material-icons mdl-list__item-icon\">assignment</i>                 <span>{{task.name || 'Nameless task'}}</span>                 <span class=\"mdl-list__item-sub-title\">                     {{ 'DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}                 </span>             </span>         </li>     </ul> </div>  <div *ngIf=\"completedTasks?.length === 0\" data-automation-id=\"completed-tasks-none\" class=\"no-results\">     {{ 'DETAILS.TASKS.NO_COMPLETED' | translate }} </div>  <dialog *ngIf=\"hasStartFormDefined()\" class=\"mdl-dialog task-details-dialog\" #startDialog>     <h4 class=\"mdl-dialog__title\">{{ 'DETAILS.LABELS.START_FORM'|translate }}</h4>     <div class=\"mdl-dialog__content form__size\">         <activiti-start-form [processId]=\"processId\" [processDefinitionId]=\"processInstanceDetails?.processDefinitionId\"                              [showRefreshButton]=\"false\" [readOnlyForm]=\"true\" >         </activiti-start-form>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"closeSartDialog()\" class=\"mdl-button close\">{{ 'DETAILS.TASKS.TASK_CLOSE' | translate }}</button>     </div> </dialog>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder;     vertical-align: top; }  .activiti-label.mdl-badge[data-badge]:after {     right: -27px;     top: -2px; }  .activiti-label + .icon {     position: relative;     top: -2px; }  .material-icons:hover {     color: rgb(255, 152, 0); }  .task-details-dialog {     position: fixed;     top: 50%;     transform: translate(0, -50%);     width: 40%; }  .process-tasks-refresh {     float: right; }  .mdl-dialog__content.form__size {     height: 400px;     overflow-y: auto; }  .no-results {     margin-left: 9px;     font-size: 14px;     font-weight: 400;     letter-spacing: 0;     line-height: 18px;     color: rgba(0, 0, 0, .54);     display: block;     padding: 12px; }  .process-tasks__task-item {     cursor: pointer; }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        activiti_process_service_1.ActivitiProcessService,
        ng2_alfresco_core_1.LogService])
], ActivitiProcessInstanceTasks);
exports.ActivitiProcessInstanceTasks = ActivitiProcessInstanceTasks;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
