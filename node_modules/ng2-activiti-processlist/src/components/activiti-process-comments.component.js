/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_process_service_1 = require("./../services/activiti-process.service");
var Observable_1 = require("rxjs/Observable");
var ActivitiProcessComments = (function () {
    function ActivitiProcessComments(translate, activitiProcess) {
        var _this = this;
        this.translate = translate;
        this.activitiProcess = activitiProcess;
        this.error = new core_1.EventEmitter();
        this.comments = [];
        if (translate) {
            translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
        }
        this.comment$ = new Observable_1.Observable(function (observer) { return _this.commentObserver = observer; }).share();
        this.comment$.subscribe(function (comment) {
            _this.comments.push(comment);
        });
    }
    ActivitiProcessComments.prototype.ngOnChanges = function (changes) {
        var processInstanceId = changes['processInstanceId'];
        if (processInstanceId) {
            if (processInstanceId.currentValue) {
                this.getProcessComments(processInstanceId.currentValue);
            }
            else {
                this.resetComments();
            }
        }
    };
    ActivitiProcessComments.prototype.getProcessComments = function (processInstanceId) {
        var _this = this;
        this.comments = [];
        if (processInstanceId) {
            this.activitiProcess.getProcessInstanceComments(processInstanceId).subscribe(function (res) {
                res.forEach(function (comment) {
                    _this.commentObserver.next(comment);
                });
            }, function (err) {
                _this.error.emit(err);
            });
        }
        else {
            this.resetComments();
        }
    };
    ActivitiProcessComments.prototype.resetComments = function () {
        this.comments = [];
    };
    ActivitiProcessComments.prototype.showDialog = function () {
        if (!this.dialog.nativeElement.showModal) {
            dialogPolyfill.registerDialog(this.dialog.nativeElement);
        }
        if (this.dialog) {
            this.dialog.nativeElement.showModal();
        }
    };
    ActivitiProcessComments.prototype.add = function () {
        var _this = this;
        this.activitiProcess.addProcessInstanceComment(this.processInstanceId, this.message).subscribe(function (res) {
            _this.comments.push(res);
            _this.message = '';
        }, function (err) {
            _this.error.emit(err);
        });
        this.cancel();
    };
    ActivitiProcessComments.prototype.cancel = function () {
        if (this.dialog) {
            this.dialog.nativeElement.close();
        }
    };
    return ActivitiProcessComments;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiProcessComments.prototype, "processInstanceId", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessComments.prototype, "error", void 0);
__decorate([
    core_1.ViewChild('dialog'),
    __metadata("design:type", Object)
], ActivitiProcessComments.prototype, "dialog", void 0);
ActivitiProcessComments = __decorate([
    core_1.Component({
        selector: 'activiti-process-instance-comments',
        moduleId: module.id,
        template: "<span class=\"activiti-label mdl-badge\"       [attr.data-badge]=\"comments?.length\">{{ 'DETAILS.LABELS.COMMENTS' |translate }}</span> <div id=\"addComment\" (click)=\"showDialog()\" class=\"icon material-icons\">add</div> <div class=\"mdl-tooltip\" for=\"addComment\">     {{ 'DETAILS.COMMENTS.BUTTON.ADD' |translate }} </div>  <div class=\"menu-container\" *ngIf=\"comments?.length > 0\">     <ul class='mdl-list'>         <li class=\"mdl-list__item list-wrap\" *ngFor=\"let comment of comments\">             <span class=\"mdl-list__item-primary-content hide-long-names\">             <i class=\"material-icons mdl-list__item-icon\">comment</i>             {{comment.message}}             </span>         </li>     </ul> </div> <div *ngIf=\"comments?.length === 0\" data-automation-id=\"comments-none\">     {{ 'DETAILS.COMMENTS.NONE' | translate }} </div>   <dialog class=\"mdl-dialog\" #dialog> <h4 class=\"mdl-dialog__title\">{{ 'DETAILS.COMMENTS.ADD_DIALOG.TITLE' |translate }}</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <textarea class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"message\" rows=\"1\" id=\"commentText\"></textarea>             <label class=\"mdl-textfield__label\" for=\"commentText\">{{ 'DETAILS.COMMENTS.ADD_DIALOG.LABEL.MESSAGE' |translate }}</label>         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"add()\" class=\"mdl-button\">{{ 'DETAILS.COMMENTS.ADD_DIALOG.BUTTON.ADD' |translate }}</button>         <button type=\"button\" (click)=\"cancel()\" class=\"mdl-button close\">{{ 'DETAILS.COMMENTS.ADD_DIALOG.BUTTON.CANCEL' |translate }}</button>     </div> </dialog>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder;     vertical-align: top; }  .activiti-label.mdl-badge[data-badge]:after {     right: -27px;     top: -2px; }  .activiti-label + .icon {     position: relative;     top: -2px; }  .material-icons {     cursor: pointer; }  .list-wrap {     word-wrap: break-word;     word-break: break-all;     -moz-hyphens:auto;     -webkit-hyphens:auto;     -o-hyphens:auto;     hyphens:auto; }  .hide-long-names {     overflow: auto; }"],
        providers: [activiti_process_service_1.ActivitiProcessService]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        activiti_process_service_1.ActivitiProcessService])
], ActivitiProcessComments);
exports.ActivitiProcessComments = ActivitiProcessComments;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
