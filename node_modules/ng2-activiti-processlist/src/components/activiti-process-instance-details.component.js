/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var common_1 = require("@angular/common");
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_process_service_1 = require("./../services/activiti-process.service");
var activiti_process_instance_header_component_1 = require("./activiti-process-instance-header.component");
var activiti_process_instance_tasks_component_1 = require("./activiti-process-instance-tasks.component");
var ActivitiProcessInstanceDetails = (function () {
    function ActivitiProcessInstanceDetails(translate, activitiProcess, logService) {
        this.translate = translate;
        this.activitiProcess = activitiProcess;
        this.logService = logService;
        this.showTitle = true;
        this.showRefreshButton = true;
        this.processCancelled = new core_1.EventEmitter();
        this.taskClick = new core_1.EventEmitter();
        if (translate) {
            translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
        }
    }
    ActivitiProcessInstanceDetails.prototype.ngOnChanges = function (changes) {
        var processInstanceId = changes['processInstanceId'];
        if (processInstanceId && !processInstanceId.currentValue) {
            this.reset();
            return;
        }
        if (processInstanceId && processInstanceId.currentValue) {
            this.load(processInstanceId.currentValue);
            return;
        }
    };
    ActivitiProcessInstanceDetails.prototype.reset = function () {
        this.processInstanceDetails = null;
    };
    ActivitiProcessInstanceDetails.prototype.load = function (processId) {
        var _this = this;
        if (processId) {
            this.activitiProcess.getProcess(processId).subscribe(function (res) {
                _this.processInstanceDetails = res;
            });
        }
    };
    ActivitiProcessInstanceDetails.prototype.isRunning = function () {
        return this.processInstanceDetails && !this.processInstanceDetails.ended;
    };
    ActivitiProcessInstanceDetails.prototype.cancelProcess = function () {
        var _this = this;
        this.activitiProcess.cancelProcess(this.processInstanceId).subscribe(function (data) {
            _this.processCancelled.emit(data);
        }, function (err) {
            _this.logService.error(err);
        });
    };
    ActivitiProcessInstanceDetails.prototype.onTaskClicked = function (event) {
        this.taskClick.emit(event);
    };
    ActivitiProcessInstanceDetails.prototype.getProcessNameOrDescription = function (dateFormat) {
        var name = '';
        if (this.processInstanceDetails) {
            name = this.processInstanceDetails.name ||
                this.processInstanceDetails.processDefinitionName + ' - ' + this.getFormatDate(this.processInstanceDetails.started, dateFormat);
        }
        return name;
    };
    ActivitiProcessInstanceDetails.prototype.getFormatDate = function (value, format) {
        var datePipe = new common_1.DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            this.logService.error("ProcessListInstanceHeader: error parsing date " + value + " to format " + format);
        }
    };
    return ActivitiProcessInstanceDetails;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiProcessInstanceDetails.prototype, "processInstanceId", void 0);
__decorate([
    core_1.ViewChild(activiti_process_instance_header_component_1.ActivitiProcessInstanceHeader),
    __metadata("design:type", activiti_process_instance_header_component_1.ActivitiProcessInstanceHeader)
], ActivitiProcessInstanceDetails.prototype, "processInstanceHeader", void 0);
__decorate([
    core_1.ViewChild(activiti_process_instance_tasks_component_1.ActivitiProcessInstanceTasks),
    __metadata("design:type", activiti_process_instance_tasks_component_1.ActivitiProcessInstanceTasks)
], ActivitiProcessInstanceDetails.prototype, "tasksList", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiProcessInstanceDetails.prototype, "showTitle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiProcessInstanceDetails.prototype, "showRefreshButton", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessInstanceDetails.prototype, "processCancelled", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessInstanceDetails.prototype, "taskClick", void 0);
ActivitiProcessInstanceDetails = __decorate([
    core_1.Component({
        selector: 'activiti-process-instance-details',
        moduleId: module.id,
        template: "<div *ngIf=\"!processInstanceDetails\">{{ 'DETAILS.MESSAGES.NONE'|translate }}</div> <div *ngIf=\"processInstanceDetails\">     <h2 class=\"mdl-card__title-text\">{{ getProcessNameOrDescription('medium') }}</h2>     <activiti-process-instance-header [processInstance]=\"processInstanceDetails\"></activiti-process-instance-header>     <div class=\"mdl-card mdl-shadow--2dp activiti-process-container\">         <div class=\"mdl-cell mdl-cell--12-col\">             <activiti-process-instance-tasks                 [processInstanceDetails]=\"processInstanceDetails\"                 (taskClick)=\"onTaskClicked($event)\">             </activiti-process-instance-tasks>         </div>     </div>     <div class=\"mdl-cell mdl-cell--4-col\" data-automation-id=\"header-status\" *ngIf=\"isRunning()\">         <button type=\"button\" (click)=\"cancelProcess()\" class=\"mdl-button\">{{ 'DETAILS.BUTTON.CANCEL' | translate }}</button>     </div> </div>",
        styles: [":host {     width: 100%; }  .activiti-process-container {     width: 100%;     min-height: 100px;     overflow: visible;     padding: 10px; }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        activiti_process_service_1.ActivitiProcessService,
        ng2_alfresco_core_1.LogService])
], ActivitiProcessInstanceDetails);
exports.ActivitiProcessInstanceDetails = ActivitiProcessInstanceDetails;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
