/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_activiti_form_1 = require("ng2-activiti-form");
var process_definition_model_1 = require("./../models/process-definition.model");
var activiti_process_service_1 = require("./../services/activiti-process.service");
var ActivitiStartProcessInstance = (function () {
    function ActivitiStartProcessInstance(translate, activitiProcess) {
        this.translate = translate;
        this.activitiProcess = activitiProcess;
        this.showStartButton = true;
        this.start = new core_1.EventEmitter();
        this.processDefinitions = [];
        this.currentProcessDef = new process_definition_model_1.ProcessDefinitionRepresentation();
        this.errorMessageId = '';
        if (translate) {
            translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
        }
    }
    ActivitiStartProcessInstance.prototype.ngOnChanges = function (changes) {
        var appId = changes['appId'];
        if (appId && (appId.currentValue || appId.currentValue === null)) {
            this.load(appId.currentValue);
            return;
        }
    };
    ActivitiStartProcessInstance.prototype.load = function (appId) {
        var _this = this;
        this.resetSelectedProcessDefinition();
        this.resetErrorMessage();
        this.activitiProcess.getProcessDefinitions(appId).subscribe(function (res) {
            _this.processDefinitions = res;
        }, function () {
            _this.errorMessageId = 'START_PROCESS.ERROR.LOAD_PROCESS_DEFS';
        });
    };
    ActivitiStartProcessInstance.prototype.startProcess = function (outcome) {
        var _this = this;
        if (this.currentProcessDef.id && this.name) {
            this.resetErrorMessage();
            var formValues = this.startForm ? this.startForm.form.values : undefined;
            this.activitiProcess.startProcess(this.currentProcessDef.id, this.name, outcome, formValues).subscribe(function (res) {
                _this.name = '';
                _this.start.emit(res);
            }, function (err) {
                _this.errorMessageId = 'START_PROCESS.ERROR.START';
                _this.start.error(err);
            });
        }
    };
    ActivitiStartProcessInstance.prototype.onProcessDefChange = function (processDefinitionId) {
        var processDef = this.processDefinitions.find(function (processDefinition) {
            return processDefinition.id === processDefinitionId;
        });
        if (processDef) {
            this.currentProcessDef = JSON.parse(JSON.stringify(processDef));
        }
        else {
            this.resetSelectedProcessDefinition();
        }
    };
    ActivitiStartProcessInstance.prototype.hasStartForm = function () {
        return this.currentProcessDef && this.currentProcessDef.hasStartForm;
    };
    ActivitiStartProcessInstance.prototype.isStartFormMissingOrValid = function () {
        if (this.startForm) {
            return this.startForm.form && this.startForm.form.isValid;
        }
        else {
            return true;
        }
    };
    ActivitiStartProcessInstance.prototype.validateForm = function () {
        return this.currentProcessDef.id && this.name && this.isStartFormMissingOrValid();
    };
    ActivitiStartProcessInstance.prototype.resetSelectedProcessDefinition = function () {
        this.currentProcessDef = new process_definition_model_1.ProcessDefinitionRepresentation();
    };
    ActivitiStartProcessInstance.prototype.resetErrorMessage = function () {
        this.errorMessageId = '';
    };
    ActivitiStartProcessInstance.prototype.onOutcomeClick = function (outcome) {
        this.startProcess(outcome);
    };
    ActivitiStartProcessInstance.prototype.reset = function () {
        this.resetSelectedProcessDefinition();
        this.name = '';
        if (this.startForm) {
            this.startForm.data = {};
        }
        this.resetErrorMessage();
    };
    return ActivitiStartProcessInstance;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiStartProcessInstance.prototype, "appId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiStartProcessInstance.prototype, "showStartButton", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiStartProcessInstance.prototype, "start", void 0);
__decorate([
    core_1.ViewChild(ng2_activiti_form_1.ActivitiStartForm),
    __metadata("design:type", ng2_activiti_form_1.ActivitiStartForm)
], ActivitiStartProcessInstance.prototype, "startForm", void 0);
ActivitiStartProcessInstance = __decorate([
    core_1.Component({
        selector: 'activiti-start-process',
        moduleId: module.id,
        template: "<div *ngIf=\"processDefinitions.length > 0 || errorMessageId\" class=\"mdl-card mdl-shadow--2dp\">     <div class=\"mdl-card__supporting-text\">         <div class=\"mdl-card mdl-shadow--2dp error-message\" *ngIf=\"errorMessageId\">             <div class=\"mdl-card__supporting-text\">{{errorMessageId|translate}}</div>         </div>         <div class=\"mdl-textfield mdl-js-textfield alf-mdl-selectfield\">             <select name=\"processDefinition\" [(ngModel)]=\"currentProcessDef.id\" (ngModelChange)=\"onProcessDefChange($event)\" id=\"processDefinition\" required>                 <option value=\"null\">{{'START_PROCESS.DIALOG.TYPE_PLACEHOLDER'|translate}}</option>                 <option *ngFor=\"let processDef of processDefinitions\" [value]=\"processDef.id\">                     {{processDef.name}}                 </option>             </select>             <label class=\"mdl-textfield__label\" for=\"processDefinition\">{{'START_PROCESS.DIALOG.LABEL.TYPE'|translate}}</label>         </div>         <br>         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" alfresco-mdl-textfield>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"name\" id=\"processName\" required />             <label class=\"mdl-textfield__label\" for=\"processName\">{{'START_PROCESS.DIALOG.LABEL.NAME'|translate}}</label>         </div>         <activiti-start-form *ngIf=\"hasStartForm()\" [processDefinitionId]=\"currentProcessDef.id\"                              (outcomeClick)=\"onOutcomeClick($event)\">         </activiti-start-form>     </div>     <div class=\"mdl-card__actions mdl-card--border\" *ngIf=\"!hasStartForm()\">         <button type=\"button\" [disabled]=\"!validateForm()\" (click)=\"startProcess()\" class=\"mdl-button\" data-automation-id=\"btn-start\">{{'START_PROCESS.DIALOG.ACTION.START'|translate}}</button>     </div> </div> <div *ngIf=\"processDefinitions.length === 0 && !errorMessageId\" class=\"mdl-card mdl-shadow--2dp\">     <div class=\"mdl-card__supporting-text\">         <div class=\"mdl-textfield mdl-js-textfield alf-mdl-selectfield\">             <span id=\"no-process-message\">{{'START_PROCESS.NO_PROCESS_DEFINITIONS' | translate}}</span>         </div>     </div> </div>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }  .material-icons:hover {     color: rgb(255, 152, 0); }  .mdl-textfield.alf-mdl-selectfield label {     color: rgba(0,0,0,.54);     font-size: 12px;     top: 4px; }  .mdl-card {     width: 100%;     min-height: initial;     margin-bottom: 20px; }  .mdl-card .mdl-card__supporting-text {     width: 100%;     padding: 20px;     box-sizing: inherit; }  .mdl-dialog {     width: -moz-fit-content;     width: -webkit-fit-content;     width: -ms-fit-content;     width: -o-fit-content;     width: fit-content; }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        activiti_process_service_1.ActivitiProcessService])
], ActivitiStartProcessInstance);
exports.ActivitiStartProcessInstance = ActivitiStartProcessInstance;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
