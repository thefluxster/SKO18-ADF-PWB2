/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var activiti_processlist_component_1 = require("./activiti-processlist.component");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_alfresco_datatable_1 = require("ng2-alfresco-datatable");
var activiti_process_instances_list_mock_1 = require("../assets/activiti-process-instances-list.mock");
var translation_service_mock_1 = require("./../assets/translation.service.mock");
var activiti_process_service_1 = require("../services/activiti-process.service");
describe('ActivitiProcessInstanceListComponent', function () {
    var componentHandler;
    var fixture;
    var component;
    var service;
    var getProcessInstancesSpy;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot(),
                ng2_alfresco_datatable_1.DataTableModule.forRoot()
            ],
            declarations: [activiti_processlist_component_1.ActivitiProcessInstanceListComponent],
            providers: [
                activiti_process_service_1.ActivitiProcessService,
                { provide: ng2_alfresco_core_1.AlfrescoTranslationService, useClass: translation_service_mock_1.TranslationMock }
            ]
        }).compileComponents().then(function () {
            fixture = testing_1.TestBed.createComponent(activiti_processlist_component_1.ActivitiProcessInstanceListComponent);
            component = fixture.componentInstance;
            service = fixture.debugElement.injector.get(activiti_process_service_1.ActivitiProcessService);
            getProcessInstancesSpy = spyOn(service, 'getProcessInstances').and.returnValue(Rx_1.Observable.of(activiti_process_instances_list_mock_1.fakeProcessInstances));
            componentHandler = jasmine.createSpyObj('componentHandler', [
                'upgradeAllRegistered',
                'upgradeElement'
            ]);
            window['componentHandler'] = componentHandler;
        });
    }));
    it('should use the default schemaColumn as default', function () {
        component.ngOnInit();
        expect(component.data.getColumns()).toBeDefined();
        expect(component.data.getColumns().length).toEqual(4);
    });
    it('should use the schemaColumn passed in input', function () {
        component.data = new ng2_alfresco_datatable_1.ObjectDataTableAdapter([], [
            { type: 'text', key: 'fake-id', title: 'Name' }
        ]);
        component.ngOnInit();
        expect(component.data.getColumns()).toBeDefined();
        expect(component.data.getColumns().length).toEqual(1);
    });
    it('should return an empty process list when no input parameters are passed', function () {
        component.ngOnInit();
        expect(component.data).toBeDefined();
        expect(component.isListEmpty()).toBeTruthy();
    });
    it('should emit onSuccess event when process instances loaded', testing_1.fakeAsync(function () {
        var emitSpy = spyOn(component.onSuccess, 'emit');
        component.appId = '1';
        component.state = 'open';
        component.processDefinitionKey = null;
        fixture.detectChanges();
        testing_1.tick();
        expect(emitSpy).toHaveBeenCalledWith(activiti_process_instances_list_mock_1.fakeProcessInstances);
    }));
    it('should return the process instances list in original order when datalist passed non-existent columns', function (done) {
        component.data = new ng2_alfresco_datatable_1.ObjectDataTableAdapter([], [
            { type: 'text', key: 'fake-id', title: 'Name' }
        ]);
        component.appId = '1';
        component.state = 'open';
        component.processDefinitionKey = null;
        component.onSuccess.subscribe(function (res) {
            expect(res).toBeDefined();
            expect(component.data).toBeDefined();
            expect(component.isListEmpty()).not.toBeTruthy();
            expect(component.data.getRows().length).toEqual(2);
            expect(component.data.getRows()[0].getValue('name')).toEqual('Process 773443333');
            expect(component.data.getRows()[1].getValue('name')).toEqual('Process 382927392');
            done();
        });
        fixture.detectChanges();
    });
    it('should order the process instances by name column when no sort passed', function (done) {
        component.appId = '1';
        component.state = 'open';
        component.processDefinitionKey = null;
        component.onSuccess.subscribe(function (res) {
            expect(res).toBeDefined();
            expect(component.data).toBeDefined();
            expect(component.isListEmpty()).not.toBeTruthy();
            expect(component.data.getRows().length).toEqual(2);
            expect(component.data.getRows()[0].getValue('name')).toEqual('Process 382927392');
            expect(component.data.getRows()[1].getValue('name')).toEqual('Process 773443333');
            done();
        });
        fixture.detectChanges();
    });
    it('should order the process instances by descending column when specified', function (done) {
        component.appId = '1';
        component.state = 'open';
        component.processDefinitionKey = null;
        component.sort = 'name-desc';
        component.onSuccess.subscribe(function (res) {
            expect(res).toBeDefined();
            expect(component.data).toBeDefined();
            expect(component.isListEmpty()).not.toBeTruthy();
            expect(component.data.getRows().length).toEqual(2);
            expect(component.data.getRows()[0].getValue('name')).toEqual('Process 773443333');
            expect(component.data.getRows()[1].getValue('name')).toEqual('Process 382927392');
            done();
        });
        fixture.detectChanges();
    });
    it('should order the process instances by ascending column when specified', function (done) {
        component.appId = '1';
        component.state = 'open';
        component.processDefinitionKey = null;
        component.sort = 'started-asc';
        component.onSuccess.subscribe(function (res) {
            expect(res).toBeDefined();
            expect(component.data).toBeDefined();
            expect(component.isListEmpty()).not.toBeTruthy();
            expect(component.data.getRows().length).toEqual(2);
            expect(component.data.getRows()[0].getValue('name')).toEqual('Process 773443333');
            expect(component.data.getRows()[1].getValue('name')).toEqual('Process 382927392');
            done();
        });
        fixture.detectChanges();
    });
    it('should order the process instances by descending start date when specified', function (done) {
        component.appId = '1';
        component.state = 'open';
        component.processDefinitionKey = null;
        component.sort = 'started-desc';
        component.onSuccess.subscribe(function (res) {
            expect(res).toBeDefined();
            expect(component.data).toBeDefined();
            expect(component.isListEmpty()).not.toBeTruthy();
            expect(component.data.getRows().length).toEqual(2);
            expect(component.data.getRows()[0].getValue('name')).toEqual('Process 382927392');
            expect(component.data.getRows()[1].getValue('name')).toEqual('Process 773443333');
            done();
        });
        fixture.detectChanges();
    });
    it('should return the process instances list filtered by processDefinitionKey', function (done) {
        var key = 'fakeprocess';
        component.appId = '1';
        component.state = 'open';
        component.processDefinitionKey = key;
        component.onSuccess.subscribe(function (res) {
            var lastCall = getProcessInstancesSpy.calls.mostRecent();
            expect(lastCall).toBeDefined();
            var lastCallArgs = lastCall.args;
            expect(lastCallArgs[0]).toBeDefined();
            expect(lastCallArgs[0].processDefinitionKey).toEqual(key);
            done();
        });
        fixture.detectChanges();
    });
    it('should return a default name if no name is specified on the process', function (done) {
        getProcessInstancesSpy = getProcessInstancesSpy.and.returnValue(Rx_1.Observable.of(activiti_process_instances_list_mock_1.fakeProcessInstancesWithNoName));
        component.appId = '1';
        component.state = 'open';
        component.processDefinitionKey = 'fakeprocess';
        component.onSuccess.subscribe(function (res) {
            expect(component.data.getRows()[0].getValue('name')).toEqual('Fake Process Name - Nov 9, 2017, 12:36:14 PM');
            expect(component.data.getRows()[1].getValue('name')).toEqual('Fake Process Name - Nov 9, 2017, 12:37:25 PM');
            done();
        });
        fixture.detectChanges();
    });
    it('should return a currentId null when the processList is empty', function () {
        component.selectFirst();
        expect(component.getCurrentId()).toBeNull();
    });
    it('should throw an exception when the response is wrong', testing_1.fakeAsync(function () {
        var emitSpy = spyOn(component.onError, 'emit');
        var fakeError = 'Fake server error';
        getProcessInstancesSpy.and.returnValue(Rx_1.Observable.throw(fakeError));
        component.appId = '1';
        component.state = 'open';
        fixture.detectChanges();
        testing_1.tick();
        expect(emitSpy).toHaveBeenCalledWith(fakeError);
    }));
    it('should emit onSuccess event when reload() called', testing_1.fakeAsync(function () {
        component.appId = '1';
        component.state = 'open';
        component.processDefinitionKey = null;
        fixture.detectChanges();
        testing_1.tick();
        var emitSpy = spyOn(component.onSuccess, 'emit');
        component.reload();
        testing_1.tick();
        expect(emitSpy).toHaveBeenCalledWith(activiti_process_instances_list_mock_1.fakeProcessInstances);
    }));
    it('should reload processes when reload() is called', function (done) {
        component.data = new ng2_alfresco_datatable_1.ObjectDataTableAdapter([], [
            { type: 'text', key: 'fake-id', title: 'Name' }
        ]);
        component.state = 'open';
        component.onSuccess.subscribe(function (res) {
            expect(res).toBeDefined();
            expect(component.data).toBeDefined();
            expect(component.isListEmpty()).not.toBeTruthy();
            expect(component.data.getRows().length).toEqual(2);
            expect(component.data.getRows()[0].getValue('name')).toEqual('Process 773443333');
            done();
        });
        component.reload();
    });
    it('should emit row click event', function (done) {
        var row = new ng2_alfresco_datatable_1.ObjectDataRow({
            id: 999
        });
        var rowEvent = { value: row };
        component.rowClick.subscribe(function (taskId) {
            expect(taskId).toEqual(999);
            expect(component.getCurrentId()).toEqual(999);
            done();
        });
        component.onRowClick(rowEvent);
    });
    describe('component changes', function () {
        beforeEach(function () {
            component.data = new ng2_alfresco_datatable_1.ObjectDataTableAdapter([], [
                { type: 'text', key: 'fake-id', title: 'Name' }
            ]);
        });
        it('should NOT reload the process list when no parameters changed', function () {
            expect(component.isListEmpty()).toBeTruthy();
            component.ngOnChanges({});
            expect(component.isListEmpty()).toBeTruthy();
        });
        it('should reload the list when the appId parameter changes', function (done) {
            var appId = '1';
            var change = new core_1.SimpleChange(null, appId);
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(component.data).toBeDefined();
                expect(component.isListEmpty()).not.toBeTruthy();
                expect(component.data.getRows().length).toEqual(2);
                expect(component.data.getRows()[0].getValue('name')).toEqual('Process 773443333');
                done();
            });
            component.ngOnChanges({ 'appId': change });
        });
        it('should reload the list when the processDefinitionKey parameter changes', function (done) {
            var processDefinitionKey = 'fakeprocess';
            var change = new core_1.SimpleChange(null, processDefinitionKey);
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(component.data).toBeDefined();
                expect(component.isListEmpty()).not.toBeTruthy();
                expect(component.data.getRows().length).toEqual(2);
                expect(component.data.getRows()[0].getValue('name')).toEqual('Process 773443333');
                done();
            });
            component.ngOnChanges({ 'processDefinitionKey': change });
        });
        it('should reload the list when the state parameter changes', function (done) {
            var state = 'open';
            var change = new core_1.SimpleChange(null, state);
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(component.data).toBeDefined();
                expect(component.isListEmpty()).not.toBeTruthy();
                expect(component.data.getRows().length).toEqual(2);
                expect(component.data.getRows()[0].getValue('name')).toEqual('Process 773443333');
                done();
            });
            component.ngOnChanges({ 'state': change });
        });
        it('should reload the list when the sort parameter changes', function (done) {
            var sort = 'created-desc';
            var change = new core_1.SimpleChange(null, sort);
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(component.data).toBeDefined();
                expect(component.isListEmpty()).not.toBeTruthy();
                expect(component.data.getRows().length).toEqual(2);
                expect(component.data.getRows()[0].getValue('name')).toEqual('Process 773443333');
                done();
            });
            component.ngOnChanges({ 'sort': change });
        });
        it('should sort the list when the sort parameter changes', function (done) {
            var sort = 'created-asc';
            var change = new core_1.SimpleChange(null, sort);
            var sortSpy = spyOn(component.data, 'setSorting');
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(sortSpy).toHaveBeenCalledWith(new ng2_alfresco_datatable_1.DataSorting('started', 'asc'));
                done();
            });
            component.sort = sort;
            component.ngOnChanges({ 'sort': change });
        });
        it('should reload the process list when the name parameter changes', function (done) {
            var name = 'FakeTaskName';
            var change = new core_1.SimpleChange(null, name);
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(component.data).toBeDefined();
                expect(component.isListEmpty()).not.toBeTruthy();
                expect(component.data.getRows().length).toEqual(2);
                expect(component.data.getRows()[0].getValue('name')).toEqual('Process 773443333');
                done();
            });
            component.ngOnChanges({ 'name': change });
        });
    });
});
//# sourceMappingURL=activiti-processlist.component.spec.js.map