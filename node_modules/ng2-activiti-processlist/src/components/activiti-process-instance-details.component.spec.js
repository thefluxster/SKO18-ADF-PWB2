/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_activiti_form_1 = require("ng2-activiti-form");
var ng2_activiti_tasklist_1 = require("ng2-activiti-tasklist");
var activiti_process_instance_details_component_1 = require("./activiti-process-instance-details.component");
var activiti_process_service_1 = require("./../services/activiti-process.service");
var translation_service_mock_1 = require("./../assets/translation.service.mock");
var activiti_process_model_mock_1 = require("./../assets/activiti-process.model.mock");
var process_instance_model_1 = require("../models/process-instance.model");
describe('ActivitiProcessInstanceDetails', function () {
    var componentHandler;
    var service;
    var formService;
    var component;
    var fixture;
    var getProcessSpy;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule,
                ng2_activiti_form_1.ActivitiFormModule,
                ng2_activiti_tasklist_1.ActivitiTaskListModule
            ],
            declarations: [
                activiti_process_instance_details_component_1.ActivitiProcessInstanceDetails
            ],
            providers: [
                { provide: ng2_alfresco_core_1.AlfrescoTranslationService, useClass: translation_service_mock_1.TranslationMock },
                activiti_process_service_1.ActivitiProcessService
            ],
            schemas: [core_1.NO_ERRORS_SCHEMA]
        }).compileComponents();
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(activiti_process_instance_details_component_1.ActivitiProcessInstanceDetails);
        component = fixture.componentInstance;
        service = fixture.debugElement.injector.get(activiti_process_service_1.ActivitiProcessService);
        formService = fixture.debugElement.injector.get(ng2_activiti_form_1.FormService);
        getProcessSpy = spyOn(service, 'getProcess').and.returnValue(Rx_1.Observable.of(activiti_process_model_mock_1.exampleProcess));
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered',
            'upgradeElement'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should not load task details when no processInstanceId is specified', function () {
        fixture.detectChanges();
        expect(getProcessSpy).not.toHaveBeenCalled();
    });
    it('should set a placeholder message when processInstanceId not initialised', function () {
        fixture.detectChanges();
        expect(fixture.nativeElement.innerText).toBe('DETAILS.MESSAGES.NONE');
    });
    it('should display a header when the processInstanceId is provided', testing_1.async(function () {
        fixture.detectChanges();
        component.ngOnChanges({ 'processInstanceId': new core_1.SimpleChange(null, '123') });
        fixture.whenStable().then(function () {
            fixture.detectChanges();
            var headerEl = fixture.debugElement.query(platform_browser_1.By.css('h2'));
            expect(headerEl).not.toBeNull();
            expect(headerEl.nativeElement.innerText).toBe('Process 123');
        });
    }));
    it('should display default details when the process instance has no name', testing_1.async(function () {
        getProcessSpy = getProcessSpy.and.returnValue(Rx_1.Observable.of(activiti_process_model_mock_1.exampleProcessNoName));
        fixture.detectChanges();
        component.ngOnChanges({ 'processInstanceId': new core_1.SimpleChange(null, '123') });
        fixture.whenStable().then(function () {
            fixture.detectChanges();
            var headerEl = fixture.debugElement.query(platform_browser_1.By.css('h2'));
            expect(headerEl).not.toBeNull();
            expect(headerEl.nativeElement.innerText).toBe('My Process - Nov 10, 2016, 3:37:30 AM');
        });
    }));
    describe('change detection', function () {
        var change = new core_1.SimpleChange('123', '456');
        var nullChange = new core_1.SimpleChange('123', null);
        beforeEach(testing_1.async(function () {
            component.processInstanceId = '123';
            fixture.detectChanges();
            component.tasksList = jasmine.createSpyObj('tasksList', ['load']);
            fixture.whenStable().then(function () {
                getProcessSpy.calls.reset();
            });
        }));
        it('should fetch new process details when processInstanceId changed', function () {
            component.ngOnChanges({ 'processInstanceId': change });
            expect(getProcessSpy).toHaveBeenCalledWith('456');
        });
        it('should NOT fetch new process details when empty changeset made', function () {
            component.ngOnChanges({});
            expect(getProcessSpy).not.toHaveBeenCalled();
        });
        it('should NOT fetch new process details when processInstanceId changed to null', function () {
            component.ngOnChanges({ 'processInstanceId': nullChange });
            expect(getProcessSpy).not.toHaveBeenCalled();
        });
        it('should set a placeholder message when processInstanceId changed to null', function () {
            component.ngOnChanges({ 'processInstanceId': nullChange });
            fixture.detectChanges();
            expect(fixture.nativeElement.innerText).toBe('DETAILS.MESSAGES.NONE');
        });
        it('should display cancel button if process is running', function () {
            component.processInstanceDetails = new process_instance_model_1.ProcessInstance({
                ended: null
            });
            fixture.detectChanges();
            var buttonEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-status"] button'));
            expect(buttonEl).not.toBeNull();
        });
    });
});
//# sourceMappingURL=activiti-process-instance-details.component.spec.js.map