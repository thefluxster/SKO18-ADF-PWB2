/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_process_instance_header_component_1 = require("./activiti-process-instance-header.component");
var translation_service_mock_1 = require("./../assets/translation.service.mock");
var activiti_process_model_mock_1 = require("./../assets/activiti-process.model.mock");
var process_instance_model_1 = require("./../models/process-instance.model");
var activiti_process_comments_component_1 = require("./activiti-process-comments.component");
var activiti_process_service_1 = require("./../services/activiti-process.service");
describe('ActivitiProcessInstanceHeader', function () {
    var componentHandler;
    var component;
    var fixture;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            declarations: [
                activiti_process_instance_header_component_1.ActivitiProcessInstanceHeader,
                activiti_process_comments_component_1.ActivitiProcessComments
            ],
            providers: [
                activiti_process_service_1.ActivitiProcessService,
                { provide: ng2_alfresco_core_1.AlfrescoTranslationService, useClass: translation_service_mock_1.TranslationMock }
            ]
        }).compileComponents();
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(activiti_process_instance_header_component_1.ActivitiProcessInstanceHeader);
        component = fixture.componentInstance;
        component.processInstance = new process_instance_model_1.ProcessInstance(activiti_process_model_mock_1.exampleProcess);
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered',
            'upgradeElement'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should render empty component if no form details provided', function () {
        component.processInstance = undefined;
        fixture.detectChanges();
        expect(fixture.debugElement.children.length).toBe(0);
    });
    it('should display started by user', function () {
        fixture.detectChanges();
        var formValueEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-started-by"] .activiti-process-header__value'));
        expect(formValueEl).not.toBeNull();
        expect(formValueEl.nativeElement.innerText).toBe('Bob Jones');
    });
    it('should display empty started by user if user unknown', function () {
        component.processInstance.startedBy = null;
        fixture.detectChanges();
        var formValueEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-started-by"] .activiti-process-header__value'));
        expect(formValueEl).not.toBeNull();
        expect(formValueEl.nativeElement.innerText).toBe('');
    });
    it('should display process start date', function () {
        component.processInstance.started = '2016-11-10T03:37:30.010+0000';
        fixture.detectChanges();
        var formValueEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-started"] .activiti-process-header__value'));
        expect(formValueEl).not.toBeNull();
        expect(formValueEl.nativeElement.innerText).toBe('Nov 10, 2016, 3:37:30 AM');
    });
    it('should display ended date if process is ended', function () {
        component.processInstance.ended = '2016-11-10T03:37:30.010+0000';
        fixture.detectChanges();
        var formValueEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-status"] .activiti-process-header__value'));
        expect(formValueEl).not.toBeNull();
        expect(formValueEl.nativeElement.innerText).toBe('Nov 10, 2016, 3:37:30 AM');
    });
});
//# sourceMappingURL=activiti-process-instance-header.component.spec.js.map