/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_activiti_form_1 = require("ng2-activiti-form");
var translation_service_mock_1 = require("./../assets/translation.service.mock");
var activiti_start_process_component_mock_1 = require("./../assets/activiti-start-process.component.mock");
var activiti_start_process_component_1 = require("./activiti-start-process.component");
var activiti_process_service_1 = require("../services/activiti-process.service");
describe('ActivitiStartProcessInstance', function () {
    var componentHandler;
    var component;
    var fixture;
    var processService;
    var formService;
    var getDefinitionsSpy;
    var getStartFormDefinitionSpy;
    var startProcessSpy;
    var debugElement;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot(),
                ng2_activiti_form_1.ActivitiFormModule.forRoot()
            ],
            declarations: [
                activiti_start_process_component_1.ActivitiStartProcessInstance
            ],
            providers: [
                { provide: ng2_alfresco_core_1.AlfrescoTranslationService, useClass: translation_service_mock_1.TranslationMock },
                activiti_process_service_1.ActivitiProcessService,
                ng2_activiti_form_1.FormService
            ]
        }).compileComponents();
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(activiti_start_process_component_1.ActivitiStartProcessInstance);
        component = fixture.componentInstance;
        debugElement = fixture.debugElement;
        processService = fixture.debugElement.injector.get(activiti_process_service_1.ActivitiProcessService);
        formService = fixture.debugElement.injector.get(ng2_activiti_form_1.FormService);
        getDefinitionsSpy = spyOn(processService, 'getProcessDefinitions').and.returnValue(Rx_1.Observable.of(activiti_start_process_component_mock_1.fakeProcessDefs));
        startProcessSpy = spyOn(processService, 'startProcess').and.returnValue(Rx_1.Observable.of(activiti_start_process_component_mock_1.newProcess));
        getStartFormDefinitionSpy = spyOn(formService, 'getStartFormDefinition').and.returnValue(Rx_1.Observable.of(activiti_start_process_component_mock_1.taskFormMock));
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered',
            'upgradeElement'
        ]);
        window['componentHandler'] = componentHandler;
    });
    describe('process definitions list', function () {
        it('should call service to fetch process definitions', function () {
            var change = new core_1.SimpleChange(null, '123');
            component.ngOnChanges({ 'appId': change });
            fixture.detectChanges();
            expect(getDefinitionsSpy).toHaveBeenCalled();
        });
        it('should call service to fetch process definitions with appId when provided', function () {
            var change = new core_1.SimpleChange(null, '123');
            component.ngOnChanges({ 'appId': change });
            fixture.detectChanges();
            expect(getDefinitionsSpy).toHaveBeenCalledWith('123');
        });
        it('should display the correct number of processes in the select list', function () {
            var change = new core_1.SimpleChange(null, '123');
            component.ngOnChanges({ 'appId': change });
            fixture.detectChanges();
            var selectElement = debugElement.query(platform_browser_1.By.css('select'));
            expect(selectElement.children.length).toBe(3);
        });
        it('should display the correct process def details', testing_1.async(function () {
            var change = new core_1.SimpleChange(null, '123');
            component.ngOnChanges({ 'appId': change });
            fixture.detectChanges();
            fixture.whenStable().then(function () {
                var optionEl = debugElement.queryAll(platform_browser_1.By.css('select option'))[1].nativeElement;
                expect(optionEl.value).toBe('my:process1');
                expect(optionEl.textContent.trim()).toBe('My Process 1');
            });
        }));
        it('should indicate an error to the user if process defs cannot be loaded', testing_1.async(function () {
            getDefinitionsSpy = getDefinitionsSpy.and.returnValue(Rx_1.Observable.throw({}));
            var change = new core_1.SimpleChange(null, '123');
            component.ngOnChanges({ 'appId': change });
            fixture.detectChanges();
            fixture.whenStable().then(function () {
                var errorEl = debugElement.query(platform_browser_1.By.css('.error-message'));
                expect(errorEl).not.toBeNull('Expected error message to be present');
                expect(errorEl.nativeElement.innerText.trim()).toBe('START_PROCESS.ERROR.LOAD_PROCESS_DEFS');
            });
        }));
        it('should show no process available message when no process definition is loaded', testing_1.async(function () {
            getDefinitionsSpy = getDefinitionsSpy.and.returnValue(Rx_1.Observable.of([]));
            var change = new core_1.SimpleChange(null, '123');
            component.ngOnChanges({ 'appId': change });
            fixture.detectChanges();
            fixture.whenStable().then(function () {
                var noprocessElement = debugElement.query(platform_browser_1.By.css('#no-process-message'));
                expect(noprocessElement).not.toBeNull('Expected no available process message to be present');
                expect(noprocessElement.nativeElement.innerText.trim()).toBe('START_PROCESS.NO_PROCESS_DEFINITIONS');
            });
        }));
    });
    describe('input changes', function () {
        var change = new core_1.SimpleChange('123', '456');
        var nullChange = new core_1.SimpleChange('123', null);
        beforeEach(testing_1.async(function () {
            component.appId = '123';
            fixture.detectChanges();
            fixture.whenStable().then(function () {
                fixture.detectChanges();
                getDefinitionsSpy.calls.reset();
            });
        }));
        it('should reload processes when appId input changed', function () {
            component.ngOnChanges({ appId: change });
            expect(getDefinitionsSpy).toHaveBeenCalledWith('456');
        });
        it('should reload processes when appId input changed to null', function () {
            component.ngOnChanges({ appId: nullChange });
            expect(getDefinitionsSpy).toHaveBeenCalledWith(null);
        });
        it('should not reload processes when changes do not include appId input', function () {
            component.ngOnChanges({});
            expect(getDefinitionsSpy).not.toHaveBeenCalled();
        });
    });
    describe('start process', function () {
        beforeEach(function () {
            component.name = 'My new process';
            var change = new core_1.SimpleChange(null, '123');
            component.ngOnChanges({ 'appId': change });
        });
        it('should call service to start process if required fields provided', testing_1.async(function () {
            component.onProcessDefChange('my:process1');
            component.startProcess();
            fixture.whenStable().then(function () {
                expect(startProcessSpy).toHaveBeenCalled();
            });
        }));
        it('should avoid calling service to start process if required fields NOT provided', testing_1.async(function () {
            component.name = '';
            component.startProcess();
            fixture.whenStable().then(function () {
                expect(startProcessSpy).not.toHaveBeenCalled();
            });
        }));
        it('should call service to start process with the correct parameters', testing_1.async(function () {
            component.onProcessDefChange('my:process1');
            component.startProcess();
            fixture.whenStable().then(function () {
                expect(startProcessSpy).toHaveBeenCalledWith('my:process1', 'My new process', undefined, undefined);
            });
        }));
        it('should output start event when process started successfully', testing_1.async(function () {
            var emitSpy = spyOn(component.start, 'emit');
            component.onProcessDefChange('my:process1');
            component.startProcess();
            fixture.whenStable().then(function () {
                expect(emitSpy).toHaveBeenCalledWith(activiti_start_process_component_mock_1.newProcess);
            });
        }));
        it('should throw start event error when process cannot be started', testing_1.async(function () {
            var errorSpy = spyOn(component.start, 'error');
            var error = { message: 'My error' };
            startProcessSpy = startProcessSpy.and.returnValue(Rx_1.Observable.throw(error));
            component.onProcessDefChange('my:process1');
            component.startProcess();
            fixture.whenStable().then(function () {
                expect(errorSpy).toHaveBeenCalledWith(error);
            });
        }));
        it('should indicate an error to the user if process cannot be started', testing_1.async(function () {
            startProcessSpy = startProcessSpy.and.returnValue(Rx_1.Observable.throw({}));
            component.onProcessDefChange('my:process1');
            component.startProcess();
            fixture.whenStable().then(function () {
                fixture.detectChanges();
                var errorEl = debugElement.query(platform_browser_1.By.css('.error-message'));
                expect(errorEl).not.toBeNull();
                expect(errorEl.nativeElement.innerText.trim()).toBe('START_PROCESS.ERROR.START');
            });
        }));
    });
    describe('start forms', function () {
        var startBtn;
        describe('without start form', function () {
            beforeEach(testing_1.async(function () {
                component.name = 'My new process';
                var change = new core_1.SimpleChange(null, '123');
                component.ngOnChanges({ 'appId': change });
                fixture.detectChanges();
                component.onProcessDefChange('my:process1');
                fixture.whenStable();
                startBtn = debugElement.query(platform_browser_1.By.css('[data-automation-id="btn-start"]'));
            }));
            it('should have start button disabled when name not filled out', testing_1.async(function () {
                component.name = '';
                fixture.detectChanges();
                expect(startBtn.properties['disabled']).toBe(true);
            }));
            it('should have start button disabled when no process is selected', testing_1.async(function () {
                component.onProcessDefChange('');
                fixture.detectChanges();
                expect(startBtn.properties['disabled']).toBe(true);
            }));
            it('should enable start button when name and process filled out', testing_1.async(function () {
                fixture.detectChanges();
                startBtn = debugElement.query(platform_browser_1.By.css('[data-automation-id="btn-start"]'));
                expect(startBtn.properties['disabled']).toBe(false);
            }));
        });
        describe('with start form', function () {
            beforeEach(function () {
                getDefinitionsSpy.and.returnValue(Rx_1.Observable.of(activiti_start_process_component_mock_1.fakeProcessDefWithForm));
                var change = new core_1.SimpleChange(null, '123');
                component.ngOnChanges({ 'appId': change });
                component.onProcessDefChange('my:process1');
                fixture.detectChanges();
                fixture.whenStable();
                startBtn = debugElement.query(platform_browser_1.By.css('[data-automation-id="btn-start"]'));
            });
            it('should initialize start form', function () {
                expect(component.startForm).toBeDefined();
                expect(component.startForm).not.toBeNull();
            });
            it('should load start form from service', function () {
                expect(getStartFormDefinitionSpy).toHaveBeenCalled();
            });
            it('should not show the start process button', testing_1.async(function () {
                component.name = 'My new process';
                fixture.detectChanges();
                expect(startBtn).toBeNull();
            }));
        });
    });
});
//# sourceMappingURL=activiti-start-process.component.spec.js.map