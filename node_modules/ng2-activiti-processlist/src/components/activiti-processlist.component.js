/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var common_1 = require("@angular/common");
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_alfresco_datatable_1 = require("ng2-alfresco-datatable");
var process_instance_filter_model_1 = require("../models/process-instance-filter.model");
var activiti_process_service_1 = require("../services/activiti-process.service");
var ActivitiProcessInstanceListComponent = (function () {
    function ActivitiProcessInstanceListComponent(processService, translate) {
        this.processService = processService;
        this.translate = translate;
        this.rowClick = new core_1.EventEmitter();
        this.onSuccess = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.defaultSchemaColumn = [
            { type: 'text', key: 'id', title: 'Id' },
            { type: 'text', key: 'name', title: 'Name', cssClass: 'full-width name-column', sortable: true },
            { type: 'text', key: 'started', title: 'Started', sortable: true },
            { type: 'text', key: 'startedBy.email', title: 'Started By', sortable: true }
        ];
        if (translate !== null) {
            translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
        }
    }
    ActivitiProcessInstanceListComponent.prototype.ngOnInit = function () {
        if (!this.data) {
            this.data = this.initDefaultSchemaColumns();
        }
        if (this.appId) {
            this.reload();
        }
    };
    ActivitiProcessInstanceListComponent.prototype.ngOnChanges = function (changes) {
        if (this.isPropertyChanged(changes)) {
            this.reload();
        }
    };
    ActivitiProcessInstanceListComponent.prototype.isPropertyChanged = function (changes) {
        var changed = false;
        var appId = changes['appId'];
        var processDefinitionKey = changes['processDefinitionKey'];
        var state = changes['state'];
        var sort = changes['sort'];
        var name = changes['name'];
        if (appId && appId.currentValue) {
            changed = true;
        }
        else if (processDefinitionKey && processDefinitionKey.currentValue) {
            changed = true;
        }
        else if (state && state.currentValue) {
            changed = true;
        }
        else if (sort && sort.currentValue) {
            changed = true;
        }
        else if (name && name.currentValue) {
            changed = true;
        }
        return changed;
    };
    ActivitiProcessInstanceListComponent.prototype.reload = function () {
        this.requestNode = this.createRequestNode();
        this.load(this.requestNode);
    };
    ActivitiProcessInstanceListComponent.prototype.initDefaultSchemaColumns = function () {
        return new ng2_alfresco_datatable_1.ObjectDataTableAdapter([], this.defaultSchemaColumn);
    };
    ActivitiProcessInstanceListComponent.prototype.load = function (requestNode) {
        var _this = this;
        this.processService.getProcessInstances(requestNode)
            .subscribe(function (response) {
            var instancesRow = _this.createDataRow(response);
            _this.renderInstances(instancesRow);
            _this.selectFirst();
            _this.onSuccess.emit(response);
        }, function (error) {
            _this.onError.emit(error);
        });
    };
    ActivitiProcessInstanceListComponent.prototype.createDataRow = function (instances) {
        var instancesRows = [];
        instances.forEach(function (row) {
            instancesRows.push(new ng2_alfresco_datatable_1.ObjectDataRow({
                id: row.id,
                name: row.name,
                started: row.started,
                processDefinitionName: row.processDefinitionName
            }));
        });
        return instancesRows;
    };
    ActivitiProcessInstanceListComponent.prototype.renderInstances = function (instances) {
        instances = this.optimizeNames(instances);
        this.setDatatableSorting();
        this.data.setRows(instances);
    };
    ActivitiProcessInstanceListComponent.prototype.setDatatableSorting = function () {
        if (!this.sort) {
            return;
        }
        var sortingParams = this.sort.split('-');
        if (sortingParams.length === 2) {
            var sortColumn = sortingParams[0] === 'created' ? 'started' : sortingParams[0];
            var sortOrder = sortingParams[1];
            this.data.setSorting(new ng2_alfresco_datatable_1.DataSorting(sortColumn, sortOrder));
        }
    };
    ActivitiProcessInstanceListComponent.prototype.selectFirst = function () {
        if (!this.isListEmpty()) {
            var row = this.data.getRows()[0];
            this.data.selectedRow = row;
            this.currentInstanceId = row.getValue('id');
        }
        else {
            if (this.data) {
                this.data.selectedRow = null;
            }
            this.currentInstanceId = null;
        }
    };
    ActivitiProcessInstanceListComponent.prototype.getCurrentId = function () {
        return this.currentInstanceId;
    };
    ActivitiProcessInstanceListComponent.prototype.isListEmpty = function () {
        return this.data === undefined ||
            (this.data && this.data.getRows() && this.data.getRows().length === 0);
    };
    ActivitiProcessInstanceListComponent.prototype.onRowClick = function (event) {
        var item = event;
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    };
    ActivitiProcessInstanceListComponent.prototype.optimizeNames = function (instances) {
        var _this = this;
        instances = instances.map(function (t) {
            t.obj.name = _this.getProcessNameOrDescription(t.obj, 'medium');
            return t;
        });
        return instances;
    };
    ActivitiProcessInstanceListComponent.prototype.getProcessNameOrDescription = function (processInstance, dateFormat) {
        var name = '';
        if (processInstance) {
            name = processInstance.name ||
                processInstance.processDefinitionName + ' - ' + this.getFormatDate(processInstance.started, dateFormat);
        }
        return name;
    };
    ActivitiProcessInstanceListComponent.prototype.getFormatDate = function (value, format) {
        var datePipe = new common_1.DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            return '';
        }
    };
    ActivitiProcessInstanceListComponent.prototype.createRequestNode = function () {
        var requestNode = {
            appDefinitionId: this.appId,
            processDefinitionKey: this.processDefinitionKey,
            state: this.state,
            sort: this.sort
        };
        return new process_instance_filter_model_1.ProcessFilterRequestRepresentation(requestNode);
    };
    return ActivitiProcessInstanceListComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiProcessInstanceListComponent.prototype, "appId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiProcessInstanceListComponent.prototype, "processDefinitionKey", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiProcessInstanceListComponent.prototype, "state", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiProcessInstanceListComponent.prototype, "sort", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiProcessInstanceListComponent.prototype, "name", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ActivitiProcessInstanceListComponent.prototype, "data", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessInstanceListComponent.prototype, "rowClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessInstanceListComponent.prototype, "onSuccess", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessInstanceListComponent.prototype, "onError", void 0);
ActivitiProcessInstanceListComponent = __decorate([
    core_1.Component({
        selector: 'activiti-process-instance-list',
        moduleId: module.id,
        styles: ["alfresco-datatable >>> .column-header {     color: #232323;     font-size: 15px; }  alfresco-datatable >>> .data-cell {     cursor: pointer !important; }  alfresco-datatable >>> .cell-value{     width: 250px;     white-space: nowrap;     overflow: hidden;     text-overflow: ellipsis }"],
        template: "<div *ngIf=\"!requestNode\">{{ 'FILTERS.MESSAGES.NONE' | translate }}</div> <div *ngIf=\"requestNode\">     <div *ngIf=\"!isListEmpty()\">         <alfresco-datatable             [data]=\"data\"             (rowClick)=\"onRowClick($event)\">         </alfresco-datatable>     </div>     <div *ngIf=\"isListEmpty()\">         {{ 'PROCESSLIST.NONE' | translate }}     </div> </div>"
    }),
    __metadata("design:paramtypes", [activiti_process_service_1.ActivitiProcessService,
        ng2_alfresco_core_1.AlfrescoTranslationService])
], ActivitiProcessInstanceListComponent);
exports.ActivitiProcessInstanceListComponent = ActivitiProcessInstanceListComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
