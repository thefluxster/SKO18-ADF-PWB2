/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_process_service_1 = require("./../services/activiti-process.service");
var ActivitiProcessFilters = (function () {
    function ActivitiProcessFilters(translate, activiti, logService) {
        var _this = this;
        this.translate = translate;
        this.activiti = activiti;
        this.logService = logService;
        this.filterClick = new core_1.EventEmitter();
        this.onSuccess = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.filters = [];
        this.filter$ = new Rx_1.Observable(function (observer) { return _this.filterObserver = observer; }).share();
        if (translate) {
            translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
        }
    }
    ActivitiProcessFilters.prototype.ngOnInit = function () {
        var _this = this;
        this.filter$.subscribe(function (filter) {
            _this.filters.push(filter);
        });
        this.getFilters(this.appId, this.appName);
    };
    ActivitiProcessFilters.prototype.ngOnChanges = function (changes) {
        var appId = changes['appId'];
        if (appId && (appId.currentValue || appId.currentValue === null)) {
            this.getFiltersByAppId(appId.currentValue);
            return;
        }
        var appName = changes['appName'];
        if (appName && appName.currentValue) {
            this.getFiltersByAppName(appName.currentValue);
            return;
        }
    };
    ActivitiProcessFilters.prototype.getFilters = function (appId, appName) {
        if (appName) {
            this.getFiltersByAppName(appName);
        }
        else {
            this.getFiltersByAppId(appId);
        }
    };
    ActivitiProcessFilters.prototype.getFiltersByAppId = function (appId) {
        var _this = this;
        this.activiti.getProcessFilters(appId).subscribe(function (res) {
            _this.resetFilter();
            res.forEach(function (filter) {
                _this.filterObserver.next(filter);
            });
            _this.selectFirstFilter();
            _this.onSuccess.emit(res);
        }, function (err) {
            _this.logService.error(err);
            _this.onError.emit(err);
        });
    };
    ActivitiProcessFilters.prototype.getFiltersByAppName = function (appName) {
        var _this = this;
        this.activiti.getDeployedApplications(appName).subscribe(function (application) {
            _this.getFiltersByAppId(application.id);
            _this.selectFirstFilter();
        }, function (err) {
            _this.logService.error(err);
            _this.onError.emit(err);
        });
    };
    ActivitiProcessFilters.prototype.selectFilter = function (filter) {
        this.currentFilter = filter;
        this.filterClick.emit(filter);
    };
    ActivitiProcessFilters.prototype.selectFirstFilter = function () {
        if (!this.isFilterListEmpty()) {
            this.currentFilter = this.filters[0];
        }
        else {
            this.currentFilter = null;
        }
    };
    ActivitiProcessFilters.prototype.getCurrentFilter = function () {
        return this.currentFilter;
    };
    ActivitiProcessFilters.prototype.isFilterListEmpty = function () {
        return this.filters === undefined || (this.filters && this.filters.length === 0);
    };
    ActivitiProcessFilters.prototype.resetFilter = function () {
        this.filters = [];
        this.currentFilter = null;
    };
    return ActivitiProcessFilters;
}());
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessFilters.prototype, "filterClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessFilters.prototype, "onSuccess", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessFilters.prototype, "onError", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], ActivitiProcessFilters.prototype, "appId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiProcessFilters.prototype, "appName", void 0);
ActivitiProcessFilters = __decorate([
    core_1.Component({
        selector: 'activiti-process-instance-filters',
        moduleId: module.id,
        template: "<div class=\"menu-container\">     <ul class='mdl-list'>         <li class=\"mdl-list__item activiti-filters__entry\" (click)=\"selectFilter(filter)\" *ngFor=\"let filter of filters\"             [class.active]=\"currentFilter === filter\">             <span class=\"mdl-list__item-primary-content\">             <i class=\"material-icons mdl-list__item-icon activiti-filters__entry-icon\" [attr.data-automation-id]=\"filter.name + '_filter'\" >assignment</i>             {{filter.name}}             </span>         </li>     </ul> </div>",
        styles: [".mdl-list__item {     cursor: pointer; }  .activiti-filters__entry {     cursor: pointer; }  .activiti-filters__entry-icon {     margin-right: 12px !important; }  .activiti-filters__entry.active {     color: rgb(68,138,255); }  .activiti-filters__entry.active .activiti-filters__entry-icon {     color: rgb(68,138,255); }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        activiti_process_service_1.ActivitiProcessService,
        ng2_alfresco_core_1.LogService])
], ActivitiProcessFilters);
exports.ActivitiProcessFilters = ActivitiProcessFilters;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
