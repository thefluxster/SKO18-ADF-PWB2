/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_alfresco_datatable_1 = require("ng2-alfresco-datatable");
var process_instance_variable_model_1 = require("./../models/process-instance-variable.model");
var activiti_process_service_1 = require("./../services/activiti-process.service");
var ActivitiProcessInstanceVariables = (function () {
    function ActivitiProcessInstanceVariables(translate, activitiProcess) {
        this.translate = translate;
        this.activitiProcess = activitiProcess;
        this.error = new core_1.EventEmitter();
        this.defaultSchemaColumn = [
            { type: 'text', key: 'name', title: 'Name', cssClass: 'full-width name-column', sortable: true },
            { type: 'text', key: 'value', title: 'Value', sortable: true },
            { type: 'text', key: 'scope', title: 'Scope', sortable: true }
        ];
        if (translate) {
            translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
        }
    }
    ActivitiProcessInstanceVariables.prototype.ngOnInit = function () {
        if (!this.data) {
            this.data = this.initDefaultSchemaColumns();
        }
        if (this.processInstanceId) {
            this.getProcessInstanceVariables(this.processInstanceId);
            return;
        }
    };
    ActivitiProcessInstanceVariables.prototype.ngOnChanges = function (changes) {
        var processInstanceId = changes['processInstanceId'];
        if (processInstanceId) {
            if (processInstanceId.currentValue) {
                this.getProcessInstanceVariables(processInstanceId.currentValue);
            }
            else {
                this.resetVariables();
            }
        }
    };
    ActivitiProcessInstanceVariables.prototype.isListEmpty = function () {
        return this.data === undefined ||
            (this.data && this.data.getRows() && this.data.getRows().length === 0);
    };
    ActivitiProcessInstanceVariables.prototype.initDefaultSchemaColumns = function () {
        return new ng2_alfresco_datatable_1.ObjectDataTableAdapter([], this.defaultSchemaColumn);
    };
    ActivitiProcessInstanceVariables.prototype.createDataRow = function (instances) {
        var instancesRows = [];
        instances.forEach(function (row) {
            instancesRows.push(new ng2_alfresco_datatable_1.ObjectDataRow({
                name: row.name,
                value: row.value,
                scope: row.scope
            }));
        });
        return instancesRows;
    };
    ActivitiProcessInstanceVariables.prototype.renderInstances = function (instances) {
        this.data.setRows(instances);
    };
    ActivitiProcessInstanceVariables.prototype.getProcessInstanceVariables = function (processInstanceId) {
        var _this = this;
        if (processInstanceId) {
            this.activitiProcess.getProcessInstanceVariables(processInstanceId).subscribe(function (res) {
                var instancesRow = _this.createDataRow(res);
                _this.renderInstances(instancesRow);
            }, function (err) {
                _this.error.emit(err);
            });
        }
        else {
            this.resetVariables();
        }
    };
    ActivitiProcessInstanceVariables.prototype.resetVariables = function () {
        if (this.data) {
            this.data.setRows([]);
        }
    };
    ActivitiProcessInstanceVariables.prototype.polyfillDialog = function (dialog) {
        if (!dialog.nativeElement.showModal) {
            dialogPolyfill.registerDialog(dialog.nativeElement);
        }
    };
    ActivitiProcessInstanceVariables.prototype.showAddDialog = function () {
        this.resetForm();
        this.polyfillDialog(this.addDialog);
        this.addDialog.nativeElement.showModal();
    };
    ActivitiProcessInstanceVariables.prototype.showEditDialog = function (row) {
        this.variableName = row.getValue('name');
        this.variableValue = row.getValue('value');
        this.variableScope = row.getValue('scope');
        this.polyfillDialog(this.editDialog);
        this.editDialog.nativeElement.showModal();
    };
    ActivitiProcessInstanceVariables.prototype.showErrorDialog = function () {
        this.polyfillDialog(this.errorDialog);
        this.errorDialog.nativeElement.showModal();
    };
    ActivitiProcessInstanceVariables.prototype.add = function () {
        var _this = this;
        this.activitiProcess.createOrUpdateProcessInstanceVariables(this.processInstanceId, [new process_instance_variable_model_1.ProcessInstanceVariable({
                name: this.variableName,
                value: this.variableValue,
                scope: this.variableScope
            })]).subscribe(function (res) {
            _this.getProcessInstanceVariables(_this.processInstanceId);
            _this.resetForm();
        }, function (err) {
            _this.showErrorDialog();
            _this.error.emit(err);
        });
        this.closeAddDialog();
    };
    ActivitiProcessInstanceVariables.prototype.edit = function () {
        var _this = this;
        this.activitiProcess.createOrUpdateProcessInstanceVariables(this.processInstanceId, [new process_instance_variable_model_1.ProcessInstanceVariable({
                name: this.variableName,
                value: this.variableValue,
                scope: this.variableScope
            })]).subscribe(function (res) {
            _this.getProcessInstanceVariables(_this.processInstanceId);
            _this.resetForm();
        }, function (err) {
            _this.showErrorDialog();
            _this.error.emit(err);
        });
        this.closeEditDialog();
    };
    ActivitiProcessInstanceVariables.prototype.closeAddDialog = function () {
        this.addDialog.nativeElement.close();
    };
    ActivitiProcessInstanceVariables.prototype.closeEditDialog = function () {
        this.editDialog.nativeElement.close();
    };
    ActivitiProcessInstanceVariables.prototype.closeErrorDialog = function () {
        this.errorDialog.nativeElement.close();
    };
    ActivitiProcessInstanceVariables.prototype.resetForm = function () {
        this.variableName = '';
        this.variableValue = '';
        this.variableScope = 'global';
    };
    ActivitiProcessInstanceVariables.prototype.onDeleteVariable = function (row) {
        var _this = this;
        this.activitiProcess.deleteProcessInstanceVariable(this.processInstanceId, row.getValue('name')).subscribe(function () {
            _this.getProcessInstanceVariables(_this.processInstanceId);
        }, function (err) {
            _this.showErrorDialog();
            _this.error.emit(err);
        });
    };
    ActivitiProcessInstanceVariables.prototype.onExecuteRowAction = function (event) {
        var row = event.args.row;
        var action = event.args.action;
        if (action && action.id === 'delete') {
            this.onDeleteVariable(row);
        }
        if (action && action.id === 'edit') {
            this.showEditDialog(row);
        }
    };
    ActivitiProcessInstanceVariables.prototype.onShowRowActionsMenu = function (event) {
        event.args.actions = [{
                id: 'delete',
                title: 'Delete'
            }, {
                id: 'edit',
                title: 'Edit'
            }];
    };
    return ActivitiProcessInstanceVariables;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiProcessInstanceVariables.prototype, "processInstanceId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ActivitiProcessInstanceVariables.prototype, "data", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiProcessInstanceVariables.prototype, "error", void 0);
__decorate([
    core_1.ViewChild('addDialog'),
    __metadata("design:type", core_1.DebugElement)
], ActivitiProcessInstanceVariables.prototype, "addDialog", void 0);
__decorate([
    core_1.ViewChild('editDialog'),
    __metadata("design:type", core_1.DebugElement)
], ActivitiProcessInstanceVariables.prototype, "editDialog", void 0);
__decorate([
    core_1.ViewChild('errorDialog'),
    __metadata("design:type", core_1.DebugElement)
], ActivitiProcessInstanceVariables.prototype, "errorDialog", void 0);
ActivitiProcessInstanceVariables = __decorate([
    core_1.Component({
        selector: 'activiti-process-instance-variables',
        moduleId: module.id,
        template: "<div id=\"setVariableBtn\" (click)=\"showAddDialog()\" class=\"icon material-icons\">add</div> <div class=\"mdl-tooltip\" for=\"setVariableBtn\">     {{ 'DETAILS.VARIABLES.BUTTON.ADD' |translate }} </div>   <div *ngIf=\"!isListEmpty()\">     <alfresco-datatable [data]=\"data\" [actions]=\"true\" (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"                         (executeRowAction)=\"onExecuteRowAction($event)\"></alfresco-datatable> </div> <div *ngIf=\"isListEmpty()\" data-automation-id=\"variables-none\">     {{ 'DETAILS.VARIABLES.NONE' | translate }} </div>   <dialog class=\"mdl-dialog add-dialog\" #addDialog>     <h4 class=\"mdl-dialog__title\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.TITLE' |translate }}</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" for=\"addVariableName\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.NAME' |translate }}</label>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"variableName\" id=\"addVariableName\" [readonly]=\"editMode\" />         </div>         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" for=\"addVariableValue\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.VALUE' |translate }}</label>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"variableValue\" id=\"addVariableValue\" />         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"add()\" class=\"mdl-button\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.SET' |translate }}</button>         <button type=\"button\" (click)=\"closeAddDialog()\" class=\"mdl-button close\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.CANCEL' |translate }}</button>     </div> </dialog>   <dialog class=\"mdl-dialog edit-dialog\" #editDialog>     <h4 class=\"mdl-dialog__title\">{{ 'DETAILS.VARIABLES.EDIT_DIALOG.TITLE' |translate }}</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" for=\"editVariableName\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.NAME' |translate }}</label>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"variableName\" id=\"editVariableName\" [readonly]=\"true\" />         </div>         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" for=\"editVariableValue\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.VALUE' |translate }}</label>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"variableValue\" id=\"editVariableValue\" />         </div>         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" for=\"editVariableScope\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.SCOPE' |translate }}</label>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"variableName\" id=\"editVariableScope\" [readonly]=\"true\" />         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"edit()\" class=\"mdl-button\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.SET' |translate }}</button>         <button type=\"button\" (click)=\"closeEditDialog()\" class=\"mdl-button close\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.CANCEL' |translate }}</button>     </div> </dialog>   <dialog class=\"mdl-dialog error-dialog\" #errorDialog>     <h4 class=\"mdl-dialog__title\">{{ 'DETAILS.VARIABLES.ERROR_DIALOG.TITLE' |translate }}</h4>     <div class=\"mdl-dialog__content\">         <p>{{ 'DETAILS.VARIABLES.ERROR_DIALOG.DESCRIPTION' |translate }}</p>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"closeErrorDialog()\" class=\"mdl-button close\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.OK' |translate }}</button>     </div> </dialog>",
        styles: [""],
        providers: [activiti_process_service_1.ActivitiProcessService]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        activiti_process_service_1.ActivitiProcessService])
], ActivitiProcessInstanceVariables);
exports.ActivitiProcessInstanceVariables = ActivitiProcessInstanceVariables;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
