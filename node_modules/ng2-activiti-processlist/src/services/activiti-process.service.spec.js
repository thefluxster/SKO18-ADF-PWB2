/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var testing_2 = require("@angular/core/testing");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_process_service_mock_1 = require("../assets/activiti-process.service.mock");
var activiti_process_model_mock_1 = require("../assets/activiti-process.model.mock");
var process_instance_filter_model_1 = require("../models/process-instance-filter.model");
var process_instance_variable_model_1 = require("../models/process-instance-variable.model");
var activiti_process_service_1 = require("./activiti-process.service");
describe('ActivitiProcessService', function () {
    var service;
    var apiService;
    var alfrescoApi;
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            providers: [
                activiti_process_service_1.ActivitiProcessService
            ]
        });
        service = testing_1.TestBed.get(activiti_process_service_1.ActivitiProcessService);
        apiService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoApiService);
        alfrescoApi = apiService.getInstance();
    });
    describe('process instances', function () {
        var getProcessInstances;
        var filter = new process_instance_filter_model_1.ProcessFilterRequestRepresentation({
            processDefinitionId: '1',
            appDefinitionId: '1',
            page: 1,
            sort: 'created-asc',
            state: 'completed'
        });
        beforeEach(function () {
            getProcessInstances = spyOn(alfrescoApi.activiti.processApi, 'getProcessInstances')
                .and
                .returnValue(Promise.resolve({ data: [activiti_process_model_mock_1.exampleProcess] }));
        });
        it('should return the correct number of instances', testing_2.async(function () {
            service.getProcessInstances(filter).subscribe(function (instances) {
                expect(instances.length).toBe(1);
            });
        }));
        it('should return the correct instance data', testing_2.async(function () {
            service.getProcessInstances(filter).subscribe(function (instances) {
                var instance = instances[0];
                expect(instance.id).toBe(activiti_process_model_mock_1.exampleProcess.id);
                expect(instance.name).toBe(activiti_process_model_mock_1.exampleProcess.name);
                expect(instance.started).toBe(activiti_process_model_mock_1.exampleProcess.started);
            });
        }));
        it('should call service to fetch process instances', function () {
            service.getProcessInstances(filter);
            expect(getProcessInstances).toHaveBeenCalled();
        });
        it('should call service with supplied parameters', function () {
            service.getProcessInstances(filter);
            expect(getProcessInstances).toHaveBeenCalledWith(filter);
        });
        it('should pass on any error that is returned by the API', testing_2.async(function () {
            getProcessInstances = getProcessInstances.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
            service.getProcessInstances(null).subscribe(function () { }, function (res) {
                expect(res).toBe(activiti_process_service_mock_1.fakeError);
            });
        }));
        it('should return a default error if no data is returned by the API', testing_2.async(function () {
            getProcessInstances = getProcessInstances.and.returnValue(Promise.reject(null));
            service.getProcessInstances(null).subscribe(function () { }, function (res) {
                expect(res).toBe('Server error');
            });
        }));
    });
    describe('process instance', function () {
        var processId = 'test';
        var getProcessInstance;
        beforeEach(function () {
            getProcessInstance = spyOn(alfrescoApi.activiti.processApi, 'getProcessInstance')
                .and
                .returnValue(Promise.resolve(activiti_process_model_mock_1.exampleProcess));
        });
        it('should return the correct instance data', testing_2.async(function () {
            service.getProcess(processId).subscribe(function (instance) {
                expect(instance.id).toBe(activiti_process_model_mock_1.exampleProcess.id);
                expect(instance.name).toBe(activiti_process_model_mock_1.exampleProcess.name);
                expect(instance.started).toBe(activiti_process_model_mock_1.exampleProcess.started);
            });
        }));
        it('should call service to fetch process instances', function () {
            service.getProcess(processId);
            expect(getProcessInstance).toHaveBeenCalled();
        });
        it('should call service with supplied process ID', function () {
            service.getProcess(processId);
            expect(getProcessInstance).toHaveBeenCalledWith(processId);
        });
        it('should pass on any error that is returned by the API', testing_2.async(function () {
            getProcessInstance = getProcessInstance.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
            service.getProcess(null).subscribe(function () { }, function (res) {
                expect(res).toBe(activiti_process_service_mock_1.fakeError);
            });
        }));
        it('should return a default error if no data is returned by the API', testing_2.async(function () {
            getProcessInstance = getProcessInstance.and.returnValue(Promise.reject(null));
            service.getProcess(null).subscribe(function () { }, function (res) {
                expect(res).toBe('Server error');
            });
        }));
    });
    describe('start process instance', function () {
        var processDefId = '1234', processName = 'My process instance';
        var startNewProcessInstance;
        beforeEach(function () {
            startNewProcessInstance = spyOn(alfrescoApi.activiti.processApi, 'startNewProcessInstance')
                .and
                .returnValue(Promise.resolve(activiti_process_model_mock_1.exampleProcess));
        });
        it('should call the API to create the process instance', function () {
            service.startProcess(processDefId, processName);
            expect(startNewProcessInstance).toHaveBeenCalledWith({
                name: processName,
                processDefinitionId: processDefId
            });
        });
        it('should call the API to create the process instance with form parameters', function () {
            var formParams = {
                type: 'ford',
                color: 'red'
            };
            service.startProcess(processDefId, processName, null, formParams);
            expect(startNewProcessInstance).toHaveBeenCalledWith({
                name: processName,
                processDefinitionId: processDefId,
                values: formParams
            });
        });
        it('should return the created process instance', testing_2.async(function () {
            service.startProcess(processDefId, processName).subscribe(function (createdProcess) {
                expect(createdProcess.id).toBe(activiti_process_model_mock_1.exampleProcess.id);
                expect(createdProcess.name).toBe(activiti_process_model_mock_1.exampleProcess.name);
                expect(createdProcess.started).toBe(activiti_process_model_mock_1.exampleProcess.started);
                expect(createdProcess.startedBy.id).toBe(activiti_process_model_mock_1.exampleProcess.startedBy.id);
            });
        }));
        it('should pass on any error that is returned by the API', testing_2.async(function () {
            startNewProcessInstance = startNewProcessInstance.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
            service.startProcess(processDefId, processName).subscribe(function () { }, function (res) {
                expect(res).toBe(activiti_process_service_mock_1.fakeError);
            });
        }));
        it('should return a default error if no data is returned by the API', testing_2.async(function () {
            startNewProcessInstance = startNewProcessInstance.and.returnValue(Promise.reject(null));
            service.startProcess(processDefId, processName).subscribe(function () { }, function (res) {
                expect(res).toBe('Server error');
            });
        }));
    });
    describe('cancel process instance', function () {
        var processInstanceId = '1234';
        var deleteProcessInstance;
        beforeEach(function () {
            deleteProcessInstance = spyOn(alfrescoApi.activiti.processApi, 'deleteProcessInstance')
                .and
                .returnValue(Promise.resolve());
        });
        it('should call service to delete process instances', function () {
            service.cancelProcess(processInstanceId);
            expect(deleteProcessInstance).toHaveBeenCalled();
        });
        it('should call service with supplied process ID', function () {
            service.cancelProcess(processInstanceId);
            expect(deleteProcessInstance).toHaveBeenCalledWith(processInstanceId);
        });
        it('should run the success callback', function (done) {
            service.cancelProcess(processInstanceId).subscribe(function () {
                done();
            });
        });
        it('should pass on any error that is returned by the API', testing_2.async(function () {
            deleteProcessInstance = deleteProcessInstance.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
            service.cancelProcess(null).subscribe(function () { }, function (res) {
                expect(res).toBe(activiti_process_service_mock_1.fakeError);
            });
        }));
        it('should return a default error if no data is returned by the API', testing_2.async(function () {
            deleteProcessInstance = deleteProcessInstance.and.returnValue(Promise.reject(null));
            service.cancelProcess(null).subscribe(function () { }, function (res) {
                expect(res).toBe('Server error');
            });
        }));
    });
    describe('process definitions', function () {
        var getProcessDefinitions;
        beforeEach(function () {
            getProcessDefinitions = spyOn(alfrescoApi.activiti.processApi, 'getProcessDefinitions')
                .and
                .returnValue(Promise.resolve({ data: [activiti_process_service_mock_1.fakeProcessDef, activiti_process_service_mock_1.fakeProcessDef] }));
        });
        it('should return the correct number of process defs', testing_2.async(function () {
            service.getProcessDefinitions().subscribe(function (defs) {
                expect(defs.length).toBe(2);
            });
        }));
        it('should return the correct process def data', testing_2.async(function () {
            service.getProcessDefinitions().subscribe(function (defs) {
                expect(defs[0].id).toBe(activiti_process_service_mock_1.fakeProcessDef.id);
                expect(defs[0].key).toBe(activiti_process_service_mock_1.fakeProcessDef.key);
                expect(defs[0].name).toBe(activiti_process_service_mock_1.fakeProcessDef.name);
            });
        }));
        it('should call API with correct parameters when no appId provided', function () {
            service.getProcessDefinitions();
            expect(getProcessDefinitions).toHaveBeenCalledWith({
                latest: true
            });
        });
        it('should call API with correct parameters when appId provided', function () {
            var appId = '1';
            service.getProcessDefinitions(appId);
            expect(getProcessDefinitions).toHaveBeenCalledWith({
                latest: true,
                appDefinitionId: appId
            });
        });
        it('should pass on any error that is returned by the API', testing_2.async(function () {
            getProcessDefinitions = getProcessDefinitions.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
            service.getProcessDefinitions().subscribe(function () { }, function (res) {
                expect(res).toBe(activiti_process_service_mock_1.fakeError);
            });
        }));
        it('should return a default error if no data is returned by the API', testing_2.async(function () {
            getProcessDefinitions = getProcessDefinitions.and.returnValue(Promise.reject(null));
            service.getProcessDefinitions().subscribe(function () { }, function (res) {
                expect(res).toBe('Server error');
            });
        }));
    });
    describe('process instance tasks', function () {
        var processId = '1001';
        var listTasks;
        beforeEach(function () {
            listTasks = spyOn(alfrescoApi.activiti.taskApi, 'listTasks')
                .and
                .returnValue(Promise.resolve(activiti_process_service_mock_1.fakeTaskList));
        });
        it('should return the correct number of tasks', testing_2.async(function () {
            service.getProcessTasks(processId).subscribe(function (tasks) {
                expect(tasks.length).toBe(2);
            });
        }));
        it('should return the correct task data', testing_2.async(function () {
            var fakeTasks = activiti_process_service_mock_1.fakeTaskList.data;
            service.getProcessTasks(processId).subscribe(function (tasks) {
                var task = tasks[0];
                expect(task.id).toBe(fakeTasks[0].id);
                expect(task.name).toBe(fakeTasks[0].name);
                expect(task.created).toBe('2016-11-10T00:00:00+00:00');
            });
        }));
        it('should call service to fetch process instance tasks', function () {
            service.getProcessTasks(processId);
            expect(listTasks).toHaveBeenCalled();
        });
        it('should call service with processInstanceId parameter', function () {
            service.getProcessTasks(processId);
            expect(listTasks).toHaveBeenCalledWith({
                processInstanceId: processId
            });
        });
        it('should call service with processInstanceId and state parameters', function () {
            service.getProcessTasks(processId, 'completed');
            expect(listTasks).toHaveBeenCalledWith({
                processInstanceId: processId,
                state: 'completed'
            });
        });
        it('should pass on any error that is returned by the API', testing_2.async(function () {
            listTasks = listTasks.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
            service.getProcessTasks(processId).subscribe(function () { }, function (res) {
                expect(res).toBe(activiti_process_service_mock_1.fakeError);
            });
        }));
        it('should return a default error if no data is returned by the API', testing_2.async(function () {
            listTasks = listTasks.and.returnValue(Promise.reject(null));
            service.getProcessTasks(processId).subscribe(function () { }, function (res) {
                expect(res).toBe('Server error');
            });
        }));
    });
    describe('comments', function () {
        var processId = '1001';
        describe('get comments', function () {
            var getProcessInstanceComments;
            beforeEach(function () {
                getProcessInstanceComments = spyOn(alfrescoApi.activiti.commentsApi, 'getProcessInstanceComments')
                    .and
                    .returnValue(Promise.resolve({ data: [activiti_process_service_mock_1.fakeComment, activiti_process_service_mock_1.fakeComment] }));
            });
            it('should return the correct number of comments', testing_2.async(function () {
                service.getProcessInstanceComments(processId).subscribe(function (tasks) {
                    expect(tasks.length).toBe(2);
                });
            }));
            it('should return the correct comment data', testing_2.async(function () {
                service.getProcessInstanceComments(processId).subscribe(function (comments) {
                    var comment = comments[0];
                    expect(comment.id).toBe(activiti_process_service_mock_1.fakeComment.id);
                    expect(comment.created).toBe(activiti_process_service_mock_1.fakeComment.created);
                    expect(comment.message).toBe(activiti_process_service_mock_1.fakeComment.message);
                    expect(comment.createdBy.id).toBe(activiti_process_service_mock_1.fakeComment.createdBy.id);
                });
            }));
            it('should call service to fetch process instance comments', function () {
                service.getProcessInstanceComments(processId);
                expect(getProcessInstanceComments).toHaveBeenCalledWith(processId);
            });
            it('should pass on any error that is returned by the API', testing_2.async(function () {
                getProcessInstanceComments = getProcessInstanceComments.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
                service.getProcessInstanceComments(processId).subscribe(function () { }, function (res) {
                    expect(res).toBe(activiti_process_service_mock_1.fakeError);
                });
            }));
            it('should return a default error if no data is returned by the API', testing_2.async(function () {
                getProcessInstanceComments = getProcessInstanceComments.and.returnValue(Promise.reject(null));
                service.getProcessInstanceComments(processId).subscribe(function () { }, function (res) {
                    expect(res).toBe('Server error');
                });
            }));
        });
        describe('add comment', function () {
            var message = 'Test message';
            var addProcessInstanceComment;
            beforeEach(function () {
                addProcessInstanceComment = spyOn(alfrescoApi.activiti.commentsApi, 'addProcessInstanceComment')
                    .and
                    .returnValue(Promise.resolve(activiti_process_service_mock_1.fakeComment));
            });
            it('should call service to add comment', function () {
                service.addProcessInstanceComment(processId, message);
                expect(addProcessInstanceComment).toHaveBeenCalledWith({
                    message: message
                }, processId);
            });
            it('should return the created comment', testing_2.async(function () {
                service.addProcessInstanceComment(processId, message).subscribe(function (comment) {
                    expect(comment.id).toBe(activiti_process_service_mock_1.fakeComment.id);
                    expect(comment.created).toBe(activiti_process_service_mock_1.fakeComment.created);
                    expect(comment.message).toBe(activiti_process_service_mock_1.fakeComment.message);
                    expect(comment.createdBy).toBe(activiti_process_service_mock_1.fakeComment.createdBy);
                });
            }));
            it('should pass on any error that is returned by the API', testing_2.async(function () {
                addProcessInstanceComment = addProcessInstanceComment.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
                service.addProcessInstanceComment(processId, message).subscribe(function () { }, function (res) {
                    expect(res).toBe(activiti_process_service_mock_1.fakeError);
                });
            }));
            it('should return a default error if no data is returned by the API', testing_2.async(function () {
                addProcessInstanceComment = addProcessInstanceComment.and.returnValue(Promise.reject(null));
                service.addProcessInstanceComment(processId, message).subscribe(function () { }, function (res) {
                    expect(res).toBe('Server error');
                });
            }));
        });
    });
    describe('deployed apps', function () {
        var getAppDefinitions;
        beforeEach(function () {
            getAppDefinitions = spyOn(alfrescoApi.activiti.appsApi, 'getAppDefinitions')
                .and
                .returnValue(Promise.resolve({ data: [activiti_process_service_mock_1.fakeApp1, activiti_process_service_mock_1.fakeApp2] }));
        });
        it('should return the correct app', testing_2.async(function () {
            service.getDeployedApplications(activiti_process_service_mock_1.fakeApp1.name).subscribe(function (app) {
                expect(app.id).toBe(activiti_process_service_mock_1.fakeApp1.id);
                expect(app.name).toBe(activiti_process_service_mock_1.fakeApp1.name);
                expect(app.deploymentId).toBe(activiti_process_service_mock_1.fakeApp1.deploymentId);
            });
        }));
        it('should call service to fetch apps', function () {
            service.getDeployedApplications(null);
            expect(getAppDefinitions).toHaveBeenCalled();
        });
        it('should pass on any error that is returned by the API', testing_2.async(function () {
            getAppDefinitions = getAppDefinitions.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
            service.getDeployedApplications(null).subscribe(function () { }, function (res) {
                expect(res).toBe(activiti_process_service_mock_1.fakeError);
            });
        }));
        it('should return a default error if no data is returned by the API', testing_2.async(function () {
            getAppDefinitions = getAppDefinitions.and.returnValue(Promise.reject(null));
            service.getDeployedApplications(null).subscribe(function () { }, function (res) {
                expect(res).toBe('Server error');
            });
        }));
    });
    describe('filters', function () {
        var getFilters;
        var createFilter;
        beforeEach(function () {
            getFilters = spyOn(alfrescoApi.activiti.userFiltersApi, 'getUserProcessInstanceFilters')
                .and
                .returnValue(Promise.resolve(activiti_process_service_mock_1.fakeFilters));
            createFilter = spyOn(alfrescoApi.activiti.userFiltersApi, 'createUserProcessInstanceFilter')
                .and
                .callFake(function (filter) { return Promise.resolve(filter); });
        });
        describe('get filters', function () {
            it('should call the API without an appId defined by default', function () {
                service.getProcessFilters(null);
                expect(getFilters).toHaveBeenCalledWith({});
            });
            it('should call the API with the correct appId when specified', function () {
                service.getProcessFilters(226);
                expect(getFilters).toHaveBeenCalledWith({ appId: 226 });
            });
            it('should return the non-empty filter list that is returned by the API', testing_2.async(function () {
                service.getProcessFilters(null).subscribe(function (res) {
                    expect(res.length).toBe(1);
                });
            }));
            it('should return the default filters when none are returned by the API', testing_2.async(function () {
                getFilters = getFilters.and.returnValue(Promise.resolve(activiti_process_service_mock_1.fakeEmptyFilters));
                service.getProcessFilters(null).subscribe(function (res) {
                    expect(res.length).toBe(3);
                });
            }));
            it('should create the default filters when none are returned by the API', testing_2.async(function () {
                getFilters = getFilters.and.returnValue(Promise.resolve(activiti_process_service_mock_1.fakeEmptyFilters));
                createFilter = createFilter.and.returnValue(Promise.resolve({}));
                service.getProcessFilters(null).subscribe(function () {
                    expect(createFilter).toHaveBeenCalledTimes(3);
                });
            }));
            it('should pass on any error that is returned by the API', testing_2.async(function () {
                getFilters = getFilters.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
                service.getProcessFilters(null).subscribe(function () { }, function (res) {
                    expect(res).toBe(activiti_process_service_mock_1.fakeError);
                });
            }));
        });
        describe('add filter', function () {
            var filter = activiti_process_service_mock_1.fakeFilters.data[0];
            it('should call the API to create the filter', function () {
                service.addFilter(filter);
                expect(createFilter).toHaveBeenCalledWith(filter);
            });
            it('should return the created filter', testing_2.async(function () {
                service.addFilter(filter).subscribe(function (createdFilter) {
                    expect(createdFilter).toBe(filter);
                });
            }));
            it('should pass on any error that is returned by the API', testing_2.async(function () {
                createFilter = createFilter.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
                service.addFilter(filter).subscribe(function () { }, function (res) {
                    expect(res).toBe(activiti_process_service_mock_1.fakeError);
                });
            }));
            it('should return a default error if no data is returned by the API', testing_2.async(function () {
                createFilter = createFilter.and.returnValue(Promise.reject(null));
                service.addFilter(filter).subscribe(function () { }, function (res) {
                    expect(res).toBe('Server error');
                });
            }));
        });
    });
    describe('process variables', function () {
        var getVariablesSpy;
        var createOrUpdateProcessInstanceVariablesSpy;
        var deleteProcessInstanceVariableSpy;
        beforeEach(function () {
            getVariablesSpy = spyOn(alfrescoApi.activiti.processInstanceVariablesApi, 'getProcessInstanceVariables').and.returnValue(Promise.resolve([{
                    name: 'var1',
                    value: 'Test1'
                }, {
                    name: 'var3',
                    value: 'Test3'
                }]));
            createOrUpdateProcessInstanceVariablesSpy = spyOn(alfrescoApi.activiti.processInstanceVariablesApi, 'createOrUpdateProcessInstanceVariables').and.returnValue(Promise.resolve({}));
            deleteProcessInstanceVariableSpy = spyOn(alfrescoApi.activiti.processInstanceVariablesApi, 'deleteProcessInstanceVariable').and.returnValue(Promise.resolve());
        });
        describe('get variables', function () {
            it('should call service to fetch variables', function () {
                service.getProcessInstanceVariables(null);
                expect(getVariablesSpy).toHaveBeenCalled();
            });
            it('should pass on any error that is returned by the API', testing_2.async(function () {
                getVariablesSpy = getVariablesSpy.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
                service.getProcessInstanceVariables(null).subscribe(function () { }, function (res) {
                    expect(res).toBe(activiti_process_service_mock_1.fakeError);
                });
            }));
            it('should return a default error if no data is returned by the API', testing_2.async(function () {
                getVariablesSpy = getVariablesSpy.and.returnValue(Promise.reject(null));
                service.getProcessInstanceVariables(null).subscribe(function () { }, function (res) {
                    expect(res).toBe('Server error');
                });
            }));
        });
        describe('create or update variables', function () {
            var updatedVariables = [new process_instance_variable_model_1.ProcessInstanceVariable({
                    name: 'var1',
                    value: 'Test1'
                }), new process_instance_variable_model_1.ProcessInstanceVariable({
                    name: 'var3',
                    value: 'Test3'
                })];
            it('should call service to create or update variables', function () {
                service.createOrUpdateProcessInstanceVariables('123', updatedVariables);
                expect(createOrUpdateProcessInstanceVariablesSpy).toHaveBeenCalled();
            });
            it('should pass on any error that is returned by the API', testing_2.async(function () {
                createOrUpdateProcessInstanceVariablesSpy = createOrUpdateProcessInstanceVariablesSpy.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
                service.createOrUpdateProcessInstanceVariables('123', updatedVariables).subscribe(function () { }, function (res) {
                    expect(res).toBe(activiti_process_service_mock_1.fakeError);
                });
            }));
            it('should return a default error if no data is returned by the API', testing_2.async(function () {
                createOrUpdateProcessInstanceVariablesSpy = createOrUpdateProcessInstanceVariablesSpy.and.returnValue(Promise.reject(null));
                service.createOrUpdateProcessInstanceVariables('123', updatedVariables).subscribe(function () { }, function (res) {
                    expect(res).toBe('Server error');
                });
            }));
        });
        describe('delete variables', function () {
            it('should call service to delete variables', function () {
                service.deleteProcessInstanceVariable('123', 'myVar');
                expect(deleteProcessInstanceVariableSpy).toHaveBeenCalled();
            });
            it('should pass on any error that is returned by the API', testing_2.async(function () {
                deleteProcessInstanceVariableSpy = deleteProcessInstanceVariableSpy.and.returnValue(Promise.reject(activiti_process_service_mock_1.fakeError));
                service.deleteProcessInstanceVariable('123', 'myVar').subscribe(function () { }, function (res) {
                    expect(res).toBe(activiti_process_service_mock_1.fakeError);
                });
            }));
            it('should return a default error if no data is returned by the API', testing_2.async(function () {
                deleteProcessInstanceVariableSpy = deleteProcessInstanceVariableSpy.and.returnValue(Promise.reject(null));
                service.deleteProcessInstanceVariable('123', 'myVar').subscribe(function () { }, function (res) {
                    expect(res).toBe('Server error');
                });
            }));
        });
    });
});
//# sourceMappingURL=activiti-process.service.spec.js.map