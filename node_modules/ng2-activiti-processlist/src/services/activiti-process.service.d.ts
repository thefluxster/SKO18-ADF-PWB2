/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Observable } from 'rxjs/Observable';
import { AlfrescoApiService } from 'ng2-alfresco-core';
import { ProcessInstance, ProcessDefinitionRepresentation } from '../models/index';
import { ProcessFilterRequestRepresentation } from '../models/process-instance-filter.model';
import { ProcessInstanceVariable } from './../models/process-instance-variable.model';
import { AppDefinitionRepresentationModel, Comment, TaskDetailsModel } from 'ng2-activiti-tasklist';
import { FilterProcessRepresentationModel } from '../models/filter-process.model';
export declare class ActivitiProcessService {
    private apiService;
    constructor(apiService: AlfrescoApiService);
    getDeployedApplications(name: string): Observable<AppDefinitionRepresentationModel>;
    getProcessInstances(requestNode: ProcessFilterRequestRepresentation): Observable<ProcessInstance[]>;
    getProcessFilters(appId: number): Observable<FilterProcessRepresentationModel[]>;
    private createDefaultFilters(appId);
    private getRunningFilterInstance(appId);
    private getCompletedFilterInstance(appId);
    private getAllFilterInstance(appId);
    addFilter(filter: FilterProcessRepresentationModel): Observable<FilterProcessRepresentationModel>;
    getProcess(id: string): Observable<ProcessInstance>;
    getProcessTasks(id: string, state?: string): Observable<TaskDetailsModel[]>;
    getProcessInstanceComments(id: string): Observable<Comment[]>;
    addProcessInstanceComment(id: string, message: string): Observable<Comment>;
    getProcessDefinitions(appId?: string): Observable<ProcessDefinitionRepresentation[]>;
    startProcess(processDefinitionId: string, name: string, outcome?: string, startFormValues?: any): Observable<ProcessInstance>;
    cancelProcess(processInstanceId: string): Observable<void>;
    getProcessInstanceVariables(processDefinitionId: string): Observable<ProcessInstanceVariable[]>;
    createOrUpdateProcessInstanceVariables(processDefinitionId: string, variables: ProcessInstanceVariable[]): Observable<ProcessInstanceVariable[]>;
    deleteProcessInstanceVariable(processDefinitionId: string, variableName: string): Observable<void>;
    private callApiGetUserProcessInstanceFilters(filterOpts);
    private callApiAddFilter(filter);
    private extractData(res);
    private handleError(error);
}
