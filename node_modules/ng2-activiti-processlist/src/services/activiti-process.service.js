/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var index_1 = require("../models/index");
var process_instance_variable_model_1 = require("./../models/process-instance-variable.model");
var ng2_activiti_tasklist_1 = require("ng2-activiti-tasklist");
var filter_process_model_1 = require("../models/filter-process.model");
var ActivitiProcessService = (function () {
    function ActivitiProcessService(apiService) {
        this.apiService = apiService;
    }
    ActivitiProcessService.prototype.getDeployedApplications = function (name) {
        var _this = this;
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.appsApi.getAppDefinitions())
            .map(function (response) { return response.data.find(function (p) { return p.name === name; }); })
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.getProcessInstances = function (requestNode) {
        var _this = this;
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.getProcessInstances(requestNode))
            .map(function (res) {
            if (requestNode.processDefinitionKey) {
                return res.data.filter(function (p) { return p.processDefinitionKey === requestNode.processDefinitionKey; });
            }
            else {
                return res.data;
            }
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.getProcessFilters = function (appId) {
        var _this = this;
        var filterOpts = appId ? {
            appId: appId
        } : {};
        return Observable_1.Observable.fromPromise(this.callApiGetUserProcessInstanceFilters(filterOpts))
            .map(function (response) {
            var filters = [];
            response.data.forEach(function (filter) {
                var filterModel = new filter_process_model_1.FilterProcessRepresentationModel(filter);
                filters.push(filterModel);
            });
            if (response && response.data && response.data.length === 0) {
                return _this.createDefaultFilters(appId);
            }
            return filters;
        })
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.createDefaultFilters = function (appId) {
        var filters = [];
        var involvedTasksFilter = this.getRunningFilterInstance(appId);
        this.addFilter(involvedTasksFilter);
        filters.push(involvedTasksFilter);
        var myTasksFilter = this.getCompletedFilterInstance(appId);
        this.addFilter(myTasksFilter);
        filters.push(myTasksFilter);
        var queuedTasksFilter = this.getAllFilterInstance(appId);
        this.addFilter(queuedTasksFilter);
        filters.push(queuedTasksFilter);
        return filters;
    };
    ActivitiProcessService.prototype.getRunningFilterInstance = function (appId) {
        return new filter_process_model_1.FilterProcessRepresentationModel({
            'name': 'Running',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-random',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' }
        });
    };
    ActivitiProcessService.prototype.getCompletedFilterInstance = function (appId) {
        return new filter_process_model_1.FilterProcessRepresentationModel({
            'name': 'Completed',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-ok-sign',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' }
        });
    };
    ActivitiProcessService.prototype.getAllFilterInstance = function (appId) {
        return new filter_process_model_1.FilterProcessRepresentationModel({
            'name': 'All',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-th',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' }
        });
    };
    ActivitiProcessService.prototype.addFilter = function (filter) {
        var _this = this;
        return Observable_1.Observable.fromPromise(this.callApiAddFilter(filter))
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.getProcess = function (id) {
        var _this = this;
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.getProcessInstance(id))
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.getProcessTasks = function (id, state) {
        var _this = this;
        var taskOpts = state ? {
            processInstanceId: id,
            state: state
        } : {
            processInstanceId: id
        };
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.listTasks(taskOpts))
            .map(this.extractData)
            .map(function (tasks) { return tasks.map(function (task) {
            task.created = moment(task.created, 'YYYY-MM-DD').format();
            return task;
        }); })
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.getProcessInstanceComments = function (id) {
        var _this = this;
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.commentsApi.getProcessInstanceComments(id))
            .map(function (res) { return res; })
            .map(function (response) {
            var comments = [];
            response.data.forEach(function (comment) {
                var user = new ng2_activiti_tasklist_1.User({
                    id: comment.createdBy.id,
                    email: comment.createdBy.email,
                    firstName: comment.createdBy.firstName,
                    lastName: comment.createdBy.lastName
                });
                comments.push(new ng2_activiti_tasklist_1.Comment(comment.id, comment.message, comment.created, user));
            });
            return comments;
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.addProcessInstanceComment = function (id, message) {
        var _this = this;
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.commentsApi.addProcessInstanceComment({ message: message }, id))
            .map(function (response) {
            return new ng2_activiti_tasklist_1.Comment(response.id, response.message, response.created, response.createdBy);
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.getProcessDefinitions = function (appId) {
        var _this = this;
        var opts = appId ? {
            latest: true,
            appDefinitionId: appId
        } : {
            latest: true
        };
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.getProcessDefinitions(opts))
            .map(this.extractData)
            .map(function (processDefs) { return processDefs.map(function (pd) { return new index_1.ProcessDefinitionRepresentation(pd); }); })
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.startProcess = function (processDefinitionId, name, outcome, startFormValues) {
        var _this = this;
        var startRequest = {
            name: name,
            processDefinitionId: processDefinitionId
        };
        if (outcome) {
            startRequest.outcome = outcome;
        }
        if (startFormValues) {
            startRequest.values = startFormValues;
        }
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.startNewProcessInstance(startRequest))
            .map(function (pd) { return new index_1.ProcessInstance(pd); })
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.cancelProcess = function (processInstanceId) {
        var _this = this;
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.deleteProcessInstance(processInstanceId))
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.getProcessInstanceVariables = function (processDefinitionId) {
        var _this = this;
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processInstanceVariablesApi.getProcessInstanceVariables(processDefinitionId))
            .map(function (processVars) { return processVars.map(function (pd) { return new process_instance_variable_model_1.ProcessInstanceVariable(pd); }); })
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.createOrUpdateProcessInstanceVariables = function (processDefinitionId, variables) {
        var _this = this;
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processDefinitionId, variables))
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.deleteProcessInstanceVariable = function (processDefinitionId, variableName) {
        var _this = this;
        return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processInstanceVariablesApi.deleteProcessInstanceVariable(processDefinitionId, variableName))
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiProcessService.prototype.callApiGetUserProcessInstanceFilters = function (filterOpts) {
        return this.apiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters(filterOpts);
    };
    ActivitiProcessService.prototype.callApiAddFilter = function (filter) {
        return this.apiService.getInstance().activiti.userFiltersApi.createUserProcessInstanceFilter(filter);
    };
    ActivitiProcessService.prototype.extractData = function (res) {
        return res.data || {};
    };
    ActivitiProcessService.prototype.handleError = function (error) {
        return Observable_1.Observable.throw(error || 'Server error');
    };
    return ActivitiProcessService;
}());
ActivitiProcessService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService])
], ActivitiProcessService);
exports.ActivitiProcessService = ActivitiProcessService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
