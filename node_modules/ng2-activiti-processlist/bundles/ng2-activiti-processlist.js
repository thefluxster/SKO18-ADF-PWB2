!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in v||(v[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==g.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=v[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(g.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=v[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return y[e]||(y[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},{id:r.name});t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=v[s],f=y[s];f?l=f.exports:c&&!c.declarative?l=c.esModule:c?(d(c),f=c.module,l=f.exports):l=p(s),f&&f.importers?(f.importers.push(t),t.dependencies.push(f)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=v[e];if(t)t.declarative?f(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=p(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=v[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);void 0!==c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(m)for(var n in r)"default"!==n&&c(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,x(t,"__useDefault",{value:!0}),t}function c(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&x(e,t,n)}catch(o){return e[t]=r[t],!1}}function f(r,t){var n=v[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==g.call(t,u)&&(v[u]?f(u,t):p(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function p(e){if(I[e])return I[e];if("@node/"==e.substr(0,6))return I[e]=s(D(e.substr(6)));var r=v[e];if(!r)throw"Module "+e+" not present.";return a(e),f(e,[]),v[e]=void 0,r.declarative&&x(r.module.exports,"__esModule",{value:!0}),I[e]=r.declarative?r.module.exports:r.esModule}var v={},g=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},m=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(h){m=!1}var x;!function(){try{Object.defineProperty({},"a",{})&&(x=Object.defineProperty)}catch(e){x=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var y={},D="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&"undefined"!=typeof require.resolve&&"undefined"!=typeof process&&process.platform&&require,I={"@empty":{}};return function(e,n,o,a){return function(u){u(function(u){for(var d={_nodeRequire:D,register:r,registerDynamic:t,get:p,set:function(e,r){I[e]=r},newModule:function(e){return e}},i=0;i<n.length;i++)(function(e,r){r&&r.__esModule?I[e]=r:I[e]=s(r)})(n[i],arguments[i]);a(d);var l=p(e[0]);if(e.length>1)for(var i=1;i<e.length;i++)p(e[i]);return o?l["default"]:l})}}}("undefined"!=typeof self?self:global)

(["1"], ["11","3","18","15","4","5","9","13"], true, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
$__System.registerDynamic("2", ["3", "4", "5", "6", "7"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var ng2_alfresco_datatable_1 = $__require("5");
    var process_instance_variable_model_1 = $__require("6");
    var activiti_process_service_1 = $__require("7");
    var ActivitiProcessInstanceVariables = function () {
        function ActivitiProcessInstanceVariables(translate, activitiProcess) {
            this.translate = translate;
            this.activitiProcess = activitiProcess;
            this.error = new core_1.EventEmitter();
            this.defaultSchemaColumn = [{ type: 'text', key: 'name', title: 'Name', cssClass: 'full-width name-column', sortable: true }, { type: 'text', key: 'value', title: 'Value', sortable: true }, { type: 'text', key: 'scope', title: 'Scope', sortable: true }];
            if (translate) {
                translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
            }
        }
        ActivitiProcessInstanceVariables.prototype.ngOnInit = function () {
            if (!this.data) {
                this.data = this.initDefaultSchemaColumns();
            }
            if (this.processInstanceId) {
                this.getProcessInstanceVariables(this.processInstanceId);
                return;
            }
        };
        ActivitiProcessInstanceVariables.prototype.ngOnChanges = function (changes) {
            var processInstanceId = changes['processInstanceId'];
            if (processInstanceId) {
                if (processInstanceId.currentValue) {
                    this.getProcessInstanceVariables(processInstanceId.currentValue);
                } else {
                    this.resetVariables();
                }
            }
        };
        ActivitiProcessInstanceVariables.prototype.isListEmpty = function () {
            return this.data === undefined || this.data && this.data.getRows() && this.data.getRows().length === 0;
        };
        ActivitiProcessInstanceVariables.prototype.initDefaultSchemaColumns = function () {
            return new ng2_alfresco_datatable_1.ObjectDataTableAdapter([], this.defaultSchemaColumn);
        };
        ActivitiProcessInstanceVariables.prototype.createDataRow = function (instances) {
            var instancesRows = [];
            instances.forEach(function (row) {
                instancesRows.push(new ng2_alfresco_datatable_1.ObjectDataRow({
                    name: row.name,
                    value: row.value,
                    scope: row.scope
                }));
            });
            return instancesRows;
        };
        ActivitiProcessInstanceVariables.prototype.renderInstances = function (instances) {
            this.data.setRows(instances);
        };
        ActivitiProcessInstanceVariables.prototype.getProcessInstanceVariables = function (processInstanceId) {
            var _this = this;
            if (processInstanceId) {
                this.activitiProcess.getProcessInstanceVariables(processInstanceId).subscribe(function (res) {
                    var instancesRow = _this.createDataRow(res);
                    _this.renderInstances(instancesRow);
                }, function (err) {
                    _this.error.emit(err);
                });
            } else {
                this.resetVariables();
            }
        };
        ActivitiProcessInstanceVariables.prototype.resetVariables = function () {
            if (this.data) {
                this.data.setRows([]);
            }
        };
        ActivitiProcessInstanceVariables.prototype.polyfillDialog = function (dialog) {
            if (!dialog.nativeElement.showModal) {
                dialogPolyfill.registerDialog(dialog.nativeElement);
            }
        };
        ActivitiProcessInstanceVariables.prototype.showAddDialog = function () {
            this.resetForm();
            this.polyfillDialog(this.addDialog);
            this.addDialog.nativeElement.showModal();
        };
        ActivitiProcessInstanceVariables.prototype.showEditDialog = function (row) {
            this.variableName = row.getValue('name');
            this.variableValue = row.getValue('value');
            this.variableScope = row.getValue('scope');
            this.polyfillDialog(this.editDialog);
            this.editDialog.nativeElement.showModal();
        };
        ActivitiProcessInstanceVariables.prototype.showErrorDialog = function () {
            this.polyfillDialog(this.errorDialog);
            this.errorDialog.nativeElement.showModal();
        };
        ActivitiProcessInstanceVariables.prototype.add = function () {
            var _this = this;
            this.activitiProcess.createOrUpdateProcessInstanceVariables(this.processInstanceId, [new process_instance_variable_model_1.ProcessInstanceVariable({
                name: this.variableName,
                value: this.variableValue,
                scope: this.variableScope
            })]).subscribe(function (res) {
                _this.getProcessInstanceVariables(_this.processInstanceId);
                _this.resetForm();
            }, function (err) {
                _this.showErrorDialog();
                _this.error.emit(err);
            });
            this.closeAddDialog();
        };
        ActivitiProcessInstanceVariables.prototype.edit = function () {
            var _this = this;
            this.activitiProcess.createOrUpdateProcessInstanceVariables(this.processInstanceId, [new process_instance_variable_model_1.ProcessInstanceVariable({
                name: this.variableName,
                value: this.variableValue,
                scope: this.variableScope
            })]).subscribe(function (res) {
                _this.getProcessInstanceVariables(_this.processInstanceId);
                _this.resetForm();
            }, function (err) {
                _this.showErrorDialog();
                _this.error.emit(err);
            });
            this.closeEditDialog();
        };
        ActivitiProcessInstanceVariables.prototype.closeAddDialog = function () {
            this.addDialog.nativeElement.close();
        };
        ActivitiProcessInstanceVariables.prototype.closeEditDialog = function () {
            this.editDialog.nativeElement.close();
        };
        ActivitiProcessInstanceVariables.prototype.closeErrorDialog = function () {
            this.errorDialog.nativeElement.close();
        };
        ActivitiProcessInstanceVariables.prototype.resetForm = function () {
            this.variableName = '';
            this.variableValue = '';
            this.variableScope = 'global';
        };
        ActivitiProcessInstanceVariables.prototype.onDeleteVariable = function (row) {
            var _this = this;
            this.activitiProcess.deleteProcessInstanceVariable(this.processInstanceId, row.getValue('name')).subscribe(function () {
                _this.getProcessInstanceVariables(_this.processInstanceId);
            }, function (err) {
                _this.showErrorDialog();
                _this.error.emit(err);
            });
        };
        ActivitiProcessInstanceVariables.prototype.onExecuteRowAction = function (event) {
            var row = event.args.row;
            var action = event.args.action;
            if (action && action.id === 'delete') {
                this.onDeleteVariable(row);
            }
            if (action && action.id === 'edit') {
                this.showEditDialog(row);
            }
        };
        ActivitiProcessInstanceVariables.prototype.onShowRowActionsMenu = function (event) {
            event.args.actions = [{
                id: 'delete',
                title: 'Delete'
            }, {
                id: 'edit',
                title: 'Edit'
            }];
        };
        return ActivitiProcessInstanceVariables;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiProcessInstanceVariables.prototype, "processInstanceId", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Object)], ActivitiProcessInstanceVariables.prototype, "data", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessInstanceVariables.prototype, "error", void 0);
    __decorate([core_1.ViewChild('addDialog'), __metadata("design:type", core_1.DebugElement)], ActivitiProcessInstanceVariables.prototype, "addDialog", void 0);
    __decorate([core_1.ViewChild('editDialog'), __metadata("design:type", core_1.DebugElement)], ActivitiProcessInstanceVariables.prototype, "editDialog", void 0);
    __decorate([core_1.ViewChild('errorDialog'), __metadata("design:type", core_1.DebugElement)], ActivitiProcessInstanceVariables.prototype, "errorDialog", void 0);
    ActivitiProcessInstanceVariables = __decorate([core_1.Component({
        selector: 'activiti-process-instance-variables',
        moduleId: module.id,
        template: "<div id=\"setVariableBtn\" (click)=\"showAddDialog()\" class=\"icon material-icons\">add</div> <div class=\"mdl-tooltip\" for=\"setVariableBtn\">     {{ 'DETAILS.VARIABLES.BUTTON.ADD' |translate }} </div>   <div *ngIf=\"!isListEmpty()\">     <alfresco-datatable [data]=\"data\" [actions]=\"true\" (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"                         (executeRowAction)=\"onExecuteRowAction($event)\"></alfresco-datatable> </div> <div *ngIf=\"isListEmpty()\" data-automation-id=\"variables-none\">     {{ 'DETAILS.VARIABLES.NONE' | translate }} </div>   <dialog class=\"mdl-dialog add-dialog\" #addDialog>     <h4 class=\"mdl-dialog__title\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.TITLE' |translate }}</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" for=\"addVariableName\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.NAME' |translate }}</label>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"variableName\" id=\"addVariableName\" [readonly]=\"editMode\" />         </div>         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" for=\"addVariableValue\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.VALUE' |translate }}</label>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"variableValue\" id=\"addVariableValue\" />         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"add()\" class=\"mdl-button\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.SET' |translate }}</button>         <button type=\"button\" (click)=\"closeAddDialog()\" class=\"mdl-button close\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.CANCEL' |translate }}</button>     </div> </dialog>   <dialog class=\"mdl-dialog edit-dialog\" #editDialog>     <h4 class=\"mdl-dialog__title\">{{ 'DETAILS.VARIABLES.EDIT_DIALOG.TITLE' |translate }}</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" for=\"editVariableName\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.NAME' |translate }}</label>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"variableName\" id=\"editVariableName\" [readonly]=\"true\" />         </div>         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" for=\"editVariableValue\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.VALUE' |translate }}</label>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"variableValue\" id=\"editVariableValue\" />         </div>         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" for=\"editVariableScope\">{{ 'DETAILS.VARIABLES.ADD_DIALOG.LABEL.SCOPE' |translate }}</label>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"variableName\" id=\"editVariableScope\" [readonly]=\"true\" />         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"edit()\" class=\"mdl-button\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.SET' |translate }}</button>         <button type=\"button\" (click)=\"closeEditDialog()\" class=\"mdl-button close\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.CANCEL' |translate }}</button>     </div> </dialog>   <dialog class=\"mdl-dialog error-dialog\" #errorDialog>     <h4 class=\"mdl-dialog__title\">{{ 'DETAILS.VARIABLES.ERROR_DIALOG.TITLE' |translate }}</h4>     <div class=\"mdl-dialog__content\">         <p>{{ 'DETAILS.VARIABLES.ERROR_DIALOG.DESCRIPTION' |translate }}</p>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"closeErrorDialog()\" class=\"mdl-button close\">{{ 'DETAILS.VARIABLES.DIALOG.BUTTON.OK' |translate }}</button>     </div> </dialog>",
        styles: [""],
        providers: [activiti_process_service_1.ActivitiProcessService]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_process_service_1.ActivitiProcessService])], ActivitiProcessInstanceVariables);
    exports.ActivitiProcessInstanceVariables = ActivitiProcessInstanceVariables;
});
$__System.registerDynamic("8", ["3", "4", "7", "9"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var activiti_process_service_1 = $__require("7");
    var Observable_1 = $__require("9");
    var ActivitiProcessComments = function () {
        function ActivitiProcessComments(translate, activitiProcess) {
            var _this = this;
            this.translate = translate;
            this.activitiProcess = activitiProcess;
            this.error = new core_1.EventEmitter();
            this.comments = [];
            if (translate) {
                translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
            }
            this.comment$ = new Observable_1.Observable(function (observer) {
                return _this.commentObserver = observer;
            }).share();
            this.comment$.subscribe(function (comment) {
                _this.comments.push(comment);
            });
        }
        ActivitiProcessComments.prototype.ngOnChanges = function (changes) {
            var processInstanceId = changes['processInstanceId'];
            if (processInstanceId) {
                if (processInstanceId.currentValue) {
                    this.getProcessComments(processInstanceId.currentValue);
                } else {
                    this.resetComments();
                }
            }
        };
        ActivitiProcessComments.prototype.getProcessComments = function (processInstanceId) {
            var _this = this;
            this.comments = [];
            if (processInstanceId) {
                this.activitiProcess.getProcessInstanceComments(processInstanceId).subscribe(function (res) {
                    res.forEach(function (comment) {
                        _this.commentObserver.next(comment);
                    });
                }, function (err) {
                    _this.error.emit(err);
                });
            } else {
                this.resetComments();
            }
        };
        ActivitiProcessComments.prototype.resetComments = function () {
            this.comments = [];
        };
        ActivitiProcessComments.prototype.showDialog = function () {
            if (!this.dialog.nativeElement.showModal) {
                dialogPolyfill.registerDialog(this.dialog.nativeElement);
            }
            if (this.dialog) {
                this.dialog.nativeElement.showModal();
            }
        };
        ActivitiProcessComments.prototype.add = function () {
            var _this = this;
            this.activitiProcess.addProcessInstanceComment(this.processInstanceId, this.message).subscribe(function (res) {
                _this.comments.push(res);
                _this.message = '';
            }, function (err) {
                _this.error.emit(err);
            });
            this.cancel();
        };
        ActivitiProcessComments.prototype.cancel = function () {
            if (this.dialog) {
                this.dialog.nativeElement.close();
            }
        };
        return ActivitiProcessComments;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiProcessComments.prototype, "processInstanceId", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessComments.prototype, "error", void 0);
    __decorate([core_1.ViewChild('dialog'), __metadata("design:type", Object)], ActivitiProcessComments.prototype, "dialog", void 0);
    ActivitiProcessComments = __decorate([core_1.Component({
        selector: 'activiti-process-instance-comments',
        moduleId: module.id,
        template: "<span class=\"activiti-label mdl-badge\"       [attr.data-badge]=\"comments?.length\">{{ 'DETAILS.LABELS.COMMENTS' |translate }}</span> <div id=\"addComment\" (click)=\"showDialog()\" class=\"icon material-icons\">add</div> <div class=\"mdl-tooltip\" for=\"addComment\">     {{ 'DETAILS.COMMENTS.BUTTON.ADD' |translate }} </div>  <div class=\"menu-container\" *ngIf=\"comments?.length > 0\">     <ul class='mdl-list'>         <li class=\"mdl-list__item list-wrap\" *ngFor=\"let comment of comments\">             <span class=\"mdl-list__item-primary-content hide-long-names\">             <i class=\"material-icons mdl-list__item-icon\">comment</i>             {{comment.message}}             </span>         </li>     </ul> </div> <div *ngIf=\"comments?.length === 0\" data-automation-id=\"comments-none\">     {{ 'DETAILS.COMMENTS.NONE' | translate }} </div>   <dialog class=\"mdl-dialog\" #dialog> <h4 class=\"mdl-dialog__title\">{{ 'DETAILS.COMMENTS.ADD_DIALOG.TITLE' |translate }}</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <textarea class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"message\" rows=\"1\" id=\"commentText\"></textarea>             <label class=\"mdl-textfield__label\" for=\"commentText\">{{ 'DETAILS.COMMENTS.ADD_DIALOG.LABEL.MESSAGE' |translate }}</label>         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"add()\" class=\"mdl-button\">{{ 'DETAILS.COMMENTS.ADD_DIALOG.BUTTON.ADD' |translate }}</button>         <button type=\"button\" (click)=\"cancel()\" class=\"mdl-button close\">{{ 'DETAILS.COMMENTS.ADD_DIALOG.BUTTON.CANCEL' |translate }}</button>     </div> </dialog>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder;     vertical-align: top; }  .activiti-label.mdl-badge[data-badge]:after {     right: -27px;     top: -2px; }  .activiti-label + .icon {     position: relative;     top: -2px; }  .material-icons {     cursor: pointer; }  .list-wrap {     word-wrap: break-word;     word-break: break-all;     -moz-hyphens:auto;     -webkit-hyphens:auto;     -o-hyphens:auto;     hyphens:auto; }  .hide-long-names {     overflow: auto; }"],
        providers: [activiti_process_service_1.ActivitiProcessService]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_process_service_1.ActivitiProcessService])], ActivitiProcessComments);
    exports.ActivitiProcessComments = ActivitiProcessComments;
});
$__System.registerDynamic("a", ["b", "c", "d", "e", "2", "8", "f", "10"], true, function ($__require, exports, module) {
  /*!
   * @license
   * Copyright 2016 Alfresco Software, Ltd.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  "use strict";

  var global = this || self,
      GLOBAL = global;
  function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  __export($__require("b"));
  __export($__require("c"));
  __export($__require("d"));
  __export($__require("e"));
  __export($__require("2"));
  __export($__require("8"));
  __export($__require("f"));
  __export($__require("10"));
});
$__System.registerDynamic("b", ["11", "3", "4", "5", "12", "7"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var common_1 = $__require("11");
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var ng2_alfresco_datatable_1 = $__require("5");
    var process_instance_filter_model_1 = $__require("12");
    var activiti_process_service_1 = $__require("7");
    var ActivitiProcessInstanceListComponent = function () {
        function ActivitiProcessInstanceListComponent(processService, translate) {
            this.processService = processService;
            this.translate = translate;
            this.rowClick = new core_1.EventEmitter();
            this.onSuccess = new core_1.EventEmitter();
            this.onError = new core_1.EventEmitter();
            this.defaultSchemaColumn = [{ type: 'text', key: 'id', title: 'Id' }, { type: 'text', key: 'name', title: 'Name', cssClass: 'full-width name-column', sortable: true }, { type: 'text', key: 'started', title: 'Started', sortable: true }, { type: 'text', key: 'startedBy.email', title: 'Started By', sortable: true }];
            if (translate !== null) {
                translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
            }
        }
        ActivitiProcessInstanceListComponent.prototype.ngOnInit = function () {
            if (!this.data) {
                this.data = this.initDefaultSchemaColumns();
            }
            if (this.appId) {
                this.reload();
            }
        };
        ActivitiProcessInstanceListComponent.prototype.ngOnChanges = function (changes) {
            if (this.isPropertyChanged(changes)) {
                this.reload();
            }
        };
        ActivitiProcessInstanceListComponent.prototype.isPropertyChanged = function (changes) {
            var changed = false;
            var appId = changes['appId'];
            var processDefinitionKey = changes['processDefinitionKey'];
            var state = changes['state'];
            var sort = changes['sort'];
            var name = changes['name'];
            if (appId && appId.currentValue) {
                changed = true;
            } else if (processDefinitionKey && processDefinitionKey.currentValue) {
                changed = true;
            } else if (state && state.currentValue) {
                changed = true;
            } else if (sort && sort.currentValue) {
                changed = true;
            } else if (name && name.currentValue) {
                changed = true;
            }
            return changed;
        };
        ActivitiProcessInstanceListComponent.prototype.reload = function () {
            this.requestNode = this.createRequestNode();
            this.load(this.requestNode);
        };
        ActivitiProcessInstanceListComponent.prototype.initDefaultSchemaColumns = function () {
            return new ng2_alfresco_datatable_1.ObjectDataTableAdapter([], this.defaultSchemaColumn);
        };
        ActivitiProcessInstanceListComponent.prototype.load = function (requestNode) {
            var _this = this;
            this.processService.getProcessInstances(requestNode).subscribe(function (response) {
                var instancesRow = _this.createDataRow(response);
                _this.renderInstances(instancesRow);
                _this.selectFirst();
                _this.onSuccess.emit(response);
            }, function (error) {
                _this.onError.emit(error);
            });
        };
        ActivitiProcessInstanceListComponent.prototype.createDataRow = function (instances) {
            var instancesRows = [];
            instances.forEach(function (row) {
                instancesRows.push(new ng2_alfresco_datatable_1.ObjectDataRow({
                    id: row.id,
                    name: row.name,
                    started: row.started,
                    processDefinitionName: row.processDefinitionName
                }));
            });
            return instancesRows;
        };
        ActivitiProcessInstanceListComponent.prototype.renderInstances = function (instances) {
            instances = this.optimizeNames(instances);
            this.setDatatableSorting();
            this.data.setRows(instances);
        };
        ActivitiProcessInstanceListComponent.prototype.setDatatableSorting = function () {
            if (!this.sort) {
                return;
            }
            var sortingParams = this.sort.split('-');
            if (sortingParams.length === 2) {
                var sortColumn = sortingParams[0] === 'created' ? 'started' : sortingParams[0];
                var sortOrder = sortingParams[1];
                this.data.setSorting(new ng2_alfresco_datatable_1.DataSorting(sortColumn, sortOrder));
            }
        };
        ActivitiProcessInstanceListComponent.prototype.selectFirst = function () {
            if (!this.isListEmpty()) {
                var row = this.data.getRows()[0];
                this.data.selectedRow = row;
                this.currentInstanceId = row.getValue('id');
            } else {
                if (this.data) {
                    this.data.selectedRow = null;
                }
                this.currentInstanceId = null;
            }
        };
        ActivitiProcessInstanceListComponent.prototype.getCurrentId = function () {
            return this.currentInstanceId;
        };
        ActivitiProcessInstanceListComponent.prototype.isListEmpty = function () {
            return this.data === undefined || this.data && this.data.getRows() && this.data.getRows().length === 0;
        };
        ActivitiProcessInstanceListComponent.prototype.onRowClick = function (event) {
            var item = event;
            this.currentInstanceId = item.value.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        };
        ActivitiProcessInstanceListComponent.prototype.optimizeNames = function (instances) {
            var _this = this;
            instances = instances.map(function (t) {
                t.obj.name = _this.getProcessNameOrDescription(t.obj, 'medium');
                return t;
            });
            return instances;
        };
        ActivitiProcessInstanceListComponent.prototype.getProcessNameOrDescription = function (processInstance, dateFormat) {
            var name = '';
            if (processInstance) {
                name = processInstance.name || processInstance.processDefinitionName + ' - ' + this.getFormatDate(processInstance.started, dateFormat);
            }
            return name;
        };
        ActivitiProcessInstanceListComponent.prototype.getFormatDate = function (value, format) {
            var datePipe = new common_1.DatePipe('en-US');
            try {
                return datePipe.transform(value, format);
            } catch (err) {
                return '';
            }
        };
        ActivitiProcessInstanceListComponent.prototype.createRequestNode = function () {
            var requestNode = {
                appDefinitionId: this.appId,
                processDefinitionKey: this.processDefinitionKey,
                state: this.state,
                sort: this.sort
            };
            return new process_instance_filter_model_1.ProcessFilterRequestRepresentation(requestNode);
        };
        return ActivitiProcessInstanceListComponent;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiProcessInstanceListComponent.prototype, "appId", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiProcessInstanceListComponent.prototype, "processDefinitionKey", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiProcessInstanceListComponent.prototype, "state", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiProcessInstanceListComponent.prototype, "sort", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiProcessInstanceListComponent.prototype, "name", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Object)], ActivitiProcessInstanceListComponent.prototype, "data", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessInstanceListComponent.prototype, "rowClick", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessInstanceListComponent.prototype, "onSuccess", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessInstanceListComponent.prototype, "onError", void 0);
    ActivitiProcessInstanceListComponent = __decorate([core_1.Component({
        selector: 'activiti-process-instance-list',
        moduleId: module.id,
        styles: ["alfresco-datatable >>> .column-header {     color: #232323;     font-size: 15px; }  alfresco-datatable >>> .data-cell {     cursor: pointer !important; }  alfresco-datatable >>> .cell-value{     width: 250px;     white-space: nowrap;     overflow: hidden;     text-overflow: ellipsis }"],
        template: "<div *ngIf=\"!requestNode\">{{ 'FILTERS.MESSAGES.NONE' | translate }}</div> <div *ngIf=\"requestNode\">     <div *ngIf=\"!isListEmpty()\">         <alfresco-datatable             [data]=\"data\"             (rowClick)=\"onRowClick($event)\">         </alfresco-datatable>     </div>     <div *ngIf=\"isListEmpty()\">         {{ 'PROCESSLIST.NONE' | translate }}     </div> </div>"
    }), __metadata("design:paramtypes", [activiti_process_service_1.ActivitiProcessService, ng2_alfresco_core_1.AlfrescoTranslationService])], ActivitiProcessInstanceListComponent);
    exports.ActivitiProcessInstanceListComponent = ActivitiProcessInstanceListComponent;
});
$__System.registerDynamic("c", ["3", "13", "4", "7"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var Rx_1 = $__require("13");
    var ng2_alfresco_core_1 = $__require("4");
    var activiti_process_service_1 = $__require("7");
    var ActivitiProcessFilters = function () {
        function ActivitiProcessFilters(translate, activiti, logService) {
            var _this = this;
            this.translate = translate;
            this.activiti = activiti;
            this.logService = logService;
            this.filterClick = new core_1.EventEmitter();
            this.onSuccess = new core_1.EventEmitter();
            this.onError = new core_1.EventEmitter();
            this.filters = [];
            this.filter$ = new Rx_1.Observable(function (observer) {
                return _this.filterObserver = observer;
            }).share();
            if (translate) {
                translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
            }
        }
        ActivitiProcessFilters.prototype.ngOnInit = function () {
            var _this = this;
            this.filter$.subscribe(function (filter) {
                _this.filters.push(filter);
            });
            this.getFilters(this.appId, this.appName);
        };
        ActivitiProcessFilters.prototype.ngOnChanges = function (changes) {
            var appId = changes['appId'];
            if (appId && (appId.currentValue || appId.currentValue === null)) {
                this.getFiltersByAppId(appId.currentValue);
                return;
            }
            var appName = changes['appName'];
            if (appName && appName.currentValue) {
                this.getFiltersByAppName(appName.currentValue);
                return;
            }
        };
        ActivitiProcessFilters.prototype.getFilters = function (appId, appName) {
            if (appName) {
                this.getFiltersByAppName(appName);
            } else {
                this.getFiltersByAppId(appId);
            }
        };
        ActivitiProcessFilters.prototype.getFiltersByAppId = function (appId) {
            var _this = this;
            this.activiti.getProcessFilters(appId).subscribe(function (res) {
                _this.resetFilter();
                res.forEach(function (filter) {
                    _this.filterObserver.next(filter);
                });
                _this.selectFirstFilter();
                _this.onSuccess.emit(res);
            }, function (err) {
                _this.logService.error(err);
                _this.onError.emit(err);
            });
        };
        ActivitiProcessFilters.prototype.getFiltersByAppName = function (appName) {
            var _this = this;
            this.activiti.getDeployedApplications(appName).subscribe(function (application) {
                _this.getFiltersByAppId(application.id);
                _this.selectFirstFilter();
            }, function (err) {
                _this.logService.error(err);
                _this.onError.emit(err);
            });
        };
        ActivitiProcessFilters.prototype.selectFilter = function (filter) {
            this.currentFilter = filter;
            this.filterClick.emit(filter);
        };
        ActivitiProcessFilters.prototype.selectFirstFilter = function () {
            if (!this.isFilterListEmpty()) {
                this.currentFilter = this.filters[0];
            } else {
                this.currentFilter = null;
            }
        };
        ActivitiProcessFilters.prototype.getCurrentFilter = function () {
            return this.currentFilter;
        };
        ActivitiProcessFilters.prototype.isFilterListEmpty = function () {
            return this.filters === undefined || this.filters && this.filters.length === 0;
        };
        ActivitiProcessFilters.prototype.resetFilter = function () {
            this.filters = [];
            this.currentFilter = null;
        };
        return ActivitiProcessFilters;
    }();
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessFilters.prototype, "filterClick", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessFilters.prototype, "onSuccess", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessFilters.prototype, "onError", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Number)], ActivitiProcessFilters.prototype, "appId", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiProcessFilters.prototype, "appName", void 0);
    ActivitiProcessFilters = __decorate([core_1.Component({
        selector: 'activiti-process-instance-filters',
        moduleId: module.id,
        template: "<div class=\"menu-container\">     <ul class='mdl-list'>         <li class=\"mdl-list__item activiti-filters__entry\" (click)=\"selectFilter(filter)\" *ngFor=\"let filter of filters\"             [class.active]=\"currentFilter === filter\">             <span class=\"mdl-list__item-primary-content\">             <i class=\"material-icons mdl-list__item-icon activiti-filters__entry-icon\" [attr.data-automation-id]=\"filter.name + '_filter'\" >assignment</i>             {{filter.name}}             </span>         </li>     </ul> </div>",
        styles: [".mdl-list__item {     cursor: pointer; }  .activiti-filters__entry {     cursor: pointer; }  .activiti-filters__entry-icon {     margin-right: 12px !important; }  .activiti-filters__entry.active {     color: rgb(68,138,255); }  .activiti-filters__entry.active .activiti-filters__entry-icon {     color: rgb(68,138,255); }"]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_process_service_1.ActivitiProcessService, ng2_alfresco_core_1.LogService])], ActivitiProcessFilters);
    exports.ActivitiProcessFilters = ActivitiProcessFilters;
});
$__System.registerDynamic("d", ["3", "4", "14", "11"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var process_instance_model_1 = $__require("14");
    var common_1 = $__require("11");
    var ActivitiProcessInstanceHeader = function () {
        function ActivitiProcessInstanceHeader(translate, logService) {
            this.translate = translate;
            this.logService = logService;
            this.onError = new core_1.EventEmitter();
            if (translate) {
                translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
            }
        }
        ActivitiProcessInstanceHeader.prototype.getStartedByFullName = function () {
            if (this.processInstance && this.processInstance.startedBy) {
                return (this.processInstance.startedBy.firstName && this.processInstance.startedBy.firstName !== 'null' ? this.processInstance.startedBy.firstName + ' ' : '') + this.processInstance.startedBy.lastName;
            }
            return '';
        };
        ActivitiProcessInstanceHeader.prototype.getFormatDate = function (value, format) {
            var datePipe = new common_1.DatePipe('en-US');
            try {
                return datePipe.transform(value, format);
            } catch (err) {
                this.logService.error("ProcessListInstanceHeader: error parsing date " + value + " to format " + format);
            }
        };
        ActivitiProcessInstanceHeader.prototype.isRunning = function () {
            return this.processInstance && !this.processInstance.ended;
        };
        return ActivitiProcessInstanceHeader;
    }();
    __decorate([core_1.Input(), __metadata("design:type", process_instance_model_1.ProcessInstance)], ActivitiProcessInstanceHeader.prototype, "processInstance", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessInstanceHeader.prototype, "onError", void 0);
    ActivitiProcessInstanceHeader = __decorate([core_1.Component({
        selector: 'activiti-process-instance-header',
        moduleId: module.id,
        template: "<div *ngIf=\"processInstance\">     <div class=\"mdl-grid\">         <div class=\"mdl-cell mdl-cell--4-col\" data-automation-id=\"header-started-by\">             <span class=\"activiti-label\">{{ 'DETAILS.LABELS.STARTED_BY' | translate }}</span>:             <span class=\"activiti-process-header__value\">{{getStartedByFullName()}}</span>         </div>         <div class=\"mdl-cell mdl-cell--4-col\" data-automation-id=\"header-started\">             <span class=\"activiti-label\">{{ 'DETAILS.LABELS.STARTED' | translate }}</span>:             <span class=\"activiti-process-header__value\">{{getFormatDate(processInstance.started, 'medium')}}</span>         </div>         <div class=\"mdl-cell mdl-cell--4-col\">             <activiti-process-instance-comments [processInstanceId]=\"processInstance?.id\"></activiti-process-instance-comments>         </div>         <div class=\"mdl-cell mdl-cell--4-col\" data-automation-id=\"header-status\" *ngIf=\"!isRunning()\">             <span class=\"activiti-label\">{{ 'DETAILS.LABELS.ENDED' | translate }}</span>:             <span class=\"activiti-process-header__value\">{{getFormatDate(processInstance.ended, 'medium')}}</span>         </div>     </div> </div>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }  .activiti-process-header__value {     color: rgb(68, 138, 255); }"]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, ng2_alfresco_core_1.LogService])], ActivitiProcessInstanceHeader);
    exports.ActivitiProcessInstanceHeader = ActivitiProcessInstanceHeader;
});
$__System.registerDynamic("e", ["3", "11", "13", "4", "7", "15", "14"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var common_1 = $__require("11");
    var Rx_1 = $__require("13");
    var ng2_alfresco_core_1 = $__require("4");
    var activiti_process_service_1 = $__require("7");
    var ng2_activiti_tasklist_1 = $__require("15");
    var process_instance_model_1 = $__require("14");
    var ActivitiProcessInstanceTasks = function () {
        function ActivitiProcessInstanceTasks(translate, activitiProcess, logService) {
            var _this = this;
            this.translate = translate;
            this.activitiProcess = activitiProcess;
            this.logService = logService;
            this.showRefreshButton = true;
            this.activeTasks = [];
            this.completedTasks = [];
            this.taskClick = new core_1.EventEmitter();
            if (translate) {
                translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
            }
            this.task$ = new Rx_1.Observable(function (observer) {
                return _this.taskObserver = observer;
            }).share();
            this.completedTask$ = new Rx_1.Observable(function (observer) {
                return _this.completedTaskObserver = observer;
            }).share();
        }
        ActivitiProcessInstanceTasks.prototype.ngOnInit = function () {
            var _this = this;
            this.task$.subscribe(function (task) {
                _this.activeTasks.push(task);
            });
            this.completedTask$.subscribe(function (task) {
                _this.completedTasks.push(task);
            });
        };
        ActivitiProcessInstanceTasks.prototype.ngOnChanges = function (changes) {
            var processInstanceDetails = changes['processInstanceDetails'];
            if (processInstanceDetails && processInstanceDetails.currentValue) {
                this.load(processInstanceDetails.currentValue.id);
            }
        };
        ActivitiProcessInstanceTasks.prototype.load = function (processId) {
            this.loadActive(processId);
            this.loadCompleted(processId);
        };
        ActivitiProcessInstanceTasks.prototype.loadActive = function (processId) {
            var _this = this;
            this.activeTasks = [];
            if (processId) {
                this.activitiProcess.getProcessTasks(processId, null).subscribe(function (res) {
                    res.forEach(function (task) {
                        _this.taskObserver.next(task);
                    });
                }, function (err) {
                    _this.logService.error(err);
                });
            } else {
                this.activeTasks = [];
            }
        };
        ActivitiProcessInstanceTasks.prototype.loadCompleted = function (processId) {
            var _this = this;
            this.completedTasks = [];
            if (processId) {
                this.activitiProcess.getProcessTasks(processId, 'completed').subscribe(function (res) {
                    res.forEach(function (task) {
                        _this.completedTaskObserver.next(task);
                    });
                }, function (err) {
                    _this.logService.error(err);
                });
            } else {
                this.completedTasks = [];
            }
        };
        ActivitiProcessInstanceTasks.prototype.hasStartFormDefined = function () {
            return this.processInstanceDetails && this.processInstanceDetails.startFormDefined === true;
        };
        ActivitiProcessInstanceTasks.prototype.getUserFullName = function (user) {
            if (user) {
                return (user.firstName && user.firstName !== 'null' ? user.firstName + ' ' : '') + user.lastName;
            }
            return 'Nobody';
        };
        ActivitiProcessInstanceTasks.prototype.getFormatDate = function (value, format) {
            var datePipe = new common_1.DatePipe('en-US');
            try {
                return datePipe.transform(value, format);
            } catch (err) {
                this.logService.error("ProcessListInstanceTask: error parsing date " + value + " to format " + format);
            }
        };
        ActivitiProcessInstanceTasks.prototype.clickTask = function ($event, task) {
            var args = new ng2_activiti_tasklist_1.TaskDetailsEvent(task);
            this.taskClick.emit(args);
        };
        ActivitiProcessInstanceTasks.prototype.clickStartTask = function () {
            this.processId = this.processInstanceDetails.id;
            this.showStartDialog();
        };
        ActivitiProcessInstanceTasks.prototype.showStartDialog = function () {
            if (!this.startDialog.nativeElement.showModal) {
                dialogPolyfill.registerDialog(this.startDialog.nativeElement);
            }
            if (this.startDialog) {
                this.startDialog.nativeElement.showModal();
            }
        };
        ActivitiProcessInstanceTasks.prototype.closeSartDialog = function () {
            if (this.startDialog) {
                this.startDialog.nativeElement.close();
            }
        };
        ActivitiProcessInstanceTasks.prototype.onRefreshClicked = function () {
            this.load(this.processInstanceDetails.id);
        };
        return ActivitiProcessInstanceTasks;
    }();
    __decorate([core_1.Input(), __metadata("design:type", process_instance_model_1.ProcessInstance)], ActivitiProcessInstanceTasks.prototype, "processInstanceDetails", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiProcessInstanceTasks.prototype, "showRefreshButton", void 0);
    __decorate([core_1.ViewChild('dialog'), __metadata("design:type", Object)], ActivitiProcessInstanceTasks.prototype, "dialog", void 0);
    __decorate([core_1.ViewChild('startDialog'), __metadata("design:type", Object)], ActivitiProcessInstanceTasks.prototype, "startDialog", void 0);
    __decorate([core_1.ViewChild('taskdetails'), __metadata("design:type", Object)], ActivitiProcessInstanceTasks.prototype, "taskdetails", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessInstanceTasks.prototype, "taskClick", void 0);
    ActivitiProcessInstanceTasks = __decorate([core_1.Component({
        selector: 'activiti-process-instance-tasks',
        moduleId: module.id,
        template: "<div  *ngIf=\"showRefreshButton\" class=\"process-tasks-refresh\" >     <button (click)=\"onRefreshClicked()\" class=\"mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect\">         <i class=\"material-icons\">refresh</i>     </button> </div>  <!-- ACTIVE FORM -->  <span class=\"activiti-label mdl-badge\"       [attr.data-badge]=\"activeTasks?.length\">{{ 'DETAILS.LABELS.TASKS_ACTIVE'|translate }}</span>  <div class=\"menu-container\" *ngIf=\"activeTasks?.length > 0\" data-automation-id=\"active-tasks\">     <ul class='mdl-list'>         <li class=\"mdl-list__item mdl-list__item--two-line process-tasks__task-item\" *ngFor=\"let task of activeTasks\">             <span class=\"mdl-list__item-primary-content\" (click)=\"clickTask($event, task)\">                 <i class=\"material-icons mdl-list__item-icon\">assignment</i>                 <span>{{task.name || 'Nameless task'}}</span>                 <span class=\"mdl-list__item-sub-title\">                     {{ 'DETAILS.LABELS.TASK_SUBTITLE' | translate:{user: getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}                 </span>             </span>         </li>     </ul> </div>  <!-- START FORM -->  <div *ngIf=\"activeTasks?.length === 0\" data-automation-id=\"active-tasks-none\" class=\"no-results\">     {{ 'DETAILS.TASKS.NO_ACTIVE' | translate }} </div>  <div *ngIf=\"hasStartFormDefined()\">     <span class=\"activiti-label\">{{ 'DETAILS.LABELS.START_FORM'|translate }}</span>      <!--IF START TASK COMPLETED -->     <div class=\"menu-container\">         <ul class='mdl-list'>             <li class=\"mdl-list__item mdl-list__item--two-line process-tasks__task-item\">                 <span class=\"mdl-list__item-primary-content\" (click)=\"clickStartTask($event)\">                     <i class=\"material-icons mdl-list__item-icon\">assignment</i>                     <span>{{ 'DETAILS.LABELS.START_FORM'|translate }}</span>                     <span class=\"mdl-list__item-sub-title\">                         {{ 'DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(processInstanceDetails.startedBy), created: getFormatDate(processInstanceDetails.started, 'mediumDate') } }}                     </span>                 </span>             </li>         </ul>     </div>  </div>  <!-- COMPLETED FORM --> <span class=\"activiti-label mdl-badge\"       [attr.data-badge]=\"completedTasks?.length\">{{ 'DETAILS.LABELS.TASKS_COMPLETED'|translate }}</span>  <div class=\"menu-container\" *ngIf=\"completedTasks?.length > 0\" data-automation-id=\"completed-tasks\">     <ul class='mdl-list'>         <li class=\"mdl-list__item mdl-list__item--two-line process-tasks__task-item\" *ngFor=\"let task of completedTasks\">             <span class=\"mdl-list__item-primary-content\" (click)=\"clickTask($event, task)\">                 <i class=\"material-icons mdl-list__item-icon\">assignment</i>                 <span>{{task.name || 'Nameless task'}}</span>                 <span class=\"mdl-list__item-sub-title\">                     {{ 'DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}                 </span>             </span>         </li>     </ul> </div>  <div *ngIf=\"completedTasks?.length === 0\" data-automation-id=\"completed-tasks-none\" class=\"no-results\">     {{ 'DETAILS.TASKS.NO_COMPLETED' | translate }} </div>  <dialog *ngIf=\"hasStartFormDefined()\" class=\"mdl-dialog task-details-dialog\" #startDialog>     <h4 class=\"mdl-dialog__title\">{{ 'DETAILS.LABELS.START_FORM'|translate }}</h4>     <div class=\"mdl-dialog__content form__size\">         <activiti-start-form [processId]=\"processId\" [processDefinitionId]=\"processInstanceDetails?.processDefinitionId\"                              [showRefreshButton]=\"false\" [readOnlyForm]=\"true\" >         </activiti-start-form>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"closeSartDialog()\" class=\"mdl-button close\">{{ 'DETAILS.TASKS.TASK_CLOSE' | translate }}</button>     </div> </dialog>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder;     vertical-align: top; }  .activiti-label.mdl-badge[data-badge]:after {     right: -27px;     top: -2px; }  .activiti-label + .icon {     position: relative;     top: -2px; }  .material-icons:hover {     color: rgb(255, 152, 0); }  .task-details-dialog {     position: fixed;     top: 50%;     transform: translate(0, -50%);     width: 40%; }  .process-tasks-refresh {     float: right; }  .mdl-dialog__content.form__size {     height: 400px;     overflow-y: auto; }  .no-results {     margin-left: 9px;     font-size: 14px;     font-weight: 400;     letter-spacing: 0;     line-height: 18px;     color: rgba(0, 0, 0, .54);     display: block;     padding: 12px; }  .process-tasks__task-item {     cursor: pointer; }"]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_process_service_1.ActivitiProcessService, ng2_alfresco_core_1.LogService])], ActivitiProcessInstanceTasks);
    exports.ActivitiProcessInstanceTasks = ActivitiProcessInstanceTasks;
});
$__System.registerDynamic("f", ["11", "3", "4", "7", "d", "e"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var common_1 = $__require("11");
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var activiti_process_service_1 = $__require("7");
    var activiti_process_instance_header_component_1 = $__require("d");
    var activiti_process_instance_tasks_component_1 = $__require("e");
    var ActivitiProcessInstanceDetails = function () {
        function ActivitiProcessInstanceDetails(translate, activitiProcess, logService) {
            this.translate = translate;
            this.activitiProcess = activitiProcess;
            this.logService = logService;
            this.showTitle = true;
            this.showRefreshButton = true;
            this.processCancelled = new core_1.EventEmitter();
            this.taskClick = new core_1.EventEmitter();
            if (translate) {
                translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
            }
        }
        ActivitiProcessInstanceDetails.prototype.ngOnChanges = function (changes) {
            var processInstanceId = changes['processInstanceId'];
            if (processInstanceId && !processInstanceId.currentValue) {
                this.reset();
                return;
            }
            if (processInstanceId && processInstanceId.currentValue) {
                this.load(processInstanceId.currentValue);
                return;
            }
        };
        ActivitiProcessInstanceDetails.prototype.reset = function () {
            this.processInstanceDetails = null;
        };
        ActivitiProcessInstanceDetails.prototype.load = function (processId) {
            var _this = this;
            if (processId) {
                this.activitiProcess.getProcess(processId).subscribe(function (res) {
                    _this.processInstanceDetails = res;
                });
            }
        };
        ActivitiProcessInstanceDetails.prototype.isRunning = function () {
            return this.processInstanceDetails && !this.processInstanceDetails.ended;
        };
        ActivitiProcessInstanceDetails.prototype.cancelProcess = function () {
            var _this = this;
            this.activitiProcess.cancelProcess(this.processInstanceId).subscribe(function (data) {
                _this.processCancelled.emit(data);
            }, function (err) {
                _this.logService.error(err);
            });
        };
        ActivitiProcessInstanceDetails.prototype.onTaskClicked = function (event) {
            this.taskClick.emit(event);
        };
        ActivitiProcessInstanceDetails.prototype.getProcessNameOrDescription = function (dateFormat) {
            var name = '';
            if (this.processInstanceDetails) {
                name = this.processInstanceDetails.name || this.processInstanceDetails.processDefinitionName + ' - ' + this.getFormatDate(this.processInstanceDetails.started, dateFormat);
            }
            return name;
        };
        ActivitiProcessInstanceDetails.prototype.getFormatDate = function (value, format) {
            var datePipe = new common_1.DatePipe('en-US');
            try {
                return datePipe.transform(value, format);
            } catch (err) {
                this.logService.error("ProcessListInstanceHeader: error parsing date " + value + " to format " + format);
            }
        };
        return ActivitiProcessInstanceDetails;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiProcessInstanceDetails.prototype, "processInstanceId", void 0);
    __decorate([core_1.ViewChild(activiti_process_instance_header_component_1.ActivitiProcessInstanceHeader), __metadata("design:type", activiti_process_instance_header_component_1.ActivitiProcessInstanceHeader)], ActivitiProcessInstanceDetails.prototype, "processInstanceHeader", void 0);
    __decorate([core_1.ViewChild(activiti_process_instance_tasks_component_1.ActivitiProcessInstanceTasks), __metadata("design:type", activiti_process_instance_tasks_component_1.ActivitiProcessInstanceTasks)], ActivitiProcessInstanceDetails.prototype, "tasksList", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiProcessInstanceDetails.prototype, "showTitle", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiProcessInstanceDetails.prototype, "showRefreshButton", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessInstanceDetails.prototype, "processCancelled", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiProcessInstanceDetails.prototype, "taskClick", void 0);
    ActivitiProcessInstanceDetails = __decorate([core_1.Component({
        selector: 'activiti-process-instance-details',
        moduleId: module.id,
        template: "<div *ngIf=\"!processInstanceDetails\">{{ 'DETAILS.MESSAGES.NONE'|translate }}</div> <div *ngIf=\"processInstanceDetails\">     <h2 class=\"mdl-card__title-text\">{{ getProcessNameOrDescription('medium') }}</h2>     <activiti-process-instance-header [processInstance]=\"processInstanceDetails\"></activiti-process-instance-header>     <div class=\"mdl-card mdl-shadow--2dp activiti-process-container\">         <div class=\"mdl-cell mdl-cell--12-col\">             <activiti-process-instance-tasks                 [processInstanceDetails]=\"processInstanceDetails\"                 (taskClick)=\"onTaskClicked($event)\">             </activiti-process-instance-tasks>         </div>     </div>     <div class=\"mdl-cell mdl-cell--4-col\" data-automation-id=\"header-status\" *ngIf=\"isRunning()\">         <button type=\"button\" (click)=\"cancelProcess()\" class=\"mdl-button\">{{ 'DETAILS.BUTTON.CANCEL' | translate }}</button>     </div> </div>",
        styles: [":host {     width: 100%; }  .activiti-process-container {     width: 100%;     min-height: 100px;     overflow: visible;     padding: 10px; }"]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_process_service_1.ActivitiProcessService, ng2_alfresco_core_1.LogService])], ActivitiProcessInstanceDetails);
    exports.ActivitiProcessInstanceDetails = ActivitiProcessInstanceDetails;
});
$__System.registerDynamic("7", ["3", "9", "4", "16", "6", "15", "17"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var Observable_1 = $__require("9");
    var ng2_alfresco_core_1 = $__require("4");
    var index_1 = $__require("16");
    var process_instance_variable_model_1 = $__require("6");
    var ng2_activiti_tasklist_1 = $__require("15");
    var filter_process_model_1 = $__require("17");
    var ActivitiProcessService = function () {
        function ActivitiProcessService(apiService) {
            this.apiService = apiService;
        }
        ActivitiProcessService.prototype.getDeployedApplications = function (name) {
            var _this = this;
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.appsApi.getAppDefinitions()).map(function (response) {
                return response.data.find(function (p) {
                    return p.name === name;
                });
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.getProcessInstances = function (requestNode) {
            var _this = this;
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.getProcessInstances(requestNode)).map(function (res) {
                if (requestNode.processDefinitionKey) {
                    return res.data.filter(function (p) {
                        return p.processDefinitionKey === requestNode.processDefinitionKey;
                    });
                } else {
                    return res.data;
                }
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.getProcessFilters = function (appId) {
            var _this = this;
            var filterOpts = appId ? {
                appId: appId
            } : {};
            return Observable_1.Observable.fromPromise(this.callApiGetUserProcessInstanceFilters(filterOpts)).map(function (response) {
                var filters = [];
                response.data.forEach(function (filter) {
                    var filterModel = new filter_process_model_1.FilterProcessRepresentationModel(filter);
                    filters.push(filterModel);
                });
                if (response && response.data && response.data.length === 0) {
                    return _this.createDefaultFilters(appId);
                }
                return filters;
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.createDefaultFilters = function (appId) {
            var filters = [];
            var involvedTasksFilter = this.getRunningFilterInstance(appId);
            this.addFilter(involvedTasksFilter);
            filters.push(involvedTasksFilter);
            var myTasksFilter = this.getCompletedFilterInstance(appId);
            this.addFilter(myTasksFilter);
            filters.push(myTasksFilter);
            var queuedTasksFilter = this.getAllFilterInstance(appId);
            this.addFilter(queuedTasksFilter);
            filters.push(queuedTasksFilter);
            return filters;
        };
        ActivitiProcessService.prototype.getRunningFilterInstance = function (appId) {
            return new filter_process_model_1.FilterProcessRepresentationModel({
                'name': 'Running',
                'appId': appId,
                'recent': true,
                'icon': 'glyphicon-random',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' }
            });
        };
        ActivitiProcessService.prototype.getCompletedFilterInstance = function (appId) {
            return new filter_process_model_1.FilterProcessRepresentationModel({
                'name': 'Completed',
                'appId': appId,
                'recent': false,
                'icon': 'glyphicon-ok-sign',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' }
            });
        };
        ActivitiProcessService.prototype.getAllFilterInstance = function (appId) {
            return new filter_process_model_1.FilterProcessRepresentationModel({
                'name': 'All',
                'appId': appId,
                'recent': true,
                'icon': 'glyphicon-th',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' }
            });
        };
        ActivitiProcessService.prototype.addFilter = function (filter) {
            var _this = this;
            return Observable_1.Observable.fromPromise(this.callApiAddFilter(filter)).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.getProcess = function (id) {
            var _this = this;
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.getProcessInstance(id)).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.getProcessTasks = function (id, state) {
            var _this = this;
            var taskOpts = state ? {
                processInstanceId: id,
                state: state
            } : {
                processInstanceId: id
            };
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.listTasks(taskOpts)).map(this.extractData).map(function (tasks) {
                return tasks.map(function (task) {
                    task.created = moment(task.created, 'YYYY-MM-DD').format();
                    return task;
                });
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.getProcessInstanceComments = function (id) {
            var _this = this;
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.commentsApi.getProcessInstanceComments(id)).map(function (res) {
                return res;
            }).map(function (response) {
                var comments = [];
                response.data.forEach(function (comment) {
                    var user = new ng2_activiti_tasklist_1.User({
                        id: comment.createdBy.id,
                        email: comment.createdBy.email,
                        firstName: comment.createdBy.firstName,
                        lastName: comment.createdBy.lastName
                    });
                    comments.push(new ng2_activiti_tasklist_1.Comment(comment.id, comment.message, comment.created, user));
                });
                return comments;
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.addProcessInstanceComment = function (id, message) {
            var _this = this;
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.commentsApi.addProcessInstanceComment({ message: message }, id)).map(function (response) {
                return new ng2_activiti_tasklist_1.Comment(response.id, response.message, response.created, response.createdBy);
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.getProcessDefinitions = function (appId) {
            var _this = this;
            var opts = appId ? {
                latest: true,
                appDefinitionId: appId
            } : {
                latest: true
            };
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.getProcessDefinitions(opts)).map(this.extractData).map(function (processDefs) {
                return processDefs.map(function (pd) {
                    return new index_1.ProcessDefinitionRepresentation(pd);
                });
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.startProcess = function (processDefinitionId, name, outcome, startFormValues) {
            var _this = this;
            var startRequest = {
                name: name,
                processDefinitionId: processDefinitionId
            };
            if (outcome) {
                startRequest.outcome = outcome;
            }
            if (startFormValues) {
                startRequest.values = startFormValues;
            }
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.startNewProcessInstance(startRequest)).map(function (pd) {
                return new index_1.ProcessInstance(pd);
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.cancelProcess = function (processInstanceId) {
            var _this = this;
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processApi.deleteProcessInstance(processInstanceId)).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.getProcessInstanceVariables = function (processDefinitionId) {
            var _this = this;
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processInstanceVariablesApi.getProcessInstanceVariables(processDefinitionId)).map(function (processVars) {
                return processVars.map(function (pd) {
                    return new process_instance_variable_model_1.ProcessInstanceVariable(pd);
                });
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.createOrUpdateProcessInstanceVariables = function (processDefinitionId, variables) {
            var _this = this;
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processDefinitionId, variables)).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.deleteProcessInstanceVariable = function (processDefinitionId, variableName) {
            var _this = this;
            return Observable_1.Observable.fromPromise(this.apiService.getInstance().activiti.processInstanceVariablesApi.deleteProcessInstanceVariable(processDefinitionId, variableName)).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiProcessService.prototype.callApiGetUserProcessInstanceFilters = function (filterOpts) {
            return this.apiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters(filterOpts);
        };
        ActivitiProcessService.prototype.callApiAddFilter = function (filter) {
            return this.apiService.getInstance().activiti.userFiltersApi.createUserProcessInstanceFilter(filter);
        };
        ActivitiProcessService.prototype.extractData = function (res) {
            return res.data || {};
        };
        ActivitiProcessService.prototype.handleError = function (error) {
            return Observable_1.Observable.throw(error || 'Server error');
        };
        return ActivitiProcessService;
    }();
    ActivitiProcessService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService])], ActivitiProcessService);
    exports.ActivitiProcessService = ActivitiProcessService;
});
$__System.registerDynamic("10", ["3", "4", "18", "19", "7"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var ng2_activiti_form_1 = $__require("18");
    var process_definition_model_1 = $__require("19");
    var activiti_process_service_1 = $__require("7");
    var ActivitiStartProcessInstance = function () {
        function ActivitiStartProcessInstance(translate, activitiProcess) {
            this.translate = translate;
            this.activitiProcess = activitiProcess;
            this.showStartButton = true;
            this.start = new core_1.EventEmitter();
            this.processDefinitions = [];
            this.currentProcessDef = new process_definition_model_1.ProcessDefinitionRepresentation();
            this.errorMessageId = '';
            if (translate) {
                translate.addTranslationFolder('ng2-activiti-processlist', 'node_modules/ng2-activiti-processlist/src');
            }
        }
        ActivitiStartProcessInstance.prototype.ngOnChanges = function (changes) {
            var appId = changes['appId'];
            if (appId && (appId.currentValue || appId.currentValue === null)) {
                this.load(appId.currentValue);
                return;
            }
        };
        ActivitiStartProcessInstance.prototype.load = function (appId) {
            var _this = this;
            this.resetSelectedProcessDefinition();
            this.resetErrorMessage();
            this.activitiProcess.getProcessDefinitions(appId).subscribe(function (res) {
                _this.processDefinitions = res;
            }, function () {
                _this.errorMessageId = 'START_PROCESS.ERROR.LOAD_PROCESS_DEFS';
            });
        };
        ActivitiStartProcessInstance.prototype.startProcess = function (outcome) {
            var _this = this;
            if (this.currentProcessDef.id && this.name) {
                this.resetErrorMessage();
                var formValues = this.startForm ? this.startForm.form.values : undefined;
                this.activitiProcess.startProcess(this.currentProcessDef.id, this.name, outcome, formValues).subscribe(function (res) {
                    _this.name = '';
                    _this.start.emit(res);
                }, function (err) {
                    _this.errorMessageId = 'START_PROCESS.ERROR.START';
                    _this.start.error(err);
                });
            }
        };
        ActivitiStartProcessInstance.prototype.onProcessDefChange = function (processDefinitionId) {
            var processDef = this.processDefinitions.find(function (processDefinition) {
                return processDefinition.id === processDefinitionId;
            });
            if (processDef) {
                this.currentProcessDef = JSON.parse(JSON.stringify(processDef));
            } else {
                this.resetSelectedProcessDefinition();
            }
        };
        ActivitiStartProcessInstance.prototype.hasStartForm = function () {
            return this.currentProcessDef && this.currentProcessDef.hasStartForm;
        };
        ActivitiStartProcessInstance.prototype.isStartFormMissingOrValid = function () {
            if (this.startForm) {
                return this.startForm.form && this.startForm.form.isValid;
            } else {
                return true;
            }
        };
        ActivitiStartProcessInstance.prototype.validateForm = function () {
            return this.currentProcessDef.id && this.name && this.isStartFormMissingOrValid();
        };
        ActivitiStartProcessInstance.prototype.resetSelectedProcessDefinition = function () {
            this.currentProcessDef = new process_definition_model_1.ProcessDefinitionRepresentation();
        };
        ActivitiStartProcessInstance.prototype.resetErrorMessage = function () {
            this.errorMessageId = '';
        };
        ActivitiStartProcessInstance.prototype.onOutcomeClick = function (outcome) {
            this.startProcess(outcome);
        };
        ActivitiStartProcessInstance.prototype.reset = function () {
            this.resetSelectedProcessDefinition();
            this.name = '';
            if (this.startForm) {
                this.startForm.data = {};
            }
            this.resetErrorMessage();
        };
        return ActivitiStartProcessInstance;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiStartProcessInstance.prototype, "appId", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiStartProcessInstance.prototype, "showStartButton", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiStartProcessInstance.prototype, "start", void 0);
    __decorate([core_1.ViewChild(ng2_activiti_form_1.ActivitiStartForm), __metadata("design:type", ng2_activiti_form_1.ActivitiStartForm)], ActivitiStartProcessInstance.prototype, "startForm", void 0);
    ActivitiStartProcessInstance = __decorate([core_1.Component({
        selector: 'activiti-start-process',
        moduleId: module.id,
        template: "<div *ngIf=\"processDefinitions.length > 0 || errorMessageId\" class=\"mdl-card mdl-shadow--2dp\">     <div class=\"mdl-card__supporting-text\">         <div class=\"mdl-card mdl-shadow--2dp error-message\" *ngIf=\"errorMessageId\">             <div class=\"mdl-card__supporting-text\">{{errorMessageId|translate}}</div>         </div>         <div class=\"mdl-textfield mdl-js-textfield alf-mdl-selectfield\">             <select name=\"processDefinition\" [(ngModel)]=\"currentProcessDef.id\" (ngModelChange)=\"onProcessDefChange($event)\" id=\"processDefinition\" required>                 <option value=\"null\">{{'START_PROCESS.DIALOG.TYPE_PLACEHOLDER'|translate}}</option>                 <option *ngFor=\"let processDef of processDefinitions\" [value]=\"processDef.id\">                     {{processDef.name}}                 </option>             </select>             <label class=\"mdl-textfield__label\" for=\"processDefinition\">{{'START_PROCESS.DIALOG.LABEL.TYPE'|translate}}</label>         </div>         <br>         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" alfresco-mdl-textfield>             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"name\" id=\"processName\" required />             <label class=\"mdl-textfield__label\" for=\"processName\">{{'START_PROCESS.DIALOG.LABEL.NAME'|translate}}</label>         </div>         <activiti-start-form *ngIf=\"hasStartForm()\" [processDefinitionId]=\"currentProcessDef.id\"                              (outcomeClick)=\"onOutcomeClick($event)\">         </activiti-start-form>     </div>     <div class=\"mdl-card__actions mdl-card--border\" *ngIf=\"!hasStartForm()\">         <button type=\"button\" [disabled]=\"!validateForm()\" (click)=\"startProcess()\" class=\"mdl-button\" data-automation-id=\"btn-start\">{{'START_PROCESS.DIALOG.ACTION.START'|translate}}</button>     </div> </div> <div *ngIf=\"processDefinitions.length === 0 && !errorMessageId\" class=\"mdl-card mdl-shadow--2dp\">     <div class=\"mdl-card__supporting-text\">         <div class=\"mdl-textfield mdl-js-textfield alf-mdl-selectfield\">             <span id=\"no-process-message\">{{'START_PROCESS.NO_PROCESS_DEFINITIONS' | translate}}</span>         </div>     </div> </div>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }  .material-icons:hover {     color: rgb(255, 152, 0); }  .mdl-textfield.alf-mdl-selectfield label {     color: rgba(0,0,0,.54);     font-size: 12px;     top: 4px; }  .mdl-card {     width: 100%;     min-height: initial;     margin-bottom: 20px; }  .mdl-card .mdl-card__supporting-text {     width: 100%;     padding: 20px;     box-sizing: inherit; }  .mdl-dialog {     width: -moz-fit-content;     width: -webkit-fit-content;     width: -ms-fit-content;     width: -o-fit-content;     width: fit-content; }"]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_process_service_1.ActivitiProcessService])], ActivitiStartProcessInstance);
    exports.ActivitiStartProcessInstance = ActivitiStartProcessInstance;
});
$__System.registerDynamic("17", [], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var FilterProcessRepresentationModel = function () {
        function FilterProcessRepresentationModel(obj) {
            this.appId = obj && obj.appId || null;
            this.name = obj && obj.name || null;
            this.recent = obj && obj.recent || false;
            this.icon = obj && obj.icon || null;
            this.filter = obj && obj.filter || null;
            this.index = obj && obj.index;
        }
        FilterProcessRepresentationModel.prototype.hasFilter = function () {
            return this.filter ? true : false;
        };
        return FilterProcessRepresentationModel;
    }();
    exports.FilterProcessRepresentationModel = FilterProcessRepresentationModel;
    var ProcessFilterParamRepresentationModel = function () {
        function ProcessFilterParamRepresentationModel(obj) {
            this.state = obj && obj.state || null;
            this.sort = obj && obj.sort || null;
        }
        return ProcessFilterParamRepresentationModel;
    }();
    exports.ProcessFilterParamRepresentationModel = ProcessFilterParamRepresentationModel;
});
$__System.registerDynamic("19", [], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var ProcessDefinitionRepresentation = function () {
        function ProcessDefinitionRepresentation(obj) {
            this.id = obj && obj.id || null;
            this.name = obj && obj.name || null;
            this.description = obj && obj.description || null;
            this.key = obj && obj.key || null;
            this.category = obj && obj.category || null;
            this.version = obj && obj.version || 0;
            this.deploymentId = obj && obj.deploymentId || null;
            this.tenantId = obj && obj.tenantId || null;
            this.metaDataValues = obj && obj.metaDataValues || [];
            this.hasStartForm = obj && obj.hasStartForm === true ? true : false;
        }
        return ProcessDefinitionRepresentation;
    }();
    exports.ProcessDefinitionRepresentation = ProcessDefinitionRepresentation;
});
$__System.registerDynamic("14", [], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var ProcessInstance = function () {
        function ProcessInstance(data) {
            this.businessKey = data && data.businessKey !== undefined ? data.businessKey : null;
            this.ended = data && data.ended !== undefined ? data.ended : null;
            this.graphicalNotationDefined = data && data.graphicalNotationDefined !== undefined ? data.graphicalNotationDefined : null;
            this.id = data && data.id !== undefined ? data.id : null;
            this.name = data && data.name !== undefined ? data.name : null;
            this.processDefinitionCategory = data && data.processDefinitionCategory !== undefined ? data.processDefinitionCategory : null;
            this.processDefinitionDeploymentId = data && data.processDefinitionDeploymentId !== undefined ? data.processDefinitionDeploymentId : null;
            this.processDefinitionDescription = data && data.processDefinitionDescription !== undefined ? data.processDefinitionDescription : null;
            this.processDefinitionId = data && data.processDefinitionId !== undefined ? data.processDefinitionId : null;
            this.processDefinitionKey = data && data.processDefinitionKey !== undefined ? data.processDefinitionKey : null;
            this.processDefinitionName = data && data.processDefinitionName !== undefined ? data.processDefinitionName : null;
            this.processDefinitionVersion = data && data.processDefinitionVersion !== undefined ? data.processDefinitionVersion : null;
            this.startFormDefined = data && data.startFormDefined !== undefined ? data.startFormDefined : null;
            this.started = data && data.started !== undefined ? data.started : null;
            this.startedBy = data && data.startedBy !== undefined ? data.startedBy : null;
            this.suspended = data && data.suspended !== undefined ? data.suspended : null;
            this.tenantId = data && data.tenantId !== undefined ? data.tenantId : null;
            this.variables = data && data.variables !== undefined ? data.variables : null;
        }
        return ProcessInstance;
    }();
    exports.ProcessInstance = ProcessInstance;
});
$__System.registerDynamic("12", [], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var ProcessFilterRequestRepresentation = function () {
        function ProcessFilterRequestRepresentation(obj) {
            this.processDefinitionId = obj && obj.processDefinitionId || null;
            this.processDefinitionKey = obj && obj.processDefinitionKey || null;
            this.appDefinitionId = obj && obj.appDefinitionId || null;
            this.state = obj && obj.state || null;
            this.sort = obj && obj.sort || null;
            this.page = obj && obj.page || 0;
            this.size = obj && obj.size || 25;
        }
        return ProcessFilterRequestRepresentation;
    }();
    exports.ProcessFilterRequestRepresentation = ProcessFilterRequestRepresentation;
});
$__System.registerDynamic("6", [], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var ProcessInstanceVariable = function () {
        function ProcessInstanceVariable(obj) {
            this.name = obj && obj.name !== undefined ? obj.name : null;
            this.scope = obj && obj.scope !== undefined ? obj.scope : null;
            this.value = obj && obj.value !== undefined ? obj.value : null;
        }
        return ProcessInstanceVariable;
    }();
    exports.ProcessInstanceVariable = ProcessInstanceVariable;
});
$__System.registerDynamic("16", ["17", "19", "14", "12", "6"], true, function ($__require, exports, module) {
  /*!
   * @license
   * Copyright 2016 Alfresco Software, Ltd.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  "use strict";

  var global = this || self,
      GLOBAL = global;
  function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  __export($__require("17"));
  __export($__require("19"));
  __export($__require("14"));
  __export($__require("12"));
  __export($__require("6"));
});
$__System.registerDynamic("1", ["3", "4", "5", "18", "15", "a", "7", "b", "c", "f", "10", "16"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var ng2_alfresco_datatable_1 = $__require("5");
    var ng2_activiti_form_1 = $__require("18");
    var ng2_activiti_tasklist_1 = $__require("15");
    var index_1 = $__require("a");
    var activiti_process_service_1 = $__require("7");
    __export($__require("b"));
    __export($__require("c"));
    __export($__require("f"));
    __export($__require("10"));
    __export($__require("16"));
    __export($__require("7"));
    exports.ACTIVITI_PROCESSLIST_DIRECTIVES = [index_1.ActivitiProcessInstanceListComponent, index_1.ActivitiProcessFilters, index_1.ActivitiProcessInstanceDetails, index_1.ActivitiProcessInstanceHeader, index_1.ActivitiProcessInstanceTasks, index_1.ActivitiProcessInstanceVariables, index_1.ActivitiProcessComments, index_1.ActivitiStartProcessInstance];
    exports.ACTIVITI_PROCESSLIST_PROVIDERS = [activiti_process_service_1.ActivitiProcessService];
    var ActivitiProcessListModule = ActivitiProcessListModule_1 = function () {
        function ActivitiProcessListModule() {}
        ActivitiProcessListModule.forRoot = function () {
            return {
                ngModule: ActivitiProcessListModule_1,
                providers: exports.ACTIVITI_PROCESSLIST_PROVIDERS.slice()
            };
        };
        return ActivitiProcessListModule;
    }();
    ActivitiProcessListModule = ActivitiProcessListModule_1 = __decorate([core_1.NgModule({
        imports: [ng2_alfresco_core_1.CoreModule, ng2_alfresco_datatable_1.DataTableModule, ng2_activiti_form_1.ActivitiFormModule, ng2_activiti_tasklist_1.ActivitiTaskListModule],
        declarations: exports.ACTIVITI_PROCESSLIST_DIRECTIVES.slice(),
        providers: exports.ACTIVITI_PROCESSLIST_PROVIDERS.slice(),
        exports: exports.ACTIVITI_PROCESSLIST_DIRECTIVES.slice()
    })], ActivitiProcessListModule);
    exports.ActivitiProcessListModule = ActivitiProcessListModule;
    var ActivitiProcessListModule_1;
    
});
})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define(["@angular/common","@angular/core","ng2-activiti-form","ng2-activiti-tasklist","ng2-alfresco-core","ng2-alfresco-datatable","rxjs/Observable","rxjs/Rx"], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory(require("@angular/common"), require("@angular/core"), require("ng2-activiti-form"), require("ng2-activiti-tasklist"), require("ng2-alfresco-core"), require("ng2-alfresco-datatable"), require("rxjs/Observable"), require("rxjs/Rx"));
  else
    throw new Error("Module must be loaded as AMD or CommonJS");
});
//# sourceMappingURL=ng2-activiti-processlist.js.map