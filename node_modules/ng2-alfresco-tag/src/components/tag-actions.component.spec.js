/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var tag_actions_component_1 = require("../components/tag-actions.component");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var tag_service_1 = require("../services/tag.service");
describe('Test ng2-alfresco-tag Tag actions list', function () {
    var component;
    var fixture;
    var debug;
    var element;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            declarations: [
                tag_actions_component_1.TagActionsComponent
            ],
            providers: [
                tag_service_1.TagService
            ]
        }).compileComponents();
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(tag_actions_component_1.TagActionsComponent);
        debug = fixture.debugElement;
        element = fixture.nativeElement;
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    var dataTag = {
        'list': {
            'pagination': {
                'count': 3,
                'hasMoreItems': false,
                'totalItems': 3,
                'skipCount': 0,
                'maxItems': 100
            },
            'entries': [{
                    'entry': { 'tag': 'test1', 'id': '0ee933fa-57fc-4587-8a77-b787e814f1d2' }
                }, { 'entry': { 'tag': 'test2', 'id': 'fcb92659-1f10-41b4-9b17-851b72a3b597' } }, {
                    'entry': { 'tag': 'test3', 'id': 'fb4213c0-729d-466c-9a6c-ee2e937273bf' }
                }]
        }
    };
    describe('Rendering tests', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });
        afterEach(function () {
            jasmine.Ajax.uninstall();
        });
        it('Tag list relative a single node should be rendered', function (done) {
            component.nodeId = 'fake-node-id';
            component.resultsEmitter.subscribe(function () {
                fixture.detectChanges();
                expect(element.querySelector('#tag_name_0').innerHTML).toBe('test1');
                expect(element.querySelector('#tag_name_1').innerHTML).toBe('test2');
                expect(element.querySelector('#tag_name_2').innerHTML).toBe('test3');
                expect(element.querySelector('#tag_delete_0')).not.toBe(null);
                expect(element.querySelector('#tag_delete_1')).not.toBe(null);
                expect(element.querySelector('#tag_delete_2')).not.toBe(null);
                done();
            });
            component.ngOnChanges();
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: dataTag
            });
        });
        it('Tag list click on delete button should delete the tag', function (done) {
            component.nodeId = 'fake-node-id';
            component.resultsEmitter.subscribe(function () {
                fixture.detectChanges();
                var deleteButton = element.querySelector('#tag_delete_0');
                deleteButton.click();
                expect(jasmine.Ajax.requests.at(1).url)
                    .toBe('http://localhost:8080/alfresco/api/-default-/public/alfresco/versions/1/nodes/fake-node-id/tags/0ee933fa-57fc-4587-8a77-b787e814f1d2');
                expect(jasmine.Ajax.requests.at(1).method).toBe('DELETE');
                jasmine.Ajax.requests.mostRecent().respondWith({
                    status: 200,
                    contentType: 'json'
                });
                done();
            });
            component.ngOnChanges();
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: dataTag
            });
        });
        it('Add tag', function (done) {
            component.nodeId = 'fake-node-id';
            component.newTagName = 'fake-tag-name';
            fixture.detectChanges();
            component.addEmitter.subscribe(function () {
                done();
            });
            var addButton = element.querySelector('#add-tag');
            addButton.click();
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200
            });
        });
    });
});
//# sourceMappingURL=tag-actions.component.spec.js.map