/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var tag_service_1 = require("../services/tag.service");
var TagNodeList = (function () {
    function TagNodeList(tagService) {
        this.tagService = tagService;
        this.resultsEmitter = new core_1.EventEmitter();
    }
    TagNodeList.prototype.ngOnChanges = function (changes) {
        return this.refreshTag();
    };
    TagNodeList.prototype.refreshTag = function () {
        var _this = this;
        this.tagService.getTagsByNodeId(this.nodeId).subscribe(function (data) {
            _this.tagsEntries = data.list.entries;
            _this.resultsEmitter.emit(_this.tagsEntries);
        });
    };
    TagNodeList.prototype.removeTag = function (tag) {
        var _this = this;
        this.tagService.removeTag(this.nodeId, tag).subscribe(function () {
            _this.refreshTag();
        });
    };
    return TagNodeList;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TagNodeList.prototype, "nodeId", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], TagNodeList.prototype, "resultsEmitter", void 0);
TagNodeList = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alfresco-tag-node-list',
        template: "<div class=\"tag-list-container\">     <ul class=\"tags\">         <li *ngFor=\"let currentEntry of tagsEntries; let idx = index\">             <span class=\"mdl-chip mdl-chip--deletable\">                  <span id=\"tag_name_{{idx}}\" class=\"mdl-chip__text\">{{currentEntry.entry.tag}}</span>                       <button id=\"tag_delete_{{idx}}\" type=\"button\" class=\"mdl-chip__action\"                               (click)=\"removeTag(currentEntry.entry.id)\">                           <i class=\"material-icons\">cancel</i>                       </button>             </span>         </li>     </ul> </div>",
        styles: [".tags {     padding-left: 7px;     padding-right: 7px; }  .tags li {     display: inline; }"]
    }),
    __metadata("design:paramtypes", [tag_service_1.TagService])
], TagNodeList);
exports.TagNodeList = TagNodeList;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdGFnLW5vZGUtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOzs7Ozs7Ozs7OztBQUVILHNDQUF1RTtBQUN2RSx1REFBcUQ7QUFlckQsSUFBYSxXQUFXO0lBY3BCLHFCQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBTjFDLG1CQUFjLEdBQUcsSUFBSSxtQkFBWSxFQUFFLENBQUM7SUFPcEMsQ0FBQztJQUVELGlDQUFXLEdBQVgsVUFBWSxPQUFPO1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsZ0NBQVUsR0FBVjtRQUFBLGlCQUtDO1FBSkcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFDLElBQUk7WUFDeEQsS0FBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNyQyxLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsK0JBQVMsR0FBVCxVQUFVLEdBQVc7UUFBckIsaUJBSUM7UUFIRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUNsRCxLQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQWpDQSxBQWlDQyxJQUFBO0FBOUJHO0lBREMsWUFBSyxFQUFFOzsyQ0FDTztBQUtmO0lBREMsYUFBTSxFQUFFOzttREFDMkI7QUFSM0IsV0FBVztJQU52QixnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFBRSx3QkFBd0I7UUFDbEMsUUFBUSxFQUFFLDRtQkFBNG1CO1FBQ3RuQixNQUFNLEVBQUUsQ0FBQyw2RkFBNkYsQ0FBQztLQUMxRyxDQUFDO3FDQWVrQyx3QkFBVTtHQWRqQyxXQUFXLENBaUN2QjtBQWpDWSxrQ0FBVyIsImZpbGUiOiJjb21wb25lbnRzL3RhZy1ub2RlLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhZ1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy90YWcuc2VydmljZSc7XG5cbi8qKlxuICpcbiAqIFRoaXMgY29tcG9uZW50LCBTaG93Tm9kZVRhZyBhIGxpc3Qgb2YgdGhlIHRhZyBvbiByZWxhdGl2ZSBhIG5vZGVcbiAqXG4gKiBAcmV0dXJucyB7VGFnTm9kZUxpc3R9IC5cbiAqL1xuXG5AQ29tcG9uZW50KHtcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHNlbGVjdG9yOiAnYWxmcmVzY28tdGFnLW5vZGUtbGlzdCcsXG4gICAgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz1cXFwidGFnLWxpc3QtY29udGFpbmVyXFxcIj4gICAgIDx1bCBjbGFzcz1cXFwidGFnc1xcXCI+ICAgICAgICAgPGxpICpuZ0Zvcj1cXFwibGV0IGN1cnJlbnRFbnRyeSBvZiB0YWdzRW50cmllczsgbGV0IGlkeCA9IGluZGV4XFxcIj4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm1kbC1jaGlwIG1kbC1jaGlwLS1kZWxldGFibGVcXFwiPiAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPVxcXCJ0YWdfbmFtZV97e2lkeH19XFxcIiBjbGFzcz1cXFwibWRsLWNoaXBfX3RleHRcXFwiPnt7Y3VycmVudEVudHJ5LmVudHJ5LnRhZ319PC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cXFwidGFnX2RlbGV0ZV97e2lkeH19XFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJtZGwtY2hpcF9fYWN0aW9uXFxcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVxcXCJyZW1vdmVUYWcoY3VycmVudEVudHJ5LmVudHJ5LmlkKVxcXCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcIm1hdGVyaWFsLWljb25zXFxcIj5jYW5jZWw8L2k+ICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4gICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgIDwvbGk+ICAgICA8L3VsPiA8L2Rpdj5cIixcbiAgICBzdHlsZXM6IFtcIi50YWdzIHsgICAgIHBhZGRpbmctbGVmdDogN3B4OyAgICAgcGFkZGluZy1yaWdodDogN3B4OyB9ICAudGFncyBsaSB7ICAgICBkaXNwbGF5OiBpbmxpbmU7IH1cIl1cbn0pXG5leHBvcnQgY2xhc3MgVGFnTm9kZUxpc3Qge1xuXG4gICAgQElucHV0KClcbiAgICBub2RlSWQ6IHN0cmluZztcblxuICAgIHRhZ3NFbnRyaWVzOiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZXN1bHRzRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIGF1dGhTZXJ2aWNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0YWdTZXJ2aWNlOiBUYWdTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoVGFnKCk7XG4gICAgfVxuXG4gICAgcmVmcmVzaFRhZygpIHtcbiAgICAgICAgdGhpcy50YWdTZXJ2aWNlLmdldFRhZ3NCeU5vZGVJZCh0aGlzLm5vZGVJZCkuc3Vic2NyaWJlKChkYXRhKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRhZ3NFbnRyaWVzID0gZGF0YS5saXN0LmVudHJpZXM7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdHNFbWl0dGVyLmVtaXQodGhpcy50YWdzRW50cmllcyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbW92ZVRhZyh0YWc6IHN0cmluZykge1xuICAgICAgICB0aGlzLnRhZ1NlcnZpY2UucmVtb3ZlVGFnKHRoaXMubm9kZUlkLCB0YWcpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hUYWcoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19
