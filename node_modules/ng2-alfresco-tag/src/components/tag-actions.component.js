/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var tag_service_1 = require("./../services/tag.service");
var TagActionsComponent = (function () {
    function TagActionsComponent(tagService) {
        this.tagService = tagService;
        this.isContextMenu = false;
        this.addEmitter = new core_1.EventEmitter();
        this.resultsEmitter = new core_1.EventEmitter();
    }
    TagActionsComponent.prototype.ngOnChanges = function (changes) {
        return this.refreshTag();
    };
    TagActionsComponent.prototype.refreshTag = function () {
        var _this = this;
        this.tagService.getTagsByNodeId(this.nodeId).subscribe(function (data) {
            _this.tagsEntries = data.list.entries;
            _this.resultsEmitter.emit(_this.tagsEntries);
        });
    };
    TagActionsComponent.prototype.addTag = function () {
        var _this = this;
        this.tagService.addTag(this.nodeId, this.newTagName).subscribe(function (res) {
            _this.refreshTag();
            _this.addEmitter.emit(_this.nodeId);
        });
    };
    TagActionsComponent.prototype.removeTag = function (tag) {
        var _this = this;
        this.tagService.removeTag(this.nodeId, tag).subscribe(function () {
            _this.refreshTag();
        });
    };
    return TagActionsComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TagActionsComponent.prototype, "nodeId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], TagActionsComponent.prototype, "isContextMenu", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], TagActionsComponent.prototype, "addEmitter", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], TagActionsComponent.prototype, "resultsEmitter", void 0);
TagActionsComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alfresco-tag-node-actions-list',
        template: "<!--isContextMenu--> <div *ngIf=\"isContextMenu\">     <li class=\"mdl-menu__item\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">             <span id=\"tag_name_{{idx}}\" class=\"mdl-list__item-primary-content\">                 {{currentEntry.entry.tag}}             </span>         <div id=\"tag_delete_{{idx}}\" class=\"mdl-list__item-secondary-action\" (click)=\"removeTag(currentEntry.entry.id)\">             <i class=\"material-icons\">delete</i>         </div>     </li>     <li>         <div class=\"mdl-textfield mdl-js-textfield tag-container-input\">             <input class=\"mdl-textfield__input tag-input\" type=\"text\" id=\"new-tag-text\" [(ngModel)]=\"newTagName\"/>             <label class=\"mdl-textfield__label tag-label\" for=\"new-tag-text\">New Tag...</label>         </div>         <button id=\"add-tag\" class=\"mdl-button mdl-js-button mdl-button--raised button\" (click)=\"addTag()\">             Add tag         </button>     </li> </div>  <!--not ContextMenu--> <ul *ngIf=\"!isContextMenu\" class=\"tag-list-control mdl-list\">     <li class=\"mdl-list__item tag-element\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">         <span id=\"tag_name_{{idx}}\" class=\"mdl-list__item-primary-content\">{{currentEntry.entry.tag}}</span>         <div id=\"tag_delete_{{idx}}\" class=\"mdl-list__item-secondary-action\" (click)=\"removeTag(currentEntry.entry.id)\">             <i class=\"material-icons\">delete</i>         </div>     </li>     <li>         <div class=\"mdl-textfield mdl-js-textfield tag-container-input\">             <input class=\"mdl-textfield__input tag-input\" type=\"text\" id=\"new-tag-text\" [(ngModel)]=\"newTagName\"/>             <label class=\"mdl-textfield__label tag-label\" for=\"new-tag-text\">New Tag...</label>         </div>         <button id=\"add-tag\" class=\"mdl-button mdl-js-button mdl-button--raised button\" (click)=\"addTag()\">             Add tag         </button>     </li> </ul>",
        styles: [".tag-container {     width: 300px; }  .tag-element {     padding: 0px 0px 0px 9px!important; }  .tag-input {     float: left;     margin-left: 11px!important; }  .tag-label {     left: 10px!important;     top: 12px!important; }  .tag-container-input{     padding-top: 11px;     width: 190px;     float: left;     margin-right: 15px; }  .tag-button{     float:left }"]
    }),
    __metadata("design:paramtypes", [tag_service_1.TagService])
], TagActionsComponent);
exports.TagActionsComponent = TagActionsComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
