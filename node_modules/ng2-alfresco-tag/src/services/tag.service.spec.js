/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var tag_service_1 = require("../services/tag.service");
describe('Tag service', function () {
    var service, injector;
    beforeEach(function () {
        injector = core_1.ReflectiveInjector.resolveAndCreate([
            ng2_alfresco_core_1.AlfrescoSettingsService,
            ng2_alfresco_core_1.AlfrescoApiService,
            ng2_alfresco_core_1.AlfrescoAuthenticationService,
            tag_service_1.TagService,
            ng2_alfresco_core_1.StorageService,
            ng2_alfresco_core_1.LogService
        ]);
    });
    beforeEach(function () {
        service = injector.get(tag_service_1.TagService);
    });
    beforeEach(function () {
        jasmine.Ajax.install();
    });
    afterEach(function () {
        jasmine.Ajax.uninstall();
    });
    describe('Content tests', function () {
        it('removeTag should perform a call against the server', function (done) {
            service.removeTag('fake-node-id', 'fake-tag').subscribe(function () {
                expect(jasmine.Ajax.requests.mostRecent().method).toBe('DELETE');
                expect(jasmine.Ajax.requests.mostRecent().url)
                    .toBe('http://localhost:8080/alfresco/api/-default-/public/alfresco/versions/1/nodes/fake-node-id/tags/fake-tag');
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200
            });
        });
        it('addTag should perform a call against the server', function (done) {
            service.addTag('fake-node-id', 'fake-tag').subscribe(function () {
                expect(jasmine.Ajax.requests.mostRecent().method).toBe('POST');
                expect(jasmine.Ajax.requests.mostRecent().url)
                    .toBe('http://localhost:8080/alfresco/api/-default-/public/alfresco/versions/1/nodes/fake-node-id/tags');
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200
            });
        });
        it('getAllTheTags should perform a call against the server', function (done) {
            service.getAllTheTags().subscribe(function () {
                expect(jasmine.Ajax.requests.mostRecent().method).toBe('GET');
                expect(jasmine.Ajax.requests.mostRecent().url)
                    .toBe('http://localhost:8080/alfresco/api/-default-/public/alfresco/versions/1/tags');
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200
            });
        });
        it('getTagsByNodeId should perform a call against the server', function (done) {
            service.getTagsByNodeId('fake-node-id').subscribe(function () {
                expect(jasmine.Ajax.requests.mostRecent().method).toBe('GET');
                expect(jasmine.Ajax.requests.mostRecent().url)
                    .toBe('http://localhost:8080/alfresco/api/-default-/public/alfresco/versions/1/nodes/fake-node-id/tags');
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200
            });
        });
        it('getTagsByNodeId catch errors call', function (done) {
            service.getTagsByNodeId('fake-node-id').subscribe(function () {
            }, function () {
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 403
            });
        });
    });
});
//# sourceMappingURL=tag.service.spec.js.map