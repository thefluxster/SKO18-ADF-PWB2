/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var pagination_component_1 = require("../pagination/pagination.component");
var pagination_data_1 = require("../../models/pagination.data");
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
describe('PaginationComponent', function () {
    var injector;
    var paginationComponent;
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            providers: [
                pagination_component_1.PaginationComponent
            ]
        });
        injector = testing_1.getTestBed();
        paginationComponent = injector.get(pagination_component_1.PaginationComponent);
        paginationComponent.pagination = new pagination_data_1.PaginationData(0, 0, 0, 20, true);
    });
    it('should create Pagination object on init if no object pagination is passed', function () {
        paginationComponent.pagination = null;
        paginationComponent.ngOnInit();
        expect(paginationComponent.pagination).not.toBe(null);
    });
    it('is defined', function () {
        expect(paginationComponent).toBeDefined();
    });
    it('page size', function () {
        expect(paginationComponent.pagination.maxItems).toBe(20);
    });
    it('set page size', function () {
        paginationComponent.pagination.maxItems = 100;
        expect(paginationComponent.pagination.maxItems).toBe(100);
    });
    it('prevPageAvail dafault false', function () {
        expect(paginationComponent.prevPageAvail()).toBe(false);
    });
    it('nextPageAvail default true', function () {
        expect(paginationComponent.nextPageAvail()).toBe(true);
    });
    it('showNextPage', function () {
        expect(paginationComponent.pagination.skipCount).toBe(0);
        paginationComponent.showNextPage();
        expect(paginationComponent.pagination.skipCount).toBe(20);
    });
    it('showPrevPage', function () {
        paginationComponent.pagination.skipCount = 100;
        paginationComponent.showPrevPage();
        expect(paginationComponent.pagination.skipCount).toBe(80);
    });
    it('should update the summary on nextpage click', function () {
        spyOn(paginationComponent, 'updateSummary');
        paginationComponent.showNextPage();
        expect(paginationComponent.updateSummary).toHaveBeenCalled();
    });
    it('should update the summary on prevpage click', function () {
        spyOn(paginationComponent, 'updateSummary');
        paginationComponent.showPrevPage();
        expect(paginationComponent.updateSummary).toHaveBeenCalled();
    });
    it('should update the summary on chage page size click', function () {
        spyOn(paginationComponent, 'updateSummary');
        paginationComponent.setPageSize(100);
        expect(paginationComponent.updateSummary).toHaveBeenCalled();
    });
    it('should update the summary on input pagination parameter change', function () {
        spyOn(paginationComponent, 'updateSummary');
        paginationComponent.ngOnChanges({ pagination: new core_1.SimpleChange(null, new pagination_data_1.PaginationData(0, 0, 0, 20, true)) });
        expect(paginationComponent.updateSummary).toHaveBeenCalled();
    });
});
//# sourceMappingURL=pagination.component.spec.js.map