/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var pagination_data_1 = require("../../models/pagination.data");
var PaginationComponent = PaginationComponent_1 = (function () {
    function PaginationComponent() {
        this.summary = '';
        this.supportedPageSizes = [5, 10, 20, 50, 100];
        this.maxItems = PaginationComponent_1.DEFAULT_PAGE_SIZE;
        this.changePageSize = new core_1.EventEmitter();
        this.nextPage = new core_1.EventEmitter();
        this.prevPage = new core_1.EventEmitter();
    }
    PaginationComponent.prototype.ngOnInit = function () {
        if (!this.pagination) {
            this.pagination = new pagination_data_1.PaginationData(0, 0, 0, this.maxItems, true);
        }
    };
    PaginationComponent.prototype.ngOnChanges = function (changes) {
        if (changes['pagination']) {
            if (changes['pagination'].currentValue) {
                this.pagination = changes['pagination'].currentValue;
                this.updateSummary();
            }
        }
    };
    PaginationComponent.prototype.setPageSize = function (value) {
        this.pagination.maxItems = value;
        this.updateSummary();
        this.changePageSize.emit(this.pagination);
    };
    PaginationComponent.prototype.nextPageAvail = function () {
        return this.pagination.hasMoreItems;
    };
    PaginationComponent.prototype.prevPageAvail = function () {
        return this.pagination.skipCount > 0;
    };
    PaginationComponent.prototype.showNextPage = function () {
        this.pagination.skipCount += this.pagination.maxItems;
        this.updateSummary();
        this.nextPage.emit(this.pagination);
    };
    PaginationComponent.prototype.showPrevPage = function () {
        this.pagination.skipCount -= this.pagination.maxItems;
        this.updateSummary();
        this.prevPage.emit(this.pagination);
    };
    PaginationComponent.prototype.updateSummary = function () {
        var from = this.pagination.skipCount;
        if (from === 0) {
            from = 1;
        }
        var to = this.pagination.skipCount + this.pagination.count;
        var of = this.pagination.totalItems;
        this.summary = from + "-" + to + " of " + of;
    };
    return PaginationComponent;
}());
PaginationComponent.DEFAULT_PAGE_SIZE = 20;
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], PaginationComponent.prototype, "supportedPageSizes", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], PaginationComponent.prototype, "maxItems", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], PaginationComponent.prototype, "pagination", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], PaginationComponent.prototype, "changePageSize", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], PaginationComponent.prototype, "nextPage", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], PaginationComponent.prototype, "prevPage", void 0);
PaginationComponent = PaginationComponent_1 = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alfresco-pagination',
        template: "<div class=\"mdl-paging\">     <span class=\"mdl-paging__per-page\">         <span class=\"mdl-paging__per-page-label\">Rows per page:</span>         <span class=\"mdl-paging__per-page-value\" [attr.data-automation-id]=\"'rows_per_page_' + pageSize\">{{pagination.maxItems}}</span>         <button alfresco-mdl-button id=\"pageSizePicker\" class=\"mdl-button--icon mdl-paging__per-page-dropdown\">             <i class=\"material-icons\">arrow_drop_down</i>         </button>         <ul alfresco-mdl-menu for=\"pageSizePicker\" class=\"mdl-menu--bottom-right\">             <li *ngFor=\"let size of supportedPageSizes\"                 tabindex=\"-1\" [attr.data-value]=\"size\" class=\"mdl-menu__item\"                 (click)=\"setPageSize(size)\">                 <span>{{size}}</span>             </li>         </ul>     </span>     <span class=\"mdl-paging__count\">{{summary}}</span>     <button (click)=\"showPrevPage()\"             [disabled]=\"!prevPageAvail()\"             alfresco-mdl-button class=\"mdl-button--icon mdl-paging__prev\" [attr.data-automation-id]=\"prev_page\">         <i class=\"material-icons\">keyboard_arrow_left</i>     </button>     <button (click)=\"showNextPage()\"             [disabled]=\"!nextPageAvail()\"             alfresco-mdl-button class=\"mdl-button--icon mdl-paging__next\" [attr.data-automation-id]=\"next_page\">         <i class=\"material-icons\">keyboard_arrow_right</i>     </button> </div>",
        styles: [".mdl-paging {     color: rgba(0, 0, 0, 0.54);     display: -webkit-flex;     display: -ms-flexbox;     display: flex;     -webkit-justify-content: flex-end;     -ms-flex-pack: end;     justify-content: flex-end;     -webkit-align-items: center;     -ms-flex-align: center;     align-items: center;     height: 56px;     -webkit-flex-flow: row wrap;     -ms-flex-flow: row wrap;     flex-flow: row wrap; }  .mdl-paging > * {     -webkit-flex: none;     -ms-flex: none;     flex: none; }  .mdl-list + .mdl-paging {     margin: 0; }  .mdl-paging__per-page {     position: relative; }  .mdl-paging__per-page-label {     margin-right: 40px; }  .mdl-paging__per-page-value {     position: absolute;     right: 36px;     top: 6px; }  .mdl-paging__per-page + .mdl-paging__count {     margin-left: 24px; }  .mdl-paging .mdl-menu {     min-width: 64px; }  .mdl-paging__prev:last-child {     margin-right: 44px; }  .mdl-paging__count + .mdl-paging__prev {     margin-left: 24px; }  .mdl-paging__prev + .mdl-paging__next {     margin-left: 12px; }  .mdl-paging__count + .mdl-paging__next {     margin-left: 68px; }"]
    }),
    __metadata("design:paramtypes", [])
], PaginationComponent);
exports.PaginationComponent = PaginationComponent;
var PaginationComponent_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
