/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var index_1 = require("../../data/index");
var DataTableComponent = (function () {
    function DataTableComponent() {
        this.multiselect = false;
        this.actions = false;
        this.rowClick = new core_1.EventEmitter();
        this.rowDblClick = new core_1.EventEmitter();
        this.showRowContextMenu = new core_1.EventEmitter();
        this.showRowActionsMenu = new core_1.EventEmitter();
        this.executeRowAction = new core_1.EventEmitter();
        this.isSelectAllChecked = false;
    }
    Object.defineProperty(DataTableComponent.prototype, "selectedRow", {
        get: function () {
            return this.data.selectedRow;
        },
        enumerable: true,
        configurable: true
    });
    DataTableComponent.prototype.ngOnInit = function () {
        if (!this.data) {
            this.data = new index_1.ObjectDataTableAdapter([], []);
        }
        if (componentHandler) {
            componentHandler.upgradeAllRegistered();
        }
    };
    DataTableComponent.prototype.onRowClick = function (row, e) {
        if (e) {
            e.preventDefault();
        }
        if (this.data) {
            this.data.selectedRow = row;
        }
        this.rowClick.emit({
            value: row,
            event: e
        });
    };
    DataTableComponent.prototype.onRowDblClick = function (row, e) {
        if (e) {
            e.preventDefault();
        }
        this.rowDblClick.emit({
            value: row,
            event: e
        });
    };
    DataTableComponent.prototype.onColumnHeaderClick = function (column) {
        if (column && column.sortable) {
            var current = this.data.getSorting();
            var newDirection = 'asc';
            if (current && column.key === current.key) {
                newDirection = current.direction === 'asc' ? 'desc' : 'asc';
            }
            this.data.setSorting(new index_1.DataSorting(column.key, newDirection));
        }
    };
    DataTableComponent.prototype.onSelectAllClick = function (e) {
        if (e) {
            e.preventDefault();
        }
        this.isSelectAllChecked = !this.isSelectAllChecked;
        if (this.multiselect) {
            var rows = this.data.getRows();
            if (rows && rows.length > 0) {
                for (var i = 0; i < rows.length; i++) {
                    rows[i].isSelected = this.isSelectAllChecked;
                }
            }
        }
    };
    DataTableComponent.prototype.onImageLoadingError = function (event) {
        if (event && this.fallbackThumbnail) {
            var element = event.target;
            element.src = this.fallbackThumbnail;
        }
    };
    DataTableComponent.prototype.isIconValue = function (row, col) {
        if (row && col) {
            var value = row.getValue(col.key);
            return value && value.startsWith('material-icons://');
        }
        return false;
    };
    DataTableComponent.prototype.asIconValue = function (row, col) {
        if (this.isIconValue(row, col)) {
            var value = row.getValue(col.key) || '';
            return value.replace('material-icons://', '');
        }
        return null;
    };
    DataTableComponent.prototype.iconAltTextKey = function (value) {
        return 'ICONS.' + value.substring(value.lastIndexOf('/') + 1).replace(/\.[a-z]+/, '');
    };
    DataTableComponent.prototype.isColumnSorted = function (col, direction) {
        if (col && direction) {
            var sorting = this.data.getSorting();
            return sorting && sorting.key === col.key && sorting.direction === direction;
        }
        return false;
    };
    DataTableComponent.prototype.getContextMenuActions = function (row, col) {
        var args = { row: row, col: col, actions: [] };
        this.showRowContextMenu.emit({ args: args });
        return args.actions;
    };
    DataTableComponent.prototype.getRowActions = function (row, col) {
        var args = { row: row, col: col, actions: [] };
        this.showRowActionsMenu.emit({ args: args });
        return args.actions;
    };
    DataTableComponent.prototype.onExecuteRowAction = function (row, action) {
        var args = { row: row, action: action };
        this.executeRowAction.emit({ args: args });
    };
    return DataTableComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DataTableComponent.prototype, "data", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTableComponent.prototype, "multiselect", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DataTableComponent.prototype, "actions", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DataTableComponent.prototype, "fallbackThumbnail", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTableComponent.prototype, "rowClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTableComponent.prototype, "rowDblClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTableComponent.prototype, "showRowContextMenu", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTableComponent.prototype, "showRowActionsMenu", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DataTableComponent.prototype, "executeRowAction", void 0);
DataTableComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alfresco-datatable',
        styles: [":host .full-width { width: 100%; }  :host .icon-cell {     font-size: 24px;     cursor: default; }  :host .image-cell {     width: 24px;     height: 24px;     cursor: default; }  :host .data-cell {     cursor: default; } :host .cell-value {}  :host .column-header {     cursor: pointer;     user-select: none;     -webkit-user-select: none;   /* Chrome/Safari/Opera */     -moz-user-select: none;      /* Firefox */     -ms-user-select: none;       /* IE/Edge */     -webkit-touch-callout: none; /* iOS Safari */ }  /* Empty folder */  :host .no-content-container {     padding: 0 !important; }  :host .no-content-container > img {     width: 100%; }  :host .ellipsis-cell > div {     position: relative;     overflow: hidden;     /*height: 1em;*/ }   /* visible content */ :host .ellipsis-cell > div > span {     display: block;     position: absolute;     max-width: 100%;     white-space: nowrap;     overflow: hidden;     text-overflow: ellipsis;     line-height: 1em;\t\t/* for vertical align of text */ }   /* cell stretching content */ :host .ellipsis-cell > div:after {     content: attr(title);     overflow: hidden;     height: 0;     display: block; }   /* Utils */  :host .non-selectable {     user-select: none;     -webkit-user-select: none;   /* Chrome/Safari/Opera */     -moz-user-select: none;      /* Firefox */     -ms-user-select: none;       /* IE/Edge */     -webkit-touch-callout: none; /* iOS Safari */ }  :host .sr-only {     position: absolute;     width: 1px;     height: 1px;     padding: 0;     margin: -1px;     overflow: hidden;     clip: rect(0,0,0,0);     border: 0; }  .hidden {     display: none; }  /* small desktop */ @media all and (max-width: 1200px) {}  /* tablet */ @media all and (max-width: 1024px) {}  /* mobile phone */ @media all and (max-width: 768px) {     .desktop-only {         display: none;     } }  @media (max-device-width: 768px){     .desktop-only {         display: none;     } }  .mdl-data-table-fix-firefox {     border-collapse: unset;     border-spacing: 0; }  .alfresco-datatable__row:focus {     outline-offset: -4px; }  .alfresco-datatable__row--selected {     color: rgb(68,138,255); }"],
        template: "<table     *ngIf=\"data\"     class=\"mdl-data-table mdl-js-data-table full-width mdl-data-table-fix-firefox\">     <thead>     <tr>         <!-- Columns -->         <th *ngIf=\"multiselect\">             <label                 class=\"mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect mdl-data-table__select\"                 [class.is-checked]=\"isSelectAllChecked\"                 for=\"table-header\"                 (click)=\"onSelectAllClick($event)\">                 <input type=\"checkbox\" id=\"table-header\" class=\"mdl-checkbox__input\" />             </label>         </th>         <th class=\"mdl-data-table__cell--non-numeric non-selectable {{col.cssClass}}\"             *ngFor=\"let col of data.getColumns()\"             [attr.data-automation-id]=\"'auto_id_' + col.key\"             [class.column-header]=\"col.title\"             [class.mdl-data-table__header--sorted-ascending]=\"isColumnSorted(col, 'asc')\"             [class.mdl-data-table__header--sorted-descending]=\"isColumnSorted(col, 'desc')\"             (click)=\"onColumnHeaderClick(col)\">             <span *ngIf=\"col.srTitle\" class=\"sr-only\">{{col.srTitle}}</span>             <span *ngIf=\"col.title\">{{col.title}}</span>         </th>         <!-- Actions -->         <th *ngIf=\"actions\">             <span class=\"sr-only\">Actions</span>         </th>     </tr>     </thead>     <tbody>      <tr *ngFor=\"let row of data.getRows(); let idx = index\" tabindex=\"0\"         class=\"alfresco-datatable__row\"         [class.alfresco-datatable__row--selected]=\"selectedRow === row\">         <td *ngIf=\"multiselect\">             <label                 class=\"mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect mdl-data-table__select\"                 [attr.for]=\"'row[' + idx + ']'\"                 [class.is-checked]=\"row.isSelected\">                 <input type=\"checkbox\" [attr.id]=\"'row[' + idx + ']'\" class=\"mdl-checkbox__input\" [(ngModel)]=\"row.isSelected\" />             </label>         </td>         <td *ngFor=\"let col of data.getColumns()\" [ngSwitch]=\"col.type\"             class=\"mdl-data-table__cell--non-numeric non-selectable data-cell {{col.cssClass}}\"             (click)=\"onRowClick(row, $event)\"             (dblclick)=\"onRowDblClick(row, $event)\"             [context-menu]=\"getContextMenuActions(row, col)\">             <div *ngIf=\"!col.template\">                 <div *ngSwitchCase=\"'image'\" class=\"cell-value\">                     <i *ngIf=\"isIconValue(row, col)\" class=\"material-icons icon-cell\">{{asIconValue(row, col)}}</i>                     <img *ngIf=\"!isIconValue(row, col)\"                         class=\"image-cell\"                         alt=\"{{iconAltTextKey(data.getValue(row, col))|translate}}\"                         src=\"{{data.getValue(row, col)}}\"                         (error)=\"onImageLoadingError($event)\">                 </div>                 <div *ngSwitchCase=\"'date'\" class=\"cell-value\" [attr.data-automation-id]=\"'date_' + data.getValue(row, col)\">                     {{data.getValue(row, col)}}                 </div>                 <div *ngSwitchCase=\"'text'\" class=\"cell-value\" [attr.data-automation-id]=\"'text_' + data.getValue(row, col)\">                     {{data.getValue(row, col)}}                 </div>                 <span *ngSwitchDefault class=\"cell-value\">                 <!-- empty cell for unknown column type -->                 </span>             </div>             <div *ngIf=\"col.template\">                 <template ngFor [ngForOf]=\"[{ data: data, row: row, col: col }]\" [ngForTemplate]=\"col.template\"></template>             </div>         </td>          <td *ngIf=\"actions\">             <!-- action menu -->             <button [id]=\"'action_menu_' + idx\" alfresco-mdl-button class=\"mdl-button--icon\" [attr.data-automation-id]=\"actions_menu\">                 <i class=\"material-icons\">more_vert</i>             </button>             <ul alfresco-mdl-menu class=\"mdl-menu--bottom-right\"                 [attr.for]=\"'action_menu_' + idx\">                 <li class=\"mdl-menu__item\"                     [attr.data-automation-id]=\"action.title\"                     *ngFor=\"let action of getRowActions(row)\"                     (click)=\"onExecuteRowAction(row, action)\">                     {{action.title}}                 </li>             </ul>         </td>      </tr>     <tr *ngIf=\"data.getRows().length === 0\">         <td class=\"mdl-data-table__cell--non-numeric no-content-container\"             [attr.colspan]=\"1 + data.getColumns().length\">             <template *ngIf=\"noContentTemplate\"                       ngFor [ngForOf]=\"[data]\"                       [ngForTemplate]=\"noContentTemplate\">             </template>         </td>     </tr>     </tbody> </table>"
    })
], DataTableComponent);
exports.DataTableComponent = DataTableComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
