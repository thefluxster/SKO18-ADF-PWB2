/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var datatable_component_1 = require("./datatable.component");
var index_1 = require("./../../data/index");
describe('DataTable', function () {
    var dataTable;
    var eventMock;
    beforeEach(function () {
        window['componentHandler'] = null;
        dataTable = new datatable_component_1.DataTableComponent();
        eventMock = {
            preventDefault: function () { }
        };
    });
    it('should initialize default adapter', function () {
        expect(dataTable.data).toBeUndefined();
        dataTable.ngOnInit();
        expect(dataTable.data).toEqual(jasmine.any(index_1.ObjectDataTableAdapter));
    });
    it('should initialize with custom data', function () {
        var data = new index_1.ObjectDataTableAdapter([], []);
        dataTable.data = data;
        dataTable.ngOnInit();
        expect(dataTable.data).toBe(data);
    });
    it('should emit row click event', function (done) {
        var row = {};
        dataTable.rowClick.subscribe(function (e) {
            expect(e.value).toBe(row);
            done();
        });
        dataTable.onRowClick(row, null);
    });
    it('should emit row double-click event', function (done) {
        var row = {};
        dataTable.rowDblClick.subscribe(function (e) {
            expect(e.value).toBe(row);
            done();
        });
        dataTable.onRowDblClick(row, null);
    });
    it('should prevent default behaviour on row click event', function () {
        var e = jasmine.createSpyObj('event', ['preventDefault']);
        dataTable.ngOnInit();
        dataTable.onRowClick(null, e);
        expect(e.preventDefault).toHaveBeenCalled();
    });
    it('should prevent default behaviour on row double-click event', function () {
        var e = jasmine.createSpyObj('event', ['preventDefault']);
        dataTable.ngOnInit();
        dataTable.onRowDblClick(null, e);
        expect(e.preventDefault).toHaveBeenCalled();
    });
    it('should prevent default behaviour on select all click', function () {
        var e = jasmine.createSpyObj('event', ['preventDefault']);
        dataTable.onSelectAllClick(e);
        expect(e.preventDefault).toHaveBeenCalled();
    });
    it('should not sort if column is missing', function () {
        dataTable.ngOnInit();
        var adapter = dataTable.data;
        spyOn(adapter, 'setSorting').and.callThrough();
        dataTable.onColumnHeaderClick(null);
        expect(adapter.setSorting).not.toHaveBeenCalled();
    });
    it('should not sort upon clicking non-sortable column header', function () {
        dataTable.ngOnInit();
        var adapter = dataTable.data;
        spyOn(adapter, 'setSorting').and.callThrough();
        var column = new index_1.ObjectDataColumn({
            key: 'column_1'
        });
        dataTable.onColumnHeaderClick(column);
        expect(adapter.setSorting).not.toHaveBeenCalled();
    });
    it('should set sorting upon column header clicked', function () {
        dataTable.ngOnInit();
        var adapter = dataTable.data;
        spyOn(adapter, 'setSorting').and.callThrough();
        var column = new index_1.ObjectDataColumn({
            key: 'column_1',
            sortable: true
        });
        dataTable.onColumnHeaderClick(column);
        expect(adapter.setSorting).toHaveBeenCalledWith(jasmine.objectContaining({
            key: 'column_1',
            direction: 'asc'
        }));
    });
    it('should invert sorting upon column header clicked', function () {
        dataTable.ngOnInit();
        var adapter = dataTable.data;
        var sorting = new index_1.DataSorting('column_1', 'asc');
        spyOn(adapter, 'setSorting').and.callThrough();
        spyOn(adapter, 'getSorting').and.returnValue(sorting);
        var column = new index_1.ObjectDataColumn({
            key: 'column_1',
            sortable: true
        });
        dataTable.onColumnHeaderClick(column);
        expect(adapter.setSorting).toHaveBeenCalledWith(jasmine.objectContaining({
            key: 'column_1',
            direction: 'desc'
        }));
        sorting.direction = 'desc';
        dataTable.onColumnHeaderClick(column);
        expect(adapter.setSorting).toHaveBeenCalledWith(jasmine.objectContaining({
            key: 'column_1',
            direction: 'asc'
        }));
    });
    it('should upgrade MDL components on view checked', function () {
        var handler = jasmine.createSpyObj('componentHandler', ['upgradeAllRegistered']);
        window['componentHandler'] = handler;
        dataTable.ngOnInit();
        expect(handler.upgradeAllRegistered).toHaveBeenCalled();
    });
    it('should upgrade MDL components only when component handler present', function () {
        expect(window['componentHandler']).toBeNull();
        dataTable.ngOnInit();
    });
    it('should invert "select all" status', function () {
        expect(dataTable.isSelectAllChecked).toBeFalsy();
        dataTable.onSelectAllClick(null);
        expect(dataTable.isSelectAllChecked).toBeTruthy();
        dataTable.onSelectAllClick(null);
        expect(dataTable.isSelectAllChecked).toBeFalsy();
    });
    it('should update rows on "select all" click', function () {
        var data = new index_1.ObjectDataTableAdapter([{}, {}, {}], []);
        var rows = data.getRows();
        dataTable.data = data;
        dataTable.multiselect = true;
        dataTable.ngOnInit();
        dataTable.onSelectAllClick(null);
        expect(dataTable.isSelectAllChecked).toBe(true);
        for (var i = 0; i < rows.length; i++) {
            expect(rows[i].isSelected).toBe(true);
        }
        dataTable.onSelectAllClick(null);
        expect(dataTable.isSelectAllChecked).toBe(false);
        for (var i = 0; i < rows.length; i++) {
            expect(rows[i].isSelected).toBe(false);
        }
    });
    it('should allow "select all" calls with no rows', function () {
        dataTable.multiselect = true;
        dataTable.ngOnInit();
        dataTable.onSelectAllClick(null);
        expect(dataTable.isSelectAllChecked).toBe(true);
    });
    it('should require multiselect option to toggle row state', function () {
        var data = new index_1.ObjectDataTableAdapter([{}, {}, {}], []);
        var rows = data.getRows();
        dataTable.data = data;
        dataTable.multiselect = false;
        dataTable.ngOnInit();
        dataTable.onSelectAllClick(null);
        expect(dataTable.isSelectAllChecked).toBe(true);
        for (var i = 0; i < rows.length; i++) {
            expect(rows[i].isSelected).toBe(false);
        }
    });
    it('should require row and column for icon value check', function () {
        expect(dataTable.isIconValue(null, null)).toBeFalsy();
        expect(dataTable.isIconValue({}, null)).toBeFalsy();
        expect(dataTable.isIconValue(null, {})).toBeFalsy();
    });
    it('should use special material url scheme', function () {
        var column = {};
        var row = {
            getValue: function (key) {
                return 'material-icons://android';
            }
        };
        expect(dataTable.isIconValue(row, column)).toBeTruthy();
    });
    it('should not use special material url scheme', function () {
        var column = {};
        var row = {
            getValue: function (key) {
                return 'http://www.google.com';
            }
        };
        expect(dataTable.isIconValue(row, column)).toBeFalsy();
    });
    it('should parse icon value', function () {
        var column = {};
        var row = {
            getValue: function (key) {
                return 'material-icons://android';
            }
        };
        expect(dataTable.asIconValue(row, column)).toBe('android');
    });
    it('should not parse icon value', function () {
        var column = {};
        var row = {
            getValue: function (key) {
                return 'http://www.google.com';
            }
        };
        expect(dataTable.asIconValue(row, column)).toBe(null);
    });
    it('should parse icon values to a valid i18n key', function () {
        expect(dataTable.iconAltTextKey('custom')).toBe('ICONS.custom');
        expect(dataTable.iconAltTextKey('/path/to/custom')).toBe('ICONS.custom');
        expect(dataTable.iconAltTextKey('/path/to/custom.svg')).toBe('ICONS.custom');
    });
    it('should require column and direction to evaluate sorting state', function () {
        expect(dataTable.isColumnSorted(null, null)).toBeFalsy();
        expect(dataTable.isColumnSorted({}, null)).toBeFalsy();
        expect(dataTable.isColumnSorted(null, 'asc')).toBeFalsy();
    });
    it('should require adapter sorting to evaluate sorting state', function () {
        dataTable.ngOnInit();
        spyOn(dataTable.data, 'getSorting').and.returnValue(null);
        expect(dataTable.isColumnSorted({}, 'asc')).toBeFalsy();
    });
    it('should evaluate column sorting state', function () {
        dataTable.ngOnInit();
        spyOn(dataTable.data, 'getSorting').and.returnValue(new index_1.DataSorting('column_1', 'asc'));
        expect(dataTable.isColumnSorted({ key: 'column_1' }, 'asc')).toBeTruthy();
        expect(dataTable.isColumnSorted({ key: 'column_2' }, 'desc')).toBeFalsy();
    });
    it('should replace image source with fallback thumbnail on error', function () {
        var event = {
            target: {
                src: 'missing-image'
            }
        };
        dataTable.fallbackThumbnail = '<fallback>';
        dataTable.onImageLoadingError(event);
        expect(event.target.src).toBe(dataTable.fallbackThumbnail);
    });
    it('should replace image source only when fallback available', function () {
        var originalSrc = 'missing-image';
        var event = {
            target: {
                src: originalSrc
            }
        };
        dataTable.fallbackThumbnail = null;
        dataTable.onImageLoadingError(event);
        expect(event.target.src).toBe(originalSrc);
    });
});
//# sourceMappingURL=datatable.component.spec.js.map