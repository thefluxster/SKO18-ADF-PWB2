/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var alfresco_search_service_1 = require("./../services/alfresco-search.service");
var alfresco_thumbnail_service_1 = require("./../services/alfresco-thumbnail.service");
var AlfrescoSearchAutocompleteComponent = (function () {
    function AlfrescoSearchAutocompleteComponent(searchService, translateService, thumbnailService) {
        this.searchService = searchService;
        this.translateService = translateService;
        this.thumbnailService = thumbnailService;
        this.searchTerm = '';
        this.results = null;
        this.maxResults = 5;
        this.resultSort = null;
        this.rootNodeId = '-root';
        this.resultType = null;
        this.fileSelect = new core_1.EventEmitter();
        this.searchFocus = new core_1.EventEmitter();
        this.cancel = new core_1.EventEmitter();
        this.resultsLoad = new core_1.EventEmitter();
        this.scrollBack = new core_1.EventEmitter();
        this.baseComponentPath = module.id.replace('/components/alfresco-search-autocomplete.component.js', '');
    }
    AlfrescoSearchAutocompleteComponent.prototype.ngOnInit = function () {
        if (this.translateService) {
            this.translateService.addTranslationFolder('ng2-alfresco-search', 'node_modules/ng2-alfresco-search/src');
        }
    };
    AlfrescoSearchAutocompleteComponent.prototype.ngOnChanges = function (changes) {
        if (changes.searchTerm) {
            this.results = null;
            this.errorMessage = null;
            this.displaySearchResults(changes.searchTerm.currentValue);
        }
    };
    AlfrescoSearchAutocompleteComponent.prototype.displaySearchResults = function (searchTerm) {
        var _this = this;
        var searchOpts = {
            include: ['path'],
            rootNodeId: this.rootNodeId,
            nodeType: this.resultType,
            maxItems: this.maxResults,
            orderBy: this.resultSort
        };
        if (searchTerm !== null && searchTerm !== '') {
            this.searchService
                .getNodeQueryResults(searchTerm, searchOpts)
                .subscribe(function (results) {
                _this.results = results.list.entries.slice(0, _this.maxResults);
                _this.errorMessage = null;
                _this.resultsLoad.emit(_this.results);
            }, function (error) {
                _this.results = null;
                _this.errorMessage = error;
                _this.resultsLoad.error(error);
            });
        }
    };
    AlfrescoSearchAutocompleteComponent.prototype.getMimeTypeIcon = function (node) {
        if (node.entry.content && node.entry.content.mimeType) {
            var icon = this.thumbnailService.getMimeTypeIcon(node.entry.content.mimeType);
            return this.resolveIconPath(icon);
        }
        if (node.entry.isFolder) {
            return this.baseComponentPath + "/assets/images/ft_ic_folder.svg";
        }
    };
    AlfrescoSearchAutocompleteComponent.prototype.resolveIconPath = function (icon) {
        return this.baseComponentPath + "/assets/images/" + icon;
    };
    AlfrescoSearchAutocompleteComponent.prototype.getMimeTypeKey = function (node) {
        if (node.entry.content && node.entry.content.mimeType) {
            return 'SEARCH.ICONS.' + this.thumbnailService.getMimeTypeKey(node.entry.content.mimeType);
        }
        else {
            return '';
        }
    };
    AlfrescoSearchAutocompleteComponent.prototype.focusResult = function () {
        var firstResult = this.resultsTableBody.nativeElement.querySelector('tr');
        firstResult.focus();
    };
    AlfrescoSearchAutocompleteComponent.prototype.onItemClick = function (node) {
        if (node && node.entry) {
            this.fileSelect.emit(node);
        }
    };
    AlfrescoSearchAutocompleteComponent.prototype.onRowFocus = function ($event) {
        this.searchFocus.emit($event);
    };
    AlfrescoSearchAutocompleteComponent.prototype.onRowBlur = function ($event) {
        this.searchFocus.emit($event);
    };
    AlfrescoSearchAutocompleteComponent.prototype.onRowEnter = function (node) {
        if (node && node.entry) {
            if (node.entry.isFile) {
                this.fileSelect.emit(node);
            }
        }
    };
    AlfrescoSearchAutocompleteComponent.prototype.getNextElementSibling = function (node) {
        return node.nextElementSibling;
    };
    AlfrescoSearchAutocompleteComponent.prototype.getPreviousElementSibling = function (node) {
        return node.previousElementSibling;
    };
    AlfrescoSearchAutocompleteComponent.prototype.onRowArrowDown = function ($event) {
        var nextElement = this.getNextElementSibling($event.target);
        if (nextElement) {
            nextElement.focus();
        }
    };
    AlfrescoSearchAutocompleteComponent.prototype.onRowArrowUp = function ($event) {
        var previousElement = this.getPreviousElementSibling($event.target);
        if (previousElement) {
            previousElement.focus();
        }
        else {
            this.scrollBack.emit($event);
        }
    };
    AlfrescoSearchAutocompleteComponent.prototype.onRowEscape = function ($event) {
        this.cancel.emit($event);
    };
    return AlfrescoSearchAutocompleteComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchAutocompleteComponent.prototype, "searchTerm", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], AlfrescoSearchAutocompleteComponent.prototype, "ngClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], AlfrescoSearchAutocompleteComponent.prototype, "maxResults", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchAutocompleteComponent.prototype, "resultSort", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchAutocompleteComponent.prototype, "rootNodeId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchAutocompleteComponent.prototype, "resultType", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AlfrescoSearchAutocompleteComponent.prototype, "fileSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AlfrescoSearchAutocompleteComponent.prototype, "searchFocus", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AlfrescoSearchAutocompleteComponent.prototype, "cancel", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AlfrescoSearchAutocompleteComponent.prototype, "resultsLoad", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AlfrescoSearchAutocompleteComponent.prototype, "scrollBack", void 0);
__decorate([
    core_1.ViewChild('resultsTableBody', {}),
    __metadata("design:type", core_1.ElementRef)
], AlfrescoSearchAutocompleteComponent.prototype, "resultsTableBody", void 0);
AlfrescoSearchAutocompleteComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alfresco-search-autocomplete',
        template: "<table data-automation-id=\"autocomplete_results\" *ngIf=\"results && results.length && searchTerm\"        class=\"mdl-data-table mdl-js-data-table mdl-shadow--2dp full-width\">     <tbody #resultsTableBody>     <tr id=\"result_row_{{idx}}\" *ngFor=\"let result of results; let idx = index\" tabindex=\"0\"             (blur)=\"onRowBlur($event)\" (focus)=\"onRowFocus($event)\"             (click)=\"onItemClick(result)\"             (keyup.enter)=\"onRowEnter(result)\"             (keyup.arrowdown)=\"onRowArrowDown($event)\"             (keyup.arrowup)=\"onRowArrowUp($event)\"             (keyup.escape)=\"onRowEscape($event)\"             attr.data-automation-id=\"autocomplete_result_for_{{result.entry.name}}\">         <td class=\"img-td\"><img src=\"{{getMimeTypeIcon(result)}}\" alt=\"{{getMimeTypeKey(result)|translate}}\"/></td>         <td>             <div id=\"result_name_{{idx}}\"  class=\"truncate\"><b>{{result.entry.name}}</b></div>             <div id=\"result_user_{{idx}}\"  class=\"truncate\">{{result.entry.createdByUser.displayName}}</div>         </td>     </tr>     </tbody> </table> <table id=\"search_no_result\" data-automation-id=\"search_no_result_found\" *ngIf=\"results && results.length === 0\"        class=\"mdl-data-table mdl-js-data-table mdl-shadow--2dp full-width\">     <tbody>     <tr>         <td>             <div class=\"truncate\"><b> {{ 'SEARCH.RESULTS.NONE' | translate:{searchTerm: searchTerm} }}</b></div>         </td>     </tr>     </tbody> </table> <table data-automation-id=\"autocomplete_error_message\" *ngIf=\"errorMessage\"        class=\"mdl-data-table mdl-js-data-table mdl-shadow--2dp full-width\">     <tbody>     <tr>         <td>{{ 'SEARCH.RESULTS.ERROR' | translate:{errorMessage: errorMessage} }}</td>     </tr>     </tbody> </table>",
        styles: [":host {     position: absolute;     z-index: 5;     display: none;     color: #555;     margin: -21px 0px 0px 0px; } :host a {     color: #555;     text-decoration: none; } :host table {     width: 300px; } :host .mdl-data-table tbody tr {     height: 32px; } :host .mdl-data-table td {     height: 32px;     padding: 8px;     text-align: left;     border-top: none;     border-bottom: none; } :host.active.valid {     display: block; }  .img-td{     width: 30px; }  .truncate{     width: 240px;     white-space: nowrap;     overflow: hidden;     text-overflow: ellipsis; }  @media screen and (max-width: 400px) {     :host {         right: 0;     }     .truncate{         width: 200px;     } }"]
    }),
    __metadata("design:paramtypes", [alfresco_search_service_1.AlfrescoSearchService,
        ng2_alfresco_core_1.AlfrescoTranslationService,
        alfresco_thumbnail_service_1.AlfrescoThumbnailService])
], AlfrescoSearchAutocompleteComponent);
exports.AlfrescoSearchAutocompleteComponent = AlfrescoSearchAutocompleteComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
