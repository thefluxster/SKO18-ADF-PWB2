/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var alfresco_search_service_1 = require("./../services/alfresco-search.service");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var AlfrescoSearchComponent = AlfrescoSearchComponent_1 = (function () {
    function AlfrescoSearchComponent(searchService, translateService, route) {
        this.searchService = searchService;
        this.translateService = translateService;
        this.route = route;
        this.searchTerm = '';
        this.maxResults = 20;
        this.resultSort = null;
        this.rootNodeId = '-root-';
        this.resultType = null;
        this.navigationMode = AlfrescoSearchComponent_1.DOUBLE_CLICK_NAVIGATION;
        this.resultsLoad = new core_1.EventEmitter();
        this.preview = new core_1.EventEmitter();
        this.results = null;
        this.queryParamName = 'q';
        this.skipCount = 0;
        this.baseComponentPath = module.id.replace('/components/alfresco-search.component.js', '');
    }
    AlfrescoSearchComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.translateService !== null) {
            this.translateService.addTranslationFolder('ng2-alfresco-search', 'node_modules/ng2-alfresco-search/src');
        }
        if (this.route) {
            this.route.params.forEach(function (params) {
                _this.searchTerm = params.hasOwnProperty(_this.queryParamName) ? params[_this.queryParamName] : null;
                _this.displaySearchResults(_this.searchTerm);
            });
        }
        else {
            this.displaySearchResults(this.searchTerm);
        }
    };
    AlfrescoSearchComponent.prototype.ngOnChanges = function (changes) {
        if (changes['searchTerm']) {
            this.searchTerm = changes['searchTerm'].currentValue;
            this.skipCount = 0;
            this.displaySearchResults(this.searchTerm);
        }
    };
    AlfrescoSearchComponent.prototype.onPreviewFile = function (event) {
        if (event.value) {
            this.preview.emit({
                value: event.value
            });
        }
    };
    AlfrescoSearchComponent.prototype.displaySearchResults = function (searchTerm) {
        var _this = this;
        if (searchTerm && this.searchService) {
            var searchOpts = {
                include: ['path'],
                skipCount: this.skipCount,
                rootNodeId: this.rootNodeId,
                nodeType: this.resultType,
                maxItems: this.maxResults,
                orderBy: this.resultSort
            };
            this.searchService
                .getNodeQueryResults(searchTerm, searchOpts)
                .subscribe(function (results) {
                _this.nodeResults = results;
                _this.results = results.list.entries;
                _this.pagination = results.list.pagination;
                _this.resultsLoad.emit(_this.results);
                _this.errorMessage = null;
            }, function (error) {
                if (error.status !== 400) {
                    _this.results = null;
                    _this.errorMessage = error;
                    _this.resultsLoad.error(error);
                }
            });
        }
    };
    AlfrescoSearchComponent.prototype.onChangePageSize = function (event) {
        this.maxResults = event.maxItems;
        this.displaySearchResults(this.searchTerm);
    };
    AlfrescoSearchComponent.prototype.onNextPage = function (event) {
        this.skipCount = event.skipCount;
        this.displaySearchResults(this.searchTerm);
    };
    AlfrescoSearchComponent.prototype.onPrevPage = function (event) {
        this.skipCount = event.skipCount;
        this.displaySearchResults(this.searchTerm);
    };
    return AlfrescoSearchComponent;
}());
AlfrescoSearchComponent.SINGLE_CLICK_NAVIGATION = 'click';
AlfrescoSearchComponent.DOUBLE_CLICK_NAVIGATION = 'dblclick';
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchComponent.prototype, "searchTerm", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], AlfrescoSearchComponent.prototype, "maxResults", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchComponent.prototype, "resultSort", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchComponent.prototype, "rootNodeId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchComponent.prototype, "resultType", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchComponent.prototype, "navigationMode", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AlfrescoSearchComponent.prototype, "resultsLoad", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AlfrescoSearchComponent.prototype, "preview", void 0);
AlfrescoSearchComponent = AlfrescoSearchComponent_1 = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alfresco-search',
        styles: [":host .mdl-data-table caption {     margin: 0 0 16px 0;     text-align: left; } :host .mdl-data-table td {     white-space: nowrap; } :host .mdl-data-table td.col-mimetype-icon {     width: 24px; } :host .col-display-name {     min-width: 250px;     overflow: hidden;     text-overflow: ellipsis; } .no-result-message {     height: 32px;     opacity: 0.26;     font-family: Muli, Helvetica, Arial, sans-serif;     font-size: 24px;     line-height: 1.33;     letter-spacing: -1px;     color: #000000; }  .no-result__empty_doc_lib {     width: 565px;     height: 161px;     object-fit: contain;     margin-top: 17px; }  .empty_template {     text-align: center;     margin-top: 20px;     margin-bottom: 20px; }"],
        template: "<div data-automation-id=\"search_result_table\"      class=\"mdl-data-table mdl-js-data-table mdl-shadow--2dp full-width\">     <p data-automation-id=\"search_error_message\" *ngIf=\"errorMessage\">{{ 'SEARCH.RESULTS.ERROR' | translate:{errorMessage: errorMessage} }}</p>     <div class=\"container\">         <alfresco-document-list             [node]=\"nodeResults\"             [contextMenuActions]=\"true\"             [creationMenuActions]=\"false\"             [contentActions]=\"true\"             [navigationMode]=\"navigationMode\"             [enablePagination]=\"false\"             (error)=\"onNavigationError($event)\"             (success)=\"resetError()\"             (preview)=\"onPreviewFile($event)\">             <empty-folder-content>                 <template>                     <div class=\"empty_template\">                         <div class=\"no-result-message\">{{ 'SEARCH.RESULTS.NONE' | translate:{searchTerm: searchTerm} }}</div>                         <img [src]=\"baseComponentPath + '/assets/images/empty_doc_lib.svg'\" class=\"no-result__empty_doc_lib\">                     </div>                 </template>                 <template>                 </template>             </empty-folder-content>              <content-columns>                 <content-column key=\"$thumbnail\" type=\"image\"></content-column>                 <content-column                     title=\"{{'SEARCH.DOCUMENT_LIST.COLUMNS.DISPLAY_NAME' | translate}}\"                     key=\"name\"                     sortable=\"true\"                     class=\"full-width ellipsis-cell\">                 </content-column>                 <content-column                     title=\"{{'SEARCH.DOCUMENT_LIST.COLUMNS.CREATED_BY' | translate}}\"                     key=\"createdByUser.displayName\"                     sortable=\"true\"                     class=\"desktop-only\">                 </content-column>                 <content-column                     title=\"{{'SEARCH.DOCUMENT_LIST.COLUMNS.CREATED_ON' | translate}}\"                     key=\"createdAt\"                     type=\"date\"                     format=\"medium\"                     sortable=\"true\"                     class=\"desktop-only\">                 </content-column>             </content-columns>              <content-actions>                 <!-- folder actions -->                 <content-action                     target=\"folder\"                     title=\"{{'SEARCH.DOCUMENT_LIST.ACTIONS.FOLDER.DELETE' | translate}}\"                     handler=\"delete\">                 </content-action>                 <!-- document actions -->                 <content-action                     target=\"document\"                     title=\"{{'SEARCH.DOCUMENT_LIST.ACTIONS.DOCUMENT.DOWNLOAD' | translate}}\"                     handler=\"download\">                 </content-action>                 <content-action                     target=\"document\"                     title=\"{{'SEARCH.DOCUMENT_LIST.ACTIONS.DOCUMENT.DELETE' | translate}}\"                     handler=\"delete\">                 </content-action>             </content-actions>         </alfresco-document-list>         <alfresco-pagination             (changePageSize)=\"onChangePageSize($event)\"             (nextPage)=\"onNextPage($event)\"             (prevPage)=\"onPrevPage($event)\"             [pagination]=\"pagination\"             [maxItems]=\"maxResults\"             [supportedPageSizes]=\"[5, 10, 15, 20]\">         </alfresco-pagination>     </div> </div>"
    }),
    __param(2, core_1.Optional()),
    __metadata("design:paramtypes", [alfresco_search_service_1.AlfrescoSearchService,
        ng2_alfresco_core_1.AlfrescoTranslationService,
        router_1.ActivatedRoute])
], AlfrescoSearchComponent);
exports.AlfrescoSearchComponent = AlfrescoSearchComponent;
var AlfrescoSearchComponent_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
