/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var forms_1 = require("@angular/forms");
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var alfresco_search_autocomplete_component_1 = require("./alfresco-search-autocomplete.component");
var search_term_validator_1 = require("./../forms/search-term-validator");
var AlfrescoSearchControlComponent = (function () {
    function AlfrescoSearchControlComponent(translateService) {
        this.translateService = translateService;
        this.searchTerm = '';
        this.inputType = 'text';
        this.autocomplete = false;
        this.expandable = true;
        this.searchChange = new core_1.EventEmitter();
        this.searchSubmit = new core_1.EventEmitter();
        this.fileSelect = new core_1.EventEmitter();
        this.expand = new core_1.EventEmitter();
        this.liveSearchEnabled = true;
        this.liveSearchTerm = '';
        this.liveSearchRoot = '-root-';
        this.liveSearchResultType = null;
        this.liveSearchResultSort = null;
        this.liveSearchMaxResults = 5;
        this.searchActive = false;
        this.searchValid = false;
        this.focusSubject = new Rx_1.Subject();
        this.searchControl = new forms_1.FormControl(this.searchTerm, forms_1.Validators.compose([forms_1.Validators.required, search_term_validator_1.SearchTermValidator.minAlphanumericChars(3)]));
    }
    AlfrescoSearchControlComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.searchControl.valueChanges.debounceTime(400).distinctUntilChanged()
            .subscribe(function (value) {
            _this.onSearchTermChange(value);
        });
        this.setupFocusEventHandlers();
        this.translateService.addTranslationFolder('ng2-alfresco-search', 'node_modules/ng2-alfresco-search/src');
    };
    AlfrescoSearchControlComponent.prototype.ngOnDestroy = function () {
        this.focusSubject.unsubscribe();
    };
    AlfrescoSearchControlComponent.prototype.onSearchTermChange = function (value) {
        this.searchValid = this.searchControl.valid;
        this.liveSearchTerm = this.searchValid ? value : '';
        this.searchControl.setValue(value, true);
        this.searchChange.emit({
            value: value,
            valid: this.searchValid
        });
    };
    AlfrescoSearchControlComponent.prototype.setupFocusEventHandlers = function () {
        var _this = this;
        var focusEvents = this.focusSubject.asObservable().debounceTime(50);
        focusEvents.filter(function ($event) {
            return $event.type === 'focusin' || $event.type === 'focus';
        }).subscribe(function ($event) {
            _this.onSearchFocus($event);
        });
        focusEvents.filter(function ($event) {
            return $event.type === 'focusout' || $event.type === 'blur';
        }).subscribe(function ($event) {
            _this.onSearchBlur($event);
        });
    };
    AlfrescoSearchControlComponent.prototype.getTextFieldClassName = function () {
        return 'mdl-textfield mdl-js-textfield' + (this.expandable ? ' mdl-textfield--expandable' : '');
    };
    AlfrescoSearchControlComponent.prototype.getTextFieldHolderClassName = function () {
        return this.expandable ? 'search-field mdl-textfield__expandable-holder' : 'search-field';
    };
    AlfrescoSearchControlComponent.prototype.getAutoComplete = function () {
        return this.autocomplete ? 'on' : 'off';
    };
    AlfrescoSearchControlComponent.prototype.onSearch = function (event) {
        this.searchControl.setValue(this.searchTerm, true);
        if (this.searchControl.valid) {
            this.searchSubmit.emit({
                value: this.searchTerm
            });
            this.searchInput.nativeElement.blur();
        }
    };
    AlfrescoSearchControlComponent.prototype.isAutoCompleteDisplayed = function () {
        return this.searchActive;
    };
    AlfrescoSearchControlComponent.prototype.setAutoCompleteDisplayed = function (display) {
        this.searchActive = display;
    };
    AlfrescoSearchControlComponent.prototype.onFileClicked = function (event) {
        this.setAutoCompleteDisplayed(false);
        this.fileSelect.emit(event);
    };
    AlfrescoSearchControlComponent.prototype.onSearchFocus = function ($event) {
        this.setAutoCompleteDisplayed(true);
    };
    AlfrescoSearchControlComponent.prototype.onSearchBlur = function ($event) {
        this.setAutoCompleteDisplayed(false);
    };
    AlfrescoSearchControlComponent.prototype.onFocus = function ($event) {
        if (this.expandable) {
            this.expand.emit({
                expanded: true
            });
        }
        this.focusSubject.next($event);
    };
    AlfrescoSearchControlComponent.prototype.onBlur = function ($event) {
        if (this.expandable && (this.searchControl.value === '' || this.searchControl.value === undefined)) {
            this.expand.emit({
                expanded: false
            });
        }
        this.focusSubject.next($event);
    };
    AlfrescoSearchControlComponent.prototype.onEscape = function () {
        this.setAutoCompleteDisplayed(false);
    };
    AlfrescoSearchControlComponent.prototype.onArrowDown = function () {
        if (this.isAutoCompleteDisplayed()) {
            this.liveSearchComponent.focusResult();
        }
        else {
            this.setAutoCompleteDisplayed(true);
        }
    };
    AlfrescoSearchControlComponent.prototype.onAutoCompleteFocus = function ($event) {
        this.focusSubject.next($event);
    };
    AlfrescoSearchControlComponent.prototype.onAutoCompleteReturn = function ($event) {
        if (this.searchInput) {
            this.searchInput.nativeElement.focus();
        }
    };
    AlfrescoSearchControlComponent.prototype.onAutoCompleteCancel = function ($event) {
        if (this.searchInput) {
            this.searchInput.nativeElement.focus();
        }
        this.setAutoCompleteDisplayed(false);
    };
    return AlfrescoSearchControlComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], AlfrescoSearchControlComponent.prototype, "searchTerm", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], AlfrescoSearchControlComponent.prototype, "inputType", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AlfrescoSearchControlComponent.prototype, "autocomplete", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AlfrescoSearchControlComponent.prototype, "expandable", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AlfrescoSearchControlComponent.prototype, "searchChange", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AlfrescoSearchControlComponent.prototype, "searchSubmit", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AlfrescoSearchControlComponent.prototype, "fileSelect", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AlfrescoSearchControlComponent.prototype, "expand", void 0);
__decorate([
    core_1.ViewChild('searchInput', {}),
    __metadata("design:type", core_1.ElementRef)
], AlfrescoSearchControlComponent.prototype, "searchInput", void 0);
__decorate([
    core_1.ViewChild(alfresco_search_autocomplete_component_1.AlfrescoSearchAutocompleteComponent),
    __metadata("design:type", alfresco_search_autocomplete_component_1.AlfrescoSearchAutocompleteComponent)
], AlfrescoSearchControlComponent.prototype, "liveSearchComponent", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AlfrescoSearchControlComponent.prototype, "liveSearchEnabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchControlComponent.prototype, "liveSearchTerm", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchControlComponent.prototype, "liveSearchRoot", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchControlComponent.prototype, "liveSearchResultType", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AlfrescoSearchControlComponent.prototype, "liveSearchResultSort", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], AlfrescoSearchControlComponent.prototype, "liveSearchMaxResults", void 0);
AlfrescoSearchControlComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alfresco-search-control',
        template: "<form #f=\"ngForm\" (ngSubmit)=\"onSearch(f.value)\">     <div [class]=\"getTextFieldClassName()\">         <label *ngIf=\"expandable\" class=\"mdl-button mdl-js-button mdl-button--icon\" for=\"searchControl\">             <i mdl-upgrade class=\"material-icons\">search</i>         </label>         <div [class]=\"getTextFieldHolderClassName()\">             <input mdl                    class=\"mdl-textfield__input\"                    [type]=\"inputType\"                    [autocomplete]=\"getAutoComplete()\"                    data-automation-id=\"search_input\"                    #searchInput                    id=\"searchControl\"                    [formControl]=\"searchControl\"                    [(ngModel)]=\"searchTerm\"                    (focus)=\"onFocus($event)\"                    (blur)=\"onBlur($event)\"                    (keyup.escape)=\"onEscape($event)\"                    (keyup.arrowdown)=\"onArrowDown($event)\"                    aria-labelledby=\"searchLabel\">             <label id=\"searchLabel\" class=\"mdl-textfield__label\" for=\"searchControl\">{{'SEARCH.CONTROL.LABEL' | translate}}</label>         </div>     </div> </form> <alfresco-search-autocomplete #autocomplete *ngIf=\"liveSearchEnabled\"                               [searchTerm]=\"liveSearchTerm\"                               [rootNodeId]=\"liveSearchRoot\"                               [resultType]=\"liveSearchResultType\"                               [resultSort]=\"liveSearchResultSort\"                               [maxResults]=\"liveSearchMaxResults\"                               [ngClass]=\"{active: searchActive, valid: searchValid}\"                               (fileSelect)=\"onFileClicked($event)\"                               (searchFocus)=\"onAutoCompleteFocus($event)\"                               (scrollBack)=\"onAutoCompleteReturn($event)\"                               (cancel)=\"onAutoCompleteCancel($event)\"></alfresco-search-autocomplete>",
        styles: [".search-field {     width: 267px; } @media only screen and (max-width: 400px) {     .search-field {         width: 200px;     } } @media only screen and (max-width: 320px) {     .search-field {         width: 160px;     } }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService])
], AlfrescoSearchControlComponent);
exports.AlfrescoSearchControlComponent = AlfrescoSearchControlComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
