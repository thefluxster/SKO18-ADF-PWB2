/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var bpm_user_model_1 = require("../models/bpm-user.model");
exports.BpmUserModel = bpm_user_model_1.BpmUserModel;
var bpm_user_service_1 = require("../services/bpm-user.service");
exports.BpmUserService = bpm_user_service_1.BpmUserService;
var Rx_1 = require("rxjs/Rx");
exports.fakeBpmUserNoImage = {
    apps: {},
    capabilities: 'fake-capability',
    company: 'fake-company',
    created: 'fake-create-date',
    email: 'fakeBpm@fake.com',
    externalId: 'fake-external-id',
    firstName: 'fake-first-name',
    lastName: 'fake-last-name',
    fullname: 'fake-full-name',
    groups: {},
    id: 'fake-id',
    lastUpdate: 'fake-update-date',
    latestSyncTimeStamp: 'fake-timestamp',
    password: 'fake-password',
    pictureId: undefined,
    status: 'fake-status',
    tenantId: 'fake-tenant-id',
    tenantName: 'fake-tenant-name',
    tenantPictureId: 'fake-tenant-picture-id',
    type: 'fake-type'
};
exports.fakeBpmUser = {
    apps: {},
    capabilities: 'fake-capability',
    company: 'fake-company',
    created: 'fake-create-date',
    email: 'fakeBpm@fake.com',
    externalId: 'fake-external-id',
    firstName: 'fake-first-name',
    lastName: 'fake-last-name',
    fullname: 'fake-full-name',
    groups: {},
    id: 'fake-id',
    lastUpdate: 'fake-update-date',
    latestSyncTimeStamp: 'fake-timestamp',
    password: 'fake-password',
    pictureId: 'src/assets/bpmImg.gif',
    status: 'fake-status',
    tenantId: 'fake-tenant-id',
    tenantName: 'fake-tenant-name',
    tenantPictureId: 'fake-tenant-picture-id',
    type: 'fake-type'
};
exports.fakeBpmEditedUser = {
    apps: {},
    capabilities: 'fake-capability',
    company: 'fake-company',
    created: 'fake-create-date',
    email: 'fakeBpm@fake.com',
    externalId: 'fake-external-id',
    firstName: 'fake-first-name',
    lastName: 'fake-last-name',
    fullname: 'fake-full-name',
    groups: {},
    id: 'fake-id',
    lastUpdate: 'fake-update-date',
    latestSyncTimeStamp: 'fake-timestamp',
    password: 'fake-password',
    pictureId: 'src/assets/images/bpmImg.gif',
    status: 'fake-status',
    tenantId: 'fake-tenant-id',
    tenantName: 'fake-tenant-name',
    tenantPictureId: 'fake-tenant-picture-id',
    type: 'fake-type'
};
var FakeBpmUserService = (function () {
    function FakeBpmUserService() {
        this.userNeeded = 0;
        this.usersList = [exports.fakeBpmUser, exports.fakeBpmUserNoImage, exports.fakeBpmEditedUser];
    }
    FakeBpmUserService.prototype.getUserInfo = function (userName) {
        return this.lastPromise = Rx_1.Observable.of(this.usersList[this.userNeeded]);
    };
    ;
    FakeBpmUserService.prototype.getCurrentUserInfo = function () {
        return this.getUserInfo('fake-id');
    };
    ;
    FakeBpmUserService.prototype.getCurrentUserProfileImage = function () {
        return Rx_1.Observable.of(this.usersList[this.userNeeded].pictureId);
    };
    ;
    FakeBpmUserService.prototype.respondWithTheUserWithoutImage = function () {
        this.userNeeded = 1;
    };
    FakeBpmUserService.prototype.respondWithTheUserWithImage = function () {
        this.userNeeded = 0;
    };
    FakeBpmUserService.prototype.respondWithEditedUser = function () {
        this.userNeeded = 2;
    };
    return FakeBpmUserService;
}());
exports.FakeBpmUserService = FakeBpmUserService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
