/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ecm_user_service_1 = require("../services/ecm-user.service");
var fake_ecm_user_service_mock_1 = require("../assets/fake-ecm-user.service.mock");
describe('EcmUserService', function () {
    var service;
    var authService;
    var contentService;
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            providers: [
                ecm_user_service_1.EcmUserService
            ]
        });
        service = testing_1.TestBed.get(ecm_user_service_1.EcmUserService);
        authService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoAuthenticationService);
        contentService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoContentService);
    });
    describe('when user is logged in', function () {
        beforeEach(function () {
            spyOn(authService, 'isEcmLoggedIn').and.returnValue(true);
            jasmine.Ajax.install();
        });
        afterEach(function () {
            jasmine.Ajax.uninstall();
        });
        it('should be able to retrieve current user info', function (done) {
            service.getCurrentUserInfo().subscribe(function (user) {
                expect(user).toBeDefined();
                expect(user.firstName).toEqual('fake-first-name');
                expect(user.lastName).toEqual('fake-last-name');
                expect(user.email).toEqual('fakeEcm@ecmUser.com');
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: { entry: fake_ecm_user_service_mock_1.fakeEcmUser }
            });
        });
        it('should be able to log errors on call', function (done) {
            service.getCurrentUserInfo().subscribe(function () {
            }, function () {
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 403
            });
        });
        it('should retrieve avatar url for current user', function () {
            spyOn(contentService, 'getContentUrl').and.returnValue('fake/url/image/for/ecm/user');
            var urlRs = service.getUserProfileImage('fake-avatar-id');
            expect(urlRs).toEqual('fake/url/image/for/ecm/user');
        });
        it('should not call content service without avatar id', function () {
            spyOn(contentService, 'getContentUrl').and.callThrough();
            var urlRs = service.getUserProfileImage(undefined);
            expect(urlRs).toBeUndefined();
            expect(contentService.getContentUrl).not.toHaveBeenCalled();
        });
        it('should build the body for the content service', function () {
            spyOn(contentService, 'getContentUrl').and.callThrough();
            var urlRs = service.getUserProfileImage('fake-avatar-id');
            expect(urlRs).toBeDefined();
            expect(contentService.getContentUrl).toHaveBeenCalledWith({ entry: { id: 'fake-avatar-id' } });
        });
    });
});
//# sourceMappingURL=ecm-user.service.spec.js.map