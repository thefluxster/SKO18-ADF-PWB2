/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var upload_service_1 = require("../services/upload.service");
var ERROR_FOLDER_ALREADY_EXIST = 409;
var UploadButtonComponent = UploadButtonComponent_1 = (function () {
    function UploadButtonComponent(el, uploadService, translateService, logService, notificationService) {
        this.el = el;
        this.uploadService = uploadService;
        this.translateService = translateService;
        this.logService = logService;
        this.notificationService = notificationService;
        this.showNotificationBar = true;
        this.uploadFolders = false;
        this.multipleFiles = false;
        this.versioning = false;
        this.acceptedFilesType = '*';
        this.currentFolderPath = '/';
        this.rootFolderId = UploadButtonComponent_1.DEFAULT_ROOT_ID;
        this.onSuccess = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.createFolder = new core_1.EventEmitter();
        if (translateService) {
            translateService.addTranslationFolder('ng2-alfresco-upload', 'node_modules/ng2-alfresco-upload/src');
        }
    }
    UploadButtonComponent.prototype.ngOnChanges = function (changes) {
        var formFields = this.createFormFields();
        this.uploadService.setOptions(formFields, this.versioning);
    };
    UploadButtonComponent.prototype.onFilesAdded = function ($event) {
        var files = $event.currentTarget.files;
        this.uploadFiles(this.currentFolderPath, files);
        $event.target.value = '';
    };
    UploadButtonComponent.prototype.onDirectoryAdded = function ($event) {
        var _this = this;
        var files = $event.currentTarget.files;
        var hashMapDir = this.convertIntoHashMap(files);
        hashMapDir.forEach(function (filesDir, directoryPath) {
            var directoryName = _this.getDirectoryName(directoryPath);
            var absolutePath = _this.currentFolderPath + _this.getDirectoryPath(directoryPath);
            _this.uploadService.createFolder(absolutePath, directoryName)
                .subscribe(function (res) {
                var relativeDir = _this.currentFolderPath + '/' + directoryPath;
                _this.uploadFiles(relativeDir, filesDir);
            }, function (error) {
                var errorMessagePlaceholder = _this.getErrorMessage(error.response);
                if (errorMessagePlaceholder) {
                    _this.onError.emit({ value: errorMessagePlaceholder });
                    var errorMessage = _this.formatString(errorMessagePlaceholder, [directoryName]);
                    if (errorMessage) {
                        _this._showErrorNotificationBar(errorMessage);
                    }
                }
                _this.logService.error(error);
            });
        });
        $event.target.value = '';
    };
    UploadButtonComponent.prototype.uploadFiles = function (path, files) {
        if (files.length) {
            var latestFilesAdded = this.uploadService.addToQueue(files);
            this.uploadService.uploadFilesInTheQueue(this.rootFolderId, path, this.onSuccess);
            if (this.showNotificationBar) {
                this._showUndoNotificationBar(latestFilesAdded);
            }
        }
    };
    UploadButtonComponent.prototype.convertIntoHashMap = function (files) {
        var directoryMap = new Map();
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
            var file = files_1[_i];
            var directory = this.getDirectoryPath(file.webkitRelativePath);
            var filesSomeDir = directoryMap.get(directory) || [];
            filesSomeDir.push(file);
            directoryMap.set(directory, filesSomeDir);
        }
        return directoryMap;
    };
    UploadButtonComponent.prototype.getDirectoryPath = function (directory) {
        var relativeDirPath = '';
        var dirPath = directory.split('/');
        if (dirPath.length > 1) {
            dirPath.pop();
            relativeDirPath = '/' + dirPath.join('/');
        }
        return relativeDirPath;
    };
    UploadButtonComponent.prototype.getDirectoryName = function (directory) {
        var dirPath = directory.split('/');
        if (dirPath.length > 1) {
            return dirPath.pop();
        }
        else {
            return dirPath[0];
        }
    };
    UploadButtonComponent.prototype._showUndoNotificationBar = function (latestFilesAdded) {
        var messageTranslate, actionTranslate;
        messageTranslate = this.translateService.get('FILE_UPLOAD.MESSAGES.PROGRESS');
        actionTranslate = this.translateService.get('FILE_UPLOAD.ACTION.UNDO');
        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).afterDismissed().subscribe(function () {
            latestFilesAdded.forEach(function (uploadingFileModel) {
                uploadingFileModel.emitAbort();
            });
        });
    };
    UploadButtonComponent.prototype.getErrorMessage = function (response) {
        if (response.body && response.body.error.statusCode === ERROR_FOLDER_ALREADY_EXIST) {
            var errorMessage = void 0;
            errorMessage = this.translateService.get('FILE_UPLOAD.MESSAGES.FOLDER_ALREADY_EXIST');
            return errorMessage.value;
        }
    };
    UploadButtonComponent.prototype._showErrorNotificationBar = function (errorMessage) {
        this.notificationService.openSnackMessage(errorMessage, 3000);
    };
    UploadButtonComponent.prototype.formatString = function (message, keys) {
        var i = keys.length;
        while (i--) {
            message = message.replace(new RegExp('\\{' + i + '\\}', 'gm'), keys[i]);
        }
        return message;
    };
    UploadButtonComponent.prototype.createFormFields = function () {
        return {
            formFields: {
                overwrite: true
            }
        };
    };
    return UploadButtonComponent;
}());
UploadButtonComponent.DEFAULT_ROOT_ID = '-root-';
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], UploadButtonComponent.prototype, "showNotificationBar", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], UploadButtonComponent.prototype, "uploadFolders", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], UploadButtonComponent.prototype, "multipleFiles", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], UploadButtonComponent.prototype, "versioning", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], UploadButtonComponent.prototype, "acceptedFilesType", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], UploadButtonComponent.prototype, "staticTitle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], UploadButtonComponent.prototype, "currentFolderPath", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], UploadButtonComponent.prototype, "rootFolderId", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], UploadButtonComponent.prototype, "onSuccess", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], UploadButtonComponent.prototype, "onError", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], UploadButtonComponent.prototype, "createFolder", void 0);
UploadButtonComponent = UploadButtonComponent_1 = __decorate([
    core_1.Component({
        selector: 'alfresco-upload-button',
        moduleId: module.id,
        template: "<form>     <!--Files Upload-->     <div *ngIf=\"!uploadFolders\" class=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-button--file\">         <i class=\"material-icons\">file_upload</i>          <!--Multiple Files Upload-->         <span *ngIf=\"multipleFiles\">             <label *ngIf=\"!staticTitle\" for=\"upload-multiple-files\">{{'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate}}</label>             <label *ngIf=\"staticTitle\" for=\"upload-multiple-files\">{{staticTitle}}</label>             <input id=\"upload-multiple-files\" data-automation-id=\"upload-multiple-files\" type=\"file\" name=\"uploadFiles\"                    (change)=\"onFilesAdded($event)\"                    multiple=\"multiple\"                    accept=\"{{acceptedFilesType}}\"                    #uploadFiles>         </span>          <!--Single Files Upload-->         <span *ngIf=\"!multipleFiles\">             <label *ngIf=\"!staticTitle\" for=\"upload-single-file\">{{'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate}}</label>             <label *ngIf=\"staticTitle\" for=\"upload-single-file\">{{staticTitle}}</label>             <input id=\"upload-single-file\" data-automation-id=\"upload-single-file\" type=\"file\" name=\"uploadFiles\"                    (change)=\"onFilesAdded($event)\"                    accept=\"{{acceptedFilesType}}\"                    #uploadFiles>         </span>     </div>      <!--Folders Upload-->     <div *ngIf=\"uploadFolders\" class=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-button--file\">         <i class=\"material-icons\">file_upload</i>         <label *ngIf=\"!staticTitle\" for=\"uploadFolder\">{{'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate}}</label>         <label *ngIf=\"staticTitle\" for=\"uploadFolder\">{{staticTitle}}</label>         <input id=\"uploadFolder\" data-automation-id=\"uploadFolder\" type=\"file\" name=\"uploadFiles\"                (change)=\"onDirectoryAdded($event)\"                multiple=\"multiple\"                accept=\"{{acceptedFilesType}}\"                webkitdirectory directory                multiple #uploadFolders>     </div> </form>",
        styles: [".mdl-button--file input {     cursor: pointer;     height: 100%;     right: 0;     opacity: 0;     position: absolute;     top: 0;     width: 300px;     z-index: 4; }  .mdl-textfield--file .mdl-textfield__input {     box-sizing: border-box;     width: calc(100% - 32px); }  .mdl-textfield--file .mdl-button--file {     right: 0; }"]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        upload_service_1.UploadService,
        ng2_alfresco_core_1.AlfrescoTranslationService,
        ng2_alfresco_core_1.LogService,
        ng2_alfresco_core_1.NotificationService])
], UploadButtonComponent);
exports.UploadButtonComponent = UploadButtonComponent;
var UploadButtonComponent_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
