/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var upload_service_1 = require("../services/upload.service");
var ERROR_FOLDER_ALREADY_EXIST = 409;
var UploadDragAreaComponent = UploadDragAreaComponent_1 = (function () {
    function UploadDragAreaComponent(uploadService, translateService, logService, notificationService) {
        this.uploadService = uploadService;
        this.translateService = translateService;
        this.logService = logService;
        this.notificationService = notificationService;
        this.showNotificationBar = true;
        this.versioning = false;
        this.currentFolderPath = '/';
        this.rootFolderId = UploadDragAreaComponent_1.DEFAULT_ROOT_ID;
        this.onSuccess = new core_1.EventEmitter();
        if (translateService) {
            translateService.addTranslationFolder('ng2-alfresco-upload', 'node_modules/ng2-alfresco-upload/src');
        }
    }
    UploadDragAreaComponent.prototype.ngOnChanges = function (changes) {
        var formFields = this.createFormFields();
        this.uploadService.setOptions(formFields, this.versioning);
    };
    UploadDragAreaComponent.prototype.onFilesDropped = function (files) {
        if (files.length) {
            if (this.checkValidity(files)) {
                this.uploadService.addToQueue(files);
                this.uploadService.uploadFilesInTheQueue(this.rootFolderId, this.currentFolderPath, this.onSuccess);
                var latestFilesAdded = this.uploadService.getQueue();
                if (this.showNotificationBar) {
                    this.showUndoNotificationBar(latestFilesAdded);
                }
            }
            else {
                var errorMessage = void 0;
                errorMessage = this.translateService.get('FILE_UPLOAD.MESSAGES.FOLDER_NOT_SUPPORTED');
                if (this.showNotificationBar) {
                    this.showErrorNotificationBar(errorMessage.value);
                }
                else {
                    this.logService.error(errorMessage.value);
                }
            }
        }
    };
    UploadDragAreaComponent.prototype.checkValidity = function (files) {
        if (files.length && files[0].type === '') {
            return false;
        }
        return true;
    };
    UploadDragAreaComponent.prototype.onFilesEntityDropped = function (item) {
        var _this = this;
        item.file(function (file) {
            _this.uploadService.addToQueue([file]);
            var path = item.fullPath.replace(item.name, '');
            var filePath = _this.currentFolderPath + path;
            _this.uploadService.uploadFilesInTheQueue(_this.rootFolderId, filePath, _this.onSuccess);
        });
    };
    UploadDragAreaComponent.prototype.onFolderEntityDropped = function (folder) {
        var _this = this;
        if (folder.isDirectory) {
            var relativePath = folder.fullPath.replace(folder.name, '');
            relativePath = this.currentFolderPath + relativePath;
            this.uploadService.createFolder(relativePath, folder.name)
                .subscribe(function (message) {
                _this.onSuccess.emit({
                    value: 'Created folder'
                });
                var dirReader = folder.createReader();
                dirReader.readEntries(function (entries) {
                    for (var i = 0; i < entries.length; i++) {
                        _this._traverseFileTree(entries[i]);
                    }
                    if (_this.showNotificationBar) {
                        var latestFilesAdded = _this.uploadService.getQueue();
                        _this.showUndoNotificationBar(latestFilesAdded);
                    }
                });
            }, function (error) {
                var errorMessagePlaceholder = _this.getErrorMessage(error.response);
                var errorMessage = _this.formatString(errorMessagePlaceholder, [folder.name]);
                if (_this.showNotificationBar) {
                    _this.showErrorNotificationBar(errorMessage);
                }
                else {
                    _this.logService.error(errorMessage);
                }
            });
        }
    };
    UploadDragAreaComponent.prototype._traverseFileTree = function (item) {
        if (item.isFile) {
            this.onFilesEntityDropped(item);
        }
        else {
            if (item.isDirectory) {
                this.onFolderEntityDropped(item);
            }
        }
    };
    UploadDragAreaComponent.prototype.showUndoNotificationBar = function (latestFilesAdded) {
        var messageTranslate, actionTranslate;
        messageTranslate = this.translateService.get('FILE_UPLOAD.MESSAGES.PROGRESS');
        actionTranslate = this.translateService.get('FILE_UPLOAD.ACTION.UNDO');
        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).afterDismissed().subscribe(function () {
            latestFilesAdded.forEach(function (uploadingFileModel) {
                uploadingFileModel.emitAbort();
            });
        });
    };
    UploadDragAreaComponent.prototype.showErrorNotificationBar = function (errorMessage) {
        this.notificationService.openSnackMessage(errorMessage, 3000);
    };
    UploadDragAreaComponent.prototype.getErrorMessage = function (response) {
        if (response.body.error.statusCode === ERROR_FOLDER_ALREADY_EXIST) {
            var errorMessage = void 0;
            errorMessage = this.translateService.get('FILE_UPLOAD.MESSAGES.FOLDER_ALREADY_EXIST');
            return errorMessage.value;
        }
    };
    UploadDragAreaComponent.prototype.formatString = function (message, keys) {
        if (message) {
            var i = keys.length;
            while (i--) {
                message = message.replace(new RegExp('\\{' + i + '\\}', 'gm'), keys[i]);
            }
        }
        return message;
    };
    UploadDragAreaComponent.prototype.createFormFields = function () {
        return {
            formFields: {
                overwrite: true
            }
        };
    };
    return UploadDragAreaComponent;
}());
UploadDragAreaComponent.DEFAULT_ROOT_ID = '-root-';
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], UploadDragAreaComponent.prototype, "showNotificationBar", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], UploadDragAreaComponent.prototype, "versioning", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], UploadDragAreaComponent.prototype, "currentFolderPath", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], UploadDragAreaComponent.prototype, "rootFolderId", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], UploadDragAreaComponent.prototype, "onSuccess", void 0);
UploadDragAreaComponent = UploadDragAreaComponent_1 = __decorate([
    core_1.Component({
        selector: 'alfresco-upload-drag-area',
        moduleId: module.id,
        template: "<div file-draggable id='UploadBorder' class=\"upload-border\"      (onFilesDropped)=\"onFilesDropped($event)\"      (onFilesEntityDropped)=\"onFilesEntityDropped($event)\"      (onFolderEntityDropped)=\"onFolderEntityDropped($event)\"      dropzone=\"\" webkitdropzone=\"*\" #droparea>     <ng-content></ng-content> </div>",
        styles: [".upload-border {     vertical-align: middle;     color: #555;     text-align: center; }  .input-focus {     color: #2196F3;     margin-left: 3px;     border: 3px dashed #2196F3; }"]
    }),
    __metadata("design:paramtypes", [upload_service_1.UploadService,
        ng2_alfresco_core_1.AlfrescoTranslationService,
        ng2_alfresco_core_1.LogService,
        ng2_alfresco_core_1.NotificationService])
], UploadDragAreaComponent);
exports.UploadDragAreaComponent = UploadDragAreaComponent;
var UploadDragAreaComponent_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
