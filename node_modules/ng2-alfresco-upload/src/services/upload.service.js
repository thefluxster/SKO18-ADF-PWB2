/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var file_model_1 = require("../models/file.model");
var UploadService = (function () {
    function UploadService(apiService, logService) {
        var _this = this;
        this.apiService = apiService;
        this.logService = logService;
        this.formFields = {};
        this.queue = [];
        this.versioning = false;
        this.totalCompleted = 0;
        this.filesUpload$ = new Rx_1.Observable(function (observer) { return _this.filesUploadObserverProgressBar = observer; }).share();
        this.totalCompleted$ = new Rx_1.Observable(function (observer) { return _this.totalCompletedObserver = observer; }).share();
    }
    UploadService.prototype.setOptions = function (options, versioning) {
        this.formFields = options.formFields != null ? options.formFields : this.formFields;
        this.versioning = versioning != null ? versioning : this.versioning;
    };
    UploadService.prototype.addToQueue = function (files) {
        var latestFilesAdded = [];
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
            var file = files_1[_i];
            if (this.isFile(file)) {
                var uploadingFileModel = new file_model_1.FileModel(file);
                latestFilesAdded.push(uploadingFileModel);
                this.queue.push(uploadingFileModel);
                if (this.filesUploadObserverProgressBar) {
                    this.filesUploadObserverProgressBar.next(this.queue);
                }
            }
        }
        return latestFilesAdded;
    };
    UploadService.prototype.uploadFilesInTheQueue = function (rootId, directory, elementEmit) {
        var _this = this;
        var filesToUpload = this.queue.filter(function (uploadingFileModel) {
            return !uploadingFileModel.uploading && !uploadingFileModel.done && !uploadingFileModel.abort && !uploadingFileModel.error;
        });
        var opts = {};
        opts.renditions = 'doclib';
        if (this.versioning) {
            opts.overwrite = true;
            opts.majorVersion = true;
        }
        else {
            opts.autoRename = true;
        }
        filesToUpload.forEach(function (uploadingFileModel) {
            uploadingFileModel.setUploading();
            var promiseUpload = _this.apiService.getInstance().upload.uploadFile(uploadingFileModel.file, directory, rootId, null, opts)
                .on('progress', function (progress) {
                uploadingFileModel.setProgres(progress);
                _this.updateFileListStream(_this.queue);
            })
                .on('abort', function () {
                uploadingFileModel.setAbort();
                elementEmit.emit({
                    value: 'File aborted'
                });
            })
                .on('error', function () {
                uploadingFileModel.setError();
                elementEmit.emit({
                    value: 'Error file uploaded'
                });
            })
                .on('success', function (data) {
                elementEmit.emit({
                    value: data
                });
                uploadingFileModel.onFinished(data.status, data.statusText, data.response);
                _this.updateFileListStream(_this.queue);
                if (!uploadingFileModel.abort && !uploadingFileModel.error) {
                    _this.updateFileCounterStream(++_this.totalCompleted);
                }
            });
            uploadingFileModel.setPromiseUpload(promiseUpload);
        });
    };
    UploadService.prototype.getQueue = function () {
        return this.queue;
    };
    UploadService.prototype.isFile = function (file) {
        return file !== null && (file instanceof Blob || (file.name && file.size));
    };
    UploadService.prototype.createFolder = function (relativePath, name) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.callApiCreateFolder(relativePath, name))
            .map(function (res) {
            return res;
        })
            .do(function (data) { return _this.logService.info('Node data', data); })
            .catch(function (err) { return _this.handleError(err); });
    };
    UploadService.prototype.callApiCreateFolder = function (relativePath, name) {
        return this.apiService.getInstance().nodes.createFolder(name, relativePath);
    };
    UploadService.prototype.handleError = function (error) {
        this.logService.error(error);
        return Rx_1.Observable.throw(error || 'Server error');
    };
    UploadService.prototype.updateFileListStream = function (fileList) {
        if (this.filesUploadObserverProgressBar) {
            this.filesUploadObserverProgressBar.next(fileList);
        }
    };
    UploadService.prototype.updateFileCounterStream = function (total) {
        if (this.totalCompletedObserver) {
            this.totalCompletedObserver.next(total);
        }
    };
    return UploadService;
}());
UploadService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService,
        ng2_alfresco_core_1.LogService])
], UploadService);
exports.UploadService = UploadService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
