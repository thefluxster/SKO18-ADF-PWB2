/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_translate_1 = require("ng2-translate/ng2-translate");
var AlfrescoTranslationService = (function () {
    function AlfrescoTranslationService(translate) {
        this.translate = translate;
        this.userLang = 'en';
        this.userLang = translate.getBrowserLang() || 'en';
        translate.setDefaultLang(this.userLang);
        this.customLoader = this.translate.currentLoader;
        this.customLoader.init(this.userLang);
    }
    AlfrescoTranslationService.prototype.addTranslationFolder = function (name, path) {
        var _this = this;
        if (name === void 0) { name = ''; }
        if (path === void 0) { path = ''; }
        if (!this.customLoader.existComponent(name)) {
            this.customLoader.addComponentList(name, path);
            this.translate.getTranslation(this.userLang).subscribe(function () {
                _this.translate.use(_this.userLang);
            });
        }
    };
    AlfrescoTranslationService.prototype.use = function (lang) {
        this.customLoader.init(lang);
        return this.translate.use(lang);
    };
    AlfrescoTranslationService.prototype.get = function (key, interpolateParams) {
        return this.translate.get(key, interpolateParams);
    };
    return AlfrescoTranslationService;
}());
AlfrescoTranslationService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [ng2_translate_1.TranslateService])
], AlfrescoTranslationService);
exports.AlfrescoTranslationService = AlfrescoTranslationService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2FsZnJlc2NvLXRyYW5zbGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOzs7Ozs7Ozs7OztBQUVILHNDQUEyQztBQUUzQyw2REFBK0Q7QUFJL0QsSUFBYSwwQkFBMEI7SUFJbkMsb0NBQW1CLFNBQTJCO1FBQTNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBSDlDLGFBQVEsR0FBVyxJQUFJLENBQUM7UUFJcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsY0FBYyxFQUFFLElBQUksSUFBSSxDQUFDO1FBQ25ELFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQTZCLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO1FBQzNFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQseURBQW9CLEdBQXBCLFVBQXFCLElBQWlCLEVBQUUsSUFBaUI7UUFBekQsaUJBU0M7UUFUb0IscUJBQUEsRUFBQSxTQUFpQjtRQUFFLHFCQUFBLEVBQUEsU0FBaUI7UUFDckQsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FDbEQ7Z0JBQ0ksS0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3RDLENBQUMsQ0FDSixDQUFDO1FBQ04sQ0FBQztJQUNMLENBQUM7SUFFRCx3Q0FBRyxHQUFILFVBQUksSUFBWTtRQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsd0NBQUcsR0FBSCxVQUFJLEdBQXlCLEVBQUUsaUJBQTBCO1FBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBQ0wsaUNBQUM7QUFBRCxDQTlCQSxBQThCQyxJQUFBO0FBOUJZLDBCQUEwQjtJQUR0QyxpQkFBVSxFQUFFO3FDQUtxQixnQ0FBZ0I7R0FKckMsMEJBQTBCLENBOEJ0QztBQTlCWSxnRUFBMEIiLCJmaWxlIjoic2VydmljZXMvYWxmcmVzY28tdHJhbnNsYXRpb24uc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL1J4JztcbmltcG9ydCB7IFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICduZzItdHJhbnNsYXRlL25nMi10cmFuc2xhdGUnO1xuaW1wb3J0IHsgQWxmcmVzY29UcmFuc2xhdGVMb2FkZXIgfSBmcm9tICcuL2FsZnJlc2NvLXRyYW5zbGF0ZS1sb2FkZXIuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbGZyZXNjb1RyYW5zbGF0aW9uU2VydmljZSB7XG4gICAgdXNlckxhbmc6IHN0cmluZyA9ICdlbic7XG4gICAgY3VzdG9tTG9hZGVyOiBBbGZyZXNjb1RyYW5zbGF0ZUxvYWRlcjtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy51c2VyTGFuZyA9IHRyYW5zbGF0ZS5nZXRCcm93c2VyTGFuZygpIHx8ICdlbic7XG4gICAgICAgIHRyYW5zbGF0ZS5zZXREZWZhdWx0TGFuZyh0aGlzLnVzZXJMYW5nKTtcbiAgICAgICAgdGhpcy5jdXN0b21Mb2FkZXIgPSA8QWxmcmVzY29UcmFuc2xhdGVMb2FkZXI+IHRoaXMudHJhbnNsYXRlLmN1cnJlbnRMb2FkZXI7XG4gICAgICAgIHRoaXMuY3VzdG9tTG9hZGVyLmluaXQodGhpcy51c2VyTGFuZyk7XG4gICAgfVxuXG4gICAgYWRkVHJhbnNsYXRpb25Gb2xkZXIobmFtZTogc3RyaW5nID0gJycsIHBhdGg6IHN0cmluZyA9ICcnKSB7XG4gICAgICAgIGlmICghdGhpcy5jdXN0b21Mb2FkZXIuZXhpc3RDb21wb25lbnQobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tTG9hZGVyLmFkZENvbXBvbmVudExpc3QobmFtZSwgcGF0aCk7XG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZS5nZXRUcmFuc2xhdGlvbih0aGlzLnVzZXJMYW5nKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZS51c2UodGhpcy51c2VyTGFuZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVzZShsYW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICB0aGlzLmN1c3RvbUxvYWRlci5pbml0KGxhbmcpO1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGUudXNlKGxhbmcpO1xuICAgIH1cblxuICAgIGdldChrZXk6IHN0cmluZ3xBcnJheTxzdHJpbmc+LCBpbnRlcnBvbGF0ZVBhcmFtcz86IE9iamVjdCk6IE9ic2VydmFibGU8c3RyaW5nfGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGUuZ2V0KGtleSwgaW50ZXJwb2xhdGVQYXJhbXMpO1xuICAgIH1cbn1cbiJdfQ==
