/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require("@angular/core");
var Subject_1 = require("rxjs/Subject");
var AlfrescoSettingsService = AlfrescoSettingsService_1 = (function () {
    function AlfrescoSettingsService() {
        this._ecmHost = AlfrescoSettingsService_1.DEFAULT_ECM_ADDRESS;
        this._bpmHost = AlfrescoSettingsService_1.DEFAULT_BPM_ADDRESS;
        this._csrfDisabled = AlfrescoSettingsService_1.DEFAULT_CSRF_CONFIG;
        this._bpmContextPath = AlfrescoSettingsService_1.DEFAULT_BPM_CONTEXT_PATH;
        this.providers = 'ALL';
        this.bpmHostSubject = new Subject_1.Subject();
        this.ecmHostSubject = new Subject_1.Subject();
        this.csrfSubject = new Subject_1.Subject();
        this.providerSubject = new Subject_1.Subject();
    }
    Object.defineProperty(AlfrescoSettingsService.prototype, "ecmHost", {
        get: function () {
            return this._ecmHost;
        },
        set: function (ecmHostUrl) {
            this.ecmHostSubject.next(ecmHostUrl);
            this._ecmHost = ecmHostUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoSettingsService.prototype, "csrfDisabled", {
        set: function (csrfDisabled) {
            this.csrfSubject.next(csrfDisabled);
            this._csrfDisabled = csrfDisabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlfrescoSettingsService.prototype, "bpmHost", {
        get: function () {
            return this._bpmHost;
        },
        set: function (bpmHostUrl) {
            this.bpmHostSubject.next(bpmHostUrl);
            this._bpmHost = bpmHostUrl;
        },
        enumerable: true,
        configurable: true
    });
    AlfrescoSettingsService.prototype.getBPMApiBaseUrl = function () {
        return this._bpmHost + this._bpmContextPath;
    };
    AlfrescoSettingsService.prototype.getProviders = function () {
        return this.providers;
    };
    AlfrescoSettingsService.prototype.setProviders = function (providers) {
        this.providerSubject.next(providers);
        this.providers = providers;
    };
    return AlfrescoSettingsService;
}());
AlfrescoSettingsService.DEFAULT_ECM_ADDRESS = 'http://' + window.location.hostname + ':8080';
AlfrescoSettingsService.DEFAULT_BPM_ADDRESS = 'http://' + window.location.hostname + ':9999';
AlfrescoSettingsService.DEFAULT_CSRF_CONFIG = false;
AlfrescoSettingsService.DEFAULT_BPM_CONTEXT_PATH = '/activiti-app';
AlfrescoSettingsService = AlfrescoSettingsService_1 = __decorate([
    core_1.Injectable()
], AlfrescoSettingsService);
exports.AlfrescoSettingsService = AlfrescoSettingsService;
var AlfrescoSettingsService_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2FsZnJlc2NvLXNldHRpbmdzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOzs7Ozs7OztBQUVILHNDQUEyQztBQUMzQyx3Q0FBdUM7QUFHdkMsSUFBYSx1QkFBdUI7SUFEcEM7UUFTWSxhQUFRLEdBQVcseUJBQXVCLENBQUMsbUJBQW1CLENBQUM7UUFDL0QsYUFBUSxHQUFXLHlCQUF1QixDQUFDLG1CQUFtQixDQUFDO1FBQy9ELGtCQUFhLEdBQVkseUJBQXVCLENBQUMsbUJBQW1CLENBQUM7UUFFckUsb0JBQWUsR0FBRyx5QkFBdUIsQ0FBQyx3QkFBd0IsQ0FBQztRQUVuRSxjQUFTLEdBQVcsS0FBSyxDQUFDO1FBRTNCLG1CQUFjLEdBQW9CLElBQUksaUJBQU8sRUFBVSxDQUFDO1FBQ3hELG1CQUFjLEdBQW9CLElBQUksaUJBQU8sRUFBVSxDQUFDO1FBQ3hELGdCQUFXLEdBQXFCLElBQUksaUJBQU8sRUFBVyxDQUFDO1FBQ3ZELG9CQUFlLEdBQW9CLElBQUksaUJBQU8sRUFBVSxDQUFDO0lBcUNwRSxDQUFDO0lBbkNHLHNCQUFXLDRDQUFPO2FBQWxCO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDekIsQ0FBQzthQU9ELFVBQW1CLFVBQWtCO1lBQ2pDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQy9CLENBQUM7OztPQVZBO0lBRUQsc0JBQVcsaURBQVk7YUFBdkIsVUFBd0IsWUFBcUI7WUFDekMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7UUFDdEMsQ0FBQzs7O09BQUE7SUFPRCxzQkFBVyw0Q0FBTzthQUFsQjtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3pCLENBQUM7YUFFRCxVQUFtQixVQUFrQjtZQUNqQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztRQUMvQixDQUFDOzs7T0FMQTtJQU9NLGtEQUFnQixHQUF2QjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDaEQsQ0FBQztJQUVNLDhDQUFZLEdBQW5CO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVNLDhDQUFZLEdBQW5CLFVBQW9CLFNBQWlCO1FBQ2pDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQy9CLENBQUM7SUFDTCw4QkFBQztBQUFELENBeERBLEFBd0RDLElBQUE7QUF0RFUsMkNBQW1CLEdBQVcsU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUM3RSwyQ0FBbUIsR0FBVyxTQUFTLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0FBQzdFLDJDQUFtQixHQUFZLEtBQUssQ0FBQztBQUVyQyxnREFBd0IsR0FBVyxlQUFlLENBQUM7QUFOakQsdUJBQXVCO0lBRG5DLGlCQUFVLEVBQUU7R0FDQSx1QkFBdUIsQ0F3RG5DO0FBeERZLDBEQUF1QiIsImZpbGUiOiJzZXJ2aWNlcy9hbGZyZXNjby1zZXR0aW5ncy5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMvU3ViamVjdCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbGZyZXNjb1NldHRpbmdzU2VydmljZSB7XG5cbiAgICBzdGF0aWMgREVGQVVMVF9FQ01fQUREUkVTUzogc3RyaW5nID0gJ2h0dHA6Ly8nICsgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICsgJzo4MDgwJztcbiAgICBzdGF0aWMgREVGQVVMVF9CUE1fQUREUkVTUzogc3RyaW5nID0gJ2h0dHA6Ly8nICsgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICsgJzo5OTk5JztcbiAgICBzdGF0aWMgREVGQVVMVF9DU1JGX0NPTkZJRzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgc3RhdGljIERFRkFVTFRfQlBNX0NPTlRFWFRfUEFUSDogc3RyaW5nID0gJy9hY3Rpdml0aS1hcHAnO1xuXG4gICAgcHJpdmF0ZSBfZWNtSG9zdDogc3RyaW5nID0gQWxmcmVzY29TZXR0aW5nc1NlcnZpY2UuREVGQVVMVF9FQ01fQUREUkVTUztcbiAgICBwcml2YXRlIF9icG1Ib3N0OiBzdHJpbmcgPSBBbGZyZXNjb1NldHRpbmdzU2VydmljZS5ERUZBVUxUX0JQTV9BRERSRVNTO1xuICAgIHByaXZhdGUgX2NzcmZEaXNhYmxlZDogYm9vbGVhbiA9IEFsZnJlc2NvU2V0dGluZ3NTZXJ2aWNlLkRFRkFVTFRfQ1NSRl9DT05GSUc7XG5cbiAgICBwcml2YXRlIF9icG1Db250ZXh0UGF0aCA9IEFsZnJlc2NvU2V0dGluZ3NTZXJ2aWNlLkRFRkFVTFRfQlBNX0NPTlRFWFRfUEFUSDtcblxuICAgIHByaXZhdGUgcHJvdmlkZXJzOiBzdHJpbmcgPSAnQUxMJzsgLy8gRUNNLCBCUE0gLCBBTExcblxuICAgIHB1YmxpYyBicG1Ib3N0U3ViamVjdDogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xuICAgIHB1YmxpYyBlY21Ib3N0U3ViamVjdDogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xuICAgIHB1YmxpYyBjc3JmU3ViamVjdDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gICAgcHVibGljIHByb3ZpZGVyU3ViamVjdDogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xuXG4gICAgcHVibGljIGdldCBlY21Ib3N0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lY21Ib3N0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgY3NyZkRpc2FibGVkKGNzcmZEaXNhYmxlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmNzcmZTdWJqZWN0Lm5leHQoY3NyZkRpc2FibGVkKTtcbiAgICAgICAgdGhpcy5fY3NyZkRpc2FibGVkID0gY3NyZkRpc2FibGVkO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgZWNtSG9zdChlY21Ib3N0VXJsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5lY21Ib3N0U3ViamVjdC5uZXh0KGVjbUhvc3RVcmwpO1xuICAgICAgICB0aGlzLl9lY21Ib3N0ID0gZWNtSG9zdFVybDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGJwbUhvc3QoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JwbUhvc3Q7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBicG1Ib3N0KGJwbUhvc3RVcmw6IHN0cmluZykge1xuICAgICAgICB0aGlzLmJwbUhvc3RTdWJqZWN0Lm5leHQoYnBtSG9zdFVybCk7XG4gICAgICAgIHRoaXMuX2JwbUhvc3QgPSBicG1Ib3N0VXJsO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRCUE1BcGlCYXNlVXJsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9icG1Ib3N0ICsgdGhpcy5fYnBtQ29udGV4dFBhdGg7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFByb3ZpZGVycygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlcnM7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFByb3ZpZGVycyhwcm92aWRlcnM6IHN0cmluZykge1xuICAgICAgICB0aGlzLnByb3ZpZGVyU3ViamVjdC5uZXh0KHByb3ZpZGVycyk7XG4gICAgICAgIHRoaXMucHJvdmlkZXJzID0gcHJvdmlkZXJzO1xuICAgIH1cbn1cbiJdfQ==
