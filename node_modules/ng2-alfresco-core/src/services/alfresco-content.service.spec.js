/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var alfresco_settings_service_1 = require("./alfresco-settings.service");
var alfresco_authentication_service_1 = require("./alfresco-authentication.service");
var alfresco_content_service_1 = require("./alfresco-content.service");
var alfresco_api_service_1 = require("./alfresco-api.service");
var storage_service_1 = require("./storage.service");
var log_service_1 = require("./log.service");
describe('AlfrescoContentService', function () {
    var injector, contentService;
    var authService;
    var settingsService;
    var storage;
    var node;
    var nodeId = 'fake-node-id';
    beforeEach(function () {
        injector = core_1.ReflectiveInjector.resolveAndCreate([
            alfresco_api_service_1.AlfrescoApiService,
            alfresco_content_service_1.AlfrescoContentService,
            alfresco_authentication_service_1.AlfrescoAuthenticationService,
            alfresco_settings_service_1.AlfrescoSettingsService,
            storage_service_1.StorageService,
            log_service_1.LogService
        ]);
        authService = injector.get(alfresco_authentication_service_1.AlfrescoAuthenticationService);
        settingsService = injector.get(alfresco_settings_service_1.AlfrescoSettingsService);
        contentService = injector.get(alfresco_content_service_1.AlfrescoContentService);
        storage = injector.get(storage_service_1.StorageService);
        storage.clear();
        node = {
            entry: {
                id: nodeId
            }
        };
        jasmine.Ajax.install();
    });
    afterEach(function () {
        jasmine.Ajax.uninstall();
    });
    beforeEach(function () {
        settingsService.setProviders('ECM');
    });
    it('should return a valid content URL', function (done) {
        authService.login('fake-username', 'fake-password').subscribe(function () {
            expect(contentService.getContentUrl(node)).toBe('http://localhost:8080/alfresco/api/' +
                '-default-/public/alfresco/versions/1/nodes/fake-node-id/content?attachment=false&alf_ticket=fake-post-ticket');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 201,
            contentType: 'application/json',
            responseText: JSON.stringify({ 'entry': { 'id': 'fake-post-ticket', 'userId': 'admin' } })
        });
    });
    it('should return a valid thumbnail URL', function (done) {
        authService.login('fake-username', 'fake-password').subscribe(function () {
            expect(contentService.getDocumentThumbnailUrl(node))
                .toBe('http://localhost:8080/alfresco/api/-default-/public/alfresco' +
                '/versions/1/nodes/fake-node-id/renditions/doclib/content?attachment=false&alf_ticket=fake-post-ticket');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 201,
            contentType: 'application/json',
            responseText: JSON.stringify({ 'entry': { 'id': 'fake-post-ticket', 'userId': 'admin' } })
        });
    });
});
//# sourceMappingURL=alfresco-content.service.spec.js.map