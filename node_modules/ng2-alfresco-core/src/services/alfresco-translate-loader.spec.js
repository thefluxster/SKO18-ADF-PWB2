/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var ng2_translate_1 = require("ng2-translate/ng2-translate");
var http_1 = require("@angular/http");
var testing_1 = require("@angular/http/testing");
var testing_2 = require("@angular/core/testing");
var alfresco_translate_loader_service_1 = require("./alfresco-translate-loader.service");
var alfresco_translation_service_1 = require("./alfresco-translation.service");
var log_service_1 = require("./log.service");
var componentJson1 = ' {"TEST": "This is a test", "TEST2": "This is another test"} ';
var mockBackendResponse = function (connection, response) {
    connection.mockRespond(new http_1.Response(new http_1.ResponseOptions({ body: response })));
};
describe('TranslateLoader', function () {
    var injector;
    var backend;
    var alfrescoTranslationService;
    var connection;
    var customLoader;
    beforeEach(function () {
        testing_2.TestBed.configureTestingModule({
            imports: [
                http_1.HttpModule,
                ng2_translate_1.TranslateModule.forRoot({
                    provide: ng2_translate_1.TranslateLoader,
                    useClass: alfresco_translate_loader_service_1.AlfrescoTranslateLoader
                })
            ],
            providers: [
                alfresco_translation_service_1.AlfrescoTranslationService,
                log_service_1.LogService,
                { provide: http_1.XHRBackend, useClass: testing_1.MockBackend }
            ]
        });
        injector = testing_2.getTestBed();
        backend = injector.get(http_1.XHRBackend);
        alfrescoTranslationService = injector.get(alfresco_translation_service_1.AlfrescoTranslationService);
        backend.connections.subscribe(function (c) { return connection = c; });
        customLoader = alfrescoTranslationService.translate.currentLoader;
    });
    it('should be able to provide any TranslateLoader', function () {
        expect(alfrescoTranslationService).toBeDefined();
        expect(alfrescoTranslationService.translate.currentLoader).toBeDefined();
        expect(alfrescoTranslationService.translate.currentLoader instanceof alfresco_translate_loader_service_1.AlfrescoTranslateLoader).toBeTruthy();
    });
    it('should add the component to the list', function () {
        customLoader.addComponentList('login', 'path/login');
        expect(customLoader.existComponent('login')).toBeTruthy();
    });
    it('should return the Json translation ', function () {
        customLoader.addComponentList('login', 'path/login');
        customLoader.getTranslation('en').subscribe(function (response) {
            expect(response).toBeDefined();
            expect(response).toEqual(JSON.parse(componentJson1));
        });
        mockBackendResponse(connection, componentJson1);
    });
});
//# sourceMappingURL=alfresco-translate-loader.spec.js.map