/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var ng2_translate_1 = require("ng2-translate/ng2-translate");
var http_1 = require("@angular/http");
var testing_1 = require("@angular/http/testing");
var testing_2 = require("@angular/core/testing");
var alfresco_translation_service_1 = require("./alfresco-translation.service");
var alfresco_translate_loader_service_1 = require("./alfresco-translate-loader.service");
var log_service_1 = require("./log.service");
var mockBackendResponse = function (connection, response) {
    connection.mockRespond(new http_1.Response(new http_1.ResponseOptions({ body: response })));
};
describe('AlfrescoTranslationService', function () {
    var injector;
    var backend;
    var alfrescoTranslationService;
    var connection;
    beforeEach(function () {
        testing_2.TestBed.configureTestingModule({
            imports: [
                http_1.HttpModule,
                ng2_translate_1.TranslateModule.forRoot({
                    provide: ng2_translate_1.TranslateLoader,
                    useClass: alfresco_translate_loader_service_1.AlfrescoTranslateLoader
                })
            ],
            providers: [
                alfresco_translation_service_1.AlfrescoTranslationService,
                log_service_1.LogService,
                { provide: http_1.XHRBackend, useClass: testing_1.MockBackend }
            ]
        });
        injector = testing_2.getTestBed();
        backend = injector.get(http_1.XHRBackend);
        alfrescoTranslationService = injector.get(alfresco_translation_service_1.AlfrescoTranslationService);
        backend.connections.subscribe(function (c) { return connection = c; });
        alfrescoTranslationService.addTranslationFolder('fake-name', 'fake-path');
    });
    it('is defined', function () {
        expect(alfresco_translation_service_1.AlfrescoTranslationService).toBeDefined();
        expect(alfrescoTranslationService instanceof alfresco_translation_service_1.AlfrescoTranslationService).toBeTruthy();
    });
    it('should be able to get translations of the KEY: TEST', function () {
        alfrescoTranslationService.get('TEST').subscribe(function (res) {
            expect(res).toEqual('This is a test');
        });
        mockBackendResponse(connection, '{"TEST": "This is a test", "TEST2": "This is another test"}');
    });
    it('should be able to get translations of the KEY: TEST2', function () {
        alfrescoTranslationService.get('TEST2').subscribe(function (res) {
            expect(res).toEqual('This is another test');
        });
        mockBackendResponse(connection, '{"TEST": "This is a test", "TEST2": "This is another test"}');
    });
});
//# sourceMappingURL=alfresco-translation.service.spec.js.map