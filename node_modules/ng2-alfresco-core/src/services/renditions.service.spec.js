/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var alfresco_api_service_1 = require("./alfresco-api.service");
var renditions_service_1 = require("./renditions.service");
var alfresco_settings_service_1 = require("./alfresco-settings.service");
var storage_service_1 = require("./storage.service");
var log_service_1 = require("./log.service");
var renditionsService_mock_1 = require("../assets/renditionsService.mock");
describe('RenditionsService', function () {
    var service, injector;
    beforeEach(function () {
        injector = core_1.ReflectiveInjector.resolveAndCreate([
            alfresco_api_service_1.AlfrescoApiService,
            renditions_service_1.RenditionsService,
            alfresco_settings_service_1.AlfrescoSettingsService,
            storage_service_1.StorageService,
            log_service_1.LogService
        ]);
    });
    beforeEach(function () {
        jasmine.Ajax.install();
        service = injector.get(renditions_service_1.RenditionsService);
    });
    afterEach(function () {
        jasmine.Ajax.uninstall();
    });
    it('Get redition list service should return the list', function (done) {
        service.getRenditionsListByNodeId('fake-node-id').subscribe(function (res) {
            expect(res.list.entries[0].entry.id).toBe('avatar');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(renditionsService_mock_1.fakeReditionsList)
        });
    });
    it('Create redition service should call the server with the ID passed and the asked encoding', function (done) {
        service.createRendition('fake-node-id', 'pdf').subscribe(function (res) {
            expect(jasmine.Ajax.requests.mostRecent().url).toBe('http://localhost:8080/alfresco/api/-default-/public/alfresco/versions/1/nodes/fake-node-id/renditions');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: ''
        });
    });
    it('Get redition service should catch the error', function (done) {
        service.getRenditionsListByNodeId('fake-node-id').subscribe(function (res) {
        }, function (res) {
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 403,
            contentType: 'application/json',
            responseText: 'error'
        });
    });
    it('isConversionPossible should return true if is possible convert', function (done) {
        service.isConversionPossible('fake-node-id', 'pdf').subscribe(function (res) {
            expect(res).toBe(true);
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(renditionsService_mock_1.fakeRedition)
        });
    });
    it('isConversionPossible should return false if is not possible to convert', function (done) {
        service.isConversionPossible('fake-node-id', 'pdf').subscribe(function (res) {
            expect(res).toBe(false);
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 403,
            contentType: 'application/json'
        });
    });
    it('isRenditionsAvailable should return true if the conversion exist', function (done) {
        service.isRenditionAvailable('fake-node-id', 'pdf').subscribe(function (res) {
            expect(res).toBe(true);
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(renditionsService_mock_1.fakeReditionCreated)
        });
    });
    it('isRenditionsAvailable should return false if the conversion not exist', function (done) {
        service.isRenditionAvailable('fake-node-id', 'pdf').subscribe(function (res) {
            expect(res).toBe(false);
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(renditionsService_mock_1.fakeRedition)
        });
    });
    it('isRenditionsAvailable should return false if the conversion get error', function (done) {
        service.isRenditionAvailable('fake-node-id', 'pdf').subscribe(function (res) {
            expect(res).toBe(false);
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 400,
            contentType: 'application/json'
        });
    });
});
//# sourceMappingURL=renditions.service.spec.js.map