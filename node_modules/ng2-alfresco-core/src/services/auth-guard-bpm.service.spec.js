/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var alfresco_settings_service_1 = require("./alfresco-settings.service");
var alfresco_authentication_service_1 = require("./alfresco-authentication.service");
var alfresco_api_service_1 = require("./alfresco-api.service");
var storage_service_1 = require("./storage.service");
var log_service_1 = require("./log.service");
var auth_guard_bpm_service_1 = require("./auth-guard-bpm.service");
var router_1 = require("@angular/router");
var testing_1 = require("@angular/router/testing");
var testing_2 = require("@angular/core/testing");
describe('AuthGuardService BPM', function () {
    beforeEach(function () {
        testing_2.TestBed.configureTestingModule({
            providers: [auth_guard_bpm_service_1.AuthGuardBpm,
                alfresco_settings_service_1.AlfrescoSettingsService,
                alfresco_api_service_1.AlfrescoApiService,
                alfresco_authentication_service_1.AlfrescoAuthenticationService,
                storage_service_1.StorageService,
                log_service_1.LogService],
            imports: [testing_1.RouterTestingModule]
        });
    });
    it('if the alfresco js api is logged in should canActivate be true', testing_2.async(testing_2.inject([auth_guard_bpm_service_1.AuthGuardBpm, router_1.Router, alfresco_settings_service_1.AlfrescoSettingsService, storage_service_1.StorageService, alfresco_authentication_service_1.AlfrescoAuthenticationService], function (auth, router, settingsService, storage, authService) {
        spyOn(router, 'navigate');
        authService.isBpmLoggedIn = function () {
            return true;
        };
        expect(auth.canActivate()).toBeTruthy();
        expect(router.navigate).not.toHaveBeenCalled();
    })));
    it('if the alfresco js api is NOT logged in should canActivate be false', testing_2.async(testing_2.inject([auth_guard_bpm_service_1.AuthGuardBpm, router_1.Router, alfresco_settings_service_1.AlfrescoSettingsService, storage_service_1.StorageService, alfresco_authentication_service_1.AlfrescoAuthenticationService], function (auth, router, settingsService, storage, authService) {
        spyOn(router, 'navigate');
        authService.isBpmLoggedIn = function () {
            return false;
        };
        expect(auth.canActivate()).toBeFalsy();
        expect(router.navigate).toHaveBeenCalled();
    })));
});
//# sourceMappingURL=auth-guard-bpm.service.spec.js.map