/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
var component_model_1 = require("../models/component.model");
var log_service_1 = require("./log.service");
var AlfrescoTranslateLoader = (function () {
    function AlfrescoTranslateLoader(http, logService) {
        this.http = http;
        this.logService = logService;
        this.prefix = 'i18n';
        this.suffix = '.json';
        this._componentList = [];
        this.queue = [];
    }
    AlfrescoTranslateLoader.prototype.addComponentList = function (nameInput, pathInput) {
        this._componentList.push(new component_model_1.ComponentTranslationModel({ name: nameInput, path: pathInput }));
    };
    AlfrescoTranslateLoader.prototype.existComponent = function (name) {
        return this._componentList.find(function (x) { return x.name === name; }) ? true : false;
    };
    AlfrescoTranslateLoader.prototype.getComponentToFetch = function (lang) {
        var _this = this;
        var observableBatch = [];
        this._componentList.forEach(function (component) {
            if (!_this.isComponentInQueue(lang, component.name)) {
                _this.queue[lang].push(component.name);
                observableBatch.push(_this.http.get(component.path + "/" + _this.prefix + "/" + lang + _this.suffix)
                    .map(function (res) {
                    component.json[lang] = res.json();
                })
                    .catch(function () {
                    return Rx_1.Observable.of('');
                }));
            }
        });
        return observableBatch;
    };
    AlfrescoTranslateLoader.prototype.init = function (lang) {
        if (this.queue[lang] === undefined) {
            this.queue[lang] = [];
        }
    };
    AlfrescoTranslateLoader.prototype.isComponentInQueue = function (lang, name) {
        return this.queue[lang].find(function (x) { return x === name; }) ? true : false;
    };
    AlfrescoTranslateLoader.prototype.getFullTranslationJSON = function (lang) {
        var fullTranslation = '';
        var cloneList = this._componentList.slice(0);
        cloneList.reverse().forEach(function (component) {
            if (component.json && component.json[lang]) {
                fullTranslation += JSON.stringify(component.json[lang]);
            }
        });
        if (fullTranslation !== '') {
            return JSON.parse(fullTranslation.replace(/}{/g, ','));
        }
    };
    AlfrescoTranslateLoader.prototype.getTranslation = function (lang) {
        var _this = this;
        var observableBatch = this.getComponentToFetch(lang);
        return Rx_1.Observable.create(function (observer) {
            if (observableBatch.length > 0) {
                Rx_1.Observable.forkJoin(observableBatch).subscribe(function () {
                    var fullTranslation = _this.getFullTranslationJSON(lang);
                    if (fullTranslation) {
                        observer.next(fullTranslation);
                    }
                    observer.complete();
                }, function (err) {
                    _this.logService.error(err);
                });
            }
            else {
                var fullTranslation = _this.getFullTranslationJSON(lang);
                if (fullTranslation) {
                    observer.next(fullTranslation);
                }
            }
        });
    };
    return AlfrescoTranslateLoader;
}());
AlfrescoTranslateLoader = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http,
        log_service_1.LogService])
], AlfrescoTranslateLoader);
exports.AlfrescoTranslateLoader = AlfrescoTranslateLoader;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
