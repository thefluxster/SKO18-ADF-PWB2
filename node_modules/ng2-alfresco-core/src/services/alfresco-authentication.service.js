/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var alfresco_settings_service_1 = require("./alfresco-settings.service");
var storage_service_1 = require("./storage.service");
var log_service_1 = require("./log.service");
var alfresco_api_service_1 = require("./alfresco-api.service");
var AlfrescoAuthenticationService = (function () {
    function AlfrescoAuthenticationService(settingsService, alfrescoApi, storage, logService) {
        this.settingsService = settingsService;
        this.alfrescoApi = alfrescoApi;
        this.storage = storage;
        this.logService = logService;
        this.loginSubject = new Rx_1.Subject();
        this.logoutSubject = new Rx_1.Subject();
    }
    AlfrescoAuthenticationService.prototype.isLoggedIn = function () {
        return !!this.alfrescoApi.getInstance().isLoggedIn();
    };
    AlfrescoAuthenticationService.prototype.login = function (username, password) {
        var _this = this;
        this.removeTicket();
        return Rx_1.Observable.fromPromise(this.callApiLogin(username, password))
            .map(function (response) {
            _this.saveTickets();
            _this.loginSubject.next(response);
            return { type: _this.settingsService.getProviders(), ticket: response };
        })
            .catch(function (err) { return _this.handleError(err); });
    };
    AlfrescoAuthenticationService.prototype.callApiLogin = function (username, password) {
        return this.alfrescoApi.getInstance().login(username, password);
    };
    AlfrescoAuthenticationService.prototype.logout = function () {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.callApiLogout())
            .map(function (res) { return res; })
            .do(function (response) {
            _this.removeTicket();
            _this.logoutSubject.next(response);
            return response;
        })
            .catch(function (err) { return _this.handleError(err); });
    };
    AlfrescoAuthenticationService.prototype.callApiLogout = function () {
        if (this.alfrescoApi.getInstance()) {
            return this.alfrescoApi.getInstance().logout();
        }
    };
    AlfrescoAuthenticationService.prototype.removeTicket = function () {
        this.storage.removeItem('ticket-ECM');
        this.storage.removeItem('ticket-BPM');
        this.alfrescoApi.getInstance().setTicket(undefined, undefined);
    };
    AlfrescoAuthenticationService.prototype.getTicketEcm = function () {
        return this.storage.getItem('ticket-ECM');
    };
    AlfrescoAuthenticationService.prototype.getTicketBpm = function () {
        return this.storage.getItem('ticket-BPM');
    };
    AlfrescoAuthenticationService.prototype.getTicketEcmBase64 = function () {
        var ticket = this.storage.getItem('ticket-ECM');
        if (ticket) {
            return 'Basic ' + btoa(ticket);
        }
        return null;
    };
    AlfrescoAuthenticationService.prototype.saveTickets = function () {
        this.saveTicketEcm();
        this.saveTicketBpm();
    };
    AlfrescoAuthenticationService.prototype.saveTicketEcm = function () {
        if (this.alfrescoApi.getInstance() && this.alfrescoApi.getInstance().getTicketEcm()) {
            this.storage.setItem('ticket-ECM', this.alfrescoApi.getInstance().getTicketEcm());
        }
    };
    AlfrescoAuthenticationService.prototype.saveTicketBpm = function () {
        if (this.alfrescoApi.getInstance() && this.alfrescoApi.getInstance().getTicketBpm()) {
            this.storage.setItem('ticket-BPM', this.alfrescoApi.getInstance().getTicketBpm());
        }
    };
    AlfrescoAuthenticationService.prototype.isEcmLoggedIn = function () {
        return this.alfrescoApi.getInstance().ecmAuth && !!this.alfrescoApi.getInstance().ecmAuth.isLoggedIn();
    };
    AlfrescoAuthenticationService.prototype.isBpmLoggedIn = function () {
        return this.alfrescoApi.getInstance().bpmAuth && !!this.alfrescoApi.getInstance().bpmAuth.isLoggedIn();
    };
    AlfrescoAuthenticationService.prototype.handleError = function (error) {
        this.logService.error('Error when logging in', error);
        return Rx_1.Observable.throw(error || 'Server error');
    };
    return AlfrescoAuthenticationService;
}());
AlfrescoAuthenticationService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [alfresco_settings_service_1.AlfrescoSettingsService,
        alfresco_api_service_1.AlfrescoApiService,
        storage_service_1.StorageService,
        log_service_1.LogService])
], AlfrescoAuthenticationService);
exports.AlfrescoAuthenticationService = AlfrescoAuthenticationService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
