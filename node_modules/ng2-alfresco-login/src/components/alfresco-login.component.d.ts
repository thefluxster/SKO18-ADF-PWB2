/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnInit, TemplateRef } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { AlfrescoTranslationService, AlfrescoAuthenticationService, AlfrescoSettingsService, LogService } from 'ng2-alfresco-core';
import { FormSubmitEvent } from '../models/form-submit-event.model';
export declare class AlfrescoLoginComponent implements OnInit {
    private _fb;
    private authService;
    private settingsService;
    private translateService;
    private logService;
    baseComponentPath: string;
    isPasswordShow: boolean;
    needHelpLink: string;
    registerLink: string;
    logoImageUrl: string;
    backgroundImageUrl: string;
    providers: string;
    fieldsValidation: any;
    disableCsrf: boolean;
    onSuccess: EventEmitter<{}>;
    onError: EventEmitter<{}>;
    executeSubmit: EventEmitter<FormSubmitEvent>;
    form: FormGroup;
    error: boolean;
    errorMsg: string;
    success: boolean;
    formError: {
        [id: string]: string;
    };
    minLenght: number;
    footerTemplate: TemplateRef<any>;
    headerTemplate: TemplateRef<any>;
    private _message;
    constructor(_fb: FormBuilder, authService: AlfrescoAuthenticationService, settingsService: AlfrescoSettingsService, translateService: AlfrescoTranslationService, logService: LogService);
    ngOnInit(): void;
    onSubmit(values: any): boolean;
    onValueChanged(data: any): void;
    private performeLogin(values);
    private displayErrorMessage(err);
    private checkRequiredParams();
    addCustomFormError(field: string, msg: string): void;
    addCustomValidationError(field: string, ruleId: string, msg: string, params?: any): void;
    toggleShowPassword(): void;
    isErrorStyle(field: FormGroup): boolean;
    private initFormError();
    private initFormFieldsMessages();
    private initFormFieldsMessagesDefault();
    private initFormFieldsDefault();
    private disableError();
    private enableError();
    private hasCustomFiledsValidation();
}
