/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var Rx_1 = require("rxjs/Rx");
var AuthenticationMock = (function () {
    function AuthenticationMock() {
    }
    AuthenticationMock.prototype.login = function (username, password) {
        if (username === 'fake-username' && password === 'fake-password') {
            return Rx_1.Observable.of(true);
        }
        if (username === 'fake-username-CORS-error' && password === 'fake-password') {
            return Rx_1.Observable.throw({
                error: {
                    crossDomain: true,
                    message: 'ERROR: the network is offline, Origin is not allowed by Access-Control-Allow-Origin'
                }
            });
        }
        if (username === 'fake-username-CSRF-error' && password === 'fake-password') {
            return Rx_1.Observable.throw({ message: 'ERROR: Invalid CSRF-token', status: 403 });
        }
        if (username === 'fake-username-ECM-access-error' && password === 'fake-password') {
            return Rx_1.Observable.throw({ message: 'ERROR: 00170728 Access Denied.  The system is currently in read-only mode', status: 403 });
        }
        return Rx_1.Observable.throw('Fake server error');
    };
    return AuthenticationMock;
}());
exports.AuthenticationMock = AuthenticationMock;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlLm1vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOztBQUVILDhCQUFxQztBQUdyQztJQUFBO0lBMkJBLENBQUM7SUF4Qkcsa0NBQUssR0FBTCxVQUFNLFFBQWdCLEVBQUUsUUFBZ0I7UUFDcEMsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLGVBQWUsSUFBSSxRQUFRLEtBQUssZUFBZSxDQUFDLENBQUMsQ0FBQztZQUMvRCxNQUFNLENBQUMsZUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLDBCQUEwQixJQUFJLFFBQVEsS0FBSyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQzFFLE1BQU0sQ0FBQyxlQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNwQixLQUFLLEVBQUU7b0JBQ0gsV0FBVyxFQUFFLElBQUk7b0JBQ2pCLE9BQU8sRUFBRSxxRkFBcUY7aUJBQ2pHO2FBQ0osQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSywwQkFBMEIsSUFBSSxRQUFRLEtBQUssZUFBZSxDQUFDLENBQUMsQ0FBQztZQUMxRSxNQUFNLENBQUMsZUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUNqRixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLGdDQUFnQyxJQUFJLFFBQVEsS0FBSyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQ2hGLE1BQU0sQ0FBQyxlQUFVLENBQUMsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFFLDJFQUEyRSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDO1FBQ2pJLENBQUM7UUFFRCxNQUFNLENBQUMsZUFBVSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFDTCx5QkFBQztBQUFELENBM0JBLEFBMkJDLElBQUE7QUEzQlksZ0RBQWtCIiwiZmlsZSI6ImFzc2V0cy9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlLm1vY2suanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9SeCc7XG5cbi8vIFRPRE86IHNob3VsZCBiZSBleHRlbmRpbmcgQWxmcmVzY29BdXRoZW50aWNhdGlvblNlcnZpY2VcbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGlvbk1vY2sgLypleHRlbmRzIEFsZnJlc2NvQXV0aGVudGljYXRpb25TZXJ2aWNlKi8ge1xuXG4gICAgLy8gVE9ETzogcmVhbCBhdXRoIHNlcnZpY2UgcmV0dXJucyBPYnNlcnZhYmxlPHN0cmluZz5cbiAgICBsb2dpbih1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIGlmICh1c2VybmFtZSA9PT0gJ2Zha2UtdXNlcm5hbWUnICYmIHBhc3N3b3JkID09PSAnZmFrZS1wYXNzd29yZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZXJuYW1lID09PSAnZmFrZS11c2VybmFtZS1DT1JTLWVycm9yJyAmJiBwYXNzd29yZCA9PT0gJ2Zha2UtcGFzc3dvcmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyh7XG4gICAgICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3NEb21haW46IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFUlJPUjogdGhlIG5ldHdvcmsgaXMgb2ZmbGluZSwgT3JpZ2luIGlzIG5vdCBhbGxvd2VkIGJ5IEFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbidcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VybmFtZSA9PT0gJ2Zha2UtdXNlcm5hbWUtQ1NSRi1lcnJvcicgJiYgcGFzc3dvcmQgPT09ICdmYWtlLXBhc3N3b3JkJykge1xuICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coe21lc3NhZ2U6ICdFUlJPUjogSW52YWxpZCBDU1JGLXRva2VuJywgc3RhdHVzOiA0MDN9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VybmFtZSA9PT0gJ2Zha2UtdXNlcm5hbWUtRUNNLWFjY2Vzcy1lcnJvcicgJiYgcGFzc3dvcmQgPT09ICdmYWtlLXBhc3N3b3JkJykge1xuICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coe21lc3NhZ2U6ICdFUlJPUjogMDAxNzA3MjggQWNjZXNzIERlbmllZC4gIFRoZSBzeXN0ZW0gaXMgY3VycmVudGx5IGluIHJlYWQtb25seSBtb2RlJywgc3RhdHVzOiA0MDN9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KCdGYWtlIHNlcnZlciBlcnJvcicpO1xuICAgIH1cbn1cbiJdfQ==
