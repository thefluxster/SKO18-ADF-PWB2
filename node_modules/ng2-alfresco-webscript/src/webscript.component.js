/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_alfresco_datatable_1 = require("ng2-alfresco-datatable");
var WebscriptComponent = (function () {
    function WebscriptComponent(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        this.showData = true;
        this.contextRoot = 'alfresco';
        this.servicePath = 'service';
        this.contentType = 'TEXT';
        this.onSuccess = new core_1.EventEmitter();
        this.data = undefined;
        this.showError = false;
    }
    WebscriptComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (this.showData) {
            this.clean();
        }
        return new Promise(function (resolve, reject) {
            _this.apiService.getInstance().webScript.executeWebScript('GET', _this.scriptPath, _this.scriptArgs, _this.contextRoot, _this.servicePath).then(function (webScriptdata) {
                _this.data = webScriptdata;
                if (_this.showData) {
                    if (_this.contentType === 'DATATABLE') {
                        _this.data = _this.showDataAsDataTable(webScriptdata);
                    }
                }
                _this.onSuccess.emit(_this.data);
                resolve();
            }, function (error) {
                _this.logService.log('Error' + error);
                reject();
            });
        });
    };
    WebscriptComponent.prototype.showDataAsDataTable = function (data) {
        var datatableData = null;
        try {
            if (!data.schema) {
                data.schema = ng2_alfresco_datatable_1.ObjectDataTableAdapter.generateSchema(data.data);
            }
            if (data.schema && data.schema.length > 0) {
                this.data = new ng2_alfresco_datatable_1.ObjectDataTableAdapter(data.data, data.schema);
            }
        }
        catch (e) {
            this.logService.error('error during the cast as datatable');
        }
        return datatableData;
    };
    WebscriptComponent.prototype.clean = function () {
        this.data = undefined;
    };
    WebscriptComponent.prototype.isDataTableContent = function () {
        return this.contentType === 'DATATABLE';
    };
    return WebscriptComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], WebscriptComponent.prototype, "scriptPath", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], WebscriptComponent.prototype, "scriptArgs", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], WebscriptComponent.prototype, "showData", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], WebscriptComponent.prototype, "contextRoot", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], WebscriptComponent.prototype, "servicePath", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], WebscriptComponent.prototype, "contentType", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], WebscriptComponent.prototype, "onSuccess", void 0);
WebscriptComponent = __decorate([
    core_1.Component({
        selector: 'alfresco-webscript-get',
        template: "\n        <div *ngIf=\"showData\">\n            <div *ngIf=\"contentType === 'JSON'\" id=\"webscript-data-JSON\">{{data | json}}</div>\n            <div *ngIf=\"contentType === 'HTML'\" id=\"webscript-data-HTML\" [innerHTML]=\"data\"></div>\n            <div *ngIf=\"contentType === 'TEXT'\" id=\"webscript-data-TEXT\" >{{data}}</div>\n            <div *ngIf=\"isDataTableContent()\"><alfresco-datatable id=\"webscript-datatable-wrapper\" [data]=\"data\"></alfresco-datatable><div>\n            <div *ngIf=\"showError\" id=\"error\">Error during the deserialization of {{data}} as {{contentType}}</div>\n        </div>\n    "
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService,
        ng2_alfresco_core_1.LogService])
], WebscriptComponent);
exports.WebscriptComponent = WebscriptComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
