/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_tasklist_service_1 = require("./../services/activiti-tasklist.service");
var task_details_model_1 = require("../models/task-details.model");
var Rx_1 = require("rxjs/Rx");
var ActivitiChecklist = (function () {
    function ActivitiChecklist(translateService, activitiTaskList, logService) {
        var _this = this;
        this.translateService = translateService;
        this.activitiTaskList = activitiTaskList;
        this.logService = logService;
        this.readOnly = false;
        this.checklistTaskCreated = new core_1.EventEmitter();
        this.checklist = [];
        if (translateService) {
            translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
        }
        this.task$ = new Rx_1.Observable(function (observer) { return _this.taskObserver = observer; }).share();
    }
    ActivitiChecklist.prototype.ngOnInit = function () {
        var _this = this;
        this.task$.subscribe(function (task) {
            _this.checklist.push(task);
        });
    };
    ActivitiChecklist.prototype.ngOnChanges = function (changes) {
        var taskId = changes['taskId'];
        if (taskId && taskId.currentValue) {
            this.getTaskChecklist(taskId.currentValue);
            return;
        }
    };
    ActivitiChecklist.prototype.getTaskChecklist = function (taskId) {
        var _this = this;
        this.checklist = [];
        if (this.taskId) {
            this.activitiTaskList.getTaskChecklist(this.taskId).subscribe(function (res) {
                res.forEach(function (task) {
                    _this.taskObserver.next(task);
                });
            }, function (err) {
                _this.logService.error(err);
            });
        }
        else {
            this.checklist = [];
        }
    };
    ActivitiChecklist.prototype.showDialog = function () {
        if (this.dialog) {
            if (!this.dialog.nativeElement.showModal) {
                dialogPolyfill.registerDialog(this.dialog.nativeElement);
            }
            this.dialog.nativeElement.showModal();
        }
    };
    ActivitiChecklist.prototype.add = function () {
        var _this = this;
        var newTask = new task_details_model_1.TaskDetailsModel({
            name: this.taskName,
            parentTaskId: this.taskId,
            assignee: { id: this.assignee }
        });
        this.activitiTaskList.addTask(newTask).subscribe(function (res) {
            _this.checklist.push(res);
            _this.checklistTaskCreated.emit(res);
            _this.taskName = '';
        }, function (err) {
            _this.logService.error(err);
        });
        this.cancel();
    };
    ActivitiChecklist.prototype.cancel = function () {
        if (this.dialog) {
            this.dialog.nativeElement.close();
        }
        this.taskName = '';
    };
    return ActivitiChecklist;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiChecklist.prototype, "taskId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiChecklist.prototype, "readOnly", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiChecklist.prototype, "assignee", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiChecklist.prototype, "checklistTaskCreated", void 0);
__decorate([
    core_1.ViewChild('dialog'),
    __metadata("design:type", Object)
], ActivitiChecklist.prototype, "dialog", void 0);
ActivitiChecklist = __decorate([
    core_1.Component({
        selector: 'activiti-checklist',
        moduleId: module.id,
        template: "<span class=\"activiti-label mdl-badge\" id=\"checklist-label\"       [attr.data-badge]=\"checklist?.length\">{{ 'TASK_DETAILS.LABELS.CHECKLIST' | translate }}</span> <div *ngIf=\"!readOnly\" id=\"addChecklist\" (click)=\"showDialog()\" id=\"add-checklist\" class=\"icon material-icons\">add</div> <div *ngIf=\"!readOnly\" class=\"mdl-tooltip\" for=\"add-checklist\">     Add a checklist </div> <div class=\"menu-container\" *ngIf=\"checklist?.length > 0\">     <ul class='mdl-list'>         <li class=\"mdl-list__item\" *ngFor=\"let check of checklist\">             <span class=\"mdl-list__item-primary-content\" id=\"check-{{check.id}}\">             <i class=\"material-icons mdl-list__item-icon\">done</i>             {{check.name}}             </span>         </li>     </ul> </div> <div *ngIf=\"checklist?.length === 0\" id=\"checklist-none-message\">     {{ 'TASK_DETAILS.CHECKLIST.NONE' | translate }} </div>  <dialog class=\"mdl-dialog\" id=\"checklist-dialog\" #dialog>     <h4 class=\"mdl-dialog__title\" id=\"add-checklist-title\">New Check</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"taskName\" id=\"checklist-name\"/>             <label class=\"mdl-textfield__label\" for=\"checklist-name\">Name</label>         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" id=\"add-check\" (click)=\"add()\" class=\"mdl-button\">Add Checklist</button>         <button type=\"button\" id=\"close-check-dialog\" (click)=\"cancel()\" class=\"mdl-button close\">Cancel</button>     </div> </dialog>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }  .material-icons:hover {     color: rgb(255, 152, 0); }  .mdl-tooltip {     will-change: unset; }  .material-icons {     cursor: pointer; }"],
        providers: [activiti_tasklist_service_1.ActivitiTaskListService]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        activiti_tasklist_service_1.ActivitiTaskListService,
        ng2_alfresco_core_1.LogService])
], ActivitiChecklist);
exports.ActivitiChecklist = ActivitiChecklist;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
