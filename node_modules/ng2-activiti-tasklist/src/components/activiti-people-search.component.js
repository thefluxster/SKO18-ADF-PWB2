/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var Observable_1 = require("rxjs/Observable");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ActivitiPeopleSearch = (function () {
    function ActivitiPeopleSearch(translateService) {
        var _this = this;
        this.translateService = translateService;
        this.baseComponentPath = module.id.replace('/activiti-people-search.component.js', '');
        this.onSearch = new core_1.EventEmitter();
        this.onRowClicked = new core_1.EventEmitter();
        this.searchUser = new forms_1.FormControl();
        this.userList = [];
        if (translateService) {
            translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
        }
        this.searchUser
            .valueChanges
            .debounceTime(200)
            .subscribe(function (event) {
            if (event && event.trim()) {
                _this.onSearch.emit(event);
            }
            else {
                _this.userList = [];
            }
        });
    }
    ActivitiPeopleSearch.prototype.ngOnInit = function () {
        var _this = this;
        this.results.subscribe(function (list) {
            _this.userList = list;
        });
    };
    ActivitiPeopleSearch.prototype.ngAfterViewInit = function () {
        this.setupMaterialComponents(componentHandler);
    };
    ActivitiPeopleSearch.prototype.setupMaterialComponents = function (handler) {
        var isUpgraded = false;
        if (handler) {
            handler.upgradeAllRegistered();
            isUpgraded = true;
        }
        return isUpgraded;
    };
    ActivitiPeopleSearch.prototype.onRowClick = function (userClicked) {
        var _this = this;
        this.onRowClicked.emit(userClicked);
        this.userList = this.userList.filter(function (user) {
            _this.searchUser.reset();
            return user.id !== userClicked.id;
        });
    };
    ActivitiPeopleSearch.prototype.getDisplayUser = function (user) {
        var firstName = user.firstName && user.firstName !== 'null' ? user.firstName : 'N/A';
        var lastName = user.lastName && user.lastName !== 'null' ? user.lastName : 'N/A';
        return firstName + ' - ' + lastName;
    };
    return ActivitiPeopleSearch;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiPeopleSearch.prototype, "iconImageUrl", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Observable_1.Observable)
], ActivitiPeopleSearch.prototype, "results", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiPeopleSearch.prototype, "onSearch", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiPeopleSearch.prototype, "onRowClicked", void 0);
ActivitiPeopleSearch = __decorate([
    core_1.Component({
        selector: 'activiti-people-search',
        moduleId: module.id,
        template: "<div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">     <input class=\"mdl-textfield__input\" type=\"text\" id=\"userSearchText\" [value]=\"\"            [formControl]=\"searchUser\"/>     <label class=\"mdl-textfield__label\" for=\"userSearchText\">Search user</label> </div> <ul class='mdl-list'>     <li class=\"mdl-list__item fix-element-user-list\" *ngFor=\"let user of userList\">         <button (click)=\"onRowClick(user)\" id=\"user-{{user.id}}\" class=\"mdl-chip mdl-chip--contact mdl-chip-search-people\">             <img class=\"mdl-chip__contact\" [src]=\"iconImageUrl || baseComponentPath + '/../assets/images/user.jpg'\" />             <span class=\"mdl-chip__text mdl-chip-search-people__text\">{{getDisplayUser(user)}}</span>         </button>     </li>     <div *ngIf=\"userList?.length === 0\" id=\"no-user-found\">         {{'PEOPLE.SEARCH.NO_USERS' | translate }}     </div> </ul>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }  .material-icons.people-search__icon:hover {     color: rgb(255, 152, 0); }  .fix-element-user-list{     padding-top: 0px;     padding-right: 0px;     padding-bottom: 0px;     padding-left: 0px; }  .mdl-chip-search-people{     margin: auto;     min-width: 60%; }  .mdl-chip-search-people:hover{     background-color: #c1c1c1;     cursor: pointer;  }  .mdl-chip-search-people img{     margin-left: -30px; }  .mdl-chip-search-people__text{     padding-left: 10px; }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService])
], ActivitiPeopleSearch);
exports.ActivitiPeopleSearch = ActivitiPeopleSearch;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
