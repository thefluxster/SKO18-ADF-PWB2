/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_apps_component_1 = require("./activiti-apps.component");
var activiti_tasklist_service_1 = require("./../services/activiti-tasklist.service");
var activiti_apps_mock_1 = require("./../assets/activiti-apps.mock");
describe('ActivitiApps', function () {
    var componentHandler;
    var component;
    var fixture;
    var debugElement;
    var service;
    var getAppsSpy;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule
            ],
            declarations: [
                activiti_apps_component_1.ActivitiApps
            ],
            providers: [
                activiti_tasklist_service_1.ActivitiTaskListService
            ]
        }).compileComponents();
        var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
        spyOn(translateService, 'addTranslationFolder').and.stub();
        spyOn(translateService, 'get').and.callFake(function (key) { return Rx_1.Observable.of(key); });
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(activiti_apps_component_1.ActivitiApps);
        component = fixture.componentInstance;
        debugElement = fixture.debugElement;
        service = fixture.debugElement.injector.get(activiti_tasklist_service_1.ActivitiTaskListService);
        getAppsSpy = spyOn(service, 'getDeployedApplications').and.returnValue(Rx_1.Observable.of());
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered',
            'upgradeElement'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should define layoutType with the default value', function () {
        component.layoutType = '';
        fixture.detectChanges();
        expect(component.isGrid()).toBe(true);
    });
    it('should load apps on init', function () {
        fixture.detectChanges();
        expect(getAppsSpy).toHaveBeenCalled();
    });
    it('should emit an error when an error occurs loading apps', function () {
        var emitSpy = spyOn(component.error, 'emit');
        getAppsSpy.and.returnValue(Rx_1.Observable.throw({}));
        fixture.detectChanges();
        expect(emitSpy).toHaveBeenCalled();
    });
    describe('layout', function () {
        it('should display a grid by default', function () {
            fixture.detectChanges();
            expect(component.isGrid()).toBe(true);
            expect(component.isList()).toBe(false);
        });
        it('should display a grid when configured to', function () {
            component.layoutType = activiti_apps_component_1.ActivitiApps.LAYOUT_GRID;
            fixture.detectChanges();
            expect(component.isGrid()).toBe(true);
            expect(component.isList()).toBe(false);
        });
        it('should display a list when configured to', function () {
            component.layoutType = activiti_apps_component_1.ActivitiApps.LAYOUT_LIST;
            fixture.detectChanges();
            expect(component.isGrid()).toBe(false);
            expect(component.isList()).toBe(true);
        });
        it('should throw an exception on init if unknown type configured', function () {
            component.layoutType = 'unknown';
            expect(component.ngOnInit).toThrowError();
        });
    });
    describe('display apps', function () {
        it('should display all deployed apps', function () {
            getAppsSpy.and.returnValue(Rx_1.Observable.of(activiti_apps_mock_1.deployedApps));
            fixture.detectChanges();
            expect(debugElement.queryAll(platform_browser_1.By.css('h1')).length).toBe(3);
        });
        it('should not display undeployed apps', function () {
            getAppsSpy.and.returnValue(Rx_1.Observable.of(activiti_apps_mock_1.nonDeployedApps));
            fixture.detectChanges();
            expect(debugElement.queryAll(platform_browser_1.By.css('h1')).length).toBe(0);
        });
        it('should display default app', function () {
            getAppsSpy.and.returnValue(Rx_1.Observable.of(activiti_apps_mock_1.defaultApp));
            fixture.detectChanges();
            expect(debugElement.queryAll(platform_browser_1.By.css('h1')).length).toBe(1);
        });
    });
    describe('select apps', function () {
        beforeEach(function () {
            getAppsSpy.and.returnValue(Rx_1.Observable.of(activiti_apps_mock_1.deployedApps));
            fixture.detectChanges();
        });
        it('should initially have no app selected', function () {
            var selectedEls = debugElement.queryAll(platform_browser_1.By.css('.selectedIcon'));
            expect(selectedEls.length).toBe(0);
        });
        it('should emit a click event when app selected', function () {
            spyOn(component.appClick, 'emit');
            component.selectApp(activiti_apps_mock_1.deployedApps[1]);
            expect(component.appClick.emit).toHaveBeenCalledWith(activiti_apps_mock_1.deployedApps[1]);
        });
        it('should have one app shown as selected after app selected', function () {
            component.selectApp(activiti_apps_mock_1.deployedApps[1]);
            fixture.detectChanges();
            var selectedEls = debugElement.queryAll(platform_browser_1.By.css('.selectedIcon'));
            expect(selectedEls.length).toBe(1);
        });
        it('should have the correct app shown as selected after app selected', function () {
            component.selectApp(activiti_apps_mock_1.deployedApps[1]);
            fixture.detectChanges();
            var appEls = debugElement.queryAll(platform_browser_1.By.css('.mdl-grid > div'));
            expect(appEls[1].query(platform_browser_1.By.css('.selectedIcon'))).not.toBeNull();
        });
    });
});
//# sourceMappingURL=activiti-apps.component.spec.js.map