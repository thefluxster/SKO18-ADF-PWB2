/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_alfresco_datatable_1 = require("ng2-alfresco-datatable");
var activiti_tasklist_service_1 = require("./../services/activiti-tasklist.service");
var filter_model_1 = require("../models/filter.model");
var ActivitiTaskList = (function () {
    function ActivitiTaskList(translateService, taskListService, logService) {
        this.translateService = translateService;
        this.taskListService = taskListService;
        this.logService = logService;
        this.rowClick = new core_1.EventEmitter();
        this.onSuccess = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.defaultSchemaColumn = [
            { type: 'text', key: 'id', title: 'Id' },
            { type: 'text', key: 'name', title: 'Name', cssClass: 'full-width name-column', sortable: true },
            { type: 'text', key: 'formKey', title: 'Form Key', sortable: true },
            { type: 'text', key: 'created', title: 'Created', sortable: true }
        ];
        if (translateService) {
            translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
        }
    }
    ActivitiTaskList.prototype.ngOnInit = function () {
        if (!this.data) {
            this.data = this.initDefaultSchemaColumns();
        }
    };
    ActivitiTaskList.prototype.ngOnChanges = function (changes) {
        if (this.isPropertyChanged(changes)) {
            this.reload();
        }
    };
    ActivitiTaskList.prototype.isPropertyChanged = function (changes) {
        var changed = false;
        var appId = changes['appId'];
        var processDefinitionKey = changes['processDefinitionKey'];
        var state = changes['state'];
        var sort = changes['sort'];
        var name = changes['name'];
        var assignment = changes['assignment'];
        if (appId && appId.currentValue) {
            changed = true;
        }
        else if (processDefinitionKey && processDefinitionKey.currentValue) {
            changed = true;
        }
        else if (state && state.currentValue) {
            changed = true;
        }
        else if (sort && sort.currentValue) {
            changed = true;
        }
        else if (name && name.currentValue) {
            changed = true;
        }
        else if (assignment && assignment.currentValue) {
            changed = true;
        }
        return changed;
    };
    ActivitiTaskList.prototype.reload = function () {
        this.requestNode = this.createRequestNode();
        this.load(this.requestNode);
    };
    ActivitiTaskList.prototype.initDefaultSchemaColumns = function () {
        return new ng2_alfresco_datatable_1.ObjectDataTableAdapter([], this.defaultSchemaColumn);
    };
    ActivitiTaskList.prototype.load = function (requestNode) {
        var _this = this;
        this.taskListService.getTotalTasks(requestNode).subscribe(function (res) {
            requestNode.size = res.total;
            _this.taskListService.getTasks(requestNode).subscribe(function (response) {
                var instancesRow = _this.createDataRow(response);
                _this.renderInstances(instancesRow);
                _this.selectTask(requestNode.landingTaskId);
                _this.onSuccess.emit(response);
            }, function (error) {
                _this.logService.error(error);
                _this.onError.emit(error);
            });
        }, function (err) {
            _this.logService.error(err);
            _this.onError.emit(err);
        });
    };
    ActivitiTaskList.prototype.createDataRow = function (instances) {
        var instancesRows = [];
        instances.forEach(function (row) {
            instancesRows.push(new ng2_alfresco_datatable_1.ObjectDataRow({
                id: row.id,
                name: row.name,
                created: row.created
            }));
        });
        return instancesRows;
    };
    ActivitiTaskList.prototype.renderInstances = function (instances) {
        instances = this.optimizeNames(instances);
        this.data.setRows(instances);
    };
    ActivitiTaskList.prototype.selectTask = function (taskIdToSelect) {
        if (!this.isListEmpty()) {
            var rows = this.data.getRows();
            if (rows.length > 0) {
                var dataRow = rows.find(function (row) { return row.getValue('id') === taskIdToSelect; }) || rows[0];
                this.data.selectedRow = dataRow;
                this.currentInstanceId = dataRow.getValue('id');
            }
        }
        else {
            if (this.data) {
                this.data.selectedRow = null;
            }
            this.currentInstanceId = null;
        }
    };
    ActivitiTaskList.prototype.getCurrentId = function () {
        return this.currentInstanceId;
    };
    ActivitiTaskList.prototype.isListEmpty = function () {
        return this.data === undefined ||
            (this.data && this.data.getRows() && this.data.getRows().length === 0);
    };
    ActivitiTaskList.prototype.onRowClick = function (event) {
        var item = event;
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    };
    ActivitiTaskList.prototype.optimizeNames = function (istances) {
        istances = istances.map(function (t) {
            t.obj.name = t.obj.name || 'No name';
            return t;
        });
        return istances;
    };
    ActivitiTaskList.prototype.createRequestNode = function () {
        var requestNode = {
            appDefinitionId: this.appId,
            processDefinitionKey: this.processDefinitionKey,
            text: this.name,
            assignment: this.assignment,
            state: this.state,
            sort: this.sort,
            landingTaskId: this.landingTaskId
        };
        return new filter_model_1.TaskQueryRequestRepresentationModel(requestNode);
    };
    return ActivitiTaskList;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiTaskList.prototype, "appId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiTaskList.prototype, "processDefinitionKey", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiTaskList.prototype, "state", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiTaskList.prototype, "assignment", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiTaskList.prototype, "sort", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiTaskList.prototype, "name", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiTaskList.prototype, "landingTaskId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ActivitiTaskList.prototype, "data", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiTaskList.prototype, "rowClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiTaskList.prototype, "onSuccess", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiTaskList.prototype, "onError", void 0);
ActivitiTaskList = __decorate([
    core_1.Component({
        selector: 'activiti-tasklist',
        moduleId: module.id,
        template: "<div *ngIf=\"!requestNode\">{{ 'TASK_FILTERS.MESSAGES.NONE' | translate }}</div> <div *ngIf=\"requestNode\">     <div *ngIf=\"!isListEmpty()\">         <alfresco-datatable             [data]=\"data\"             (rowClick)=\"onRowClick($event)\">         </alfresco-datatable>     </div>     <div *ngIf=\"isListEmpty()\">         {{ 'TASK_LIST.MESSAGES.NONE' | translate }}     </div> </div>",
        styles: ["alfresco-datatable >>> .column-header {     color: #232323;     font-size: 15px; }  alfresco-datatable >>> .data-cell {     cursor: pointer !important; }  alfresco-datatable >>> .cell-value{     width: 250px;     white-space: nowrap;     overflow: hidden;     text-overflow: ellipsis }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        activiti_tasklist_service_1.ActivitiTaskListService,
        ng2_alfresco_core_1.LogService])
], ActivitiTaskList);
exports.ActivitiTaskList = ActivitiTaskList;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
