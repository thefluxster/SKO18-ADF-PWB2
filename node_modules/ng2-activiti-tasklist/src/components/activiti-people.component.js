/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_people_service_1 = require("../services/activiti-people.service");
var ActivitiPeople = (function () {
    function ActivitiPeople(translateService, peopleService, logService) {
        var _this = this;
        this.translateService = translateService;
        this.peopleService = peopleService;
        this.logService = logService;
        this.baseComponentPath = module.id.replace('/activiti-people.component.js', '');
        this.people = [];
        this.taskId = '';
        this.readOnly = false;
        if (translateService) {
            translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
        }
        this.peopleSearch$ = new Rx_1.Observable(function (observer) { return _this.peopleSearchObserver = observer; }).share();
    }
    ActivitiPeople.prototype.showDialog = function () {
        if (!this.dialog.nativeElement.showModal) {
            dialogPolyfill.registerDialog(this.dialog.nativeElement);
        }
        if (this.dialog) {
            this.dialog.nativeElement.showModal();
        }
    };
    ActivitiPeople.prototype.closeDialog = function () {
        if (this.dialog) {
            this.dialog.nativeElement.close();
            this.peopleSearchObserver.next([]);
            this.activitipeoplesearch.searchUser.reset();
        }
    };
    ActivitiPeople.prototype.searchUser = function (searchedWord) {
        var _this = this;
        this.peopleService.getWorkflowUsers(this.taskId, searchedWord)
            .subscribe(function (users) {
            _this.peopleSearchObserver.next(users);
        }, function (error) { return _this.logService.error('Could not load users'); });
    };
    ActivitiPeople.prototype.involveUser = function (user) {
        var _this = this;
        this.peopleService.involveUserWithTask(this.taskId, user.id.toString())
            .subscribe(function () {
            _this.people.push(user);
        }, function (error) { return _this.logService.error('Impossible to involve user with task'); });
    };
    ActivitiPeople.prototype.removeInvolvedUser = function (user) {
        var _this = this;
        this.peopleService.removeInvolvedUser(this.taskId, user.id.toString())
            .subscribe(function () {
            _this.people = _this.people.filter(function (involvedUser) {
                return involvedUser.id !== user.id;
            });
        }, function (error) { return _this.logService.error('Impossible to remove involved user from task'); });
    };
    ActivitiPeople.prototype.getDisplayUser = function (user) {
        var firstName = user.firstName && user.firstName !== 'null' ? user.firstName : 'N/A';
        var lastName = user.lastName && user.lastName !== 'null' ? user.lastName : 'N/A';
        return firstName + ' ' + lastName;
    };
    return ActivitiPeople;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiPeople.prototype, "iconImageUrl", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], ActivitiPeople.prototype, "people", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiPeople.prototype, "taskId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiPeople.prototype, "readOnly", void 0);
__decorate([
    core_1.ViewChild('dialog'),
    __metadata("design:type", Object)
], ActivitiPeople.prototype, "dialog", void 0);
__decorate([
    core_1.ViewChild('activitipeoplesearch'),
    __metadata("design:type", Object)
], ActivitiPeople.prototype, "activitipeoplesearch", void 0);
ActivitiPeople = __decorate([
    core_1.Component({
        selector: 'activiti-people',
        moduleId: module.id,
        template: "<span class=\"activiti-label mdl-badge\" id=\"people-title\"       [attr.data-badge]=\"people?.length\">{{ 'TASK_DETAILS.LABELS.PEOPLE' | translate }}</span> <div *ngIf=\"!readOnly\" id=\"addPeople\" (click)=\"showDialog()\" class=\"icon material-icons people__icon\">add</div> <div *ngIf=\"!readOnly\" class=\"mdl-tooltip\" data-mdl-for=\"addPeople\">     Add a person </div> <div class=\"menu-container\" *ngIf=\"people?.length > 0\">     <ul class='mdl-list'>         <li class=\"mdl-list__item\" *ngFor=\"let user of people\">             <span class=\"mdl-chip mdl-chip--contact mdl-chip--deletable\">                 <img class=\"mdl-chip__contact\" [src]=\"iconImageUrl || baseComponentPath + '/../assets/images/user.jpg'\" />                 <span id=\"user-{{user.id}}\" class=\"mdl-chip__text\">{{getDisplayUser(user)}}</span>                 <a *ngIf=\"!readOnly\" class=\"mdl-chip__action\"><i id=\"remove-{{user.id}}\" (click)=\"removeInvolvedUser(user)\" class=\"material-icons people__icon\">cancel</i></a>             </span>         </li>     </ul> </div> <div *ngIf=\"people?.length === 0\" id=\"no-people-label\">     {{ 'TASK_DETAILS.PEOPLE.NONE' | translate }} </div>  <dialog class=\"mdl-dialog\" id=\"add-people-dialog\" #dialog>     <h4 class=\"mdl-dialog__title\" id=\"add-people-dialog-title\">Involve User</h4>     <div class=\"mdl-dialog__content add-people-dialog__content\">         <activiti-people-search (onSearch)=\"searchUser($event)\"                                 (onRowClicked)=\"involveUser($event)\"                                 [results]=\"peopleSearch$\"                                 [iconImageUrl]=\"iconImageUrl\" #activitipeoplesearch>         </activiti-people-search>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" id=\"close-people-dialog\" (click)=\"closeDialog()\" class=\"mdl-button close\">             {{'PEOPLE.DIALOG_CLOSE' | translate }}         </button>     </div> </dialog>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }  .material-icons.people__icon:hover {     color: rgb(255, 152, 0); }  .add-people-dialog__content {     padding: 20px 24px 2px; }  .mdl-tooltip {     will-change: unset; }  .material-icons {     cursor: pointer; }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        activiti_people_service_1.ActivitiPeopleService,
        ng2_alfresco_core_1.LogService])
], ActivitiPeople);
exports.ActivitiPeople = ActivitiPeople;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
