/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_tasklist_service_1 = require("../services/activiti-tasklist.service");
var activiti_start_task_component_1 = require("./activiti-start-task.component");
describe('ActivitiStartTaskButton', function () {
    var activitiStartTaskButton;
    var fixture;
    var service;
    var element;
    var startTaskButton;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            declarations: [
                activiti_start_task_component_1.ActivitiStartTaskButton
            ],
            providers: [
                activiti_tasklist_service_1.ActivitiTaskListService
            ]
        }).compileComponents().then(function () {
            var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
            spyOn(translateService, 'addTranslationFolder').and.stub();
            spyOn(translateService, 'get').and.callFake(function (key) { return Rx_1.Observable.of(key); });
            fixture = testing_1.TestBed.createComponent(activiti_start_task_component_1.ActivitiStartTaskButton);
            activitiStartTaskButton = fixture.componentInstance;
            element = fixture.nativeElement;
            fixture.detectChanges();
            startTaskButton = element.querySelector('#start-task-button');
        });
    }));
    beforeEach(function () {
        jasmine.Ajax.install();
        service = fixture.debugElement.injector.get(activiti_tasklist_service_1.ActivitiTaskListService);
    });
    afterEach(function () {
        jasmine.Ajax.uninstall();
    });
    it('should show start task button', function () {
        expect(element.querySelector('#start-task-button')).toBeDefined();
        expect(element.querySelector('#start-task-button')).not.toBeNull();
        expect(element.querySelector('#start-task-button').textContent).toContain('START_TASK.BUTTON');
    });
    it('should show start dialog on press button', function () {
        startTaskButton.click();
        expect(element.querySelector('#start-task-dialog')).not.toBeNull();
        expect(element.querySelector('#start-task-dialog').getAttribute('open')).not.toBeNull();
        expect(element.querySelector('#start-task-dialog-title')).not.toBeNull();
        expect(element.querySelector('#start-task-dialog-title').textContent).toContain('START_TASK.DIALOG.TITLE');
    });
    it('should close start dialog on cancel button', function () {
        startTaskButton.click();
        expect(element.querySelector('#start-task-dialog')).not.toBeNull();
        expect(element.querySelector('#start-task-dialog').getAttribute('open')).not.toBeNull();
        var cancelButton = element.querySelector('#button-cancel');
        cancelButton.click();
        expect(element.querySelector('#start-task-dialog').getAttribute('open')).toBeNull();
    });
    it('should attach a task when a form id slected', function () {
        var attachFormToATask = spyOn(service, 'attachFormToATask').and.returnValue(Rx_1.Observable.of());
        spyOn(service, 'createNewTask').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next({ id: 'task-id' });
                observer.complete();
            });
        });
        var createTaskButton = element.querySelector('#button-start');
        activitiStartTaskButton.name = 'fake-name';
        activitiStartTaskButton.formId = '123';
        startTaskButton.click();
        createTaskButton.click();
        expect(attachFormToATask).toHaveBeenCalled();
    });
    it('should not attach a task when a form id is not slected', function () {
        var attachFormToATask = spyOn(service, 'attachFormToATask').and.returnValue(Rx_1.Observable.of());
        spyOn(service, 'createNewTask').and.callFake(function () {
            return Rx_1.Observable.create(function (observer) {
                observer.next({ id: 'task-id' });
                observer.complete();
            });
        });
        var createTaskButton = element.querySelector('#button-start');
        activitiStartTaskButton.name = 'fake-name';
        startTaskButton.click();
        createTaskButton.click();
        expect(attachFormToATask).not.toHaveBeenCalled();
    });
    it('should load form when dialogs open', function () {
        var loadForms = spyOn(service, 'getFormList').and.returnValue(Rx_1.Observable.of());
        startTaskButton.click();
        expect(loadForms).toHaveBeenCalled();
    });
    it('should create new task when start is clicked', function () {
        activitiStartTaskButton.onSuccess.subscribe(function () {
            expect(element.querySelector('#start-task-dialog').getAttribute('open')).toBeNull();
        });
        var createTaskButton = element.querySelector('#button-start');
        startTaskButton.click();
        activitiStartTaskButton.name = 'fake-name';
        createTaskButton.click();
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200
        });
    });
    it('alert message is showed on start error', function () {
        spyOn(window, 'alert');
        activitiStartTaskButton.onSuccess.subscribe(function () {
            expect(window.alert).toHaveBeenCalledWith('An error occurred while trying to add the task');
        });
        var createTaskButton = element.querySelector('#button-start');
        startTaskButton.click();
        activitiStartTaskButton.name = 'fake-name';
        createTaskButton.click();
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 403
        });
    });
    it('should send on success event when the task is started', function () {
        activitiStartTaskButton.onSuccess.subscribe(function (res) {
            expect(res).toBeDefined();
        });
        var createTaskButton = element.querySelector('#button-start');
        startTaskButton.click();
        activitiStartTaskButton.name = 'fake-name';
        createTaskButton.click();
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'json',
            responseText: {}
        });
    });
});
//# sourceMappingURL=activiti-start-task.component.spec.js.map