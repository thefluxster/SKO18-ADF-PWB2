/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var task_details_model_1 = require("../models/task-details.model");
var activiti_tasklist_service_1 = require("./../services/activiti-tasklist.service");
var ActivitiStartTaskButton = (function () {
    function ActivitiStartTaskButton(translateService, taskService, logService) {
        this.translateService = translateService;
        this.taskService = taskService;
        this.logService = logService;
        this.onSuccess = new core_1.EventEmitter();
        this.formId = null;
        if (translateService) {
            translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
        }
    }
    ActivitiStartTaskButton.prototype.start = function () {
        var _this = this;
        if (this.name) {
            this.taskService.createNewTask(new task_details_model_1.TaskDetailsModel({
                name: this.name,
                description: this.description,
                category: this.appId ? '' + this.appId : null
            })).subscribe(function (res) {
                _this.onSuccess.emit(res);
                _this.closeDialog();
                _this.resetForm();
                _this.attachForm(res.id);
            }, function (err) {
                window.alert('An error occurred while trying to add the task');
                _this.logService.error(err);
            });
        }
    };
    ActivitiStartTaskButton.prototype.attachForm = function (taskId) {
        if (this.formId && taskId) {
            this.taskService.attachFormToATask(taskId, Number(this.formId));
            this.formId = null;
        }
    };
    ActivitiStartTaskButton.prototype.cancel = function () {
        this.closeDialog();
    };
    ActivitiStartTaskButton.prototype.showDialog = function () {
        if (!this.dialog.nativeElement.showModal) {
            dialogPolyfill.registerDialog(this.dialog.nativeElement);
        }
        this.loadFormsTask();
        if (this.dialog) {
            this.dialog.nativeElement.showModal();
        }
    };
    ActivitiStartTaskButton.prototype.loadFormsTask = function () {
        var _this = this;
        this.taskService.getFormList().subscribe(function (res) {
            _this.forms = res;
        }, function (err) {
            window.alert('An error occurred while trying to get the forms');
            _this.logService.error(err);
        });
    };
    ActivitiStartTaskButton.prototype.closeDialog = function () {
        if (this.dialog) {
            this.dialog.nativeElement.close();
        }
    };
    ActivitiStartTaskButton.prototype.resetForm = function () {
        this.name = '';
        this.description = '';
    };
    return ActivitiStartTaskButton;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiStartTaskButton.prototype, "appId", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiStartTaskButton.prototype, "onSuccess", void 0);
__decorate([
    core_1.ViewChild('dialog'),
    __metadata("design:type", Object)
], ActivitiStartTaskButton.prototype, "dialog", void 0);
ActivitiStartTaskButton = __decorate([
    core_1.Component({
        selector: 'activiti-start-task',
        moduleId: module.id,
        template: "<button type=\"button\" (click)=\"showDialog()\" class=\"mdl-button\" id=\"start-task-button\">     {{'START_TASK.BUTTON'|translate}} </button>  <dialog class=\"mdl-dialog\" id=\"start-task-dialog\" #dialog>     <h4 class=\"mdl-dialog__title\" id=\"start-task-dialog-title\">{{'START_TASK.DIALOG.TITLE'|translate}}</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"name\" id=\"taskName\"/>             <label class=\"mdl-textfield__label\" for=\"taskName\">{{'START_TASK.DIALOG.LABEL.NAME'|translate}}</label>         </div>         <div class=\"mdl-textfield mdl-js-textfield\">             <textarea class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"description\" rows=\"3\"                       id=\"taskDescription\"></textarea>             <label class=\"mdl-textfield__label\" id=\"task-description-label\"                    for=\"taskDescription\">{{'START_TASK.DIALOG.LABEL.DESCRIPTION'|translate}}</label>         </div>         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" >{{'START_TASK.DIALOG.LABEL.ATTACHFORM'|translate}}</label>         </div>         <div class=\"mdl-textfield mdl-js-textfield alf-mdl-selectfield\">             <select name=\"taskForm\" [(ngModel)]=\"formId\" >                 <option value=\"null\">{{'START_TASK.DIALOG.LABEL.NONE'|translate}}</option>                 <option *ngFor=\"let form of forms\" [value]=\"form.id\">                     {{form.name}}                 </option>             </select>         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" id=\"button-start\" (click)=\"start()\" class=\"mdl-button\">             {{'START_TASK.DIALOG.ACTION.START'|translate}}         </button>         <button type=\"button\" id=\"button-cancel\" (click)=\"cancel()\" class=\"mdl-button close\">             {{'START_TASK.DIALOG.ACTION.CANCEL'|translate}}         </button>     </div> </dialog>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        activiti_tasklist_service_1.ActivitiTaskListService,
        ng2_alfresco_core_1.LogService])
], ActivitiStartTaskButton);
exports.ActivitiStartTaskButton = ActivitiStartTaskButton;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
