/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_activiti_form_1 = require("ng2-activiti-form");
var activiti_comments_component_1 = require("./activiti-comments.component");
var activiti_tasklist_service_1 = require("./../services/activiti-tasklist.service");
describe('ActivitiComments', function () {
    var componentHandler;
    var service;
    var component;
    var fixture;
    var getCommentsSpy;
    var addCommentSpy;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot(),
                ng2_activiti_form_1.ActivitiFormModule.forRoot()
            ],
            declarations: [
                activiti_comments_component_1.ActivitiComments
            ],
            providers: [
                activiti_tasklist_service_1.ActivitiTaskListService
            ]
        }).compileComponents();
        var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
        spyOn(translateService, 'addTranslationFolder').and.stub();
        spyOn(translateService, 'get').and.callFake(function (key) { return Rx_1.Observable.of(key); });
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(activiti_comments_component_1.ActivitiComments);
        component = fixture.componentInstance;
        service = fixture.debugElement.injector.get(activiti_tasklist_service_1.ActivitiTaskListService);
        getCommentsSpy = spyOn(service, 'getTaskComments').and.returnValue(Rx_1.Observable.of([
            { message: 'Test1' },
            { message: 'Test2' },
            { message: 'Test3' }
        ]));
        addCommentSpy = spyOn(service, 'addTaskComment').and.returnValue(Rx_1.Observable.of({ id: 123, message: 'Test' }));
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered',
            'upgradeElement'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should load comments when taskId specified', function () {
        var change = new core_1.SimpleChange(null, '123');
        component.ngOnChanges({ 'taskId': change });
        expect(getCommentsSpy).toHaveBeenCalled();
    });
    it('should emit an error when an error occurs loading comments', function () {
        var emitSpy = spyOn(component.error, 'emit');
        getCommentsSpy.and.returnValue(Rx_1.Observable.throw({}));
        var change = new core_1.SimpleChange(null, '123');
        component.ngOnChanges({ 'taskId': change });
        expect(emitSpy).toHaveBeenCalled();
    });
    it('should not comments when no taskId is specified', function () {
        fixture.detectChanges();
        expect(getCommentsSpy).not.toHaveBeenCalled();
    });
    it('should display comments when the task has comments', testing_1.async(function () {
        var change = new core_1.SimpleChange(null, '123');
        component.ngOnChanges({ 'taskId': change });
        fixture.whenStable().then(function () {
            fixture.detectChanges();
            expect(fixture.debugElement.queryAll(platform_browser_1.By.css('ul.mdl-list li')).length).toBe(3);
        });
    }));
    it('should not display comments when the task has no comments', testing_1.async(function () {
        component.taskId = '123';
        getCommentsSpy.and.returnValue(Rx_1.Observable.of([]));
        fixture.detectChanges();
        fixture.whenStable().then(function () {
            fixture.detectChanges();
            expect(fixture.debugElement.queryAll(platform_browser_1.By.css('ul.mdl-list li')).length).toBe(0);
        });
    }));
    describe('change detection', function () {
        var change = new core_1.SimpleChange('123', '456');
        var nullChange = new core_1.SimpleChange('123', null);
        beforeEach(testing_1.async(function () {
            component.taskId = '123';
            fixture.detectChanges();
            fixture.whenStable().then(function () {
                getCommentsSpy.calls.reset();
            });
        }));
        it('should fetch new comments when taskId changed', function () {
            component.ngOnChanges({ 'taskId': change });
            expect(getCommentsSpy).toHaveBeenCalledWith('456');
        });
        it('should NOT fetch new comments when empty changeset made', function () {
            component.ngOnChanges({});
            expect(getCommentsSpy).not.toHaveBeenCalled();
        });
        it('should NOT fetch new comments when taskId changed to null', function () {
            component.ngOnChanges({ 'taskId': nullChange });
            expect(getCommentsSpy).not.toHaveBeenCalled();
        });
        it('should set a placeholder message when taskId changed to null', function () {
            component.ngOnChanges({ 'taskId': nullChange });
            fixture.detectChanges();
            expect(fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="comments-none"]'))).not.toBeNull();
        });
    });
    describe('Add comment', function () {
        beforeEach(testing_1.async(function () {
            component.taskId = '123';
            fixture.detectChanges();
            fixture.whenStable();
        }));
        it('should display a dialog to the user when the Add button clicked', function () {
            var dialogEl = fixture.debugElement.query(platform_browser_1.By.css('.mdl-dialog')).nativeElement;
            var showSpy = spyOn(dialogEl, 'showModal');
            component.showDialog();
            expect(showSpy).toHaveBeenCalled();
        });
        it('should call service to add a comment', function () {
            component.showDialog();
            component.message = 'Test comment';
            component.add();
            expect(addCommentSpy).toHaveBeenCalledWith('123', 'Test comment');
        });
        it('should emit an error when an error occurs adding the comment', function () {
            var emitSpy = spyOn(component.error, 'emit');
            addCommentSpy.and.returnValue(Rx_1.Observable.throw({}));
            component.showDialog();
            component.message = 'Test comment';
            component.add();
            expect(emitSpy).toHaveBeenCalled();
        });
        it('should close add dialog when close button clicked', function () {
            var dialogEl = fixture.debugElement.query(platform_browser_1.By.css('.mdl-dialog')).nativeElement;
            var closeSpy = spyOn(dialogEl, 'close');
            component.showDialog();
            component.cancel();
            expect(closeSpy).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=activiti-comments.component.spec.js.map