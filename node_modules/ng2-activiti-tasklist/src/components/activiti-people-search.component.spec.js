/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var Observable_1 = require("rxjs/Observable");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_people_search_component_1 = require("./activiti-people-search.component");
var user_model_1 = require("../models/user.model");
var fakeUser = new user_model_1.User({
    id: '1',
    firstName: 'fake-name',
    lastName: 'fake-last',
    email: 'fake@mail.com'
});
var fakeSecondUser = new user_model_1.User({
    id: '2',
    firstName: 'fake-involve-name',
    lastName: 'fake-involve-last',
    email: 'fake-involve@mail.com'
});
describe('ActivitiPeopleSearch', function () {
    var activitiPeopleSearchComponent;
    var fixture;
    var element;
    var componentHandler;
    var userArray = [fakeUser, fakeSecondUser];
    var searchInput;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            declarations: [
                activiti_people_search_component_1.ActivitiPeopleSearch
            ]
        }).compileComponents().then(function () {
            var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
            spyOn(translateService, 'addTranslationFolder').and.stub();
            spyOn(translateService, 'get').and.callFake(function (key) { return Observable_1.Observable.of(key); });
            fixture = testing_1.TestBed.createComponent(activiti_people_search_component_1.ActivitiPeopleSearch);
            activitiPeopleSearchComponent = fixture.componentInstance;
            element = fixture.nativeElement;
            componentHandler = jasmine.createSpyObj('componentHandler', [
                'upgradeAllRegistered'
            ]);
            window['componentHandler'] = componentHandler;
            activitiPeopleSearchComponent.results = Observable_1.Observable.of([]);
            fixture.detectChanges();
        });
    }));
    it('should show input search text', function () {
        expect(element.querySelector('#userSearchText')).toBeDefined();
        expect(element.querySelector('#userSearchText')).not.toBeNull();
    });
    it('should show no user found to involve message', function () {
        fixture.detectChanges();
        fixture.whenStable()
            .then(function () {
            expect(element.querySelector('#no-user-found')).not.toBeNull();
            expect(element.querySelector('#no-user-found').textContent).toContain('PEOPLE.SEARCH.NO_USERS');
        });
    });
    it('should show user which can be involved ', function (done) {
        activitiPeopleSearchComponent.onSearch.subscribe(function () {
            activitiPeopleSearchComponent.results = Observable_1.Observable.of(userArray);
            activitiPeopleSearchComponent.ngOnInit();
            fixture.detectChanges();
            fixture.whenStable()
                .then(function () {
                expect(element.querySelector('#user-1')).not.toBeNull();
                expect(element.querySelector('#user-1').textContent)
                    .toContain('fake-name - fake-last');
                expect(element.querySelector('#user-2')).not.toBeNull();
                expect(element.querySelector('#user-2').textContent)
                    .toContain('fake-involve-name - fake-involve-last');
                done();
            });
        });
        searchInput = element.querySelector('#userSearchText');
        searchInput.value = 'fake-search';
        activitiPeopleSearchComponent.searchUser.markAsDirty();
        searchInput.dispatchEvent(new Event('input'));
    });
    it('should send an event when an user is clicked', function (done) {
        activitiPeopleSearchComponent.onRowClicked.subscribe(function (user) {
            expect(user).toBeDefined();
            expect(user.firstName).toBe('fake-name');
            done();
        });
        activitiPeopleSearchComponent.results = Observable_1.Observable.of(userArray);
        activitiPeopleSearchComponent.ngOnInit();
        fixture.detectChanges();
        fixture.whenStable()
            .then(function () {
            var userToSelect = element.querySelector('#user-1');
            userToSelect.click();
        });
    });
    it('should remove clicked user', function (done) {
        activitiPeopleSearchComponent.results = Observable_1.Observable.of(userArray);
        activitiPeopleSearchComponent.ngOnInit();
        fixture.detectChanges();
        var userToSelect = element.querySelector('#user-1');
        userToSelect.click();
        fixture.detectChanges();
        fixture.whenStable()
            .then(function () {
            expect(element.querySelector('#user-1')).toBeNull();
            done();
        });
    });
});
//# sourceMappingURL=activiti-people-search.component.spec.js.map