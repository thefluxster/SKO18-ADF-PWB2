/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_filters_component_1 = require("./activiti-filters.component");
var activiti_tasklist_service_1 = require("../services/activiti-tasklist.service");
var filter_model_1 = require("../models/filter.model");
describe('ActivitiFilters', function () {
    var filterList;
    var activitiService;
    var logService;
    var fakeGlobalFilter = [];
    fakeGlobalFilter.push(new filter_model_1.FilterRepresentationModel({ name: 'FakeInvolvedTasks', filter: { state: 'open', assignment: 'fake-involved' } }));
    fakeGlobalFilter.push(new filter_model_1.FilterRepresentationModel({ name: 'FakeMyTasks', filter: { state: 'open', assignment: 'fake-assignee' } }));
    var fakeGlobalFilterPromise = new Promise(function (resolve, reject) {
        resolve(fakeGlobalFilter);
    });
    var fakeErrorFilterList = {
        error: 'wrong request'
    };
    var fakeErrorFilterPromise = new Promise(function (resolve, reject) {
        reject(fakeErrorFilterList);
    });
    beforeEach(function () {
        logService = new ng2_alfresco_core_1.LogServiceMock();
        activitiService = new activiti_tasklist_service_1.ActivitiTaskListService(null, logService);
        filterList = new activiti_filters_component_1.ActivitiFilters(null, activitiService, logService);
    });
    it('should return the filter task list', function (done) {
        spyOn(activitiService, 'getTaskListFilters').and.returnValue(Rx_1.Observable.fromPromise(fakeGlobalFilterPromise));
        var appId = '1';
        var change = new core_1.SimpleChange(null, appId);
        filterList.ngOnChanges({ 'appId': change });
        filterList.onSuccess.subscribe(function (res) {
            expect(res).toBeDefined();
            expect(filterList.filters).toBeDefined();
            expect(filterList.filters.length).toEqual(2);
            expect(filterList.filters[0].name).toEqual('FakeInvolvedTasks');
            expect(filterList.filters[1].name).toEqual('FakeMyTasks');
            done();
        });
        filterList.ngOnInit();
    });
    it('should return the filter task list, filtered By Name', function (done) {
        var fakeDeployedApplicationsPromise = new Promise(function (resolve, reject) {
            resolve({});
        });
        spyOn(activitiService, 'getDeployedApplications').and.returnValue(Rx_1.Observable.fromPromise(fakeDeployedApplicationsPromise));
        spyOn(activitiService, 'getTaskListFilters').and.returnValue(Rx_1.Observable.fromPromise(fakeGlobalFilterPromise));
        var change = new core_1.SimpleChange(null, 'test');
        filterList.ngOnChanges({ 'appName': change });
        filterList.onSuccess.subscribe(function (res) {
            var deployApp = activitiService.getDeployedApplications;
            expect(deployApp.calls.count()).toEqual(1);
            expect(res).toBeDefined();
            done();
        });
        filterList.ngOnInit();
    });
    it('should emit an error with a bad response', function (done) {
        spyOn(activitiService, 'getTaskListFilters').and.returnValue(Rx_1.Observable.fromPromise(fakeErrorFilterPromise));
        var appId = '1';
        var change = new core_1.SimpleChange(null, appId);
        filterList.ngOnChanges({ 'appId': change });
        filterList.onError.subscribe(function (err) {
            expect(err).toBeDefined();
            done();
        });
        filterList.ngOnInit();
    });
    it('should emit an error with a bad response', function (done) {
        spyOn(activitiService, 'getDeployedApplications').and.returnValue(Rx_1.Observable.fromPromise(fakeErrorFilterPromise));
        var appId = 'fake-app';
        var change = new core_1.SimpleChange(null, appId);
        filterList.ngOnChanges({ 'appName': change });
        filterList.onError.subscribe(function (err) {
            expect(err).toBeDefined();
            done();
        });
        filterList.ngOnInit();
    });
    it('should emit an event when a filter is selected', function (done) {
        var currentFilter = new filter_model_1.FilterRepresentationModel({ filter: { state: 'open', assignment: 'fake-involved' } });
        filterList.filterClick.subscribe(function (filter) {
            expect(filter).toBeDefined();
            expect(filter).toEqual(currentFilter);
            expect(filterList.currentFilter).toEqual(currentFilter);
            done();
        });
        filterList.selectFilter(currentFilter);
    });
    it('should reload filters by appId on binding changes', function () {
        spyOn(filterList, 'getFiltersByAppId').and.stub();
        var appId = '1';
        var change = new core_1.SimpleChange(null, appId);
        filterList.ngOnChanges({ 'appId': change });
        expect(filterList.getFiltersByAppId).toHaveBeenCalledWith(appId);
    });
    it('should reload filters by appId null on binding changes', function () {
        spyOn(filterList, 'getFiltersByAppId').and.stub();
        var appId = null;
        var change = new core_1.SimpleChange(null, appId);
        filterList.ngOnChanges({ 'appId': change });
        expect(filterList.getFiltersByAppId).toHaveBeenCalledWith(appId);
    });
    it('should reload filters by app name on binding changes', function () {
        spyOn(filterList, 'getFiltersByAppName').and.stub();
        var appName = 'fake-app-name';
        var change = new core_1.SimpleChange(null, appName);
        filterList.ngOnChanges({ 'appName': change });
        expect(filterList.getFiltersByAppName).toHaveBeenCalledWith(appName);
    });
    it('should return the current filter after one is selected', function () {
        var filter = new filter_model_1.FilterRepresentationModel({ name: 'FakeMyTasks', filter: { state: 'open', assignment: 'fake-assignee' } });
        expect(filterList.currentFilter).toBeUndefined();
        filterList.selectFilter(filter);
        expect(filterList.getCurrentFilter()).toBe(filter);
    });
    it('should load Default list when no appid or taskid are provided', function () {
        spyOn(filterList, 'getFiltersByAppId').and.stub();
        var change = new core_1.SimpleChange(null, null);
        filterList.ngOnChanges({ 'appName': change });
        expect(filterList.getFiltersByAppId).toHaveBeenCalled();
    });
});
//# sourceMappingURL=activiti-filters.component.spec.js.map