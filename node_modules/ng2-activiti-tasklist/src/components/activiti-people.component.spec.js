/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_people_service_1 = require("../services/activiti-people.service");
var activiti_people_component_1 = require("./activiti-people.component");
var activiti_people_search_component_1 = require("./activiti-people-search.component");
var user_model_1 = require("../models/user.model");
var fakeUser = new user_model_1.User({
    id: 'fake-id',
    firstName: 'fake-name',
    lastName: 'fake-last',
    email: 'fake@mail.com'
});
var fakeUserToInvolve = new user_model_1.User({
    id: 'fake-involve-id',
    firstName: 'fake-involve-name',
    lastName: 'fake-involve-last',
    email: 'fake-involve@mail.com'
});
describe('ActivitiPeople', function () {
    var activitiPeopleComponent;
    var fixture;
    var element;
    var componentHandler;
    var logService;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            declarations: [
                activiti_people_component_1.ActivitiPeople,
                activiti_people_search_component_1.ActivitiPeopleSearch
            ],
            providers: [
                activiti_people_service_1.ActivitiPeopleService
            ]
        }).compileComponents().then(function () {
            logService = testing_1.TestBed.get(ng2_alfresco_core_1.LogService);
            var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
            spyOn(translateService, 'addTranslationFolder').and.stub();
            spyOn(translateService, 'get').and.callFake(function (key) { return Rx_1.Observable.of(key); });
            fixture = testing_1.TestBed.createComponent(activiti_people_component_1.ActivitiPeople);
            activitiPeopleComponent = fixture.componentInstance;
            element = fixture.nativeElement;
            componentHandler = jasmine.createSpyObj('componentHandler', [
                'upgradeAllRegistered'
            ]);
            window['componentHandler'] = componentHandler;
        });
    }));
    it('should show people component title', function () {
        expect(element.querySelector('#people-title')).toBeDefined();
        expect(element.querySelector('#people-title')).not.toBeNull();
    });
    it('should show no people involved message', function () {
        fixture.detectChanges();
        fixture.whenStable()
            .then(function () {
            expect(element.querySelector('#no-people-label')).not.toBeNull();
            expect(element.querySelector('#no-people-label').textContent).toContain('TASK_DETAILS.PEOPLE.NONE');
        });
    });
    describe('when interact with people dialog', function () {
        beforeEach(function () {
            activitiPeopleComponent.taskId = 'fake-task-id';
            activitiPeopleComponent.people = [];
            fixture.detectChanges();
        });
        it('should show dialog when clicked on add', function () {
            expect(element.querySelector('#addPeople')).not.toBeNull();
            activitiPeopleComponent.showDialog();
            expect(element.querySelector('#add-people-dialog')).not.toBeNull();
            expect(element.querySelector('#add-people-dialog-title')).not.toBeNull();
            expect(element.querySelector('#add-people-dialog-title').textContent).toContain('Involve User');
        });
        it('should close dialog when clicked on cancel', function () {
            activitiPeopleComponent.showDialog();
            expect(element.querySelector('#addPeople')).not.toBeNull();
            activitiPeopleComponent.closeDialog();
            var dialogWindow = element.querySelector('#add-people-dialog');
            expect(dialogWindow.getAttribute('open')).toBeNull();
        });
        it('should reset search input when the dialog is closed', function () {
            var userInputSearch;
            activitiPeopleComponent.showDialog();
            expect(element.querySelector('#addPeople')).not.toBeNull();
            userInputSearch = element.querySelector('#userSearchText');
            userInputSearch.value = 'fake-search-value';
            activitiPeopleComponent.closeDialog();
            activitiPeopleComponent.showDialog();
            userInputSearch = element.querySelector('#userSearchText');
            expect(userInputSearch).not.toBeNull();
            expect(userInputSearch.value).toBeFalsy();
        });
    });
    describe('when there are involved people', function () {
        beforeEach(function () {
            activitiPeopleComponent.taskId = 'fake-task-id';
            activitiPeopleComponent.people.push(fakeUser);
            fixture.detectChanges();
        });
        beforeEach(function () {
            jasmine.Ajax.install();
        });
        afterEach(function () {
            jasmine.Ajax.uninstall();
        });
        it('should show people involved', function () {
            expect(element.querySelector('#user-fake-id')).not.toBeNull();
            expect(element.querySelector('#user-fake-id').textContent).toContain('fake-name');
            expect(element.querySelector('#user-fake-id').textContent).toContain('fake-last');
        });
        it('should remove pepole involved', testing_1.async(function () {
            activitiPeopleComponent.removeInvolvedUser(fakeUser);
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200
            });
            fixture.whenStable()
                .then(function () {
                fixture.detectChanges();
                expect(element.querySelector('#user-fake-id')).toBeNull();
            });
        }));
        it('should involve pepole', testing_1.async(function () {
            activitiPeopleComponent.involveUser(fakeUserToInvolve);
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200
            });
            fixture.whenStable()
                .then(function () {
                fixture.detectChanges();
                expect(element.querySelector('#user-fake-involve-id')).not.toBeNull();
                expect(element.querySelector('#user-fake-involve-id').textContent)
                    .toBe('fake-involve-name fake-involve-last');
            });
        }));
        it('should return an observable with user search results', function (done) {
            activitiPeopleComponent.peopleSearch$.subscribe(function (users) {
                expect(users.length).toBe(2);
                expect(users[0].firstName).toBe('fake-test-1');
                expect(users[0].lastName).toBe('fake-last-1');
                expect(users[0].email).toBe('fake-test-1@test.com');
                expect(users[0].id).toBe(1);
                done();
            });
            activitiPeopleComponent.searchUser('fake-search-word');
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: {
                    data: [{
                            id: 1,
                            firstName: 'fake-test-1',
                            lastName: 'fake-last-1',
                            email: 'fake-test-1@test.com'
                        }, {
                            id: 2,
                            firstName: 'fake-test-2',
                            lastName: 'fake-last-2',
                            email: 'fake-test-2@test.com'
                        }]
                }
            });
        });
        it('should return an empty list for not valid search', function (done) {
            activitiPeopleComponent.peopleSearch$.subscribe(function (users) {
                expect(users.length).toBe(0);
                done();
            });
            activitiPeopleComponent.searchUser('fake-search-word');
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: {}
            });
        });
    });
    describe('when there are errors on service call', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });
        afterEach(function () {
            jasmine.Ajax.uninstall();
        });
        it('should log error message when search fails', testing_1.async(function () {
            activitiPeopleComponent.peopleSearch$.subscribe(function () {
                expect(logService.error).toHaveBeenCalledWith('Could not load users');
            });
            activitiPeopleComponent.searchUser('fake-search');
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 403
            });
        }));
        it('should not remove user if remove involved user fail', testing_1.async(function () {
            activitiPeopleComponent.people.push(fakeUser);
            fixture.detectChanges();
            activitiPeopleComponent.removeInvolvedUser(fakeUser);
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 403
            });
            fixture.whenStable()
                .then(function () {
                fixture.detectChanges();
                expect(element.querySelector('#user-fake-id')).not.toBeNull();
                expect(element.querySelector('#user-fake-id').textContent)
                    .toBe('fake-name fake-last');
            });
        }));
        it('should not involve user if involve user fail', testing_1.async(function () {
            activitiPeopleComponent.involveUser(fakeUserToInvolve);
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 403
            });
            fixture.whenStable()
                .then(function () {
                fixture.detectChanges();
                expect(element.querySelector('#user-fake-id')).toBeNull();
                expect(element.querySelector('#no-people-label').textContent).toContain('TASK_DETAILS.PEOPLE.NONE');
            });
        }));
    });
});
//# sourceMappingURL=activiti-people.component.spec.js.map