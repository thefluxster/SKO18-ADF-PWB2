/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_tasklist_service_1 = require("../services/activiti-tasklist.service");
var activiti_checklist_component_1 = require("./activiti-checklist.component");
var task_details_model_1 = require("../models/task-details.model");
var fakeTaskDetail = new task_details_model_1.TaskDetailsModel({
    id: 'fake-check-id',
    name: 'fake-check-name'
});
describe('ActivitiChecklist', function () {
    var checklistComponent;
    var fixture;
    var element;
    var showChecklistDialog, closeCheckDialogButton;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            declarations: [
                activiti_checklist_component_1.ActivitiChecklist
            ],
            providers: [
                activiti_tasklist_service_1.ActivitiTaskListService
            ]
        }).compileComponents().then(function () {
            var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
            spyOn(translateService, 'addTranslationFolder').and.stub();
            spyOn(translateService, 'get').and.callFake(function (key) {
                return Rx_1.Observable.of(key);
            });
            fixture = testing_1.TestBed.createComponent(activiti_checklist_component_1.ActivitiChecklist);
            checklistComponent = fixture.componentInstance;
            element = fixture.nativeElement;
            fixture.detectChanges();
        });
    }));
    it('should show people component title', function () {
        expect(element.querySelector('#checklist-label')).toBeDefined();
        expect(element.querySelector('#checklist-label')).not.toBeNull();
    });
    it('should show no checklist message', function () {
        expect(element.querySelector('#checklist-none-message')).not.toBeNull();
        expect(element.querySelector('#checklist-none-message').textContent).toContain('TASK_DETAILS.CHECKLIST.NONE');
    });
    describe('when interact with people dialog', function () {
        beforeEach(function () {
            checklistComponent.taskId = 'fake-task-id';
            checklistComponent.checklist = [];
            fixture.detectChanges();
            showChecklistDialog = element.querySelector('#add-checklist');
            closeCheckDialogButton = element.querySelector('#close-check-dialog');
        });
        it('should show dialog when clicked on add', function () {
            expect(showChecklistDialog).not.toBeNull();
            showChecklistDialog.click();
            expect(element.querySelector('#checklist-dialog')).not.toBeNull();
            expect(element.querySelector('#add-checklist-title')).not.toBeNull();
            expect(element.querySelector('#add-checklist-title').textContent).toContain('New Check');
        });
        it('should close dialog when clicked on cancel', function () {
            showChecklistDialog.click();
            expect(element.querySelector('#checklist-dialog').getAttribute('open')).not.toBeNull();
            closeCheckDialogButton.click();
            expect(element.querySelector('#checklist-dialog').getAttribute('open')).toBeNull();
        });
    });
    describe('when there are task checklist', function () {
        beforeEach(function () {
            checklistComponent.taskId = 'fake-task-id';
            checklistComponent.checklist = [];
            fixture.detectChanges();
            showChecklistDialog = element.querySelector('#add-checklist');
        });
        beforeEach(function () {
            jasmine.Ajax.install();
        });
        afterEach(function () {
            jasmine.Ajax.uninstall();
        });
        it('should show task checklist', function () {
            checklistComponent.checklist.push(fakeTaskDetail);
            fixture.detectChanges();
            expect(element.querySelector('#check-fake-check-id')).not.toBeNull();
            expect(element.querySelector('#check-fake-check-id').textContent).toContain('fake-check-name');
        });
        it('should add checklist', testing_1.async(function () {
            showChecklistDialog.click();
            var addButtonDialog = element.querySelector('#add-check');
            addButtonDialog.click();
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: { id: 'fake-check-added-id', name: 'fake-check-added-name' }
            });
            fixture.whenStable().then(function () {
                fixture.detectChanges();
                expect(element.querySelector('#check-fake-check-added-id')).not.toBeNull();
                expect(element.querySelector('#check-fake-check-added-id').textContent).toContain('fake-check-added-name');
            });
        }));
        it('should show load task checklist on change', testing_1.async(function () {
            checklistComponent.taskId = 'new-fake-task-id';
            checklistComponent.checklist.push(fakeTaskDetail);
            fixture.detectChanges();
            var change = new core_1.SimpleChange(null, 'new-fake-task-id');
            checklistComponent.ngOnChanges({
                taskId: change
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: { data: [{ id: 'fake-check-changed-id', name: 'fake-check-changed-name' }] }
            });
            fixture.whenStable().then(function () {
                fixture.detectChanges();
                expect(element.querySelector('#check-fake-check-changed-id')).not.toBeNull();
                expect(element.querySelector('#check-fake-check-changed-id').textContent).toContain('fake-check-changed-name');
            });
        }));
        it('should show empty checklist when task id is null', testing_1.async(function () {
            checklistComponent.taskId = 'new-fake-task-id';
            checklistComponent.checklist.push(fakeTaskDetail);
            fixture.detectChanges();
            checklistComponent.taskId = null;
            var change = new core_1.SimpleChange(null, 'new-fake-task-id');
            checklistComponent.ngOnChanges({
                taskId: change
            });
            fixture.whenStable().then(function () {
                fixture.detectChanges();
                expect(element.querySelector('#checklist-none-message')).not.toBeNull();
                expect(element.querySelector('#checklist-none-message').textContent).toContain('TASK_DETAILS.CHECKLIST.NONE');
            });
        }));
        it('should emit checklist task created event when the checklist is successfully added', function (done) {
            checklistComponent.checklistTaskCreated.subscribe(function (taskAdded) {
                fixture.detectChanges();
                expect(taskAdded.id).toEqual('fake-check-added-id');
                expect(taskAdded.name).toEqual('fake-check-added-name');
                expect(element.querySelector('#check-fake-check-added-id')).not.toBeNull();
                expect(element.querySelector('#check-fake-check-added-id').textContent).toContain('fake-check-added-name');
                done();
            });
            showChecklistDialog.click();
            var addButtonDialog = element.querySelector('#add-check');
            addButtonDialog.click();
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: { id: 'fake-check-added-id', name: 'fake-check-added-name' }
            });
        });
    });
});
//# sourceMappingURL=activiti-checklist.component.spec.js.map