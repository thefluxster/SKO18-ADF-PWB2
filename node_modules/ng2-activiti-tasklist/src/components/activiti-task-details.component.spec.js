/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_activiti_form_1 = require("ng2-activiti-form");
var activiti_task_details_component_1 = require("./activiti-task-details.component");
var activiti_tasklist_service_1 = require("./../services/activiti-tasklist.service");
var activiti_people_service_1 = require("./../services/activiti-people.service");
var task_details_mock_1 = require("./../assets/task-details.mock");
var task_details_model_1 = require("../models/task-details.model");
describe('ActivitiTaskDetails', function () {
    var componentHandler;
    var service;
    var formService;
    var component;
    var fixture;
    var getTaskDetailsSpy;
    var getFormSpy;
    var getTasksSpy;
    var completeTaskSpy;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot(),
                ng2_activiti_form_1.ActivitiFormModule.forRoot()
            ],
            declarations: [
                activiti_task_details_component_1.ActivitiTaskDetails
            ],
            providers: [
                activiti_tasklist_service_1.ActivitiTaskListService,
                activiti_people_service_1.ActivitiPeopleService
            ],
            schemas: [core_1.NO_ERRORS_SCHEMA]
        }).compileComponents();
        var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
        spyOn(translateService, 'addTranslationFolder').and.stub();
        spyOn(translateService, 'get').and.callFake(function (key) { return Rx_1.Observable.of(key); });
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(activiti_task_details_component_1.ActivitiTaskDetails);
        component = fixture.componentInstance;
        service = fixture.debugElement.injector.get(activiti_tasklist_service_1.ActivitiTaskListService);
        formService = fixture.debugElement.injector.get(ng2_activiti_form_1.FormService);
        getTaskDetailsSpy = spyOn(service, 'getTaskDetails').and.returnValue(Rx_1.Observable.of(task_details_mock_1.taskDetailsMock));
        getFormSpy = spyOn(formService, 'getTaskForm').and.returnValue(Rx_1.Observable.of(task_details_mock_1.taskFormMock));
        getTasksSpy = spyOn(service, 'getTasks').and.returnValue(Rx_1.Observable.of(task_details_mock_1.tasksMock));
        completeTaskSpy = spyOn(service, 'completeTask').and.returnValue(Rx_1.Observable.of({}));
        spyOn(service, 'getTaskComments').and.returnValue(Rx_1.Observable.of(task_details_mock_1.noDataMock));
        spyOn(service, 'getTaskChecklist').and.returnValue(Rx_1.Observable.of(task_details_mock_1.noDataMock));
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered',
            'upgradeElement'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should load task details when taskId specified', function () {
        component.taskId = '123';
        fixture.detectChanges();
        expect(getTaskDetailsSpy).toHaveBeenCalled();
    });
    it('should not load task details when no taskId is specified', function () {
        fixture.detectChanges();
        expect(getTaskDetailsSpy).not.toHaveBeenCalled();
    });
    it('should set a placeholder message when taskId not initialised', function () {
        fixture.detectChanges();
        expect(fixture.nativeElement.innerText).toBe('TASK_DETAILS.MESSAGES.NONE');
    });
    it('should display a form when the task has an associated form', function () {
        component.taskId = '123';
        fixture.detectChanges();
        fixture.whenStable().then(function () {
            fixture.detectChanges();
            expect(fixture.debugElement.query(platform_browser_1.By.css('activiti-form'))).not.toBeNull();
        });
    });
    it('should not display a form when the task does not have an associated form', testing_1.async(function () {
        component.taskId = '123';
        task_details_mock_1.taskDetailsMock.formKey = undefined;
        fixture.detectChanges();
        fixture.whenStable().then(function () {
            fixture.detectChanges();
            expect(fixture.debugElement.query(platform_browser_1.By.css('activiti-form'))).toBeNull();
        });
    }));
    describe('change detection', function () {
        var change = new core_1.SimpleChange('123', '456');
        var nullChange = new core_1.SimpleChange('123', null);
        beforeEach(testing_1.async(function () {
            component.taskId = '123';
            fixture.detectChanges();
            fixture.whenStable().then(function () {
                getTaskDetailsSpy.calls.reset();
            });
        }));
        it('should fetch new task details when taskId changed', function () {
            component.ngOnChanges({ 'taskId': change });
            expect(getTaskDetailsSpy).toHaveBeenCalledWith('456');
        });
        it('should NOT fetch new task details when empty changeset made', function () {
            component.ngOnChanges({});
            expect(getTaskDetailsSpy).not.toHaveBeenCalled();
        });
        it('should NOT fetch new task details when taskId changed to null', function () {
            component.ngOnChanges({ 'taskId': nullChange });
            expect(getTaskDetailsSpy).not.toHaveBeenCalled();
        });
        it('should set a placeholder message when taskId changed to null', function () {
            component.ngOnChanges({ 'taskId': nullChange });
            fixture.detectChanges();
            expect(fixture.nativeElement.innerText).toBe('TASK_DETAILS.MESSAGES.NONE');
        });
    });
    describe('Form events', function () {
        beforeEach(testing_1.async(function () {
            component.taskId = '123';
            fixture.detectChanges();
            fixture.whenStable();
        }));
        it('should emit a save event when form saved', function () {
            var emitSpy = spyOn(component.formSaved, 'emit');
            component.onFormSaved(new ng2_activiti_form_1.FormModel());
            expect(emitSpy).toHaveBeenCalled();
        });
        it('should emit a outcome execution event when form outcome executed', function () {
            var emitSpy = spyOn(component.executeOutcome, 'emit');
            component.onFormExecuteOutcome(new ng2_activiti_form_1.FormOutcomeEvent(new ng2_activiti_form_1.FormOutcomeModel(new ng2_activiti_form_1.FormModel())));
            expect(emitSpy).toHaveBeenCalled();
        });
        it('should emit a complete event when form completed', function () {
            var emitSpy = spyOn(component.formCompleted, 'emit');
            component.onFormCompleted(new ng2_activiti_form_1.FormModel());
            expect(emitSpy).toHaveBeenCalled();
        });
        it('should load next task when form completed', function () {
            component.onComplete();
            expect(getTasksSpy).toHaveBeenCalled();
        });
        it('should show placeholder message if there is no next task', function () {
            getTasksSpy.and.returnValue(Rx_1.Observable.of(task_details_mock_1.noDataMock));
            component.onComplete();
            fixture.detectChanges();
            expect(fixture.nativeElement.innerText).toBe('TASK_DETAILS.MESSAGES.NONE');
        });
        it('should emit an error event if an error occurs fetching the next task', function () {
            var emitSpy = spyOn(component.onError, 'emit');
            getTasksSpy.and.returnValue(Rx_1.Observable.throw({}));
            component.onComplete();
            expect(emitSpy).toHaveBeenCalled();
        });
        it('should NOT load next task when form completed if showNextTask is false', function () {
            component.showNextTask = false;
            component.onComplete();
            expect(getTasksSpy).not.toHaveBeenCalled();
        });
        it('should call service to complete task when complete button clicked', function () {
            component.onComplete();
            expect(completeTaskSpy).toHaveBeenCalled();
        });
        it('should emit a complete event when complete button clicked and task completed', function () {
            var emitSpy = spyOn(component.formCompleted, 'emit');
            component.onComplete();
            expect(emitSpy).toHaveBeenCalled();
        });
        it('should call service to load next task when complete button clicked', function () {
            component.onComplete();
            expect(getTasksSpy).toHaveBeenCalled();
        });
        it('should emit a load event when form loaded', function () {
            var emitSpy = spyOn(component.formLoaded, 'emit');
            component.onFormLoaded(new ng2_activiti_form_1.FormModel());
            expect(emitSpy).toHaveBeenCalled();
        });
        it('should emit an error event when form error occurs', function () {
            var emitSpy = spyOn(component.onError, 'emit');
            component.onFormError({});
            expect(emitSpy).toHaveBeenCalled();
        });
        it('should display a dialog to the user when a form error occurs', function () {
            var dialogEl = fixture.debugElement.query(platform_browser_1.By.css('.error-dialog')).nativeElement;
            var showSpy = spyOn(dialogEl, 'showModal');
            component.onFormError({});
            expect(showSpy).toHaveBeenCalled();
        });
        it('should close error dialog when close button clicked', function () {
            var dialogEl = fixture.debugElement.query(platform_browser_1.By.css('.error-dialog')).nativeElement;
            var closeSpy = spyOn(dialogEl, 'close');
            component.onFormError({});
            component.closeErrorDialog();
            expect(closeSpy).toHaveBeenCalled();
        });
        it('should emit a task created event when checklist task is created', function () {
            var emitSpy = spyOn(component.taskCreated, 'emit');
            var mockTask = new task_details_model_1.TaskDetailsModel(task_details_mock_1.taskDetailsMock);
            component.onChecklistTaskCreated(mockTask);
            expect(emitSpy).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=activiti-task-details.component.spec.js.map