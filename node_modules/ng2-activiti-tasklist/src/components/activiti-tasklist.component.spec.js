/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_alfresco_datatable_1 = require("ng2-alfresco-datatable");
var activiti_tasklist_component_1 = require("./activiti-tasklist.component");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_datatable_2 = require("ng2-alfresco-datatable");
var activiti_tasklist_service_1 = require("../services/activiti-tasklist.service");
describe('ActivitiTaskList', function () {
    var fakeGlobalTask = [
        {
            id: 14, name: 'task-name',
            processDefinitionId: 'fakeprocess:5:7507',
            processDefinitionKey: 'fakeprocess',
            processDefinitionName: 'Fake Process Name',
            description: null, category: null,
            assignee: {
                id: 1, firstName: null, lastName: 'Administrator', email: 'admin'
            }
        },
        {
            id: 2, name: '', description: null, category: null,
            assignee: {
                id: 1, firstName: null, lastName: 'Administrator', email: 'admin'
            }
        }
    ];
    var fakeGlobalTotalTasks = {
        size: 2, total: 2, start: 0,
        data: []
    };
    var fakeErrorTaskList = {
        error: 'wrong request'
    };
    var componentHandler;
    var component;
    var fixture;
    var taskListService;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot(),
                ng2_alfresco_datatable_1.DataTableModule
            ],
            declarations: [
                activiti_tasklist_component_1.ActivitiTaskList
            ],
            providers: [
                activiti_tasklist_service_1.ActivitiTaskListService
            ]
        }).compileComponents();
        var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
        spyOn(translateService, 'addTranslationFolder').and.stub();
        spyOn(translateService, 'get').and.callFake(function (key) { return Rx_1.Observable.of(key); });
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(activiti_tasklist_component_1.ActivitiTaskList);
        component = fixture.componentInstance;
        taskListService = testing_1.TestBed.get(activiti_tasklist_service_1.ActivitiTaskListService);
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered',
            'upgradeElement'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should use the default schemaColumn as default', function () {
        component.ngOnInit();
        expect(component.data.getColumns()).toBeDefined();
        expect(component.data.getColumns().length).toEqual(4);
    });
    it('should use the schemaColumn passed in input', function () {
        component.data = new ng2_alfresco_datatable_2.ObjectDataTableAdapter([], [
            { type: 'text', key: 'fake-id', title: 'Name' }
        ]);
        component.ngOnInit();
        expect(component.data.getColumns()).toBeDefined();
        expect(component.data.getColumns().length).toEqual(1);
    });
    it('should return an empty task list when no input parameters are passed', function () {
        component.ngOnInit();
        expect(component.data).toBeDefined();
        expect(component.isListEmpty()).toBeTruthy();
    });
    it('should return the filtered task list when the input parameters are passed', function (done) {
        spyOn(taskListService, 'getTotalTasks').and.returnValue(Rx_1.Observable.of(fakeGlobalTotalTasks));
        spyOn(taskListService, 'getTasks').and.returnValue(Rx_1.Observable.of(fakeGlobalTask));
        var state = new core_1.SimpleChange(null, 'open');
        var processDefinitionKey = new core_1.SimpleChange(null, null);
        var assignment = new core_1.SimpleChange(null, 'fake-assignee');
        component.onSuccess.subscribe(function (res) {
            expect(res).toBeDefined();
            expect(component.data).toBeDefined();
            expect(component.isListEmpty()).not.toBeTruthy();
            expect(component.data.getRows().length).toEqual(2);
            expect(component.data.getRows()[0].getValue('name')).toEqual('No name');
            done();
        });
        component.ngOnInit();
        component.ngOnChanges({ 'state': state, 'processDefinitionKey': processDefinitionKey, 'assignment': assignment });
        fixture.detectChanges();
    });
    it('should return the filtered task list by processDefinitionKey', function (done) {
        spyOn(taskListService, 'getTotalTasks').and.returnValue(Rx_1.Observable.of(fakeGlobalTotalTasks));
        spyOn(taskListService, 'getTasks').and.returnValue(Rx_1.Observable.of(fakeGlobalTask));
        var state = new core_1.SimpleChange(null, 'open');
        var processDefinitionKey = new core_1.SimpleChange(null, 'fakeprocess');
        var assignment = new core_1.SimpleChange(null, 'fake-assignee');
        component.onSuccess.subscribe(function (res) {
            expect(res).toBeDefined();
            expect(component.data).toBeDefined();
            expect(component.isListEmpty()).not.toBeTruthy();
            expect(component.data.getRows().length).toEqual(2);
            expect(component.data.getRows()[0].getValue('name')).toEqual('No name');
            done();
        });
        component.ngOnInit();
        component.ngOnChanges({ 'state': state, 'processDefinitionKey': processDefinitionKey, 'assignment': assignment });
        fixture.detectChanges();
    });
    it('should return a currentId null when the taskList is empty', function () {
        component.selectTask(null);
        expect(component.getCurrentId()).toBeNull();
    });
    it('should throw an exception when the response is wrong', function (done) {
        spyOn(taskListService, 'getTotalTasks').and.returnValue(Rx_1.Observable.throw(fakeErrorTaskList));
        var state = new core_1.SimpleChange(null, 'open');
        var assignment = new core_1.SimpleChange(null, 'fake-assignee');
        component.onError.subscribe(function (err) {
            expect(err).toBeDefined();
            expect(err.error).toBe('wrong request');
            done();
        });
        component.ngOnInit();
        component.ngOnChanges({ 'state': state, 'assignment': assignment });
        fixture.detectChanges();
    });
    it('should reload tasks when reload() is called', function (done) {
        spyOn(taskListService, 'getTotalTasks').and.returnValue(Rx_1.Observable.of(fakeGlobalTotalTasks));
        spyOn(taskListService, 'getTasks').and.returnValue(Rx_1.Observable.of(fakeGlobalTask));
        component.state = 'open';
        component.assignment = 'fake-assignee';
        component.ngOnInit();
        component.onSuccess.subscribe(function (res) {
            expect(res).toBeDefined();
            expect(component.data).toBeDefined();
            expect(component.isListEmpty()).not.toBeTruthy();
            expect(component.data.getRows().length).toEqual(2);
            expect(component.data.getRows()[0].getValue('name')).toEqual('No name');
            done();
        });
        component.reload();
    });
    it('should emit row click event', function (done) {
        var row = new ng2_alfresco_datatable_2.ObjectDataRow({
            id: 999
        });
        var rowEvent = { value: row };
        component.rowClick.subscribe(function (taskId) {
            expect(taskId).toEqual(999);
            expect(component.getCurrentId()).toEqual(999);
            done();
        });
        component.onRowClick(rowEvent);
    });
    describe('component changes', function () {
        beforeEach(function () {
            spyOn(taskListService, 'getTotalTasks').and.returnValue(Rx_1.Observable.of(fakeGlobalTotalTasks));
            spyOn(taskListService, 'getTasks').and.returnValue(Rx_1.Observable.of(fakeGlobalTask));
            component.data = new ng2_alfresco_datatable_2.ObjectDataTableAdapter([], [
                { type: 'text', key: 'fake-id', title: 'Name' }
            ]);
        });
        it('should NOT reload the process list when no parameters changed', function () {
            expect(component.isListEmpty()).toBeTruthy();
            component.ngOnChanges({});
            expect(component.isListEmpty()).toBeTruthy();
        });
        it('should reload the list when the appId parameter changes', function (done) {
            var appId = '1';
            var change = new core_1.SimpleChange(null, appId);
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(component.data).toBeDefined();
                expect(component.isListEmpty()).not.toBeTruthy();
                expect(component.data.getRows().length).toEqual(2);
                expect(component.data.getRows()[1].getValue('name')).toEqual('No name');
                done();
            });
            component.ngOnChanges({ 'appId': change });
        });
        it('should reload the list when the processDefinitionKey parameter changes', function (done) {
            var processDefinitionKey = 'fakeprocess';
            var change = new core_1.SimpleChange(null, processDefinitionKey);
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(component.data).toBeDefined();
                expect(component.isListEmpty()).not.toBeTruthy();
                expect(component.data.getRows().length).toEqual(2);
                expect(component.data.getRows()[1].getValue('name')).toEqual('No name');
                done();
            });
            component.ngOnChanges({ 'processDefinitionKey': change });
        });
        it('should reload the list when the state parameter changes', function (done) {
            var state = 'open';
            var change = new core_1.SimpleChange(null, state);
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(component.data).toBeDefined();
                expect(component.isListEmpty()).not.toBeTruthy();
                expect(component.data.getRows().length).toEqual(2);
                expect(component.data.getRows()[1].getValue('name')).toEqual('No name');
                done();
            });
            component.ngOnChanges({ 'state': change });
        });
        it('should reload the list when the sort parameter changes', function (done) {
            var sort = 'desc';
            var change = new core_1.SimpleChange(null, sort);
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(component.data).toBeDefined();
                expect(component.isListEmpty()).not.toBeTruthy();
                expect(component.data.getRows().length).toEqual(2);
                expect(component.data.getRows()[1].getValue('name')).toEqual('No name');
                done();
            });
            component.ngOnChanges({ 'sort': change });
        });
        it('should reload the process list when the name parameter changes', function (done) {
            var name = 'FakeTaskName';
            var change = new core_1.SimpleChange(null, name);
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(component.data).toBeDefined();
                expect(component.isListEmpty()).not.toBeTruthy();
                expect(component.data.getRows().length).toEqual(2);
                expect(component.data.getRows()[1].getValue('name')).toEqual('No name');
                done();
            });
            component.ngOnChanges({ 'name': change });
        });
        it('should reload the list when the assignment parameter changes', function (done) {
            var assignment = 'assignee';
            var change = new core_1.SimpleChange(null, assignment);
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(component.data).toBeDefined();
                expect(component.isListEmpty()).not.toBeTruthy();
                expect(component.data.getRows().length).toEqual(2);
                expect(component.data.getRows()[1].getValue('name')).toEqual('No name');
                done();
            });
            component.ngOnChanges({ 'assignment': change });
        });
    });
});
//# sourceMappingURL=activiti-tasklist.component.spec.js.map