/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_task_header_component_1 = require("./activiti-task-header.component");
var task_details_mock_1 = require("./../assets/task-details.mock");
var task_details_model_1 = require("../models/task-details.model");
var activiti_tasklist_service_1 = require("./../services/activiti-tasklist.service");
describe('ActivitiTaskHeader', function () {
    var service;
    var componentHandler;
    var component;
    var fixture;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            declarations: [
                activiti_task_header_component_1.ActivitiTaskHeader
            ],
            providers: [
                activiti_tasklist_service_1.ActivitiTaskListService
            ]
        }).compileComponents();
        var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
        spyOn(translateService, 'addTranslationFolder').and.stub();
        spyOn(translateService, 'get').and.callFake(function (key) { return Rx_1.Observable.of(key); });
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(activiti_task_header_component_1.ActivitiTaskHeader);
        component = fixture.componentInstance;
        service = testing_1.TestBed.get(activiti_tasklist_service_1.ActivitiTaskListService);
        component.taskDetails = new task_details_model_1.TaskDetailsModel(task_details_mock_1.taskDetailsMock);
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered',
            'upgradeElement'
        ]);
        window['componentHandler'] = componentHandler;
    });
    it('should render empty component if no form details provided', function () {
        component.taskDetails = undefined;
        fixture.detectChanges();
        expect(fixture.debugElement.children.length).toBe(0);
    });
    it('should display assignee', function () {
        fixture.detectChanges();
        var formNameEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-assignee"] .activiti-task-header__value'));
        expect(formNameEl.nativeElement.innerText).toBe('Wilbur Adams');
    });
    it('should display placeholder if no assignee', function () {
        component.taskDetails.assignee = null;
        fixture.detectChanges();
        var valueEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-assignee"] .activiti-task-header__value'));
        expect(valueEl.nativeElement.innerText).toBe('TASK_DETAILS.ASSIGNEE.NONE');
    });
    it('should display the claim button if no assignee', function () {
        component.taskDetails.assignee = null;
        fixture.detectChanges();
        var valueEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-claim-button"]'));
        expect(valueEl.nativeElement.innerText).toBe('TASK_DETAILS.BUTTON.CLAIM');
    });
    it('should display due date', function () {
        component.taskDetails.dueDate = '2016-11-03T15:25:42.749+0000';
        fixture.detectChanges();
        var valueEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-due-date"] .activiti-task-header__value'));
        expect(valueEl.nativeElement.innerText).toBe('2016-11-03T15:25:42.749+0000');
    });
    it('should display placeholder if no due date', function () {
        component.taskDetails.dueDate = null;
        fixture.detectChanges();
        var valueEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-due-date"] .activiti-task-header__value'));
        expect(valueEl.nativeElement.innerText).toBe('TASK_DETAILS.DUE.NONE');
    });
    it('should display form name', function () {
        component.formName = 'test form';
        fixture.detectChanges();
        var valueEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-form-name"] .activiti-task-header__value'));
        expect(valueEl.nativeElement.innerText).toBe('test form');
    });
    it('should not display form name if no form name provided', function () {
        fixture.detectChanges();
        var valueEl = fixture.debugElement.query(platform_browser_1.By.css('[data-automation-id="header-form-name"] .activiti-task-header__value'));
        expect(valueEl).toBeNull();
    });
});
//# sourceMappingURL=activiti-task-header.component.spec.js.map