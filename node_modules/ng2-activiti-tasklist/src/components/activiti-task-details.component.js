/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_tasklist_service_1 = require("./../services/activiti-tasklist.service");
var user_model_1 = require("../models/user.model");
var ng2_activiti_form_1 = require("ng2-activiti-form");
var filter_model_1 = require("../models/filter.model");
var ActivitiTaskDetails = (function () {
    function ActivitiTaskDetails(translateService, activitiForm, activitiTaskList, logService) {
        this.translateService = translateService;
        this.activitiForm = activitiForm;
        this.activitiTaskList = activitiTaskList;
        this.logService = logService;
        this.showNextTask = true;
        this.showFormTitle = true;
        this.showFormCompleteButton = true;
        this.showFormSaveButton = true;
        this.readOnlyForm = false;
        this.showFormRefreshButton = true;
        this.formSaved = new core_1.EventEmitter();
        this.formCompleted = new core_1.EventEmitter();
        this.formLoaded = new core_1.EventEmitter();
        this.taskCreated = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.executeOutcome = new core_1.EventEmitter();
        this.taskFormName = null;
        this.taskPeople = [];
        if (translateService) {
            translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
        }
    }
    ActivitiTaskDetails.prototype.ngOnInit = function () {
        if (this.taskId) {
            this.loadDetails(this.taskId);
        }
    };
    ActivitiTaskDetails.prototype.ngOnChanges = function (changes) {
        var taskId = changes['taskId'];
        if (taskId && !taskId.currentValue) {
            this.reset();
            return;
        }
        if (taskId && taskId.currentValue) {
            this.loadDetails(taskId.currentValue);
            return;
        }
    };
    ActivitiTaskDetails.prototype.reset = function () {
        this.taskDetails = null;
    };
    ActivitiTaskDetails.prototype.hasFormKey = function () {
        return (this.taskDetails
            && this.taskDetails.formKey
            && this.taskDetails.formKey !== 'null');
    };
    ActivitiTaskDetails.prototype.isTaskActive = function () {
        return this.taskDetails && this.taskDetails.duration === null;
    };
    ActivitiTaskDetails.prototype.loadDetails = function (taskId) {
        var _this = this;
        this.taskPeople = [];
        this.taskFormName = null;
        if (taskId) {
            this.activitiTaskList.getTaskDetails(taskId).subscribe(function (res) {
                _this.taskDetails = res;
                if (_this.taskDetails.name === 'null') {
                    _this.taskDetails.name = 'No name';
                }
                var endDate = res.endDate;
                _this.readOnlyForm = !!(endDate && !isNaN(endDate.getTime()));
                if (_this.taskDetails && _this.taskDetails.involvedPeople) {
                    _this.taskDetails.involvedPeople.forEach(function (user) {
                        _this.taskPeople.push(new user_model_1.User(user));
                    });
                }
            });
        }
    };
    ActivitiTaskDetails.prototype.isAssignedToMe = function () {
        return this.taskDetails.assignee ? true : false;
    };
    ActivitiTaskDetails.prototype.loadNextTask = function (processInstanceId, processDefinitionId) {
        var _this = this;
        var requestNode = new filter_model_1.TaskQueryRequestRepresentationModel({
            processInstanceId: processInstanceId,
            processDefinitionId: processDefinitionId
        });
        this.activitiTaskList.getTasks(requestNode).subscribe(function (response) {
            if (response && response.length > 0) {
                _this.taskDetails = response[0];
            }
            else {
                _this.reset();
            }
        }, function (error) {
            _this.logService.error(error);
            _this.onError.emit(error);
        });
    };
    ActivitiTaskDetails.prototype.onComplete = function () {
        var _this = this;
        this.activitiTaskList.completeTask(this.taskId).subscribe(function (res) { return _this.onFormCompleted(null); });
    };
    ActivitiTaskDetails.prototype.onFormSaved = function (form) {
        this.formSaved.emit(form);
    };
    ActivitiTaskDetails.prototype.onFormCompleted = function (form) {
        this.formCompleted.emit(form);
        if (this.showNextTask) {
            this.loadNextTask(this.taskDetails.processInstanceId, this.taskDetails.processDefinitionId);
        }
    };
    ActivitiTaskDetails.prototype.onFormLoaded = function (form) {
        this.taskFormName = null;
        if (form && form.name) {
            this.taskFormName = form.name;
        }
        this.formLoaded.emit(form);
    };
    ActivitiTaskDetails.prototype.onChecklistTaskCreated = function (task) {
        this.taskCreated.emit(task);
    };
    ActivitiTaskDetails.prototype.onFormError = function (error) {
        this.errorDialog.nativeElement.showModal();
        this.onError.emit(error);
    };
    ActivitiTaskDetails.prototype.onFormExecuteOutcome = function (event) {
        this.executeOutcome.emit(event);
    };
    ActivitiTaskDetails.prototype.closeErrorDialog = function () {
        this.errorDialog.nativeElement.close();
    };
    ActivitiTaskDetails.prototype.onClaimTask = function (taskId) {
        this.loadDetails(taskId);
    };
    return ActivitiTaskDetails;
}());
__decorate([
    core_1.ViewChild('activiticomments'),
    __metadata("design:type", Object)
], ActivitiTaskDetails.prototype, "activiticomments", void 0);
__decorate([
    core_1.ViewChild('activitichecklist'),
    __metadata("design:type", Object)
], ActivitiTaskDetails.prototype, "activitichecklist", void 0);
__decorate([
    core_1.ViewChild('errorDialog'),
    __metadata("design:type", core_1.DebugElement)
], ActivitiTaskDetails.prototype, "errorDialog", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiTaskDetails.prototype, "taskId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiTaskDetails.prototype, "showNextTask", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiTaskDetails.prototype, "showFormTitle", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiTaskDetails.prototype, "showFormCompleteButton", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiTaskDetails.prototype, "showFormSaveButton", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiTaskDetails.prototype, "readOnlyForm", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ActivitiTaskDetails.prototype, "showFormRefreshButton", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ActivitiTaskDetails.prototype, "peopleIconImageUrl", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiTaskDetails.prototype, "formSaved", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiTaskDetails.prototype, "formCompleted", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiTaskDetails.prototype, "formLoaded", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiTaskDetails.prototype, "taskCreated", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiTaskDetails.prototype, "onError", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ActivitiTaskDetails.prototype, "executeOutcome", void 0);
ActivitiTaskDetails = __decorate([
    core_1.Component({
        selector: 'activiti-task-details',
        moduleId: module.id,
        template: "<div *ngIf=\"!taskDetails\">     <template *ngIf=\"noTaskDetailsTemplateComponent\" ngFor [ngForOf]=\"[data]\"               [ngForTemplate]=\"noTaskDetailsTemplateComponent\">         {{ 'TASK_DETAILS.MESSAGES.NONE' | translate }}     </template>     <div *ngIf=\"!noTaskDetailsTemplateComponent\">         {{ 'TASK_DETAILS.MESSAGES.NONE' | translate }}     </div> </div> <div *ngIf=\"taskDetails\">     <h2 class=\"mdl-card__title-text\">{{taskDetails.name}}</h2>     <activiti-task-header             [taskDetails]=\"taskDetails\"             [formName]=\"taskFormName\"             (claim)=\"onClaimTask($event)\"></activiti-task-header>     <div class=\"mdl-grid\">         <div class=\"mdl-cell mdl-cell--4-col\">             <activiti-people [iconImageUrl]=\"peopleIconImageUrl\" [people]=\"taskPeople\" [readOnly]=\"readOnlyForm\"                              [taskId]=\"taskDetails.id\"></activiti-people>         </div>         <div class=\"mdl-cell mdl-cell--4-col\">             <activiti-comments [readOnly]=\"readOnlyForm\" [taskId]=\"taskDetails.id\"                                #activiticomments></activiti-comments>         </div>         <div class=\"mdl-cell mdl-cell--4-col\">             <activiti-checklist [readOnly]=\"readOnlyForm\" [taskId]=\"taskDetails.id\" [assignee]=\"taskDetails?.assignee?.id\"                                 (checklistTaskCreated)=\"onChecklistTaskCreated($event)\" #activitichecklist></activiti-checklist>         </div>     </div>     <div *ngIf=\"isAssignedToMe()\">         <activiti-form *ngIf=\"hasFormKey()\" [taskId]=\"taskDetails.id\"                        [showTitle]=\"showFormTitle\"                        [showRefreshButton]=\"showFormRefreshButton\"                        [showCompleteButton]=\"showFormCompleteButton\"                        [showSaveButton]=\"showFormSaveButton\"                        [readOnly]=\"readOnlyForm\"                        (formSaved)='onFormSaved($event)'                        (formCompleted)='onFormCompleted($event)'                        (formLoaded)='onFormLoaded($event)'                        (onError)='onFormError($event)'                        (executeOutcome)='onFormExecuteOutcome($event)'                        #activitiForm>         </activiti-form>     </div>     <div *ngIf=\"!isAssignedToMe()\">         {{ 'TASK_DETAILS.MESSAGES.CLAIM' | translate }}     </div>     <button type=\"button\" class=\"mdl-button\" *ngIf=\"!hasFormKey() && isTaskActive()\" (click)=\"onComplete()\">         {{ 'TASK_DETAILS.BUTTON.COMPLETE' | translate }}     </button>     <dialog class=\"mdl-dialog error-dialog\" #errorDialog>         <div class=\"mdl-dialog__content\">             <h3>{{'TASK_DETAILS.ERROR.TITLE'|translate}}</h3>             <p>{{'TASK_DETAILS.ERROR.DESCRIPTION'|translate}}</p>             <button type=\"button\" class=\"mdl-button\" (click)=\"closeErrorDialog()\">{{'TASK_DETAILS.ERROR.CLOSE'|translate}}</button>         </div>     </dialog> </div>",
        styles: [":host {     width: 100%; }  .error-dialog h3 {     margin: 16px 0; }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        ng2_activiti_form_1.FormService,
        activiti_tasklist_service_1.ActivitiTaskListService,
        ng2_alfresco_core_1.LogService])
], ActivitiTaskDetails);
exports.ActivitiTaskDetails = ActivitiTaskDetails;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
