/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var Rx_1 = require("rxjs/Rx");
var ActivitiPeopleService = (function () {
    function ActivitiPeopleService(alfrescoJsApi, logService) {
        this.alfrescoJsApi = alfrescoJsApi;
        this.logService = logService;
    }
    ActivitiPeopleService.prototype.getWorkflowUsers = function (taskId, searchWord) {
        var _this = this;
        var option = { excludeTaskId: taskId, filter: searchWord };
        return Rx_1.Observable.fromPromise(this.getWorkflowUserApi(option))
            .map(function (response) { return response.data || []; })
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiPeopleService.prototype.involveUserWithTask = function (taskId, idToInvolve) {
        var _this = this;
        var node = { userId: idToInvolve };
        return Rx_1.Observable.fromPromise(this.involveUserToTaskApi(taskId, node))
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiPeopleService.prototype.removeInvolvedUser = function (taskId, idToRemove) {
        var _this = this;
        var node = { userId: idToRemove };
        return Rx_1.Observable.fromPromise(this.removeInvolvedUserFromTaskApi(taskId, node))
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiPeopleService.prototype.getWorkflowUserApi = function (options) {
        return this.alfrescoJsApi.getInstance().activiti.usersWorkflowApi.getUsers(options);
    };
    ActivitiPeopleService.prototype.involveUserToTaskApi = function (taskId, node) {
        return this.alfrescoJsApi.getInstance().activiti.taskActionsApi.involveUser(taskId, node);
    };
    ActivitiPeopleService.prototype.removeInvolvedUserFromTaskApi = function (taskId, node) {
        return this.alfrescoJsApi.getInstance().activiti.taskActionsApi.removeInvolvedUser(taskId, node);
    };
    ActivitiPeopleService.prototype.handleError = function (error) {
        this.logService.error(error);
        return Rx_1.Observable.throw(error || 'Server error');
    };
    return ActivitiPeopleService;
}());
ActivitiPeopleService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService,
        ng2_alfresco_core_1.LogService])
], ActivitiPeopleService);
exports.ActivitiPeopleService = ActivitiPeopleService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2FjdGl2aXRpLXBlb3BsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7Ozs7Ozs7Ozs7QUFFSCxzQ0FBMkM7QUFDM0MsdURBQW1FO0FBQ25FLDhCQUFxQztBQUtyQyxJQUFhLHFCQUFxQjtJQUU5QiwrQkFBb0IsYUFBaUMsRUFDakMsVUFBc0I7UUFEdEIsa0JBQWEsR0FBYixhQUFhLENBQW9CO1FBQ2pDLGVBQVUsR0FBVixVQUFVLENBQVk7SUFDMUMsQ0FBQztJQUVELGdEQUFnQixHQUFoQixVQUFpQixNQUFjLEVBQUUsVUFBa0I7UUFBbkQsaUJBS0M7UUFKRyxJQUFJLE1BQU0sR0FBRyxFQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBQyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxlQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN6RCxHQUFHLENBQUMsVUFBQyxRQUFhLElBQUssT0FBUyxRQUFRLENBQUMsSUFBSSxJQUFJLEVBQUUsRUFBNUIsQ0FBNEIsQ0FBQzthQUNwRCxLQUFLLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELG1EQUFtQixHQUFuQixVQUFvQixNQUFjLEVBQUUsV0FBbUI7UUFBdkQsaUJBSUM7UUFIRyxJQUFJLElBQUksR0FBRyxFQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsZUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ2pFLEtBQUssQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsa0RBQWtCLEdBQWxCLFVBQW1CLE1BQWMsRUFBRSxVQUFrQjtRQUFyRCxpQkFJQztRQUhHLElBQUksSUFBSSxHQUFHLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxlQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDMUUsS0FBSyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsS0FBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBckIsQ0FBcUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTyxrREFBa0IsR0FBMUIsVUFBMkIsT0FBWTtRQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hGLENBQUM7SUFFTyxvREFBb0IsR0FBNUIsVUFBNkIsTUFBYyxFQUFFLElBQVM7UUFDbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFFTyw2REFBNkIsR0FBckMsVUFBc0MsTUFBYyxFQUFFLElBQVM7UUFDM0QsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDckcsQ0FBQztJQU9PLDJDQUFXLEdBQW5CLFVBQW9CLEtBQWU7UUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLGVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLGNBQWMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFDTCw0QkFBQztBQUFELENBOUNBLEFBOENDLElBQUE7QUE5Q1kscUJBQXFCO0lBRGpDLGlCQUFVLEVBQUU7cUNBRzBCLHNDQUFrQjtRQUNyQiw4QkFBVTtHQUhqQyxxQkFBcUIsQ0E4Q2pDO0FBOUNZLHNEQUFxQiIsImZpbGUiOiJzZXJ2aWNlcy9hY3Rpdml0aS1wZW9wbGUuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFsZnJlc2NvQXBpU2VydmljZSwgTG9nU2VydmljZSB9IGZyb20gJ25nMi1hbGZyZXNjby1jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL1J4JztcbmltcG9ydCB7IFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vbW9kZWxzL3VzZXIubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWN0aXZpdGlQZW9wbGVTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYWxmcmVzY29Kc0FwaTogQWxmcmVzY29BcGlTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xuICAgIH1cblxuICAgIGdldFdvcmtmbG93VXNlcnModGFza0lkOiBzdHJpbmcsIHNlYXJjaFdvcmQ6IHN0cmluZyk6IE9ic2VydmFibGU8VXNlcltdPiB7XG4gICAgICAgIGxldCBvcHRpb24gPSB7ZXhjbHVkZVRhc2tJZDogdGFza0lkLCBmaWx0ZXI6IHNlYXJjaFdvcmR9O1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZSh0aGlzLmdldFdvcmtmbG93VXNlckFwaShvcHRpb24pKVxuICAgICAgICAgICAgLm1hcCgocmVzcG9uc2U6IGFueSkgPT4gPFVzZXJbXT4gcmVzcG9uc2UuZGF0YSB8fCBbXSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKTtcbiAgICB9XG5cbiAgICBpbnZvbHZlVXNlcldpdGhUYXNrKHRhc2tJZDogc3RyaW5nLCBpZFRvSW52b2x2ZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxVc2VyW10+IHtcbiAgICAgICAgbGV0IG5vZGUgPSB7dXNlcklkOiBpZFRvSW52b2x2ZX07XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmZyb21Qcm9taXNlKHRoaXMuaW52b2x2ZVVzZXJUb1Rhc2tBcGkodGFza0lkLCBub2RlKSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKTtcbiAgICB9XG5cbiAgICByZW1vdmVJbnZvbHZlZFVzZXIodGFza0lkOiBzdHJpbmcsIGlkVG9SZW1vdmU6IHN0cmluZyk6IE9ic2VydmFibGU8VXNlcltdPiB7XG4gICAgICAgIGxldCBub2RlID0ge3VzZXJJZDogaWRUb1JlbW92ZX07XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmZyb21Qcm9taXNlKHRoaXMucmVtb3ZlSW52b2x2ZWRVc2VyRnJvbVRhc2tBcGkodGFza0lkLCBub2RlKSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFdvcmtmbG93VXNlckFwaShvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxmcmVzY29Kc0FwaS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnVzZXJzV29ya2Zsb3dBcGkuZ2V0VXNlcnMob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbnZvbHZlVXNlclRvVGFza0FwaSh0YXNrSWQ6IHN0cmluZywgbm9kZTogYW55KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsZnJlc2NvSnNBcGkuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS50YXNrQWN0aW9uc0FwaS5pbnZvbHZlVXNlcih0YXNrSWQsIG5vZGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlSW52b2x2ZWRVc2VyRnJvbVRhc2tBcGkodGFza0lkOiBzdHJpbmcsIG5vZGU6IGFueSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGZyZXNjb0pzQXBpLmdldEluc3RhbmNlKCkuYWN0aXZpdGkudGFza0FjdGlvbnNBcGkucmVtb3ZlSW52b2x2ZWRVc2VyKHRhc2tJZCwgbm9kZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhyb3cgdGhlIGVycm9yXG4gICAgICogQHBhcmFtIGVycm9yXG4gICAgICogQHJldHVybnMge0Vycm9yT2JzZXJ2YWJsZX1cbiAgICAgKi9cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiBSZXNwb25zZSkge1xuICAgICAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IoZXJyb3IpO1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvciB8fCAnU2VydmVyIGVycm9yJyk7XG4gICAgfVxufVxuIl19
