/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var filter_model_1 = require("../models/filter.model");
var comment_model_1 = require("../models/comment.model");
var user_model_1 = require("../models/user.model");
var task_details_model_1 = require("../models/task-details.model");
var form_model_1 = require("../models/form.model");
var ActivitiTaskListService = (function () {
    function ActivitiTaskListService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    ActivitiTaskListService.prototype.getDeployedApplications = function (name) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.appsApi.getAppDefinitions())
            .map(function (response) {
            if (name) {
                return response.data.find(function (p) { return p.name === name; });
            }
            return response.data;
        })
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.getTaskListFilters = function (appId) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.callApiTaskFilters(appId))
            .map(function (response) {
            var filters = [];
            response.data.forEach(function (filter) {
                var filterModel = new filter_model_1.FilterRepresentationModel(filter);
                filters.push(filterModel);
            });
            if (response && response.data && response.data.length === 0) {
                return _this.createDefaultFilter(appId);
            }
            return filters;
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.getTasks = function (requestNode) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.callApiTasksFiltered(requestNode))
            .map(function (res) {
            if (requestNode.processDefinitionKey) {
                return res.data.filter(function (p) { return p.processDefinitionKey === requestNode.processDefinitionKey; });
            }
            else {
                return res.data;
            }
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.getTaskDetails = function (id) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.callApiTaskDetails(id))
            .map(function (res) { return res; })
            .map(function (details) {
            return new task_details_model_1.TaskDetailsModel(details);
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.getTaskComments = function (id) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.callApiTaskComments(id))
            .map(function (res) { return res; })
            .map(function (response) {
            var comments = [];
            response.data.forEach(function (comment) {
                var user = new user_model_1.User(comment.createdBy);
                comments.push(new comment_model_1.Comment(comment.id, comment.message, comment.created, user));
            });
            return comments;
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.getTaskChecklist = function (id) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.callApiTaskChecklist(id))
            .map(function (res) { return res; })
            .map(function (response) {
            var checklists = [];
            response.data.forEach(function (checklist) {
                checklists.push(new task_details_model_1.TaskDetailsModel(checklist));
            });
            return checklists;
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.getFormList = function () {
        var _this = this;
        var opts = {
            'filter': 'myReusableForms',
            'sort': 'modifiedDesc',
            'modelType': 2
        };
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.modelsApi.getModels(opts)).map(function (res) { return res; })
            .map(function (response) {
            var forms = [];
            response.data.forEach(function (form) {
                forms.push(new form_model_1.Form(form.id, form.name));
            });
            return forms;
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.attachFormToATask = function (taskId, formId) {
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.attachForm(taskId, { 'formId': formId }));
    };
    ActivitiTaskListService.prototype.createDefaultFilter = function (appId) {
        var filters = [];
        var involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId);
        this.addFilter(involvedTasksFilter);
        filters.push(involvedTasksFilter);
        var myTasksFilter = this.getMyTasksFilterInstance(appId);
        this.addFilter(myTasksFilter);
        filters.push(myTasksFilter);
        var queuedTasksFilter = this.getQueuedTasksFilterInstance(appId);
        this.addFilter(queuedTasksFilter);
        filters.push(queuedTasksFilter);
        var completedTasksFilter = this.getCompletedTasksFilterInstance(appId);
        this.addFilter(completedTasksFilter);
        filters.push(completedTasksFilter);
        return filters;
    };
    ActivitiTaskListService.prototype.addTask = function (task) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.callApiAddTask(task))
            .map(function (res) { return res; })
            .map(function (response) {
            return new task_details_model_1.TaskDetailsModel(response);
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.addFilter = function (filter) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.callApiAddFilter(filter))
            .map(function (res) { return res; })
            .map(function (response) {
            return response;
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.addTaskComment = function (id, message) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.callApiAddTaskComment(id, message))
            .map(function (res) { return res; })
            .map(function (response) {
            return new comment_model_1.Comment(response.id, response.message, response.created, response.createdBy);
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.completeTask = function (id) {
        return Rx_1.Observable.fromPromise(this.callApiCompleteTask(id))
            .map(function (res) { return res; });
    };
    ActivitiTaskListService.prototype.getTotalTasks = function (requestNode) {
        var _this = this;
        requestNode.size = 0;
        return Rx_1.Observable.fromPromise(this.callApiTasksFiltered(requestNode))
            .map(function (res) {
            return res;
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.createNewTask = function (task) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.callApiCreateTask(task))
            .map(function (res) { return res; })
            .map(function (response) {
            return new task_details_model_1.TaskDetailsModel(response);
        }).catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.claimTask = function (taskId) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.claimTask(taskId))
            .catch(function (err) { return _this.handleError(err); });
    };
    ActivitiTaskListService.prototype.callApiTasksFiltered = function (requestNode) {
        return this.apiService.getInstance().activiti.taskApi.listTasks(requestNode);
    };
    ActivitiTaskListService.prototype.callApiTaskFilters = function (appId) {
        if (appId) {
            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters({ appId: appId });
        }
        else {
            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters();
        }
    };
    ActivitiTaskListService.prototype.callApiTaskDetails = function (id) {
        return this.apiService.getInstance().activiti.taskApi.getTask(id);
    };
    ActivitiTaskListService.prototype.callApiTaskComments = function (id) {
        return this.apiService.getInstance().activiti.taskApi.getTaskComments(id);
    };
    ActivitiTaskListService.prototype.callApiAddTaskComment = function (id, message) {
        return this.apiService.getInstance().activiti.taskApi.addTaskComment({ message: message }, id);
    };
    ActivitiTaskListService.prototype.callApiAddTask = function (task) {
        return this.apiService.getInstance().activiti.taskApi.addSubtask(task.parentTaskId, task);
    };
    ActivitiTaskListService.prototype.callApiAddFilter = function (filter) {
        return this.apiService.getInstance().activiti.userFiltersApi.createUserTaskFilter(filter);
    };
    ActivitiTaskListService.prototype.callApiTaskChecklist = function (id) {
        return this.apiService.getInstance().activiti.taskApi.getChecklist(id);
    };
    ActivitiTaskListService.prototype.callApiCompleteTask = function (id) {
        return this.apiService.getInstance().activiti.taskApi.completeTask(id);
    };
    ActivitiTaskListService.prototype.callApiCreateTask = function (task) {
        return this.apiService.getInstance().activiti.taskApi.createNewTask(task);
    };
    ActivitiTaskListService.prototype.handleError = function (error) {
        this.logService.error(error);
        return Rx_1.Observable.throw(error || 'Server error');
    };
    ActivitiTaskListService.prototype.getInvolvedTasksFilterInstance = function (appId) {
        return new filter_model_1.FilterRepresentationModel({
            'name': 'Involved Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-align-left',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved' }
        });
    };
    ActivitiTaskListService.prototype.getMyTasksFilterInstance = function (appId) {
        return new filter_model_1.FilterRepresentationModel({
            'name': 'My Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-inbox',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee' }
        });
    };
    ActivitiTaskListService.prototype.getQueuedTasksFilterInstance = function (appId) {
        return new filter_model_1.FilterRepresentationModel({
            'name': 'Queued Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-record',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate' }
        });
    };
    ActivitiTaskListService.prototype.getCompletedTasksFilterInstance = function (appId) {
        return new filter_model_1.FilterRepresentationModel({
            'name': 'Completed Tasks',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-ok-sign',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved' }
        });
    };
    return ActivitiTaskListService;
}());
ActivitiTaskListService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService,
        ng2_alfresco_core_1.LogService])
], ActivitiTaskListService);
exports.ActivitiTaskListService = ActivitiTaskListService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
