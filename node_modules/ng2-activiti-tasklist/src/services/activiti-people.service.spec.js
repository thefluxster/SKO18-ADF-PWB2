/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var user_model_1 = require("../models/user.model");
var activiti_people_service_1 = require("./activiti-people.service");
var firstInvolvedUser = new user_model_1.User({
    id: '1',
    email: 'fake-user1@fake.com',
    firstName: 'fakeName1',
    lastName: 'fakeLast1'
});
var secondInvolvedUser = new user_model_1.User({
    id: '2',
    email: 'fake-user2@fake.com',
    firstName: 'fakeName2',
    lastName: 'fakeLast2'
});
var fakeInvolveUserList = [firstInvolvedUser, secondInvolvedUser];
describe('ActivitiPeopleService', function () {
    var service;
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            providers: [
                activiti_people_service_1.ActivitiPeopleService
            ]
        });
        service = testing_1.TestBed.get(activiti_people_service_1.ActivitiPeopleService);
    });
    describe('when user is logged in', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });
        afterEach(function () {
            jasmine.Ajax.uninstall();
        });
        it('should be able to retrieve people to involve in the task', function (done) {
            service.getWorkflowUsers('fake-task-id', 'fake-filter').subscribe(function (users) {
                expect(users).toBeDefined();
                expect(users.length).toBe(2);
                expect(users[0].id).toEqual('1');
                expect(users[0].email).toEqual('fake-user1@fake.com');
                expect(users[0].firstName).toEqual('fakeName1');
                expect(users[0].lastName).toEqual('fakeLast1');
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: { data: fakeInvolveUserList }
            });
        });
        it('should return empty list when there are no users to involve', function (done) {
            service.getWorkflowUsers('fake-task-id', 'fake-filter').subscribe(function (users) {
                expect(users).toBeDefined();
                expect(users.length).toBe(0);
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: {}
            });
        });
        it('getWorkflowUsers catch errors call', function (done) {
            service.getWorkflowUsers('fake-task-id', 'fake-filter').subscribe(function () {
            }, function () {
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 403
            });
        });
        it('should be able to involve people in the task', function (done) {
            service.involveUserWithTask('fake-task-id', 'fake-user-id').subscribe(function () {
                expect(jasmine.Ajax.requests.mostRecent().method).toBe('PUT');
                expect(jasmine.Ajax.requests.mostRecent().url).toContain('tasks/fake-task-id/action/involve');
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200
            });
        });
        it('involveUserWithTask catch errors call', function (done) {
            service.involveUserWithTask('fake-task-id', 'fake-user-id').subscribe(function () {
            }, function () {
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 403
            });
        });
        it('should be able to remove involved people from task', function (done) {
            service.removeInvolvedUser('fake-task-id', 'fake-user-id').subscribe(function () {
                expect(jasmine.Ajax.requests.mostRecent().method).toBe('PUT');
                expect(jasmine.Ajax.requests.mostRecent().url).toContain('tasks/fake-task-id/action/remove-involved');
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200
            });
        });
        it('removeInvolvedUser catch errors call', function (done) {
            service.removeInvolvedUser('fake-task-id', 'fake-user-id').subscribe(function () {
            }, function () {
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 403
            });
        });
    });
});
//# sourceMappingURL=activiti-people.service.spec.js.map