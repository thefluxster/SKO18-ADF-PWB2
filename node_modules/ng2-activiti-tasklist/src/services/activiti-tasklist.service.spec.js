/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var activiti_tasklist_service_1 = require("./activiti-tasklist.service");
var task_details_model_1 = require("../models/task-details.model");
var filter_model_1 = require("../models/filter.model");
describe('ActivitiTaskListService', function () {
    var fakeEmptyFilters = {
        size: 0, total: 0, start: 0,
        data: []
    };
    var fakeFilters = {
        size: 2, total: 2, start: 0,
        data: [
            new filter_model_1.AppDefinitionRepresentationModel({
                id: 1, name: 'FakeInvolvedTasks', recent: false, icon: 'glyphicon-align-left',
                filter: { sort: 'created-desc', name: '', state: 'open', assignment: 'fake-involved' }
            }),
            {
                id: 2, name: 'FakeMyTasks', recent: false, icon: 'glyphicon-align-left',
                filter: { sort: 'created-desc', name: '', state: 'open', assignment: 'fake-assignee' }
            }
        ]
    };
    var fakeAppFilter = {
        size: 1, total: 1, start: 0,
        data: [
            {
                id: 1, name: 'FakeInvolvedTasks', recent: false, icon: 'glyphicon-align-left',
                filter: { sort: 'created-desc', name: '', state: 'open', assignment: 'fake-involved' }
            }
        ]
    };
    var fakeApps = {
        size: 2, total: 2, start: 0,
        data: [
            {
                id: 1, defaultAppId: null, name: 'Sales-Fakes-App', description: 'desc-fake1', modelId: 22,
                theme: 'theme-1-fake', icon: 'glyphicon-asterisk', 'deploymentId': '111', 'tenantId': null
            },
            {
                id: 2, defaultAppId: null, name: 'health-care-Fake', description: 'desc-fake2', modelId: 33,
                theme: 'theme-2-fake', icon: 'glyphicon-asterisk', 'deploymentId': '444', 'tenantId': null
            }
        ]
    };
    var fakeFilter = {
        sort: 'created-desc', text: '', state: 'open', assignment: 'fake-assignee'
    };
    var fakeUser = { id: 1, email: 'fake-email@dom.com', firstName: 'firstName', lastName: 'lastName' };
    var fakeTaskList = {
        size: 1, total: 1, start: 0,
        data: [
            {
                id: 1, name: 'FakeNameTask', description: null, category: null,
                assignee: fakeUser,
                created: '2016-07-15T11:19:17.440+0000'
            }
        ]
    };
    var fakeErrorTaskList = {
        error: 'wrong request'
    };
    var fakeTaskDetails = { id: '999', name: 'fake-task-name', formKey: '99', assignee: fakeUser };
    var fakeTasksComment = {
        size: 2, total: 2, start: 0,
        data: [
            {
                id: 1, message: 'fake-message-1', created: '', createdBy: fakeUser
            },
            {
                id: 2, message: 'fake-message-2', created: '', createdBy: fakeUser
            }
        ]
    };
    var fakeTasksChecklist = {
        size: 1, total: 1, start: 0,
        data: [
            {
                id: 1, name: 'FakeCheckTask1', description: null, category: null,
                assignee: fakeUser,
                created: '2016-07-15T11:19:17.440+0000'
            },
            {
                id: 2, name: 'FakeCheckTask2', description: null, category: null,
                assignee: fakeUser,
                created: '2016-07-15T11:19:17.440+0000'
            }
        ]
    };
    var fakeAppPromise = new Promise(function (resolve, reject) {
        resolve(fakeAppFilter);
    });
    var service;
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            providers: [
                activiti_tasklist_service_1.ActivitiTaskListService
            ]
        });
        service = testing_1.TestBed.get(activiti_tasklist_service_1.ActivitiTaskListService);
        jasmine.Ajax.install();
    });
    afterEach(function () {
        jasmine.Ajax.uninstall();
    });
    it('should return the task list filters', function (done) {
        service.getTaskListFilters().subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.length).toEqual(2);
            expect(res[0].name).toEqual('FakeInvolvedTasks');
            expect(res[1].name).toEqual('FakeMyTasks');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(fakeFilters)
        });
    });
    it('should call the api withthe appId', function (done) {
        spyOn(service, 'callApiTaskFilters').and.returnValue((fakeAppPromise));
        var appId = '1';
        service.getTaskListFilters(appId).subscribe(function (res) {
            expect(service.callApiTaskFilters).toHaveBeenCalledWith(appId);
            done();
        });
    });
    it('should return the app filter by id', function (done) {
        var appId = '1';
        service.getTaskListFilters(appId).subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.length).toEqual(1);
            expect(res[0].name).toEqual('FakeInvolvedTasks');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(fakeAppFilter)
        });
    });
    it('should return the task list filtered', function (done) {
        service.getTasks(fakeFilter).subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.length).toEqual(1);
            expect(res[0].name).toEqual('FakeNameTask');
            expect(res[0].assignee.email).toEqual('fake-email@dom.com');
            expect(res[0].assignee.firstName).toEqual('firstName');
            expect(res[0].assignee.lastName).toEqual('lastName');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(fakeTaskList)
        });
    });
    it('should throw an exception when the response is wrong', function () {
        service.getTasks(fakeFilter).subscribe(function (res) {
        }, function (err) {
            expect(err).toBeDefined();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 404,
            contentType: 'application/json',
            responseText: JSON.stringify(fakeErrorTaskList)
        });
    });
    it('should return the task details ', function (done) {
        service.getTaskDetails('999').subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.id).toEqual('999');
            expect(res.name).toEqual('fake-task-name');
            expect(res.formKey).toEqual('99');
            expect(res.assignee).toBeDefined();
            expect(res.assignee.email).toEqual('fake-email@dom.com');
            expect(res.assignee.firstName).toEqual('firstName');
            expect(res.assignee.lastName).toEqual('lastName');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(fakeTaskDetails)
        });
    });
    it('should return the tasks comments ', function (done) {
        service.getTaskComments('999').subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.length).toEqual(2);
            expect(res[0].message).toEqual('fake-message-1');
            expect(res[1].message).toEqual('fake-message-2');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(fakeTasksComment)
        });
    });
    it('should return the tasks checklists ', function (done) {
        service.getTaskChecklist('999').subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.length).toEqual(2);
            expect(res[0].name).toEqual('FakeCheckTask1');
            expect(res[0].assignee.email).toEqual('fake-email@dom.com');
            expect(res[0].assignee.firstName).toEqual('firstName');
            expect(res[0].assignee.lastName).toEqual('lastName');
            expect(res[1].name).toEqual('FakeCheckTask2');
            expect(res[1].assignee.email).toEqual('fake-email@dom.com');
            expect(res[1].assignee.firstName).toEqual('firstName');
            expect(res[0].assignee.lastName).toEqual('lastName');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(fakeTasksChecklist)
        });
    });
    it('should add a task ', function (done) {
        var taskFake = new task_details_model_1.TaskDetailsModel({
            id: 123,
            parentTaskId: 456,
            name: 'FakeNameTask',
            description: null,
            category: null,
            assignee: fakeUser,
            created: ''
        });
        service.addTask(taskFake).subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.id).not.toEqual('');
            expect(res.name).toEqual('FakeNameTask');
            expect(res.created).not.toEqual('');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({
                id: '777', name: 'FakeNameTask', description: null, category: null,
                assignee: fakeUser,
                created: '2016-07-15T11:19:17.440+0000'
            })
        });
    });
    it('should add a comment task ', function (done) {
        service.addTaskComment('999', 'fake-comment-message').subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.id).not.toEqual('');
            expect(res.message).toEqual('fake-comment-message');
            expect(res.created).not.toEqual('');
            expect(res.createdBy.email).toEqual('fake-email@dom.com');
            expect(res.createdBy.firstName).toEqual('firstName');
            expect(res.createdBy.lastName).toEqual('lastName');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({
                id: '111', message: 'fake-comment-message',
                createdBy: fakeUser,
                created: '2016-07-15T11:19:17.440+0000'
            })
        });
    });
    it('should complete the task ', function (done) {
        service.completeTask('999').subscribe(function (res) {
            expect(res).toBeDefined();
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({})
        });
    });
    it('should return the total number of tasks', function (done) {
        service.getTotalTasks(fakeFilter).subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.size).toEqual(1);
            expect(res.total).toEqual(1);
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(fakeTaskList)
        });
    });
    it('should call the createDefaultFilter when the list is empty', function (done) {
        spyOn(service, 'createDefaultFilter');
        service.getTaskListFilters().subscribe(function (res) {
            expect(service.createDefaultFilter).toHaveBeenCalled();
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(fakeEmptyFilters)
        });
    });
    it('should return the default filters', function () {
        spyOn(service, 'addFilter');
        var filters = service.createDefaultFilter(null);
        expect(service.addFilter).toHaveBeenCalledTimes(4);
        expect(filters).toBeDefined();
        expect(filters.length).toEqual(4);
    });
    it('should add a filter ', function (done) {
        var filterFake = new filter_model_1.FilterRepresentationModel({
            name: 'FakeNameFilter',
            assignment: 'fake-assignement'
        });
        service.addFilter(filterFake).subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.id).not.toEqual('');
            expect(res.name).toEqual('FakeNameFilter');
            expect(res.filter.assignment).toEqual('fake-assignement');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({
                id: '2233', name: 'FakeNameFilter', filter: { assignment: 'fake-assignement' }
            })
        });
    });
    it('should get the deployed apps ', function (done) {
        service.getDeployedApplications().subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.length).toEqual(2);
            expect(res[0].name).toEqual('Sales-Fakes-App');
            expect(res[0].description).toEqual('desc-fake1');
            expect(res[0].deploymentId).toEqual('111');
            expect(res[1].name).toEqual('health-care-Fake');
            expect(res[1].description).toEqual('desc-fake2');
            expect(res[1].deploymentId).toEqual('444');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(fakeApps)
        });
    });
    it('should get the filter deployed app ', function (done) {
        var name = 'health-care-Fake';
        service.getDeployedApplications(name).subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.name).toEqual('health-care-Fake');
            expect(res.description).toEqual('desc-fake2');
            expect(res.deploymentId).toEqual('444');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify(fakeApps)
        });
    });
    it('should create a new standalone task ', function (done) {
        var taskFake = new task_details_model_1.TaskDetailsModel({
            name: 'FakeNameTask',
            description: 'FakeDescription',
            category: '3'
        });
        service.createNewTask(taskFake).subscribe(function (res) {
            expect(res).toBeDefined();
            expect(res.id).not.toEqual('');
            expect(res.name).toEqual('FakeNameTask');
            expect(res.description).toEqual('FakeDescription');
            expect(res.category).toEqual('3');
            expect(res.created).not.toEqual('');
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({
                id: '777',
                name: 'FakeNameTask',
                description: 'FakeDescription',
                category: '3',
                assignee: fakeUser,
                created: '2016-07-15T11:19:17.440+0000'
            })
        });
    });
    it('should claim a task', function (done) {
        var taskId = '111';
        service.claimTask(taskId).subscribe(function (res) {
            done();
        });
        jasmine.Ajax.requests.mostRecent().respondWith({
            'status': 200,
            contentType: 'application/json',
            responseText: JSON.stringify({})
        });
    });
});
//# sourceMappingURL=activiti-tasklist.service.spec.js.map