/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Observable } from 'rxjs/Rx';
import { AlfrescoApiService, LogService } from 'ng2-alfresco-core';
import { FilterRepresentationModel, TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { Comment } from '../models/comment.model';
import { TaskDetailsModel } from '../models/task-details.model';
import { Form } from '../models/form.model';
export declare class ActivitiTaskListService {
    private apiService;
    private logService;
    constructor(apiService: AlfrescoApiService, logService: LogService);
    getDeployedApplications(name?: string): Observable<any>;
    getTaskListFilters(appId?: string): Observable<any>;
    getTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskDetailsModel[]>;
    getTaskDetails(id: string): Observable<TaskDetailsModel>;
    getTaskComments(id: string): Observable<Comment[]>;
    getTaskChecklist(id: string): Observable<TaskDetailsModel[]>;
    getFormList(): Observable<Form[]>;
    attachFormToATask(taskId: string, formId: number): Observable<any>;
    createDefaultFilter(appId: string): FilterRepresentationModel[];
    addTask(task: TaskDetailsModel): Observable<TaskDetailsModel>;
    addFilter(filter: FilterRepresentationModel): Observable<FilterRepresentationModel>;
    addTaskComment(id: string, message: string): Observable<Comment>;
    completeTask(id: string): Observable<{}>;
    getTotalTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<any>;
    createNewTask(task: TaskDetailsModel): Observable<TaskDetailsModel>;
    claimTask(taskId: string): Observable<TaskDetailsModel>;
    private callApiTasksFiltered(requestNode);
    callApiTaskFilters(appId?: string): any;
    private callApiTaskDetails(id);
    private callApiTaskComments(id);
    private callApiAddTaskComment(id, message);
    private callApiAddTask(task);
    private callApiAddFilter(filter);
    private callApiTaskChecklist(id);
    private callApiCompleteTask(id);
    private callApiCreateTask(task);
    private handleError(error);
    getInvolvedTasksFilterInstance(appId: string): FilterRepresentationModel;
    getMyTasksFilterInstance(appId: string): FilterRepresentationModel;
    getQueuedTasksFilterInstance(appId: string): FilterRepresentationModel;
    getCompletedTasksFilterInstance(appId: string): FilterRepresentationModel;
}
