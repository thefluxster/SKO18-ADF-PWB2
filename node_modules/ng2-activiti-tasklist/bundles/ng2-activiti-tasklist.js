!function(e){function r(e,r,o){return 4===arguments.length?t.apply(this,arguments):void n(e,{declarative:!0,deps:r,declare:o})}function t(e,r,t,o){n(e,{declarative:!1,deps:r,executingRequire:t,execute:o})}function n(e,r){r.name=e,e in v||(v[e]=r),r.normalizedDeps=r.deps}function o(e,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==g.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var t=0,n=e.normalizedDeps.length;n>t;t++){var a=e.normalizedDeps[t],u=v[a];if(u&&!u.evaluated){var d=e.groupIndex+(u.declarative!=e.declarative);if(void 0===u.groupIndex||u.groupIndex<d){if(void 0!==u.groupIndex&&(r[u.groupIndex].splice(g.call(r[u.groupIndex],u),1),0==r[u.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");u.groupIndex=d}o(u,r)}}}}function a(e){var r=v[e];r.groupIndex=0;var t=[];o(r,t);for(var n=!!r.declarative==t.length%2,a=t.length-1;a>=0;a--){for(var u=t[a],i=0;i<u.length;i++){var s=u[i];n?d(s):l(s)}n=!n}}function u(e){return y[e]||(y[e]={name:e,dependencies:[],exports:{},importers:[]})}function d(r){if(!r.module){var t=r.module=u(r.name),n=r.module.exports,o=r.declare.call(e,function(e,r){if(t.locked=!0,"object"==typeof e)for(var o in e)n[o]=e[o];else n[e]=r;for(var a=0,u=t.importers.length;u>a;a++){var d=t.importers[a];if(!d.locked)for(var i=0;i<d.dependencies.length;++i)d.dependencies[i]===t&&d.setters[i](n)}return t.locked=!1,r},{id:r.name});t.setters=o.setters,t.execute=o.execute;for(var a=0,i=r.normalizedDeps.length;i>a;a++){var l,s=r.normalizedDeps[a],c=v[s],f=y[s];f?l=f.exports:c&&!c.declarative?l=c.esModule:c?(d(c),f=c.module,l=f.exports):l=p(s),f&&f.importers?(f.importers.push(t),t.dependencies.push(f)):t.dependencies.push(null),t.setters[a]&&t.setters[a](l)}}}function i(e){var r,t=v[e];if(t)t.declarative?f(e,[]):t.evaluated||l(t),r=t.module.exports;else if(r=p(e),!r)throw new Error("Unable to load dependency "+e+".");return(!t||t.declarative)&&r&&r.__useDefault?r["default"]:r}function l(r){if(!r.module){var t={},n=r.module={exports:t,id:r.name};if(!r.executingRequire)for(var o=0,a=r.normalizedDeps.length;a>o;o++){var u=r.normalizedDeps[o],d=v[u];d&&l(d)}r.evaluated=!0;var c=r.execute.call(e,function(e){for(var t=0,n=r.deps.length;n>t;t++)if(r.deps[t]==e)return i(r.normalizedDeps[t]);throw new TypeError("Module "+e+" not declared as a dependency.")},t,n);void 0!==c&&(n.exports=c),t=n.exports,t&&t.__esModule?r.esModule=t:r.esModule=s(t)}}function s(r){var t={};if(("object"==typeof r||"function"==typeof r)&&r!==e)if(m)for(var n in r)"default"!==n&&c(t,r,n);else{var o=r&&r.hasOwnProperty;for(var n in r)"default"===n||o&&!r.hasOwnProperty(n)||(t[n]=r[n])}return t["default"]=r,x(t,"__useDefault",{value:!0}),t}function c(e,r,t){try{var n;(n=Object.getOwnPropertyDescriptor(r,t))&&x(e,t,n)}catch(o){return e[t]=r[t],!1}}function f(r,t){var n=v[r];if(n&&!n.evaluated&&n.declarative){t.push(r);for(var o=0,a=n.normalizedDeps.length;a>o;o++){var u=n.normalizedDeps[o];-1==g.call(t,u)&&(v[u]?f(u,t):p(u))}n.evaluated||(n.evaluated=!0,n.module.execute.call(e))}}function p(e){if(I[e])return I[e];if("@node/"==e.substr(0,6))return I[e]=s(D(e.substr(6)));var r=v[e];if(!r)throw"Module "+e+" not present.";return a(e),f(e,[]),v[e]=void 0,r.declarative&&x(r.module.exports,"__esModule",{value:!0}),I[e]=r.declarative?r.module.exports:r.esModule}var v={},g=Array.prototype.indexOf||function(e){for(var r=0,t=this.length;t>r;r++)if(this[r]===e)return r;return-1},m=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(h){m=!1}var x;!function(){try{Object.defineProperty({},"a",{})&&(x=Object.defineProperty)}catch(e){x=function(e,r,t){try{e[r]=t.value||t.get.call(e)}catch(n){}}}}();var y={},D="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&"undefined"!=typeof require.resolve&&"undefined"!=typeof process&&process.platform&&require,I={"@empty":{}};return function(e,n,o,a){return function(u){u(function(u){for(var d={_nodeRequire:D,register:r,registerDynamic:t,get:p,set:function(e,r){I[e]=r},newModule:function(e){return e}},i=0;i<n.length;i++)(function(e,r){r&&r.__esModule?I[e]=r:I[e]=s(r)})(n[i],arguments[i]);a(d);var l=p(e[0]);if(e.length>1)for(var i=1;i<e.length;i++)p(e[i]);return o?l["default"]:l})}}}("undefined"!=typeof self?self:global)

(["1"], ["3","1b","16","4","9","7","d"], true, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
$__System.registerDynamic("2", ["3", "4", "5", "6", "7"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var activiti_tasklist_service_1 = $__require("5");
    var icon_model_1 = $__require("6");
    var Observable_1 = $__require("7");
    var ActivitiApps = ActivitiApps_1 = function () {
        function ActivitiApps(translateService, activitiTaskList) {
            var _this = this;
            this.translateService = translateService;
            this.activitiTaskList = activitiTaskList;
            this.layoutType = ActivitiApps_1.LAYOUT_GRID;
            this.appClick = new core_1.EventEmitter();
            this.error = new core_1.EventEmitter();
            this.appList = [];
            if (translateService) {
                translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
            }
            this.apps$ = new Observable_1.Observable(function (observer) {
                return _this.appsObserver = observer;
            }).share();
        }
        ActivitiApps.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.isValidType()) {
                this.setDefaultLayoutType();
            }
            this.apps$.subscribe(function (app) {
                _this.appList.push(app);
            });
            this.iconsMDL = new icon_model_1.IconModel();
            this.load();
        };
        ActivitiApps.prototype.load = function () {
            var _this = this;
            this.activitiTaskList.getDeployedApplications().subscribe(function (res) {
                res.forEach(function (app) {
                    if (app.defaultAppId === ActivitiApps_1.DEFAULT_TASKS_APP) {
                        app.name = ActivitiApps_1.DEFAULT_TASKS_APP_NAME;
                        app.theme = ActivitiApps_1.DEFAULT_TASKS_APP_THEME;
                        app.icon = ActivitiApps_1.DEFAULT_TASKS_APP_ICON;
                        _this.appsObserver.next(app);
                    } else if (app.deploymentId) {
                        _this.appsObserver.next(app);
                    }
                });
            }, function (err) {
                _this.error.emit(err);
            });
        };
        ActivitiApps.prototype.selectApp = function (app) {
            this.currentApp = app;
            this.appClick.emit(app);
        };
        ActivitiApps.prototype.isSelected = function (appId) {
            return this.currentApp !== undefined && appId === this.currentApp.id;
        };
        ActivitiApps.prototype.isValidType = function () {
            if (this.layoutType && (this.layoutType === ActivitiApps_1.LAYOUT_LIST || this.layoutType === ActivitiApps_1.LAYOUT_GRID)) {
                return true;
            }
            return false;
        };
        ActivitiApps.prototype.setDefaultLayoutType = function () {
            this.layoutType = ActivitiApps_1.LAYOUT_GRID;
        };
        ActivitiApps.prototype.isList = function () {
            return this.layoutType === ActivitiApps_1.LAYOUT_LIST;
        };
        ActivitiApps.prototype.isGrid = function () {
            return this.layoutType === ActivitiApps_1.LAYOUT_GRID;
        };
        ActivitiApps.prototype.isEmpty = function () {
            return this.appList.length === 0;
        };
        ActivitiApps.prototype.getTheme = function (app) {
            return app.theme ? app.theme : '';
        };
        ActivitiApps.prototype.getBackgroundIcon = function (app) {
            return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(app.icon);
        };
        return ActivitiApps;
    }();
    ActivitiApps.LAYOUT_LIST = 'LIST';
    ActivitiApps.LAYOUT_GRID = 'GRID';
    ActivitiApps.DEFAULT_TASKS_APP = 'tasks';
    ActivitiApps.DEFAULT_TASKS_APP_NAME = 'Task App';
    ActivitiApps.DEFAULT_TASKS_APP_THEME = 'theme-2';
    ActivitiApps.DEFAULT_TASKS_APP_ICON = 'glyphicon-asterisk';
    ActivitiApps.DEFAULT_TASKS_APP_MATERIAL_ICON = 'favorite_border';
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiApps.prototype, "layoutType", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiApps.prototype, "appClick", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiApps.prototype, "error", void 0);
    ActivitiApps = ActivitiApps_1 = __decorate([core_1.Component({
        selector: 'activiti-apps',
        moduleId: module.id,
        template: "<div class=\"menu-container\" *ngIf=\"!isEmpty()\">     <ul class='mdl-list' *ngIf=\"isList()\">         <li class=\"mdl-list__item\" (click)=\"selectApp(app)\" *ngFor=\"let app of appList\">             <span class=\"mdl-list__item-primary-content\">             <i class=\"material-icons mdl-list__item-icon\">touch_app</i>             {{app.name}}             </span>         </li>     </ul>     <div class=\"mdl-grid\" *ngIf=\"isGrid()\">         <div (click)=\"selectApp(app)\" [ngClass]=\"['mdl-card mdl-cell',  getTheme(app)]\" *ngFor=\"let app of appList\">             <div class=\"logo\"><i class=\"material-icons\">{{getBackgroundIcon(app)}}</i></div>             <div class=\"mdl-card__title\">                 <h1 class=\"mdl-card__title-text application-title\">{{app.name}}</h1>             </div>             <div class=\"mdl-card__supporting-text\">                 <p>{{app.description}}</p>             </div>             <div class=\"mdl-card__actions mdl-card--border\">                 <i class=\"material-icons selectedIcon\" *ngIf=\"isSelected(app.id)\">done</i>             </div>         </div>     </div> </div>",
        styles: [":host {     width: 100%; }  .application-title {     color: white; }  .logo {     position: absolute;     right: 20px;     top: 20px; } .logo i{     font-size: 70px; } .theme-1 {     background-color: #269abc; } .theme-1 .logo i {     color: #168aac; } .theme-1 .mdl-card__actions i {     color: #168aac; } .theme-1 .mdl-card__actions i:hover {     color: #b7dfea; } .theme-2 {     background-color: #7da9b0; } .theme-2 .logo i {     color: #6d99a0; } .theme-2 .mdl-card__actions i {     color: #6d99a0; } .theme-2 .mdl-card__actions i:hover {  color: #def2f5; } .theme-3 {     background-color: #7689ab; } .theme-3 .logo i {     color: #66799b; } .theme-3 .mdl-card__actions i {     color: #66799b; } .theme-3 .mdl-card__actions i:hover {     color: #a2b4d6; } .theme-4 {     background-color: #c74e3e; } .theme-4 .logo i {     color: #b73e2e; } .theme-4 .mdl-card__actions i {     color: #b73e2e; } .theme-4 .mdl-card__actions i:hover {     color: #de8b80; } .theme-5 {     background-color: #fab96c; } .theme-5 .logo i {     color: #eaa95c; } .theme-5 .mdl-card__actions i {     color: #eaa95c; } .theme-5 .mdl-card__actions i:hover {     color: #fdd9ae; } .theme-6 {     background-color: #759d4c; } .theme-6 .logo i {     color: #658d3c; } .theme-6 .mdl-card__actions i {     color: #658d3c; } .theme-6 .mdl-card__actions i:hover {     color: #a8d07f; } .theme-7 {     background-color: #b1b489; } .theme-7 .logo i {     color: #a1a479; } .theme-7 .mdl-card__actions i {     color: #a1a479; } .theme-7 .mdl-card__actions i:hover {     color: #d9dcb2; } .theme-8 {     background-color: #a17299; } .theme-8 .logo i {     color: #916289; } .theme-8 .mdl-card__actions i {     color: #916289; } .theme-8 .mdl-card__actions i:hover {     color: #d0a8c9; } .theme-9 {     background-color: #696c67; } .theme-9 .logo i {     color: #595c57; } .theme-9 .mdl-card__actions i {     color: #595c57; } .theme-9 .mdl-card__actions i:hover {     color: #a6a9a4; } .theme-10 {     background-color: #cabb33; } .theme-10 .logo i {     color: #baab23; } .theme-10 .mdl-card__actions i {     color: #baab23; } .theme-10 .mdl-card__actions i:hover {     color: #efe79e; } .selectedIcon{     color: #e9f1f3!important; } .mdl-card__media {     margin: 0; }  .mdl-card__media > img {     max-width: 100%; }  .mdl-card__actions {     display: flex;     box-sizing:border-box;     align-items: center; } .mdl-card__actions > .mdl-button--icon {     margin-right: 3px;     margin-left: 3px; }  .mdl-card:hover {     box-shadow: 0 8px 10px 1px rgba(0, 0, 0, .14), 0 3px 14px 2px rgba(0, 0, 0, .12), 0 5px 5px -3px rgba(0, 0, 0, .2);     cursor: pointer; }"],
        providers: [activiti_tasklist_service_1.ActivitiTaskListService]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_tasklist_service_1.ActivitiTaskListService])], ActivitiApps);
    exports.ActivitiApps = ActivitiApps;
    var ActivitiApps_1;
});
$__System.registerDynamic("8", ["3", "4", "9", "5", "a"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var ng2_alfresco_datatable_1 = $__require("9");
    var activiti_tasklist_service_1 = $__require("5");
    var filter_model_1 = $__require("a");
    var ActivitiTaskList = function () {
        function ActivitiTaskList(translateService, taskListService, logService) {
            this.translateService = translateService;
            this.taskListService = taskListService;
            this.logService = logService;
            this.rowClick = new core_1.EventEmitter();
            this.onSuccess = new core_1.EventEmitter();
            this.onError = new core_1.EventEmitter();
            this.defaultSchemaColumn = [{ type: 'text', key: 'id', title: 'Id' }, { type: 'text', key: 'name', title: 'Name', cssClass: 'full-width name-column', sortable: true }, { type: 'text', key: 'formKey', title: 'Form Key', sortable: true }, { type: 'text', key: 'created', title: 'Created', sortable: true }];
            if (translateService) {
                translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
            }
        }
        ActivitiTaskList.prototype.ngOnInit = function () {
            if (!this.data) {
                this.data = this.initDefaultSchemaColumns();
            }
        };
        ActivitiTaskList.prototype.ngOnChanges = function (changes) {
            if (this.isPropertyChanged(changes)) {
                this.reload();
            }
        };
        ActivitiTaskList.prototype.isPropertyChanged = function (changes) {
            var changed = false;
            var appId = changes['appId'];
            var processDefinitionKey = changes['processDefinitionKey'];
            var state = changes['state'];
            var sort = changes['sort'];
            var name = changes['name'];
            var assignment = changes['assignment'];
            if (appId && appId.currentValue) {
                changed = true;
            } else if (processDefinitionKey && processDefinitionKey.currentValue) {
                changed = true;
            } else if (state && state.currentValue) {
                changed = true;
            } else if (sort && sort.currentValue) {
                changed = true;
            } else if (name && name.currentValue) {
                changed = true;
            } else if (assignment && assignment.currentValue) {
                changed = true;
            }
            return changed;
        };
        ActivitiTaskList.prototype.reload = function () {
            this.requestNode = this.createRequestNode();
            this.load(this.requestNode);
        };
        ActivitiTaskList.prototype.initDefaultSchemaColumns = function () {
            return new ng2_alfresco_datatable_1.ObjectDataTableAdapter([], this.defaultSchemaColumn);
        };
        ActivitiTaskList.prototype.load = function (requestNode) {
            var _this = this;
            this.taskListService.getTotalTasks(requestNode).subscribe(function (res) {
                requestNode.size = res.total;
                _this.taskListService.getTasks(requestNode).subscribe(function (response) {
                    var instancesRow = _this.createDataRow(response);
                    _this.renderInstances(instancesRow);
                    _this.selectTask(requestNode.landingTaskId);
                    _this.onSuccess.emit(response);
                }, function (error) {
                    _this.logService.error(error);
                    _this.onError.emit(error);
                });
            }, function (err) {
                _this.logService.error(err);
                _this.onError.emit(err);
            });
        };
        ActivitiTaskList.prototype.createDataRow = function (instances) {
            var instancesRows = [];
            instances.forEach(function (row) {
                instancesRows.push(new ng2_alfresco_datatable_1.ObjectDataRow({
                    id: row.id,
                    name: row.name,
                    created: row.created
                }));
            });
            return instancesRows;
        };
        ActivitiTaskList.prototype.renderInstances = function (instances) {
            instances = this.optimizeNames(instances);
            this.data.setRows(instances);
        };
        ActivitiTaskList.prototype.selectTask = function (taskIdToSelect) {
            if (!this.isListEmpty()) {
                var rows = this.data.getRows();
                if (rows.length > 0) {
                    var dataRow = rows.find(function (row) {
                        return row.getValue('id') === taskIdToSelect;
                    }) || rows[0];
                    this.data.selectedRow = dataRow;
                    this.currentInstanceId = dataRow.getValue('id');
                }
            } else {
                if (this.data) {
                    this.data.selectedRow = null;
                }
                this.currentInstanceId = null;
            }
        };
        ActivitiTaskList.prototype.getCurrentId = function () {
            return this.currentInstanceId;
        };
        ActivitiTaskList.prototype.isListEmpty = function () {
            return this.data === undefined || this.data && this.data.getRows() && this.data.getRows().length === 0;
        };
        ActivitiTaskList.prototype.onRowClick = function (event) {
            var item = event;
            this.currentInstanceId = item.value.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        };
        ActivitiTaskList.prototype.optimizeNames = function (istances) {
            istances = istances.map(function (t) {
                t.obj.name = t.obj.name || 'No name';
                return t;
            });
            return istances;
        };
        ActivitiTaskList.prototype.createRequestNode = function () {
            var requestNode = {
                appDefinitionId: this.appId,
                processDefinitionKey: this.processDefinitionKey,
                text: this.name,
                assignment: this.assignment,
                state: this.state,
                sort: this.sort,
                landingTaskId: this.landingTaskId
            };
            return new filter_model_1.TaskQueryRequestRepresentationModel(requestNode);
        };
        return ActivitiTaskList;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiTaskList.prototype, "appId", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiTaskList.prototype, "processDefinitionKey", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiTaskList.prototype, "state", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiTaskList.prototype, "assignment", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiTaskList.prototype, "sort", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiTaskList.prototype, "name", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiTaskList.prototype, "landingTaskId", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Object)], ActivitiTaskList.prototype, "data", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiTaskList.prototype, "rowClick", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiTaskList.prototype, "onSuccess", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiTaskList.prototype, "onError", void 0);
    ActivitiTaskList = __decorate([core_1.Component({
        selector: 'activiti-tasklist',
        moduleId: module.id,
        template: "<div *ngIf=\"!requestNode\">{{ 'TASK_FILTERS.MESSAGES.NONE' | translate }}</div> <div *ngIf=\"requestNode\">     <div *ngIf=\"!isListEmpty()\">         <alfresco-datatable             [data]=\"data\"             (rowClick)=\"onRowClick($event)\">         </alfresco-datatable>     </div>     <div *ngIf=\"isListEmpty()\">         {{ 'TASK_LIST.MESSAGES.NONE' | translate }}     </div> </div>",
        styles: ["alfresco-datatable >>> .column-header {     color: #232323;     font-size: 15px; }  alfresco-datatable >>> .data-cell {     cursor: pointer !important; }  alfresco-datatable >>> .cell-value{     width: 250px;     white-space: nowrap;     overflow: hidden;     text-overflow: ellipsis }"]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_tasklist_service_1.ActivitiTaskListService, ng2_alfresco_core_1.LogService])], ActivitiTaskList);
    exports.ActivitiTaskList = ActivitiTaskList;
});
$__System.registerDynamic("b", ["3", "4", "5", "c", "d"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var activiti_tasklist_service_1 = $__require("5");
    var task_details_model_1 = $__require("c");
    var Rx_1 = $__require("d");
    var ActivitiChecklist = function () {
        function ActivitiChecklist(translateService, activitiTaskList, logService) {
            var _this = this;
            this.translateService = translateService;
            this.activitiTaskList = activitiTaskList;
            this.logService = logService;
            this.readOnly = false;
            this.checklistTaskCreated = new core_1.EventEmitter();
            this.checklist = [];
            if (translateService) {
                translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
            }
            this.task$ = new Rx_1.Observable(function (observer) {
                return _this.taskObserver = observer;
            }).share();
        }
        ActivitiChecklist.prototype.ngOnInit = function () {
            var _this = this;
            this.task$.subscribe(function (task) {
                _this.checklist.push(task);
            });
        };
        ActivitiChecklist.prototype.ngOnChanges = function (changes) {
            var taskId = changes['taskId'];
            if (taskId && taskId.currentValue) {
                this.getTaskChecklist(taskId.currentValue);
                return;
            }
        };
        ActivitiChecklist.prototype.getTaskChecklist = function (taskId) {
            var _this = this;
            this.checklist = [];
            if (this.taskId) {
                this.activitiTaskList.getTaskChecklist(this.taskId).subscribe(function (res) {
                    res.forEach(function (task) {
                        _this.taskObserver.next(task);
                    });
                }, function (err) {
                    _this.logService.error(err);
                });
            } else {
                this.checklist = [];
            }
        };
        ActivitiChecklist.prototype.showDialog = function () {
            if (this.dialog) {
                if (!this.dialog.nativeElement.showModal) {
                    dialogPolyfill.registerDialog(this.dialog.nativeElement);
                }
                this.dialog.nativeElement.showModal();
            }
        };
        ActivitiChecklist.prototype.add = function () {
            var _this = this;
            var newTask = new task_details_model_1.TaskDetailsModel({
                name: this.taskName,
                parentTaskId: this.taskId,
                assignee: { id: this.assignee }
            });
            this.activitiTaskList.addTask(newTask).subscribe(function (res) {
                _this.checklist.push(res);
                _this.checklistTaskCreated.emit(res);
                _this.taskName = '';
            }, function (err) {
                _this.logService.error(err);
            });
            this.cancel();
        };
        ActivitiChecklist.prototype.cancel = function () {
            if (this.dialog) {
                this.dialog.nativeElement.close();
            }
            this.taskName = '';
        };
        return ActivitiChecklist;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiChecklist.prototype, "taskId", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiChecklist.prototype, "readOnly", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiChecklist.prototype, "assignee", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiChecklist.prototype, "checklistTaskCreated", void 0);
    __decorate([core_1.ViewChild('dialog'), __metadata("design:type", Object)], ActivitiChecklist.prototype, "dialog", void 0);
    ActivitiChecklist = __decorate([core_1.Component({
        selector: 'activiti-checklist',
        moduleId: module.id,
        template: "<span class=\"activiti-label mdl-badge\" id=\"checklist-label\"       [attr.data-badge]=\"checklist?.length\">{{ 'TASK_DETAILS.LABELS.CHECKLIST' | translate }}</span> <div *ngIf=\"!readOnly\" id=\"addChecklist\" (click)=\"showDialog()\" id=\"add-checklist\" class=\"icon material-icons\">add</div> <div *ngIf=\"!readOnly\" class=\"mdl-tooltip\" for=\"add-checklist\">     Add a checklist </div> <div class=\"menu-container\" *ngIf=\"checklist?.length > 0\">     <ul class='mdl-list'>         <li class=\"mdl-list__item\" *ngFor=\"let check of checklist\">             <span class=\"mdl-list__item-primary-content\" id=\"check-{{check.id}}\">             <i class=\"material-icons mdl-list__item-icon\">done</i>             {{check.name}}             </span>         </li>     </ul> </div> <div *ngIf=\"checklist?.length === 0\" id=\"checklist-none-message\">     {{ 'TASK_DETAILS.CHECKLIST.NONE' | translate }} </div>  <dialog class=\"mdl-dialog\" id=\"checklist-dialog\" #dialog>     <h4 class=\"mdl-dialog__title\" id=\"add-checklist-title\">New Check</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"taskName\" id=\"checklist-name\"/>             <label class=\"mdl-textfield__label\" for=\"checklist-name\">Name</label>         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" id=\"add-check\" (click)=\"add()\" class=\"mdl-button\">Add Checklist</button>         <button type=\"button\" id=\"close-check-dialog\" (click)=\"cancel()\" class=\"mdl-button close\">Cancel</button>     </div> </dialog>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }  .material-icons:hover {     color: rgb(255, 152, 0); }  .mdl-tooltip {     will-change: unset; }  .material-icons {     cursor: pointer; }"],
        providers: [activiti_tasklist_service_1.ActivitiTaskListService]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_tasklist_service_1.ActivitiTaskListService, ng2_alfresco_core_1.LogService])], ActivitiChecklist);
    exports.ActivitiChecklist = ActivitiChecklist;
});
$__System.registerDynamic("e", ["3", "4", "5", "d"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var activiti_tasklist_service_1 = $__require("5");
    var Rx_1 = $__require("d");
    var ActivitiComments = function () {
        function ActivitiComments(translateService, activitiTaskList) {
            var _this = this;
            this.translateService = translateService;
            this.activitiTaskList = activitiTaskList;
            this.readOnly = false;
            this.error = new core_1.EventEmitter();
            this.comments = [];
            if (translateService) {
                translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
            }
            this.comment$ = new Rx_1.Observable(function (observer) {
                return _this.commentObserver = observer;
            }).share();
            this.comment$.subscribe(function (comment) {
                _this.comments.push(comment);
            });
        }
        ActivitiComments.prototype.ngOnChanges = function (changes) {
            var taskId = changes['taskId'];
            if (taskId) {
                if (taskId.currentValue) {
                    this.getTaskComments(taskId.currentValue);
                } else {
                    this.resetComments();
                }
            }
        };
        ActivitiComments.prototype.getTaskComments = function (taskId) {
            var _this = this;
            this.resetComments();
            if (taskId) {
                this.activitiTaskList.getTaskComments(taskId).subscribe(function (res) {
                    res.forEach(function (comment) {
                        _this.commentObserver.next(comment);
                    });
                }, function (err) {
                    _this.error.emit(err);
                });
            } else {
                this.resetComments();
            }
        };
        ActivitiComments.prototype.resetComments = function () {
            this.comments = [];
        };
        ActivitiComments.prototype.showDialog = function () {
            if (!this.dialog.nativeElement.showModal) {
                dialogPolyfill.registerDialog(this.dialog.nativeElement);
            }
            this.dialog.nativeElement.showModal();
        };
        ActivitiComments.prototype.add = function () {
            var _this = this;
            this.activitiTaskList.addTaskComment(this.taskId, this.message).subscribe(function (res) {
                _this.comments.push(res);
                _this.message = '';
            }, function (err) {
                _this.error.emit(err);
            });
            this.cancel();
        };
        ActivitiComments.prototype.cancel = function () {
            if (this.dialog) {
                this.dialog.nativeElement.close();
            }
        };
        return ActivitiComments;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiComments.prototype, "taskId", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiComments.prototype, "readOnly", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiComments.prototype, "error", void 0);
    __decorate([core_1.ViewChild('dialog'), __metadata("design:type", Object)], ActivitiComments.prototype, "dialog", void 0);
    ActivitiComments = __decorate([core_1.Component({
        selector: 'activiti-comments',
        moduleId: module.id,
        template: "<span class=\"activiti-label mdl-badge\"       [attr.data-badge]=\"comments?.length\">{{ 'TASK_DETAILS.LABELS.COMMENTS' |translate }}</span> <div *ngIf=\"!readOnly\" id=\"addComment\" (click)=\"showDialog()\" class=\"icon material-icons\">add</div> <div *ngIf=\"!readOnly\" class=\"mdl-tooltip\" for=\"addComment\">     {{ 'TASK_DETAILS.COMMENTS.ADD' | translate }} </div>  <div class=\"menu-container\" *ngIf=\"comments?.length > 0\">     <ul class='mdl-list'>         <li class=\"mdl-list__item list-wrap\" *ngFor=\"let comment of comments\">             <span class=\"mdl-list__item-primary-content hide-long-names\"><i class=\"material-icons mdl-list__item-icon\">comment</i>{{comment.message}}</span>         </li>     </ul> </div> <div *ngIf=\"comments?.length === 0\" data-automation-id=\"comments-none\">     {{ 'TASK_DETAILS.COMMENTS.NONE' | translate }} </div>   <dialog class=\"mdl-dialog\" #dialog>     <h4 class=\"mdl-dialog__title\">{{ 'TASK_DETAILS.COMMENTS.DIALOG.TITLE' | translate }}</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <textarea class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"message\" rows=\"1\" id=\"commentText\"></textarea>             <label class=\"mdl-textfield__label\" for=\"commentText\">{{ 'TASK_DETAILS.COMMENTS.DIALOG.LABELS.MESSAGE' | translate }}</label>         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" (click)=\"add()\" class=\"mdl-button\">{{ 'TASK_DETAILS.COMMENTS.DIALOG.BUTTON.ADD' | translate }}</button>         <button type=\"button\" (click)=\"cancel()\" class=\"mdl-button close\">{{ 'TASK_DETAILS.COMMENTS.DIALOG.BUTTON.CANCEL' | translate }}</button>     </div> </dialog>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }  .material-icons:hover {     color: rgb(255, 152, 0); }  .mdl-tooltip {     will-change: unset; }  .material-icons {     cursor: pointer; }  .list-wrap {     word-wrap: break-word;     word-break: break-all;     -moz-hyphens:auto;     -webkit-hyphens:auto;     -o-hyphens:auto;     hyphens:auto; }  .hide-long-names {     overflow: auto; }"],
        providers: [activiti_tasklist_service_1.ActivitiTaskListService]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_tasklist_service_1.ActivitiTaskListService])], ActivitiComments);
    exports.ActivitiComments = ActivitiComments;
});
$__System.registerDynamic("f", ["3", "4", "d"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var Rx_1 = $__require("d");
    var ActivitiPeopleService = function () {
        function ActivitiPeopleService(alfrescoJsApi, logService) {
            this.alfrescoJsApi = alfrescoJsApi;
            this.logService = logService;
        }
        ActivitiPeopleService.prototype.getWorkflowUsers = function (taskId, searchWord) {
            var _this = this;
            var option = { excludeTaskId: taskId, filter: searchWord };
            return Rx_1.Observable.fromPromise(this.getWorkflowUserApi(option)).map(function (response) {
                return response.data || [];
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiPeopleService.prototype.involveUserWithTask = function (taskId, idToInvolve) {
            var _this = this;
            var node = { userId: idToInvolve };
            return Rx_1.Observable.fromPromise(this.involveUserToTaskApi(taskId, node)).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiPeopleService.prototype.removeInvolvedUser = function (taskId, idToRemove) {
            var _this = this;
            var node = { userId: idToRemove };
            return Rx_1.Observable.fromPromise(this.removeInvolvedUserFromTaskApi(taskId, node)).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiPeopleService.prototype.getWorkflowUserApi = function (options) {
            return this.alfrescoJsApi.getInstance().activiti.usersWorkflowApi.getUsers(options);
        };
        ActivitiPeopleService.prototype.involveUserToTaskApi = function (taskId, node) {
            return this.alfrescoJsApi.getInstance().activiti.taskActionsApi.involveUser(taskId, node);
        };
        ActivitiPeopleService.prototype.removeInvolvedUserFromTaskApi = function (taskId, node) {
            return this.alfrescoJsApi.getInstance().activiti.taskActionsApi.removeInvolvedUser(taskId, node);
        };
        ActivitiPeopleService.prototype.handleError = function (error) {
            this.logService.error(error);
            return Rx_1.Observable.throw(error || 'Server error');
        };
        return ActivitiPeopleService;
    }();
    ActivitiPeopleService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService, ng2_alfresco_core_1.LogService])], ActivitiPeopleService);
    exports.ActivitiPeopleService = ActivitiPeopleService;
});
$__System.registerDynamic("10", ["3", "d", "4", "f"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var Rx_1 = $__require("d");
    var ng2_alfresco_core_1 = $__require("4");
    var activiti_people_service_1 = $__require("f");
    var ActivitiPeople = function () {
        function ActivitiPeople(translateService, peopleService, logService) {
            var _this = this;
            this.translateService = translateService;
            this.peopleService = peopleService;
            this.logService = logService;
            this.baseComponentPath = module.id.replace('/activiti-people.component.js', '');
            this.people = [];
            this.taskId = '';
            this.readOnly = false;
            if (translateService) {
                translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
            }
            this.peopleSearch$ = new Rx_1.Observable(function (observer) {
                return _this.peopleSearchObserver = observer;
            }).share();
        }
        ActivitiPeople.prototype.showDialog = function () {
            if (!this.dialog.nativeElement.showModal) {
                dialogPolyfill.registerDialog(this.dialog.nativeElement);
            }
            if (this.dialog) {
                this.dialog.nativeElement.showModal();
            }
        };
        ActivitiPeople.prototype.closeDialog = function () {
            if (this.dialog) {
                this.dialog.nativeElement.close();
                this.peopleSearchObserver.next([]);
                this.activitipeoplesearch.searchUser.reset();
            }
        };
        ActivitiPeople.prototype.searchUser = function (searchedWord) {
            var _this = this;
            this.peopleService.getWorkflowUsers(this.taskId, searchedWord).subscribe(function (users) {
                _this.peopleSearchObserver.next(users);
            }, function (error) {
                return _this.logService.error('Could not load users');
            });
        };
        ActivitiPeople.prototype.involveUser = function (user) {
            var _this = this;
            this.peopleService.involveUserWithTask(this.taskId, user.id.toString()).subscribe(function () {
                _this.people.push(user);
            }, function (error) {
                return _this.logService.error('Impossible to involve user with task');
            });
        };
        ActivitiPeople.prototype.removeInvolvedUser = function (user) {
            var _this = this;
            this.peopleService.removeInvolvedUser(this.taskId, user.id.toString()).subscribe(function () {
                _this.people = _this.people.filter(function (involvedUser) {
                    return involvedUser.id !== user.id;
                });
            }, function (error) {
                return _this.logService.error('Impossible to remove involved user from task');
            });
        };
        ActivitiPeople.prototype.getDisplayUser = function (user) {
            var firstName = user.firstName && user.firstName !== 'null' ? user.firstName : 'N/A';
            var lastName = user.lastName && user.lastName !== 'null' ? user.lastName : 'N/A';
            return firstName + ' ' + lastName;
        };
        return ActivitiPeople;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiPeople.prototype, "iconImageUrl", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Array)], ActivitiPeople.prototype, "people", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiPeople.prototype, "taskId", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiPeople.prototype, "readOnly", void 0);
    __decorate([core_1.ViewChild('dialog'), __metadata("design:type", Object)], ActivitiPeople.prototype, "dialog", void 0);
    __decorate([core_1.ViewChild('activitipeoplesearch'), __metadata("design:type", Object)], ActivitiPeople.prototype, "activitipeoplesearch", void 0);
    ActivitiPeople = __decorate([core_1.Component({
        selector: 'activiti-people',
        moduleId: module.id,
        template: "<span class=\"activiti-label mdl-badge\" id=\"people-title\"       [attr.data-badge]=\"people?.length\">{{ 'TASK_DETAILS.LABELS.PEOPLE' | translate }}</span> <div *ngIf=\"!readOnly\" id=\"addPeople\" (click)=\"showDialog()\" class=\"icon material-icons people__icon\">add</div> <div *ngIf=\"!readOnly\" class=\"mdl-tooltip\" data-mdl-for=\"addPeople\">     Add a person </div> <div class=\"menu-container\" *ngIf=\"people?.length > 0\">     <ul class='mdl-list'>         <li class=\"mdl-list__item\" *ngFor=\"let user of people\">             <span class=\"mdl-chip mdl-chip--contact mdl-chip--deletable\">                 <img class=\"mdl-chip__contact\" [src]=\"iconImageUrl || baseComponentPath + '/../assets/images/user.jpg'\" />                 <span id=\"user-{{user.id}}\" class=\"mdl-chip__text\">{{getDisplayUser(user)}}</span>                 <a *ngIf=\"!readOnly\" class=\"mdl-chip__action\"><i id=\"remove-{{user.id}}\" (click)=\"removeInvolvedUser(user)\" class=\"material-icons people__icon\">cancel</i></a>             </span>         </li>     </ul> </div> <div *ngIf=\"people?.length === 0\" id=\"no-people-label\">     {{ 'TASK_DETAILS.PEOPLE.NONE' | translate }} </div>  <dialog class=\"mdl-dialog\" id=\"add-people-dialog\" #dialog>     <h4 class=\"mdl-dialog__title\" id=\"add-people-dialog-title\">Involve User</h4>     <div class=\"mdl-dialog__content add-people-dialog__content\">         <activiti-people-search (onSearch)=\"searchUser($event)\"                                 (onRowClicked)=\"involveUser($event)\"                                 [results]=\"peopleSearch$\"                                 [iconImageUrl]=\"iconImageUrl\" #activitipeoplesearch>         </activiti-people-search>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" id=\"close-people-dialog\" (click)=\"closeDialog()\" class=\"mdl-button close\">             {{'PEOPLE.DIALOG_CLOSE' | translate }}         </button>     </div> </dialog>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }  .material-icons.people__icon:hover {     color: rgb(255, 152, 0); }  .add-people-dialog__content {     padding: 20px 24px 2px; }  .mdl-tooltip {     will-change: unset; }  .material-icons {     cursor: pointer; }"]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_people_service_1.ActivitiPeopleService, ng2_alfresco_core_1.LogService])], ActivitiPeople);
    exports.ActivitiPeople = ActivitiPeople;
});
$__System.registerDynamic("11", ["3", "4", "c", "5"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var task_details_model_1 = $__require("c");
    var activiti_tasklist_service_1 = $__require("5");
    var ActivitiTaskHeader = function () {
        function ActivitiTaskHeader(translateService, activitiTaskService, logService) {
            this.translateService = translateService;
            this.activitiTaskService = activitiTaskService;
            this.logService = logService;
            this.formName = null;
            this.claim = new core_1.EventEmitter();
            if (translateService) {
                translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
            }
        }
        ActivitiTaskHeader.prototype.hasAssignee = function () {
            return this.taskDetails && this.taskDetails.assignee ? true : false;
        };
        ActivitiTaskHeader.prototype.isAssignedToMe = function () {
            return this.taskDetails.assignee ? true : false;
        };
        ActivitiTaskHeader.prototype.claimTask = function (taskId) {
            var _this = this;
            this.activitiTaskService.claimTask(taskId).subscribe(function (res) {
                _this.logService.info('Task claimed');
                _this.claim.emit(taskId);
            });
        };
        return ActivitiTaskHeader;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiTaskHeader.prototype, "formName", void 0);
    __decorate([core_1.Input(), __metadata("design:type", task_details_model_1.TaskDetailsModel)], ActivitiTaskHeader.prototype, "taskDetails", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiTaskHeader.prototype, "claim", void 0);
    ActivitiTaskHeader = __decorate([core_1.Component({
        selector: 'activiti-task-header',
        moduleId: module.id,
        template: "<div *ngIf=\"taskDetails\">     <div class=\"mdl-grid\">         <div class=\"mdl-cell mdl-cell--4-col\" data-automation-id=\"header-assignee\">             <span class=\"activiti-task-header__label\">{{ 'TASK_DETAILS.LABELS.ASSIGNEE' | translate }}: </span>             <span class=\"activiti-task-header__value\" *ngIf=\"hasAssignee()\">{{ taskDetails.assignee.firstName }} {{ taskDetails.assignee.lastName }}</span>             <span class=\"activiti-task-header__value\" *ngIf=\"!hasAssignee()\">{{ 'TASK_DETAILS.ASSIGNEE.NONE' | translate }}</span>         </div>         <div class=\"mdl-cell mdl-cell--4-col\" data-automation-id=\"header-due-date\">             <span class=\"activiti-task-header__label\">{{ 'TASK_DETAILS.LABELS.DUE' | translate }}: </span>             <span class=\"activiti-task-header__value\" *ngIf=\"taskDetails?.dueDate\">{{ taskDetails.dueDate }}</span>             <span class=\"activiti-task-header__value\" *ngIf=\"!taskDetails?.dueDate\">{{ 'TASK_DETAILS.DUE.NONE' |translate }}</span>         </div>         <div *ngIf=\"formName\" class=\"mdl-cell mdl-cell--4-col\" data-automation-id=\"header-form-name\">             <span class=\"activiti-task-header__label\">{{ 'TASK_DETAILS.LABELS.FORM' | translate }}: </span>             <span class=\"activiti-task-header__value\" *ngIf=\"formName\">{{ formName }}</span>             <span class=\"activiti-task-header__value\" *ngIf=\"!formName\">{{ 'TASK_DETAILS.FORM.NONE' | translate }}</span>         </div>          <button *ngIf=\"!isAssignedToMe()\" data-automation-id=\"header-claim-button\" type=\"button\" id=\"claim-task\"                 (click)=\"claimTask(taskDetails.id)\" class=\"mdl-button\">{{ 'TASK_DETAILS.BUTTON.CLAIM' | translate }}         </button>      </div> </div>",
        styles: [":host {     width: 100%; }  .activiti-task-header__label {     font-weight: bold; }  .activiti-task-header__value {     color: rgb(68, 138, 255); }  .material-icons {     cursor: pointer; }"]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_tasklist_service_1.ActivitiTaskListService, ng2_alfresco_core_1.LogService])], ActivitiTaskHeader);
    exports.ActivitiTaskHeader = ActivitiTaskHeader;
});
$__System.registerDynamic("12", ["3", "13"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var activiti_task_details_component_1 = $__require("13");
    var NoTaskDetailsTemplateComponent = function () {
        function NoTaskDetailsTemplateComponent(activitiTaskDetails) {
            this.activitiTaskDetails = activitiTaskDetails;
        }
        NoTaskDetailsTemplateComponent.prototype.ngAfterContentInit = function () {
            this.activitiTaskDetails.noTaskDetailsTemplateComponent = this.template;
        };
        return NoTaskDetailsTemplateComponent;
    }();
    __decorate([core_1.ContentChild(core_1.TemplateRef), __metadata("design:type", Object)], NoTaskDetailsTemplateComponent.prototype, "template", void 0);
    NoTaskDetailsTemplateComponent = __decorate([core_1.Directive({
        selector: 'no-task-details-template'
    }), __metadata("design:paramtypes", [activiti_task_details_component_1.ActivitiTaskDetails])], NoTaskDetailsTemplateComponent);
    exports.NoTaskDetailsTemplateComponent = NoTaskDetailsTemplateComponent;
});
$__System.registerDynamic("14", ["3", "d", "4", "5"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var Rx_1 = $__require("d");
    var ng2_alfresco_core_1 = $__require("4");
    var activiti_tasklist_service_1 = $__require("5");
    var ActivitiFilters = function () {
        function ActivitiFilters(translateService, activiti, logService) {
            var _this = this;
            this.translateService = translateService;
            this.activiti = activiti;
            this.logService = logService;
            this.filterClick = new core_1.EventEmitter();
            this.onSuccess = new core_1.EventEmitter();
            this.onError = new core_1.EventEmitter();
            this.filters = [];
            this.filter$ = new Rx_1.Observable(function (observer) {
                return _this.filterObserver = observer;
            }).share();
            if (translateService) {
                translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
            }
        }
        ActivitiFilters.prototype.ngOnInit = function () {
            var _this = this;
            this.filter$.subscribe(function (filter) {
                _this.filters.push(filter);
            });
        };
        ActivitiFilters.prototype.ngOnChanges = function (changes) {
            var appId = changes['appId'];
            if (appId && (appId.currentValue || appId.currentValue === null)) {
                this.getFiltersByAppId(appId.currentValue);
                return;
            }
            var appName = changes['appName'];
            if (appName && appName !== null && appName.currentValue) {
                this.getFiltersByAppName(appName.currentValue);
                return;
            }
            this.getFiltersByAppId();
        };
        ActivitiFilters.prototype.getFilters = function (appId, appName) {
            if (appName) {
                this.getFiltersByAppName(appName);
            } else {
                this.getFiltersByAppId(appId);
            }
        };
        ActivitiFilters.prototype.getFiltersByAppId = function (appId) {
            var _this = this;
            this.activiti.getTaskListFilters(appId).subscribe(function (res) {
                _this.resetFilter();
                res.forEach(function (filter) {
                    _this.filterObserver.next(filter);
                });
                _this.selectFirstFilter();
                _this.onSuccess.emit(res);
            }, function (err) {
                _this.logService.error(err);
                _this.onError.emit(err);
            });
        };
        ActivitiFilters.prototype.getFiltersByAppName = function (appName) {
            var _this = this;
            this.activiti.getDeployedApplications(appName).subscribe(function (application) {
                _this.getFiltersByAppId(application.id);
                _this.selectFirstFilter();
            }, function (err) {
                _this.logService.error(err);
                _this.onError.emit(err);
            });
        };
        ActivitiFilters.prototype.selectFilter = function (filter) {
            this.currentFilter = filter;
            this.filterClick.emit(filter);
        };
        ActivitiFilters.prototype.selectFirstFilter = function () {
            if (!this.isFilterListEmpty()) {
                this.currentFilter = this.filters[0];
            } else {
                this.currentFilter = null;
            }
        };
        ActivitiFilters.prototype.getCurrentFilter = function () {
            return this.currentFilter;
        };
        ActivitiFilters.prototype.isFilterListEmpty = function () {
            return this.filters === undefined || this.filters && this.filters.length === 0;
        };
        ActivitiFilters.prototype.resetFilter = function () {
            this.filters = [];
            this.currentFilter = null;
        };
        return ActivitiFilters;
    }();
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiFilters.prototype, "filterClick", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiFilters.prototype, "onSuccess", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiFilters.prototype, "onError", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiFilters.prototype, "appId", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiFilters.prototype, "appName", void 0);
    ActivitiFilters = __decorate([core_1.Component({
        selector: 'activiti-filters',
        moduleId: module.id,
        template: "<div class=\"menu-container\">     <ul class='mdl-list'>         <li class=\"mdl-list__item activiti-filters__entry\" (click)=\"selectFilter(filter)\" *ngFor=\"let filter of filters\"             [class.active]=\"currentFilter === filter\">             <span class=\"mdl-list__item-primary-content\">             <i class=\"material-icons mdl-list__item-icon activiti-filters__entry-icon\" [attr.data-automation-id]=\"filter.name + '_filter'\" >assignment</i>             {{filter.name}}             </span>         </li>     </ul> </div>",
        styles: [".mdl-list__item {     cursor: pointer; }  .activiti-filters__entry {     cursor: pointer; }  .activiti-filters__entry-icon {     margin-right: 12px !important; }  .activiti-filters__entry.active {     color: rgb(68,138,255); }  .activiti-filters__entry.active .activiti-filters__entry-icon {     color: rgb(68,138,255); }"],
        providers: [activiti_tasklist_service_1.ActivitiTaskListService]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_tasklist_service_1.ActivitiTaskListService, ng2_alfresco_core_1.LogService])], ActivitiFilters);
    exports.ActivitiFilters = ActivitiFilters;
});
$__System.registerDynamic("13", ["3", "4", "5", "15", "16", "a"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var activiti_tasklist_service_1 = $__require("5");
    var user_model_1 = $__require("15");
    var ng2_activiti_form_1 = $__require("16");
    var filter_model_1 = $__require("a");
    var ActivitiTaskDetails = function () {
        function ActivitiTaskDetails(translateService, activitiForm, activitiTaskList, logService) {
            this.translateService = translateService;
            this.activitiForm = activitiForm;
            this.activitiTaskList = activitiTaskList;
            this.logService = logService;
            this.showNextTask = true;
            this.showFormTitle = true;
            this.showFormCompleteButton = true;
            this.showFormSaveButton = true;
            this.readOnlyForm = false;
            this.showFormRefreshButton = true;
            this.formSaved = new core_1.EventEmitter();
            this.formCompleted = new core_1.EventEmitter();
            this.formLoaded = new core_1.EventEmitter();
            this.taskCreated = new core_1.EventEmitter();
            this.onError = new core_1.EventEmitter();
            this.executeOutcome = new core_1.EventEmitter();
            this.taskFormName = null;
            this.taskPeople = [];
            if (translateService) {
                translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
            }
        }
        ActivitiTaskDetails.prototype.ngOnInit = function () {
            if (this.taskId) {
                this.loadDetails(this.taskId);
            }
        };
        ActivitiTaskDetails.prototype.ngOnChanges = function (changes) {
            var taskId = changes['taskId'];
            if (taskId && !taskId.currentValue) {
                this.reset();
                return;
            }
            if (taskId && taskId.currentValue) {
                this.loadDetails(taskId.currentValue);
                return;
            }
        };
        ActivitiTaskDetails.prototype.reset = function () {
            this.taskDetails = null;
        };
        ActivitiTaskDetails.prototype.hasFormKey = function () {
            return this.taskDetails && this.taskDetails.formKey && this.taskDetails.formKey !== 'null';
        };
        ActivitiTaskDetails.prototype.isTaskActive = function () {
            return this.taskDetails && this.taskDetails.duration === null;
        };
        ActivitiTaskDetails.prototype.loadDetails = function (taskId) {
            var _this = this;
            this.taskPeople = [];
            this.taskFormName = null;
            if (taskId) {
                this.activitiTaskList.getTaskDetails(taskId).subscribe(function (res) {
                    _this.taskDetails = res;
                    if (_this.taskDetails.name === 'null') {
                        _this.taskDetails.name = 'No name';
                    }
                    var endDate = res.endDate;
                    _this.readOnlyForm = !!(endDate && !isNaN(endDate.getTime()));
                    if (_this.taskDetails && _this.taskDetails.involvedPeople) {
                        _this.taskDetails.involvedPeople.forEach(function (user) {
                            _this.taskPeople.push(new user_model_1.User(user));
                        });
                    }
                });
            }
        };
        ActivitiTaskDetails.prototype.isAssignedToMe = function () {
            return this.taskDetails.assignee ? true : false;
        };
        ActivitiTaskDetails.prototype.loadNextTask = function (processInstanceId, processDefinitionId) {
            var _this = this;
            var requestNode = new filter_model_1.TaskQueryRequestRepresentationModel({
                processInstanceId: processInstanceId,
                processDefinitionId: processDefinitionId
            });
            this.activitiTaskList.getTasks(requestNode).subscribe(function (response) {
                if (response && response.length > 0) {
                    _this.taskDetails = response[0];
                } else {
                    _this.reset();
                }
            }, function (error) {
                _this.logService.error(error);
                _this.onError.emit(error);
            });
        };
        ActivitiTaskDetails.prototype.onComplete = function () {
            var _this = this;
            this.activitiTaskList.completeTask(this.taskId).subscribe(function (res) {
                return _this.onFormCompleted(null);
            });
        };
        ActivitiTaskDetails.prototype.onFormSaved = function (form) {
            this.formSaved.emit(form);
        };
        ActivitiTaskDetails.prototype.onFormCompleted = function (form) {
            this.formCompleted.emit(form);
            if (this.showNextTask) {
                this.loadNextTask(this.taskDetails.processInstanceId, this.taskDetails.processDefinitionId);
            }
        };
        ActivitiTaskDetails.prototype.onFormLoaded = function (form) {
            this.taskFormName = null;
            if (form && form.name) {
                this.taskFormName = form.name;
            }
            this.formLoaded.emit(form);
        };
        ActivitiTaskDetails.prototype.onChecklistTaskCreated = function (task) {
            this.taskCreated.emit(task);
        };
        ActivitiTaskDetails.prototype.onFormError = function (error) {
            this.errorDialog.nativeElement.showModal();
            this.onError.emit(error);
        };
        ActivitiTaskDetails.prototype.onFormExecuteOutcome = function (event) {
            this.executeOutcome.emit(event);
        };
        ActivitiTaskDetails.prototype.closeErrorDialog = function () {
            this.errorDialog.nativeElement.close();
        };
        ActivitiTaskDetails.prototype.onClaimTask = function (taskId) {
            this.loadDetails(taskId);
        };
        return ActivitiTaskDetails;
    }();
    __decorate([core_1.ViewChild('activiticomments'), __metadata("design:type", Object)], ActivitiTaskDetails.prototype, "activiticomments", void 0);
    __decorate([core_1.ViewChild('activitichecklist'), __metadata("design:type", Object)], ActivitiTaskDetails.prototype, "activitichecklist", void 0);
    __decorate([core_1.ViewChild('errorDialog'), __metadata("design:type", core_1.DebugElement)], ActivitiTaskDetails.prototype, "errorDialog", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiTaskDetails.prototype, "taskId", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiTaskDetails.prototype, "showNextTask", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiTaskDetails.prototype, "showFormTitle", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiTaskDetails.prototype, "showFormCompleteButton", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiTaskDetails.prototype, "showFormSaveButton", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiTaskDetails.prototype, "readOnlyForm", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Boolean)], ActivitiTaskDetails.prototype, "showFormRefreshButton", void 0);
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiTaskDetails.prototype, "peopleIconImageUrl", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiTaskDetails.prototype, "formSaved", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiTaskDetails.prototype, "formCompleted", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiTaskDetails.prototype, "formLoaded", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiTaskDetails.prototype, "taskCreated", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiTaskDetails.prototype, "onError", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiTaskDetails.prototype, "executeOutcome", void 0);
    ActivitiTaskDetails = __decorate([core_1.Component({
        selector: 'activiti-task-details',
        moduleId: module.id,
        template: "<div *ngIf=\"!taskDetails\">     <template *ngIf=\"noTaskDetailsTemplateComponent\" ngFor [ngForOf]=\"[data]\"               [ngForTemplate]=\"noTaskDetailsTemplateComponent\">         {{ 'TASK_DETAILS.MESSAGES.NONE' | translate }}     </template>     <div *ngIf=\"!noTaskDetailsTemplateComponent\">         {{ 'TASK_DETAILS.MESSAGES.NONE' | translate }}     </div> </div> <div *ngIf=\"taskDetails\">     <h2 class=\"mdl-card__title-text\">{{taskDetails.name}}</h2>     <activiti-task-header             [taskDetails]=\"taskDetails\"             [formName]=\"taskFormName\"             (claim)=\"onClaimTask($event)\"></activiti-task-header>     <div class=\"mdl-grid\">         <div class=\"mdl-cell mdl-cell--4-col\">             <activiti-people [iconImageUrl]=\"peopleIconImageUrl\" [people]=\"taskPeople\" [readOnly]=\"readOnlyForm\"                              [taskId]=\"taskDetails.id\"></activiti-people>         </div>         <div class=\"mdl-cell mdl-cell--4-col\">             <activiti-comments [readOnly]=\"readOnlyForm\" [taskId]=\"taskDetails.id\"                                #activiticomments></activiti-comments>         </div>         <div class=\"mdl-cell mdl-cell--4-col\">             <activiti-checklist [readOnly]=\"readOnlyForm\" [taskId]=\"taskDetails.id\" [assignee]=\"taskDetails?.assignee?.id\"                                 (checklistTaskCreated)=\"onChecklistTaskCreated($event)\" #activitichecklist></activiti-checklist>         </div>     </div>     <div *ngIf=\"isAssignedToMe()\">         <activiti-form *ngIf=\"hasFormKey()\" [taskId]=\"taskDetails.id\"                        [showTitle]=\"showFormTitle\"                        [showRefreshButton]=\"showFormRefreshButton\"                        [showCompleteButton]=\"showFormCompleteButton\"                        [showSaveButton]=\"showFormSaveButton\"                        [readOnly]=\"readOnlyForm\"                        (formSaved)='onFormSaved($event)'                        (formCompleted)='onFormCompleted($event)'                        (formLoaded)='onFormLoaded($event)'                        (onError)='onFormError($event)'                        (executeOutcome)='onFormExecuteOutcome($event)'                        #activitiForm>         </activiti-form>     </div>     <div *ngIf=\"!isAssignedToMe()\">         {{ 'TASK_DETAILS.MESSAGES.CLAIM' | translate }}     </div>     <button type=\"button\" class=\"mdl-button\" *ngIf=\"!hasFormKey() && isTaskActive()\" (click)=\"onComplete()\">         {{ 'TASK_DETAILS.BUTTON.COMPLETE' | translate }}     </button>     <dialog class=\"mdl-dialog error-dialog\" #errorDialog>         <div class=\"mdl-dialog__content\">             <h3>{{'TASK_DETAILS.ERROR.TITLE'|translate}}</h3>             <p>{{'TASK_DETAILS.ERROR.DESCRIPTION'|translate}}</p>             <button type=\"button\" class=\"mdl-button\" (click)=\"closeErrorDialog()\">{{'TASK_DETAILS.ERROR.CLOSE'|translate}}</button>         </div>     </dialog> </div>",
        styles: [":host {     width: 100%; }  .error-dialog h3 {     margin: 16px 0; }"]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, ng2_activiti_form_1.FormService, activiti_tasklist_service_1.ActivitiTaskListService, ng2_alfresco_core_1.LogService])], ActivitiTaskDetails);
    exports.ActivitiTaskDetails = ActivitiTaskDetails;
});
$__System.registerDynamic("17", [], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var Form = function () {
        function Form(id, name) {
            this.name = name;
            this.id = id;
        }
        return Form;
    }();
    exports.Form = Form;
});
$__System.registerDynamic("5", ["3", "d", "4", "a", "18", "15", "c", "17"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var Rx_1 = $__require("d");
    var ng2_alfresco_core_1 = $__require("4");
    var filter_model_1 = $__require("a");
    var comment_model_1 = $__require("18");
    var user_model_1 = $__require("15");
    var task_details_model_1 = $__require("c");
    var form_model_1 = $__require("17");
    var ActivitiTaskListService = function () {
        function ActivitiTaskListService(apiService, logService) {
            this.apiService = apiService;
            this.logService = logService;
        }
        ActivitiTaskListService.prototype.getDeployedApplications = function (name) {
            var _this = this;
            return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.appsApi.getAppDefinitions()).map(function (response) {
                if (name) {
                    return response.data.find(function (p) {
                        return p.name === name;
                    });
                }
                return response.data;
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.getTaskListFilters = function (appId) {
            var _this = this;
            return Rx_1.Observable.fromPromise(this.callApiTaskFilters(appId)).map(function (response) {
                var filters = [];
                response.data.forEach(function (filter) {
                    var filterModel = new filter_model_1.FilterRepresentationModel(filter);
                    filters.push(filterModel);
                });
                if (response && response.data && response.data.length === 0) {
                    return _this.createDefaultFilter(appId);
                }
                return filters;
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.getTasks = function (requestNode) {
            var _this = this;
            return Rx_1.Observable.fromPromise(this.callApiTasksFiltered(requestNode)).map(function (res) {
                if (requestNode.processDefinitionKey) {
                    return res.data.filter(function (p) {
                        return p.processDefinitionKey === requestNode.processDefinitionKey;
                    });
                } else {
                    return res.data;
                }
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.getTaskDetails = function (id) {
            var _this = this;
            return Rx_1.Observable.fromPromise(this.callApiTaskDetails(id)).map(function (res) {
                return res;
            }).map(function (details) {
                return new task_details_model_1.TaskDetailsModel(details);
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.getTaskComments = function (id) {
            var _this = this;
            return Rx_1.Observable.fromPromise(this.callApiTaskComments(id)).map(function (res) {
                return res;
            }).map(function (response) {
                var comments = [];
                response.data.forEach(function (comment) {
                    var user = new user_model_1.User(comment.createdBy);
                    comments.push(new comment_model_1.Comment(comment.id, comment.message, comment.created, user));
                });
                return comments;
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.getTaskChecklist = function (id) {
            var _this = this;
            return Rx_1.Observable.fromPromise(this.callApiTaskChecklist(id)).map(function (res) {
                return res;
            }).map(function (response) {
                var checklists = [];
                response.data.forEach(function (checklist) {
                    checklists.push(new task_details_model_1.TaskDetailsModel(checklist));
                });
                return checklists;
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.getFormList = function () {
            var _this = this;
            var opts = {
                'filter': 'myReusableForms',
                'sort': 'modifiedDesc',
                'modelType': 2
            };
            return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.modelsApi.getModels(opts)).map(function (res) {
                return res;
            }).map(function (response) {
                var forms = [];
                response.data.forEach(function (form) {
                    forms.push(new form_model_1.Form(form.id, form.name));
                });
                return forms;
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.attachFormToATask = function (taskId, formId) {
            return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.attachForm(taskId, { 'formId': formId }));
        };
        ActivitiTaskListService.prototype.createDefaultFilter = function (appId) {
            var filters = [];
            var involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId);
            this.addFilter(involvedTasksFilter);
            filters.push(involvedTasksFilter);
            var myTasksFilter = this.getMyTasksFilterInstance(appId);
            this.addFilter(myTasksFilter);
            filters.push(myTasksFilter);
            var queuedTasksFilter = this.getQueuedTasksFilterInstance(appId);
            this.addFilter(queuedTasksFilter);
            filters.push(queuedTasksFilter);
            var completedTasksFilter = this.getCompletedTasksFilterInstance(appId);
            this.addFilter(completedTasksFilter);
            filters.push(completedTasksFilter);
            return filters;
        };
        ActivitiTaskListService.prototype.addTask = function (task) {
            var _this = this;
            return Rx_1.Observable.fromPromise(this.callApiAddTask(task)).map(function (res) {
                return res;
            }).map(function (response) {
                return new task_details_model_1.TaskDetailsModel(response);
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.addFilter = function (filter) {
            var _this = this;
            return Rx_1.Observable.fromPromise(this.callApiAddFilter(filter)).map(function (res) {
                return res;
            }).map(function (response) {
                return response;
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.addTaskComment = function (id, message) {
            var _this = this;
            return Rx_1.Observable.fromPromise(this.callApiAddTaskComment(id, message)).map(function (res) {
                return res;
            }).map(function (response) {
                return new comment_model_1.Comment(response.id, response.message, response.created, response.createdBy);
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.completeTask = function (id) {
            return Rx_1.Observable.fromPromise(this.callApiCompleteTask(id)).map(function (res) {
                return res;
            });
        };
        ActivitiTaskListService.prototype.getTotalTasks = function (requestNode) {
            var _this = this;
            requestNode.size = 0;
            return Rx_1.Observable.fromPromise(this.callApiTasksFiltered(requestNode)).map(function (res) {
                return res;
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.createNewTask = function (task) {
            var _this = this;
            return Rx_1.Observable.fromPromise(this.callApiCreateTask(task)).map(function (res) {
                return res;
            }).map(function (response) {
                return new task_details_model_1.TaskDetailsModel(response);
            }).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.claimTask = function (taskId) {
            var _this = this;
            return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.claimTask(taskId)).catch(function (err) {
                return _this.handleError(err);
            });
        };
        ActivitiTaskListService.prototype.callApiTasksFiltered = function (requestNode) {
            return this.apiService.getInstance().activiti.taskApi.listTasks(requestNode);
        };
        ActivitiTaskListService.prototype.callApiTaskFilters = function (appId) {
            if (appId) {
                return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters({ appId: appId });
            } else {
                return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters();
            }
        };
        ActivitiTaskListService.prototype.callApiTaskDetails = function (id) {
            return this.apiService.getInstance().activiti.taskApi.getTask(id);
        };
        ActivitiTaskListService.prototype.callApiTaskComments = function (id) {
            return this.apiService.getInstance().activiti.taskApi.getTaskComments(id);
        };
        ActivitiTaskListService.prototype.callApiAddTaskComment = function (id, message) {
            return this.apiService.getInstance().activiti.taskApi.addTaskComment({ message: message }, id);
        };
        ActivitiTaskListService.prototype.callApiAddTask = function (task) {
            return this.apiService.getInstance().activiti.taskApi.addSubtask(task.parentTaskId, task);
        };
        ActivitiTaskListService.prototype.callApiAddFilter = function (filter) {
            return this.apiService.getInstance().activiti.userFiltersApi.createUserTaskFilter(filter);
        };
        ActivitiTaskListService.prototype.callApiTaskChecklist = function (id) {
            return this.apiService.getInstance().activiti.taskApi.getChecklist(id);
        };
        ActivitiTaskListService.prototype.callApiCompleteTask = function (id) {
            return this.apiService.getInstance().activiti.taskApi.completeTask(id);
        };
        ActivitiTaskListService.prototype.callApiCreateTask = function (task) {
            return this.apiService.getInstance().activiti.taskApi.createNewTask(task);
        };
        ActivitiTaskListService.prototype.handleError = function (error) {
            this.logService.error(error);
            return Rx_1.Observable.throw(error || 'Server error');
        };
        ActivitiTaskListService.prototype.getInvolvedTasksFilterInstance = function (appId) {
            return new filter_model_1.FilterRepresentationModel({
                'name': 'Involved Tasks',
                'appId': appId,
                'recent': false,
                'icon': 'glyphicon-align-left',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved' }
            });
        };
        ActivitiTaskListService.prototype.getMyTasksFilterInstance = function (appId) {
            return new filter_model_1.FilterRepresentationModel({
                'name': 'My Tasks',
                'appId': appId,
                'recent': false,
                'icon': 'glyphicon-inbox',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee' }
            });
        };
        ActivitiTaskListService.prototype.getQueuedTasksFilterInstance = function (appId) {
            return new filter_model_1.FilterRepresentationModel({
                'name': 'Queued Tasks',
                'appId': appId,
                'recent': false,
                'icon': 'glyphicon-record',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate' }
            });
        };
        ActivitiTaskListService.prototype.getCompletedTasksFilterInstance = function (appId) {
            return new filter_model_1.FilterRepresentationModel({
                'name': 'Completed Tasks',
                'appId': appId,
                'recent': true,
                'icon': 'glyphicon-ok-sign',
                'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved' }
            });
        };
        return ActivitiTaskListService;
    }();
    ActivitiTaskListService = __decorate([core_1.Injectable(), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService, ng2_alfresco_core_1.LogService])], ActivitiTaskListService);
    exports.ActivitiTaskListService = ActivitiTaskListService;
});
$__System.registerDynamic("19", ["3", "4", "c", "5"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var task_details_model_1 = $__require("c");
    var activiti_tasklist_service_1 = $__require("5");
    var ActivitiStartTaskButton = function () {
        function ActivitiStartTaskButton(translateService, taskService, logService) {
            this.translateService = translateService;
            this.taskService = taskService;
            this.logService = logService;
            this.onSuccess = new core_1.EventEmitter();
            this.formId = null;
            if (translateService) {
                translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
            }
        }
        ActivitiStartTaskButton.prototype.start = function () {
            var _this = this;
            if (this.name) {
                this.taskService.createNewTask(new task_details_model_1.TaskDetailsModel({
                    name: this.name,
                    description: this.description,
                    category: this.appId ? '' + this.appId : null
                })).subscribe(function (res) {
                    _this.onSuccess.emit(res);
                    _this.closeDialog();
                    _this.resetForm();
                    _this.attachForm(res.id);
                }, function (err) {
                    window.alert('An error occurred while trying to add the task');
                    _this.logService.error(err);
                });
            }
        };
        ActivitiStartTaskButton.prototype.attachForm = function (taskId) {
            if (this.formId && taskId) {
                this.taskService.attachFormToATask(taskId, Number(this.formId));
                this.formId = null;
            }
        };
        ActivitiStartTaskButton.prototype.cancel = function () {
            this.closeDialog();
        };
        ActivitiStartTaskButton.prototype.showDialog = function () {
            if (!this.dialog.nativeElement.showModal) {
                dialogPolyfill.registerDialog(this.dialog.nativeElement);
            }
            this.loadFormsTask();
            if (this.dialog) {
                this.dialog.nativeElement.showModal();
            }
        };
        ActivitiStartTaskButton.prototype.loadFormsTask = function () {
            var _this = this;
            this.taskService.getFormList().subscribe(function (res) {
                _this.forms = res;
            }, function (err) {
                window.alert('An error occurred while trying to get the forms');
                _this.logService.error(err);
            });
        };
        ActivitiStartTaskButton.prototype.closeDialog = function () {
            if (this.dialog) {
                this.dialog.nativeElement.close();
            }
        };
        ActivitiStartTaskButton.prototype.resetForm = function () {
            this.name = '';
            this.description = '';
        };
        return ActivitiStartTaskButton;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiStartTaskButton.prototype, "appId", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiStartTaskButton.prototype, "onSuccess", void 0);
    __decorate([core_1.ViewChild('dialog'), __metadata("design:type", Object)], ActivitiStartTaskButton.prototype, "dialog", void 0);
    ActivitiStartTaskButton = __decorate([core_1.Component({
        selector: 'activiti-start-task',
        moduleId: module.id,
        template: "<button type=\"button\" (click)=\"showDialog()\" class=\"mdl-button\" id=\"start-task-button\">     {{'START_TASK.BUTTON'|translate}} </button>  <dialog class=\"mdl-dialog\" id=\"start-task-dialog\" #dialog>     <h4 class=\"mdl-dialog__title\" id=\"start-task-dialog-title\">{{'START_TASK.DIALOG.TITLE'|translate}}</h4>     <div class=\"mdl-dialog__content\">         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <input class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"name\" id=\"taskName\"/>             <label class=\"mdl-textfield__label\" for=\"taskName\">{{'START_TASK.DIALOG.LABEL.NAME'|translate}}</label>         </div>         <div class=\"mdl-textfield mdl-js-textfield\">             <textarea class=\"mdl-textfield__input\" type=\"text\" [(ngModel)]=\"description\" rows=\"3\"                       id=\"taskDescription\"></textarea>             <label class=\"mdl-textfield__label\" id=\"task-description-label\"                    for=\"taskDescription\">{{'START_TASK.DIALOG.LABEL.DESCRIPTION'|translate}}</label>         </div>         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">             <label class=\"mdl-textfield__label\" >{{'START_TASK.DIALOG.LABEL.ATTACHFORM'|translate}}</label>         </div>         <div class=\"mdl-textfield mdl-js-textfield alf-mdl-selectfield\">             <select name=\"taskForm\" [(ngModel)]=\"formId\" >                 <option value=\"null\">{{'START_TASK.DIALOG.LABEL.NONE'|translate}}</option>                 <option *ngFor=\"let form of forms\" [value]=\"form.id\">                     {{form.name}}                 </option>             </select>         </div>     </div>     <div class=\"mdl-dialog__actions\">         <button type=\"button\" id=\"button-start\" (click)=\"start()\" class=\"mdl-button\">             {{'START_TASK.DIALOG.ACTION.START'|translate}}         </button>         <button type=\"button\" id=\"button-cancel\" (click)=\"cancel()\" class=\"mdl-button close\">             {{'START_TASK.DIALOG.ACTION.CANCEL'|translate}}         </button>     </div> </dialog>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }"]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService, activiti_tasklist_service_1.ActivitiTaskListService, ng2_alfresco_core_1.LogService])], ActivitiStartTaskButton);
    exports.ActivitiStartTaskButton = ActivitiStartTaskButton;
});
$__System.registerDynamic("1a", ["3", "1b", "7", "4"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = this && this.__metadata || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1 = $__require("3");
    var forms_1 = $__require("1b");
    var Observable_1 = $__require("7");
    var ng2_alfresco_core_1 = $__require("4");
    var ActivitiPeopleSearch = function () {
        function ActivitiPeopleSearch(translateService) {
            var _this = this;
            this.translateService = translateService;
            this.baseComponentPath = module.id.replace('/activiti-people-search.component.js', '');
            this.onSearch = new core_1.EventEmitter();
            this.onRowClicked = new core_1.EventEmitter();
            this.searchUser = new forms_1.FormControl();
            this.userList = [];
            if (translateService) {
                translateService.addTranslationFolder('ng2-activiti-tasklist', 'node_modules/ng2-activiti-tasklist/src');
            }
            this.searchUser.valueChanges.debounceTime(200).subscribe(function (event) {
                if (event && event.trim()) {
                    _this.onSearch.emit(event);
                } else {
                    _this.userList = [];
                }
            });
        }
        ActivitiPeopleSearch.prototype.ngOnInit = function () {
            var _this = this;
            this.results.subscribe(function (list) {
                _this.userList = list;
            });
        };
        ActivitiPeopleSearch.prototype.ngAfterViewInit = function () {
            this.setupMaterialComponents(componentHandler);
        };
        ActivitiPeopleSearch.prototype.setupMaterialComponents = function (handler) {
            var isUpgraded = false;
            if (handler) {
                handler.upgradeAllRegistered();
                isUpgraded = true;
            }
            return isUpgraded;
        };
        ActivitiPeopleSearch.prototype.onRowClick = function (userClicked) {
            var _this = this;
            this.onRowClicked.emit(userClicked);
            this.userList = this.userList.filter(function (user) {
                _this.searchUser.reset();
                return user.id !== userClicked.id;
            });
        };
        ActivitiPeopleSearch.prototype.getDisplayUser = function (user) {
            var firstName = user.firstName && user.firstName !== 'null' ? user.firstName : 'N/A';
            var lastName = user.lastName && user.lastName !== 'null' ? user.lastName : 'N/A';
            return firstName + ' - ' + lastName;
        };
        return ActivitiPeopleSearch;
    }();
    __decorate([core_1.Input(), __metadata("design:type", String)], ActivitiPeopleSearch.prototype, "iconImageUrl", void 0);
    __decorate([core_1.Input(), __metadata("design:type", Observable_1.Observable)], ActivitiPeopleSearch.prototype, "results", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiPeopleSearch.prototype, "onSearch", void 0);
    __decorate([core_1.Output(), __metadata("design:type", core_1.EventEmitter)], ActivitiPeopleSearch.prototype, "onRowClicked", void 0);
    ActivitiPeopleSearch = __decorate([core_1.Component({
        selector: 'activiti-people-search',
        moduleId: module.id,
        template: "<div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">     <input class=\"mdl-textfield__input\" type=\"text\" id=\"userSearchText\" [value]=\"\"            [formControl]=\"searchUser\"/>     <label class=\"mdl-textfield__label\" for=\"userSearchText\">Search user</label> </div> <ul class='mdl-list'>     <li class=\"mdl-list__item fix-element-user-list\" *ngFor=\"let user of userList\">         <button (click)=\"onRowClick(user)\" id=\"user-{{user.id}}\" class=\"mdl-chip mdl-chip--contact mdl-chip-search-people\">             <img class=\"mdl-chip__contact\" [src]=\"iconImageUrl || baseComponentPath + '/../assets/images/user.jpg'\" />             <span class=\"mdl-chip__text mdl-chip-search-people__text\">{{getDisplayUser(user)}}</span>         </button>     </li>     <div *ngIf=\"userList?.length === 0\" id=\"no-user-found\">         {{'PEOPLE.SEARCH.NO_USERS' | translate }}     </div> </ul>",
        styles: [":host {     width: 100%; }  .activiti-label {     font-weight: bolder; }  .material-icons.people-search__icon:hover {     color: rgb(255, 152, 0); }  .fix-element-user-list{     padding-top: 0px;     padding-right: 0px;     padding-bottom: 0px;     padding-left: 0px; }  .mdl-chip-search-people{     margin: auto;     min-width: 60%; }  .mdl-chip-search-people:hover{     background-color: #c1c1c1;     cursor: pointer;  }  .mdl-chip-search-people img{     margin-left: -30px; }  .mdl-chip-search-people__text{     padding-left: 10px; }"]
    }), __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService])], ActivitiPeopleSearch);
    exports.ActivitiPeopleSearch = ActivitiPeopleSearch;
});
$__System.registerDynamic("1c", ["2", "8", "b", "e", "10", "11", "12", "14", "13", "19", "1a"], true, function ($__require, exports, module) {
  /*!
   * @license
   * Copyright 2016 Alfresco Software, Ltd.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  "use strict";

  var global = this || self,
      GLOBAL = global;
  function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  __export($__require("2"));
  __export($__require("8"));
  __export($__require("b"));
  __export($__require("e"));
  __export($__require("10"));
  __export($__require("11"));
  __export($__require("12"));
  __export($__require("14"));
  __export($__require("13"));
  __export($__require("19"));
  __export($__require("1a"));
});
$__System.registerDynamic("18", [], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var Comment = function () {
        function Comment(id, message, created, createdBy) {
            this.id = id;
            this.message = message;
            this.created = created;
            this.createdBy = createdBy;
        }
        return Comment;
    }();
    exports.Comment = Comment;
});
$__System.registerDynamic("a", [], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var AppDefinitionRepresentationModel = function () {
        function AppDefinitionRepresentationModel(obj) {
            this.defaultAppId = obj && obj.defaultAppId || null;
            this.deploymentId = obj && obj.deploymentId || false;
            this.name = obj && obj.name || null;
            this.description = obj && obj.description || null;
            this.theme = obj && obj.theme || null;
            this.icon = obj && obj.icon || null;
            this.id = obj && obj.id;
            this.modelId = obj && obj.modelId;
            this.tenantId = obj && obj.tenantId;
        }
        return AppDefinitionRepresentationModel;
    }();
    exports.AppDefinitionRepresentationModel = AppDefinitionRepresentationModel;
    var FilterRepresentationModel = function () {
        function FilterRepresentationModel(obj) {
            this.appId = obj && obj.appId || null;
            this.name = obj && obj.name || null;
            this.recent = obj && obj.recent || false;
            this.icon = obj && obj.icon || null;
            this.filter = new FilterParamRepresentationModel(obj.filter);
            this.index = obj && obj.index;
        }
        FilterRepresentationModel.prototype.hasFilter = function () {
            return this.filter ? true : false;
        };
        return FilterRepresentationModel;
    }();
    exports.FilterRepresentationModel = FilterRepresentationModel;
    var FilterParamRepresentationModel = function () {
        function FilterParamRepresentationModel(obj) {
            this.processDefinitionId = obj && obj.processDefinitionId || null;
            this.processDefinitionKey = obj && obj.processDefinitionKey || null;
            this.name = obj && obj.name || null;
            this.state = obj && obj.state || null;
            this.sort = obj && obj.sort || null;
            this.assignment = obj && obj.assignment || null;
            this.dueAfter = obj && obj.dueAfter || null;
            this.dueBefore = obj && obj.dueBefore || null;
        }
        return FilterParamRepresentationModel;
    }();
    exports.FilterParamRepresentationModel = FilterParamRepresentationModel;
    var TaskQueryRequestRepresentationModel = function () {
        function TaskQueryRequestRepresentationModel(obj) {
            this.appDefinitionId = obj && obj.appDefinitionId || null;
            this.processInstanceId = obj && obj.processInstanceId || null;
            this.processDefinitionId = obj && obj.processDefinitionId || null;
            this.processDefinitionKey = obj && obj.processDefinitionKey || null;
            this.text = obj && obj.text || null;
            this.assignment = obj && obj.assignment || null;
            this.state = obj && obj.state || null;
            this.sort = obj && obj.sort || null;
            this.page = obj && obj.page || 0;
            this.size = obj && obj.size || 25;
            this.landingTaskId = obj && obj.landingTaskId || '';
        }
        return TaskQueryRequestRepresentationModel;
    }();
    exports.TaskQueryRequestRepresentationModel = TaskQueryRequestRepresentationModel;
});
$__System.registerDynamic('6', [], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var IconModel = function () {
        function IconModel() {
            this.initIconsMDL();
        }
        IconModel.prototype.mapGlyphiconToMaterialDesignIcons = function (icon) {
            return this.iconsMDL.get(icon) ? this.iconsMDL.get(icon) : IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON;
        };
        IconModel.prototype.initIconsMDL = function () {
            this.iconsMDL = new Map();
            this.iconsMDL.set('glyphicon-asterisk', 'ac_unit');
            this.iconsMDL.set('glyphicon-plus', 'add');
            this.iconsMDL.set('glyphicon-euro', 'euro_symbol');
            this.iconsMDL.set('glyphicon-cloud', 'cloud');
            this.iconsMDL.set('glyphicon-envelope', 'mail');
            this.iconsMDL.set('glyphicon-pencil', 'create');
            this.iconsMDL.set('glyphicon-glass', 'local_bar');
            this.iconsMDL.set('glyphicon-music', 'music_note');
            this.iconsMDL.set('glyphicon-search', 'search');
            this.iconsMDL.set('glyphicon-heart', 'favorite');
            this.iconsMDL.set('glyphicon-heart-empty', 'favorite_border');
            this.iconsMDL.set('glyphicon-star', 'star');
            this.iconsMDL.set('glyphicon-star-empty', 'star_border');
            this.iconsMDL.set('glyphicon-user', 'person');
            this.iconsMDL.set('glyphicon-film', 'movie_creation');
            this.iconsMDL.set('glyphicon-th-large', 'view_comfy');
            this.iconsMDL.set('glyphicon-th', 'view_compact');
            this.iconsMDL.set('glyphicon-th-list', 'list');
            this.iconsMDL.set('glyphicon-ok', 'done');
            this.iconsMDL.set('glyphicon-remove', 'cancel');
            this.iconsMDL.set('glyphicon-zoom-in', 'zoom_in');
            this.iconsMDL.set('glyphicon-zoom-out', 'zoom_out');
            this.iconsMDL.set('glyphicon-off', 'highlight_off');
            this.iconsMDL.set('glyphicon-signal', 'signal_cellular_4_bar');
            this.iconsMDL.set('glyphicon-cog', 'settings');
            this.iconsMDL.set('glyphicon-trash', 'delete');
            this.iconsMDL.set('glyphicon-home', 'home');
            this.iconsMDL.set('glyphicon-file', 'insert_drive_file');
            this.iconsMDL.set('glyphicon-time', 'access_time');
            this.iconsMDL.set('glyphicon-road', 'map');
            this.iconsMDL.set('glyphicon-download-alt', 'file_download');
            this.iconsMDL.set('glyphicon-download', 'file_download');
            this.iconsMDL.set('glyphicon-upload', 'file_upload');
            this.iconsMDL.set('glyphicon-inbox', 'inbox');
            this.iconsMDL.set('glyphicon-play-circle', 'play_circle_outline');
            this.iconsMDL.set('glyphicon-repeat', 'refresh');
            this.iconsMDL.set('glyphicon-refresh', 'sync');
            this.iconsMDL.set('glyphicon-list-alt', 'event_note');
            this.iconsMDL.set('glyphicon-lock', 'lock_outline');
            this.iconsMDL.set('glyphicon-flag', 'assistant_photo');
            this.iconsMDL.set('glyphicon-headphones', 'headset');
            this.iconsMDL.set('glyphicon-volume-up', 'volume_up');
            this.iconsMDL.set('glyphicon-tag', 'local_offer');
            this.iconsMDL.set('glyphicon-tags', 'local_offer');
            this.iconsMDL.set('glyphicon-book', 'library_books');
            this.iconsMDL.set('glyphicon-bookmark', 'collections_bookmark');
            this.iconsMDL.set('glyphicon-print', 'local_printshop');
            this.iconsMDL.set('glyphicon-camera', 'local_see');
            this.iconsMDL.set('glyphicon-list', 'view_list');
            this.iconsMDL.set('glyphicon-facetime-video', 'video_call');
            this.iconsMDL.set('glyphicon-picture', 'photo');
            this.iconsMDL.set('glyphicon-map-marker', 'add_location');
            this.iconsMDL.set('glyphicon-adjust', 'brightness_4');
            this.iconsMDL.set('glyphicon-tint', 'invert_colors');
            this.iconsMDL.set('glyphicon-edit', 'edit');
            this.iconsMDL.set('glyphicon-share', 'share');
            this.iconsMDL.set('glyphicon-check', 'assignment_turned_in');
            this.iconsMDL.set('glyphicon-move', 'open_with');
            this.iconsMDL.set('glyphicon-play', 'play_arrow');
            this.iconsMDL.set('glyphicon-eject', 'eject');
            this.iconsMDL.set('glyphicon-plus-sign', 'add_circle');
            this.iconsMDL.set('glyphicon-minus-sign', 'remove_circle');
            this.iconsMDL.set('glyphicon-remove-sign', 'cancel');
            this.iconsMDL.set('glyphicon-ok-sign', 'check_circle');
            this.iconsMDL.set('glyphicon-question-sign', 'help');
            this.iconsMDL.set('glyphicon-info-sign', 'info');
            this.iconsMDL.set('glyphicon-screenshot', 'flare');
            this.iconsMDL.set('glyphicon-remove-circle', 'cancel');
            this.iconsMDL.set('glyphicon-ok-circle', 'add_circle');
            this.iconsMDL.set('glyphicon-ban-circle', 'block');
            this.iconsMDL.set('glyphicon-share-alt', 'redo');
            this.iconsMDL.set('glyphicon-exclamation-sign', 'error');
            this.iconsMDL.set('glyphicon-gift', 'giftcard');
            this.iconsMDL.set('glyphicon-leaf', 'spa');
            this.iconsMDL.set('glyphicon-fire', 'whatshot');
            this.iconsMDL.set('glyphicon-eye-open', 'remove_red_eye');
            this.iconsMDL.set('glyphicon-eye-close', 'remove_red_eye');
            this.iconsMDL.set('glyphicon-warning-sign', 'warning');
            this.iconsMDL.set('glyphicon-plane', 'airplanemode_active');
            this.iconsMDL.set('glyphicon-calendar', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-random', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-comment', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-magnet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-retweet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-shopping-cart', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-folder-close', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-folder-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-hdd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-bullhorn', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-bell', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-certificate', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-thumbs-up', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-thumbs-down', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-hand-left', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-globe', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-wrench', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-tasks', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-filter', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-briefcase', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-dashboard', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-paperclip', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-link', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-phone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-pushpin', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-usd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-gbp', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-sort', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-flash', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-record', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-save', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-saved', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-send', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-floppy-disk', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-credit-card', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-cutlery', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-earphone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-phone-alt', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-tower', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-stats', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-cloud-download', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-cloud-upload', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-tree-conifer', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
            this.iconsMDL.set('glyphicon-tree-deciduous', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);
        };
        return IconModel;
    }();
    IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON = 'favorite_border';
    exports.IconModel = IconModel;
});
$__System.registerDynamic("15", [], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var User = function () {
        function User(obj) {
            this.id = obj && obj.id;
            this.email = obj && obj.email || null;
            this.firstName = obj && obj.firstName || null;
            this.lastName = obj && obj.lastName || null;
        }
        return User;
    }();
    exports.User = User;
});
$__System.registerDynamic("c", ["15"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var user_model_1 = $__require("15");
    var TaskDetailsModel = function () {
        function TaskDetailsModel(obj) {
            this.processDefinitionVersion = 0;
            this.id = obj && obj.id || null;
            this.name = obj && obj.name || null;
            this.priority = obj && obj.priority;
            this.assignee = obj.assignee ? new user_model_1.User(obj.assignee) : null;
            this.adhocTaskCanBeReassigned = obj && obj.adhocTaskCanBeReassigned;
            this.category = obj && obj.category || null;
            this.created = obj && obj.created || null;
            this.description = obj && obj.description || null;
            this.dueDate = obj && obj.dueDate || null;
            this.duration = obj && obj.duration || null;
            this.endDate = obj && obj.endDate || null;
            this.executionId = obj && obj.executionId || null;
            this.formKey = obj && obj.formKey || null;
            this.initiatorCanCompleteTask = obj && obj.initiatorCanCompleteTask || false;
            this.managerOfCandidateGroup = obj && obj.managerOfCandidateGroup || false;
            this.memberOfCandidateGroup = obj && obj.memberOfCandidateGroup || false;
            this.memberOfCandidateUsers = obj && obj.memberOfCandidateUsers || false;
            this.involvedPeople = obj && obj.involvedPeople;
            this.parentTaskId = obj && obj.parentTaskId || null;
            this.parentTaskName = obj && obj.parentTaskName || null;
            this.processDefinitionCategory = obj && obj.processDefinitionCategory || null;
            this.processDefinitionDeploymentId = obj && obj.processDefinitionDeploymentId || null;
            this.processDefinitionDescription = obj && obj.processDefinitionDescription || null;
            this.processDefinitionId = obj && obj.processDefinitionId || null;
            this.processDefinitionKey = obj && obj.processDefinitionKey || null;
            this.processDefinitionName = obj && obj.processDefinitionName || null;
            this.processDefinitionVersion = obj && obj.processDefinitionVersion || 0;
            this.processInstanceId = obj && obj.processInstanceId || null;
            this.processInstanceName = obj && obj.processInstanceName || null;
            this.processInstanceStartUserId = obj && obj.processInstanceStartUserId || null;
            this.taskDefinitionKey = obj && obj.taskDefinitionKey || null;
        }
        return TaskDetailsModel;
    }();
    exports.TaskDetailsModel = TaskDetailsModel;
});
$__System.registerDynamic("1d", [], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var TaskDetailsEvent = function () {
        function TaskDetailsEvent(value) {
            this._defaultPrevented = false;
            this._value = value;
        }
        Object.defineProperty(TaskDetailsEvent.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TaskDetailsEvent.prototype, "defaultPrevented", {
            get: function () {
                return this._defaultPrevented;
            },
            enumerable: true,
            configurable: true
        });
        TaskDetailsEvent.prototype.preventDefault = function () {
            this._defaultPrevented = true;
        };
        return TaskDetailsEvent;
    }();
    exports.TaskDetailsEvent = TaskDetailsEvent;
});
$__System.registerDynamic("1e", ["18", "a", "6", "15", "c", "1d"], true, function ($__require, exports, module) {
  /*!
   * @license
   * Copyright 2016 Alfresco Software, Ltd.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  "use strict";

  var global = this || self,
      GLOBAL = global;
  function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  __export($__require("18"));
  __export($__require("a"));
  __export($__require("6"));
  __export($__require("15"));
  __export($__require("c"));
  __export($__require("1d"));
});
$__System.registerDynamic("1", ["3", "4", "9", "16", "f", "5", "1c", "1e"], true, function ($__require, exports, module) {
    /*!
     * @license
     * Copyright 2016 Alfresco Software, Ltd.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    var core_1 = $__require("3");
    var ng2_alfresco_core_1 = $__require("4");
    var ng2_alfresco_datatable_1 = $__require("9");
    var ng2_activiti_form_1 = $__require("16");
    var activiti_people_service_1 = $__require("f");
    var activiti_tasklist_service_1 = $__require("5");
    var index_1 = $__require("1c");
    __export($__require("1c"));
    __export($__require("5"));
    __export($__require("1e"));
    exports.ACTIVITI_TASKLIST_DIRECTIVES = [index_1.NoTaskDetailsTemplateComponent, index_1.ActivitiApps, index_1.ActivitiFilters, index_1.ActivitiTaskList, index_1.ActivitiTaskDetails, index_1.ActivitiChecklist, index_1.ActivitiComments, index_1.ActivitiPeople, index_1.ActivitiTaskHeader, index_1.ActivitiStartTaskButton, index_1.ActivitiPeopleSearch];
    exports.ACTIVITI_TASKLIST_PROVIDERS = [activiti_tasklist_service_1.ActivitiTaskListService, activiti_people_service_1.ActivitiPeopleService];
    var ActivitiTaskListModule = ActivitiTaskListModule_1 = function () {
        function ActivitiTaskListModule() {}
        ActivitiTaskListModule.forRoot = function () {
            return {
                ngModule: ActivitiTaskListModule_1,
                providers: exports.ACTIVITI_TASKLIST_PROVIDERS.slice()
            };
        };
        return ActivitiTaskListModule;
    }();
    ActivitiTaskListModule = ActivitiTaskListModule_1 = __decorate([core_1.NgModule({
        imports: [ng2_alfresco_core_1.CoreModule, ng2_alfresco_datatable_1.DataTableModule, ng2_activiti_form_1.ActivitiFormModule],
        declarations: exports.ACTIVITI_TASKLIST_DIRECTIVES.slice(),
        providers: exports.ACTIVITI_TASKLIST_PROVIDERS.slice(),
        exports: exports.ACTIVITI_TASKLIST_DIRECTIVES.slice()
    })], ActivitiTaskListModule);
    exports.ActivitiTaskListModule = ActivitiTaskListModule;
    var ActivitiTaskListModule_1;
    
});
})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define(["@angular/core","@angular/forms","ng2-activiti-form","ng2-alfresco-core","ng2-alfresco-datatable","rxjs/Observable","rxjs/Rx"], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory(require("@angular/core"), require("@angular/forms"), require("ng2-activiti-form"), require("ng2-alfresco-core"), require("ng2-alfresco-datatable"), require("rxjs/Observable"), require("rxjs/Rx"));
  else
    throw new Error("Module must be loaded as AMD or CommonJS");
});
//# sourceMappingURL=ng2-activiti-tasklist.js.map