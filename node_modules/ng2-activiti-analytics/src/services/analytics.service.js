/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var report_model_1 = require("../models/report.model");
var chart_model_1 = require("../models/chart.model");
var AnalyticsService = (function () {
    function AnalyticsService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    AnalyticsService.prototype.getReportList = function () {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.getReportList())
            .map(function (res) {
            var reports = [];
            res.forEach(function (report) {
                var reportModel = new report_model_1.ReportParametersModel(report);
                reports.push(reportModel);
            });
            return reports;
        }).catch(function (err) { return _this.handleError(err); });
    };
    AnalyticsService.prototype.getReportParams = function (reportId) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.getReportParams(reportId))
            .map(function (res) {
            return new report_model_1.ReportParametersModel(res);
        }).catch(function (err) { return _this.handleError(err); });
    };
    AnalyticsService.prototype.getParamValuesByType = function (type, appId, reportId, processDefinitionId) {
        if (type === 'status') {
            return this.getProcessStatusValues();
        }
        else if (type === 'processDefinition') {
            if (appId === null || appId === undefined) {
                return this.getProcessDefinitionsValuesNoApp();
            }
            else {
                return this.getProcessDefinitionsValues(appId);
            }
        }
        else if (type === 'dateInterval') {
            return this.getDateIntervalValues();
        }
        else if (type === 'task' && reportId && processDefinitionId) {
            return this.getTasksByProcessDefinitionId(reportId, processDefinitionId);
        }
        else {
            return Rx_1.Observable.create(function (observer) {
                observer.next(null);
                observer.complete();
            });
        }
    };
    AnalyticsService.prototype.getProcessStatusValues = function () {
        var paramOptions = [];
        paramOptions.push(new report_model_1.ParameterValueModel({ id: 'All', name: 'All' }));
        paramOptions.push(new report_model_1.ParameterValueModel({ id: 'Active', name: 'Active' }));
        paramOptions.push(new report_model_1.ParameterValueModel({ id: 'Complete', name: 'Complete' }));
        return Rx_1.Observable.create(function (observer) {
            observer.next(paramOptions);
            observer.complete();
        });
    };
    AnalyticsService.prototype.getDateIntervalValues = function () {
        var paramOptions = [];
        paramOptions.push(new report_model_1.ParameterValueModel({ id: 'byHour', name: 'By hour' }));
        paramOptions.push(new report_model_1.ParameterValueModel({ id: 'byDay', name: 'By day' }));
        paramOptions.push(new report_model_1.ParameterValueModel({ id: 'byWeek', name: 'By week' }));
        paramOptions.push(new report_model_1.ParameterValueModel({ id: 'byMonth', name: 'By month' }));
        paramOptions.push(new report_model_1.ParameterValueModel({ id: 'byYear', name: 'By year' }));
        return Rx_1.Observable.create(function (observer) {
            observer.next(paramOptions);
            observer.complete();
        });
    };
    AnalyticsService.prototype.getMetricValues = function () {
        var paramOptions = [];
        paramOptions.push(new report_model_1.ParameterValueModel({ id: 'totalCount', name: 'Number of times a step is executed' }));
        paramOptions.push(new report_model_1.ParameterValueModel({ id: 'totalTime', name: 'Total time spent in a process step' }));
        paramOptions.push(new report_model_1.ParameterValueModel({ id: 'avgTime', name: 'Average time spent in a process step' }));
        return Rx_1.Observable.create(function (observer) {
            observer.next(paramOptions);
            observer.complete();
        });
    };
    AnalyticsService.prototype.getProcessDefinitionsValuesNoApp = function () {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.getProcessDefinitions())
            .map(function (res) {
            var paramOptions = [];
            res.forEach(function (opt) {
                paramOptions.push(new report_model_1.ParameterValueModel(opt));
            });
            return paramOptions;
        }).catch(function (err) { return _this.handleError(err); });
    };
    AnalyticsService.prototype.getProcessDefinitionsValues = function (appId) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.processDefinitionsApi.getProcessDefinitions(appId))
            .map(function (res) {
            var paramOptions = [];
            res.data.forEach(function (opt) {
                paramOptions.push(new report_model_1.ParameterValueModel(opt));
            });
            return paramOptions;
        }).catch(function (err) { return _this.handleError(err); });
    };
    AnalyticsService.prototype.getTasksByProcessDefinitionId = function (reportId, processDefinitionId) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.getTasksByProcessDefinitionId(reportId, processDefinitionId))
            .map(function (res) {
            var paramOptions = [];
            res.forEach(function (opt) {
                paramOptions.push(new report_model_1.ParameterValueModel({ id: opt, name: opt }));
            });
            return paramOptions;
        }).catch(function (err) { return _this.handleError(err); });
    };
    AnalyticsService.prototype.getReportsByParams = function (reportId, paramsQuery) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.getReportsByParams(reportId, paramsQuery))
            .map(function (res) {
            var elements = [];
            res.elements.forEach(function (chartData) {
                if (chartData.type === 'pieChart') {
                    elements.push(new chart_model_1.PieChart(chartData));
                }
                else if (chartData.type === 'table') {
                    elements.push(new chart_model_1.TableChart(chartData));
                }
                else if (chartData.type === 'processDefinitionHeatMap') {
                    elements.push(new chart_model_1.HeatMapChart(chartData));
                }
                else if (chartData.type === 'masterDetailTable') {
                    elements.push(new chart_model_1.DetailsTableChart(chartData));
                }
                else if (chartData.type === 'barChart') {
                    elements.push(new chart_model_1.BarChart(chartData));
                }
                else if (chartData.type === 'multiBarChart') {
                    elements.push(new chart_model_1.MultiBarChart(chartData));
                }
            });
            return elements;
        }).catch(function (err) { return _this.handleError(err); });
    };
    AnalyticsService.prototype.createDefaultReports = function () {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.createDefaultReports())
            .map(this.toJson)
            .catch(function (err) { return _this.handleError(err); });
    };
    AnalyticsService.prototype.updateReport = function (reportId, name) {
        var _this = this;
        return Rx_1.Observable.fromPromise(this.apiService.getInstance().activiti.reportApi.updateReport(reportId, name))
            .map(function (res) {
            _this.logService.info('upload');
        }).catch(function (err) { return _this.handleError(err); });
    };
    AnalyticsService.prototype.handleError = function (error) {
        this.logService.error(error);
        return Rx_1.Observable.throw(error.json().error || 'Server error');
    };
    AnalyticsService.prototype.toJson = function (res) {
        return res || {};
    };
    return AnalyticsService;
}());
AnalyticsService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService,
        ng2_alfresco_core_1.LogService])
], AnalyticsService);
exports.AnalyticsService = AnalyticsService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2FuYWx5dGljcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7Ozs7Ozs7Ozs7QUFFSCxzQ0FBMkM7QUFDM0MsOEJBQXFDO0FBRXJDLHVEQUFtRTtBQUNuRSx1REFBb0Y7QUFDcEYscURBQThIO0FBRzlILElBQWEsZ0JBQWdCO0lBRXpCLDBCQUFvQixVQUE4QixFQUM5QixVQUFzQjtRQUR0QixlQUFVLEdBQVYsVUFBVSxDQUFvQjtRQUM5QixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQzFDLENBQUM7SUFNRCx3Q0FBYSxHQUFiO1FBQUEsaUJBVUM7UUFURyxNQUFNLENBQUMsZUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDMUYsR0FBRyxDQUFDLFVBQUMsR0FBUTtZQUNWLElBQUksT0FBTyxHQUE0QixFQUFFLENBQUM7WUFDMUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFDLE1BQTZCO2dCQUN0QyxJQUFJLFdBQVcsR0FBRyxJQUFJLG9DQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNwRCxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzlCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELDBDQUFlLEdBQWYsVUFBZ0IsUUFBZ0I7UUFBaEMsaUJBS0M7UUFKRyxNQUFNLENBQUMsZUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENB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QWU7UUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLGVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQsaUNBQU0sR0FBTixVQUFPLEdBQVE7UUFDWCxNQUFNLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBQ0wsdUJBQUM7QUFBRCxDQXpLQSxBQXlLQyxJQUFBO0FBektZLGdCQUFnQjtJQUQ1QixpQkFBVSxFQUFFO3FDQUd1QixzQ0FBa0I7UUFDbEIsOEJBQVU7R0FIakMsZ0JBQWdCLENBeUs1QjtBQXpLWSw0Q0FBZ0IiLCJmaWxlIjoic2VydmljZXMvYW5hbHl0aWNzLnNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9SeCc7XG5pbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnbmcyLWFsZnJlc2NvLWNvcmUnO1xuaW1wb3J0IHsgUmVwb3J0UGFyYW1ldGVyc01vZGVsLCBQYXJhbWV0ZXJWYWx1ZU1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3JlcG9ydC5tb2RlbCc7XG5pbXBvcnQgeyBDaGFydCwgUGllQ2hhcnQsIFRhYmxlQ2hhcnQsIEJhckNoYXJ0LCBIZWF0TWFwQ2hhcnQsIE11bHRpQmFyQ2hhcnQsIERldGFpbHNUYWJsZUNoYXJ0IH0gZnJvbSAnLi4vbW9kZWxzL2NoYXJ0Lm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFuYWx5dGljc1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhcGlTZXJ2aWNlOiBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0cml2ZSBhbGwgdGhlIERlcGxveWVkIGFwcFxuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59XG4gICAgICovXG4gICAgZ2V0UmVwb3J0TGlzdCgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5yZXBvcnRBcGkuZ2V0UmVwb3J0TGlzdCgpKVxuICAgICAgICAgICAgLm1hcCgocmVzOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcmVwb3J0czogUmVwb3J0UGFyYW1ldGVyc01vZGVsW10gPSBbXTtcbiAgICAgICAgICAgICAgICByZXMuZm9yRWFjaCgocmVwb3J0OiBSZXBvcnRQYXJhbWV0ZXJzTW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlcG9ydE1vZGVsID0gbmV3IFJlcG9ydFBhcmFtZXRlcnNNb2RlbChyZXBvcnQpO1xuICAgICAgICAgICAgICAgICAgICByZXBvcnRzLnB1c2gocmVwb3J0TW9kZWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXBvcnRzO1xuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSk7XG4gICAgfVxuXG4gICAgZ2V0UmVwb3J0UGFyYW1zKHJlcG9ydElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5yZXBvcnRBcGkuZ2V0UmVwb3J0UGFyYW1zKHJlcG9ydElkKSlcbiAgICAgICAgICAgIC5tYXAoKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXBvcnRQYXJhbWV0ZXJzTW9kZWwocmVzKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpO1xuICAgIH1cblxuICAgIGdldFBhcmFtVmFsdWVzQnlUeXBlKHR5cGU6IHN0cmluZywgYXBwSWQ6IHN0cmluZywgcmVwb3J0SWQ/OiBzdHJpbmcsIHByb2Nlc3NEZWZpbml0aW9uSWQ/OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdGF0dXMnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9jZXNzU3RhdHVzVmFsdWVzKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3Byb2Nlc3NEZWZpbml0aW9uJykge1xuICAgICAgICAgICAgaWYgKGFwcElkID09PSBudWxsIHx8IGFwcElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9jZXNzRGVmaW5pdGlvbnNWYWx1ZXNOb0FwcCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9jZXNzRGVmaW5pdGlvbnNWYWx1ZXMoYXBwSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdkYXRlSW50ZXJ2YWwnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRlSW50ZXJ2YWxWYWx1ZXMoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAndGFzaycgJiYgcmVwb3J0SWQgJiYgcHJvY2Vzc0RlZmluaXRpb25JZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGFza3NCeVByb2Nlc3NEZWZpbml0aW9uSWQocmVwb3J0SWQsIHByb2Nlc3NEZWZpbml0aW9uSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKG9ic2VydmVyID0+IHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KG51bGwpO1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFByb2Nlc3NTdGF0dXNWYWx1ZXMoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgbGV0IHBhcmFtT3B0aW9uczogUGFyYW1ldGVyVmFsdWVNb2RlbFtdID0gW107XG5cbiAgICAgICAgcGFyYW1PcHRpb25zLnB1c2gobmV3IFBhcmFtZXRlclZhbHVlTW9kZWwoeyBpZDogJ0FsbCcsIG5hbWU6ICdBbGwnIH0pKTtcbiAgICAgICAgcGFyYW1PcHRpb25zLnB1c2gobmV3IFBhcmFtZXRlclZhbHVlTW9kZWwoeyBpZDogJ0FjdGl2ZScsIG5hbWU6ICdBY3RpdmUnIH0pKTtcbiAgICAgICAgcGFyYW1PcHRpb25zLnB1c2gobmV3IFBhcmFtZXRlclZhbHVlTW9kZWwoeyBpZDogJ0NvbXBsZXRlJywgbmFtZTogJ0NvbXBsZXRlJyB9KSk7XG5cbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKG9ic2VydmVyID0+IHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQocGFyYW1PcHRpb25zKTtcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldERhdGVJbnRlcnZhbFZhbHVlcygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBsZXQgcGFyYW1PcHRpb25zOiBQYXJhbWV0ZXJWYWx1ZU1vZGVsW10gPSBbXTtcblxuICAgICAgICBwYXJhbU9wdGlvbnMucHVzaChuZXcgUGFyYW1ldGVyVmFsdWVNb2RlbCh7IGlkOiAnYnlIb3VyJywgbmFtZTogJ0J5IGhvdXInIH0pKTtcbiAgICAgICAgcGFyYW1PcHRpb25zLnB1c2gobmV3IFBhcmFtZXRlclZhbHVlTW9kZWwoeyBpZDogJ2J5RGF5JywgbmFtZTogJ0J5IGRheScgfSkpO1xuICAgICAgICBwYXJhbU9wdGlvbnMucHVzaChuZXcgUGFyYW1ldGVyVmFsdWVNb2RlbCh7IGlkOiAnYnlXZWVrJywgbmFtZTogJ0J5IHdlZWsnIH0pKTtcbiAgICAgICAgcGFyYW1PcHRpb25zLnB1c2gobmV3IFBhcmFtZXRlclZhbHVlTW9kZWwoeyBpZDogJ2J5TW9udGgnLCBuYW1lOiAnQnkgbW9udGgnIH0pKTtcbiAgICAgICAgcGFyYW1PcHRpb25zLnB1c2gobmV3IFBhcmFtZXRlclZhbHVlTW9kZWwoeyBpZDogJ2J5WWVhcicsIG5hbWU6ICdCeSB5ZWFyJyB9KSk7XG5cbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKG9ic2VydmVyID0+IHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQocGFyYW1PcHRpb25zKTtcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldE1ldHJpY1ZhbHVlcygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBsZXQgcGFyYW1PcHRpb25zOiBQYXJhbWV0ZXJWYWx1ZU1vZGVsW10gPSBbXTtcblxuICAgICAgICBwYXJhbU9wdGlvbnMucHVzaChuZXcgUGFyYW1ldGVyVmFsdWVNb2RlbCh7IGlkOiAndG90YWxDb3VudCcsIG5hbWU6ICdOdW1iZXIgb2YgdGltZXMgYSBzdGVwIGlzIGV4ZWN1dGVkJyB9KSk7XG4gICAgICAgIHBhcmFtT3B0aW9ucy5wdXNoKG5ldyBQYXJhbWV0ZXJWYWx1ZU1vZGVsKHsgaWQ6ICd0b3RhbFRpbWUnLCBuYW1lOiAnVG90YWwgdGltZSBzcGVudCBpbiBhIHByb2Nlc3Mgc3RlcCcgfSkpO1xuICAgICAgICBwYXJhbU9wdGlvbnMucHVzaChuZXcgUGFyYW1ldGVyVmFsdWVNb2RlbCh7IGlkOiAnYXZnVGltZScsIG5hbWU6ICdBdmVyYWdlIHRpbWUgc3BlbnQgaW4gYSBwcm9jZXNzIHN0ZXAnIH0pKTtcblxuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChwYXJhbU9wdGlvbnMpO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0UHJvY2Vzc0RlZmluaXRpb25zVmFsdWVzTm9BcHAoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuZnJvbVByb21pc2UodGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkucmVwb3J0QXBpLmdldFByb2Nlc3NEZWZpbml0aW9ucygpKVxuICAgICAgICAgICAgLm1hcCgocmVzOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1PcHRpb25zOiBQYXJhbWV0ZXJWYWx1ZU1vZGVsW10gPSBbXTtcbiAgICAgICAgICAgICAgICByZXMuZm9yRWFjaCgob3B0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtT3B0aW9ucy5wdXNoKG5ldyBQYXJhbWV0ZXJWYWx1ZU1vZGVsKG9wdCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbU9wdGlvbnM7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKTtcbiAgICB9XG5cbiAgICBnZXRQcm9jZXNzRGVmaW5pdGlvbnNWYWx1ZXMoYXBwSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmZyb21Qcm9taXNlKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnByb2Nlc3NEZWZpbml0aW9uc0FwaS5nZXRQcm9jZXNzRGVmaW5pdGlvbnMoYXBwSWQpKVxuICAgICAgICAgICAgLm1hcCgocmVzOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1PcHRpb25zOiBQYXJhbWV0ZXJWYWx1ZU1vZGVsW10gPSBbXTtcbiAgICAgICAgICAgICAgICByZXMuZGF0YS5mb3JFYWNoKChvcHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1PcHRpb25zLnB1c2gobmV3IFBhcmFtZXRlclZhbHVlTW9kZWwob3B0KSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtT3B0aW9ucztcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpO1xuICAgIH1cblxuICAgIGdldFRhc2tzQnlQcm9jZXNzRGVmaW5pdGlvbklkKHJlcG9ydElkOiBzdHJpbmcsIHByb2Nlc3NEZWZpbml0aW9uSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmZyb21Qcm9taXNlKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnJlcG9ydEFwaS5nZXRUYXNrc0J5UHJvY2Vzc0RlZmluaXRpb25JZChyZXBvcnRJZCwgcHJvY2Vzc0RlZmluaXRpb25JZCkpXG4gICAgICAgICAgICAubWFwKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBwYXJhbU9wdGlvbnM6IFBhcmFtZXRlclZhbHVlTW9kZWxbXSA9IFtdO1xuICAgICAgICAgICAgICAgIHJlcy5mb3JFYWNoKChvcHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1PcHRpb25zLnB1c2gobmV3IFBhcmFtZXRlclZhbHVlTW9kZWwoeyBpZDogb3B0LCBuYW1lOiBvcHQgfSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbU9wdGlvbnM7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnIpKTtcbiAgICB9XG5cbiAgICBnZXRSZXBvcnRzQnlQYXJhbXMocmVwb3J0SWQ6IG51bWJlciwgcGFyYW1zUXVlcnk6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLmZyb21Qcm9taXNlKHRoaXMuYXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnJlcG9ydEFwaS5nZXRSZXBvcnRzQnlQYXJhbXMocmVwb3J0SWQsIHBhcmFtc1F1ZXJ5KSlcbiAgICAgICAgICAgIC5tYXAoKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGVsZW1lbnRzOiBDaGFydFtdID0gW107XG4gICAgICAgICAgICAgICAgcmVzLmVsZW1lbnRzLmZvckVhY2goKGNoYXJ0RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhcnREYXRhLnR5cGUgPT09ICdwaWVDaGFydCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2gobmV3IFBpZUNoYXJ0KGNoYXJ0RGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJ0RGF0YS50eXBlID09PSAndGFibGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKG5ldyBUYWJsZUNoYXJ0KGNoYXJ0RGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJ0RGF0YS50eXBlID09PSAncHJvY2Vzc0RlZmluaXRpb25IZWF0TWFwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChuZXcgSGVhdE1hcENoYXJ0KGNoYXJ0RGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJ0RGF0YS50eXBlID09PSAnbWFzdGVyRGV0YWlsVGFibGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKG5ldyBEZXRhaWxzVGFibGVDaGFydChjaGFydERhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFydERhdGEudHlwZSA9PT0gJ2JhckNoYXJ0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChuZXcgQmFyQ2hhcnQoY2hhcnREYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhcnREYXRhLnR5cGUgPT09ICdtdWx0aUJhckNoYXJ0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaChuZXcgTXVsdGlCYXJDaGFydChjaGFydERhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlRGVmYXVsdFJlcG9ydHMoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUuZnJvbVByb21pc2UodGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkucmVwb3J0QXBpLmNyZWF0ZURlZmF1bHRSZXBvcnRzKCkpXG4gICAgICAgICAgICAubWFwKHRoaXMudG9Kc29uKVxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB0aGlzLmhhbmRsZUVycm9yKGVycikpO1xuICAgIH1cblxuICAgIHVwZGF0ZVJlcG9ydChyZXBvcnRJZDogbnVtYmVyLCBuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZSh0aGlzLmFwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5yZXBvcnRBcGkudXBkYXRlUmVwb3J0KHJlcG9ydElkLCBuYW1lKSlcbiAgICAgICAgICAgIC5tYXAoKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmluZm8oJ3VwbG9hZCcpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogUmVzcG9uc2UpIHtcbiAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IuanNvbigpLmVycm9yIHx8ICdTZXJ2ZXIgZXJyb3InKTtcbiAgICB9XG5cbiAgICB0b0pzb24ocmVzOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIHJlcyB8fCB7fTtcbiAgICB9XG59XG4iXX0=
