/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var componentHandler;
var WidgetComponent = (function () {
    function WidgetComponent() {
        this.fieldChanged = new core_1.EventEmitter();
    }
    WidgetComponent.prototype.ngOnChanges = function (changes) {
        var field = changes['field'];
        if (field && field.currentValue) {
            this.fieldChanged.emit(field.currentValue.value);
            return;
        }
    };
    WidgetComponent.prototype.hasField = function () {
        return this.field ? true : false;
    };
    WidgetComponent.prototype.hasValue = function () {
        return this.field &&
            this.field.value !== null &&
            this.field.value !== undefined;
    };
    WidgetComponent.prototype.changeValue = function (field) {
        this.fieldChanged.emit(field);
    };
    WidgetComponent.prototype.ngAfterViewInit = function () {
        this.setupMaterialComponents(componentHandler);
    };
    WidgetComponent.prototype.setupMaterialComponents = function (handler) {
        if (handler) {
            handler.upgradeAllRegistered();
            return true;
        }
        return false;
    };
    return WidgetComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], WidgetComponent.prototype, "field", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], WidgetComponent.prototype, "fieldChanged", void 0);
exports.WidgetComponent = WidgetComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvd2lkZ2V0cy93aWRnZXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7Ozs7Ozs7Ozs7QUFFSCxzQ0FBcUc7QUFFckcsSUFBSSxnQkFBcUIsQ0FBQztBQUsxQjtJQUFBO1FBTUksaUJBQVksR0FBc0IsSUFBSSxtQkFBWSxFQUFPLENBQUM7SUFxQzlELENBQUM7SUFuQ0cscUNBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQzlCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUM7UUFDWCxDQUFDO0lBQ0wsQ0FBQztJQUVELGtDQUFRLEdBQVI7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxrQ0FBUSxHQUFSO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssSUFBSTtZQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7SUFDdkMsQ0FBQztJQUVELHFDQUFXLEdBQVgsVUFBWSxLQUFVO1FBQ2xCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCx5Q0FBZSxHQUFmO1FBQ0ksSUFBSSxDQUFDLHVCQUF1QixDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELGlEQUF1QixHQUF2QixVQUF3QixPQUFhO1FBRWpDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDVixPQUFPLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztZQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFTCxzQkFBQztBQUFELENBM0NBLEFBMkNDLElBQUE7QUF4Q0c7SUFEQyxZQUFLLEVBQUU7OzhDQUNHO0FBR1g7SUFEQyxhQUFNLEVBQUU7OEJBQ0ssbUJBQVk7cURBQWdDO0FBTmpELDBDQUFlIiwiZmlsZSI6ImNvbXBvbmVudHMvd2lkZ2V0cy93aWRnZXQuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5wdXQsIEFmdGVyVmlld0luaXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxubGV0IGNvbXBvbmVudEhhbmRsZXI6IGFueTtcblxuLyoqXG4gKiBCYXNlIHdpZGdldCBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBXaWRnZXRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xuXG4gICAgQElucHV0KClcbiAgICBmaWVsZDogYW55O1xuXG4gICAgQE91dHB1dCgpXG4gICAgZmllbGRDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBsZXQgZmllbGQgPSBjaGFuZ2VzWydmaWVsZCddO1xuICAgICAgICBpZiAoZmllbGQgJiYgZmllbGQuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmZpZWxkQ2hhbmdlZC5lbWl0KGZpZWxkLmN1cnJlbnRWYWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNGaWVsZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaGFzVmFsdWUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkICYmXG4gICAgICAgICAgICB0aGlzLmZpZWxkLnZhbHVlICE9PSBudWxsICYmXG4gICAgICAgICAgICB0aGlzLmZpZWxkLnZhbHVlICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY2hhbmdlVmFsdWUoZmllbGQ6IGFueSkge1xuICAgICAgICB0aGlzLmZpZWxkQ2hhbmdlZC5lbWl0KGZpZWxkKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMuc2V0dXBNYXRlcmlhbENvbXBvbmVudHMoY29tcG9uZW50SGFuZGxlcik7XG4gICAgfVxuXG4gICAgc2V0dXBNYXRlcmlhbENvbXBvbmVudHMoaGFuZGxlcj86IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICAvLyB3b3JrYXJvdW5kIGZvciBNREwgaXNzdWVzIHdpdGggZHluYW1pYyBjb21wb25lbnRzXG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICBoYW5kbGVyLnVwZ3JhZGVBbGxSZWdpc3RlcmVkKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG59XG4iXX0=
