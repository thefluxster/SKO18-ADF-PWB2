/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var widget_component_1 = require("./../widget.component");
var moment = require("moment");
function dateCheck(c) {
    var startDate = moment(c.get('startDate').value);
    var endDate = moment(c.get('endDate').value);
    var result = startDate.isAfter(endDate);
    return result ? { 'greaterThan': true } : null;
}
var DateRangeWidget = DateRangeWidget_1 = (function (_super) {
    __extends(DateRangeWidget, _super);
    function DateRangeWidget(elementRef, formBuilder) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.formBuilder = formBuilder;
        _this.dateRangeChanged = new core_1.EventEmitter();
        _this.debug = false;
        return _this;
    }
    DateRangeWidget.prototype.ngOnInit = function () {
        this.initForm();
        this.addAccessibilityLabelToDatePicker();
    };
    DateRangeWidget.prototype.initForm = function () {
        var _this = this;
        var startDateForm = this.field.value ? this.field.value.startDate : '';
        var startDate = this.convertToMomentDate(startDateForm);
        var endDateForm = this.field.value ? this.field.value.endDate : '';
        var endDate = this.convertToMomentDate(endDateForm);
        var startDateControl = new forms_1.FormControl(startDate);
        startDateControl.setValidators(forms_1.Validators.required);
        this.dateRange.addControl('startDate', startDateControl);
        var endDateControl = new forms_1.FormControl(endDate);
        endDateControl.setValidators(forms_1.Validators.required);
        this.dateRange.addControl('endDate', endDateControl);
        this.dateRange.setValidators(dateCheck);
        this.dateRange.valueChanges.subscribe(function (data) { return _this.onGroupValueChanged(data); });
        this.initSartDateDialog(startDate);
        this.initEndDateDialog(endDate);
    };
    DateRangeWidget.prototype.initSartDateDialog = function (date) {
        var _this = this;
        var settings = {
            type: 'date',
            past: moment().subtract(100, 'years'),
            future: moment().add(100, 'years')
        };
        settings.init = moment(date, DateRangeWidget_1.FORMAT_DATE_ACTIVITI);
        this.dialogStart = new mdDateTimePicker.default(settings);
        this.dialogStart.trigger = this.startElement.nativeElement;
        var startDateButton = document.getElementById('startDateButton');
        startDateButton.addEventListener('click', function () {
            _this.dialogStart.toggle();
        });
    };
    DateRangeWidget.prototype.addAccessibilityLabelToDatePicker = function () {
        var left = document.querySelector('#mddtp-date__left');
        if (left) {
            left.appendChild(this.createCustomElement('date left'));
        }
        var right = document.querySelector('#mddtp-date__right');
        if (right) {
            right.appendChild(this.createCustomElement('date right'));
        }
        var cancel = document.querySelector('#mddtp-date__cancel');
        if (cancel) {
            cancel.appendChild(this.createCustomElement('date cancel'));
        }
        var ok = document.querySelector('#mddtp-date__ok');
        if (ok) {
            ok.appendChild(this.createCustomElement('date ok'));
        }
    };
    DateRangeWidget.prototype.createCustomElement = function (text) {
        var span = document.createElement('span');
        span.style.visibility = 'hidden';
        var rightSpanText = document.createTextNode(text);
        span.appendChild(rightSpanText);
        return span;
    };
    DateRangeWidget.prototype.initEndDateDialog = function (date) {
        var _this = this;
        var settings = {
            type: 'date',
            past: moment().subtract(100, 'years'),
            future: moment().add(100, 'years')
        };
        settings.init = moment(date, DateRangeWidget_1.FORMAT_DATE_ACTIVITI);
        this.dialogEnd = new mdDateTimePicker.default(settings);
        this.dialogEnd.trigger = this.endElement.nativeElement;
        var endDateButton = document.getElementById('endDateButton');
        endDateButton.addEventListener('click', function () {
            _this.dialogEnd.toggle();
        });
    };
    DateRangeWidget.prototype.onOkStart = function (inputEl) {
        var date = this.dialogStart.time.format(DateRangeWidget_1.FORMAT_DATE_ACTIVITI);
        this.dateRange.patchValue({
            startDate: date
        });
        var materialElemen = inputEl.parentElement;
        if (materialElemen) {
            materialElemen.MaterialTextfield.change(date);
        }
    };
    DateRangeWidget.prototype.onOkEnd = function (inputEl) {
        var date = this.dialogEnd.time.format(DateRangeWidget_1.FORMAT_DATE_ACTIVITI);
        this.dateRange.patchValue({
            endDate: date
        });
        var materialElemen = inputEl.parentElement;
        if (materialElemen) {
            materialElemen.MaterialTextfield.change(date);
        }
    };
    DateRangeWidget.prototype.onGroupValueChanged = function (data) {
        if (this.dateRange.valid) {
            var dateStart = this.convertToMomentDateWithTime(this.dateRange.controls['startDate'].value);
            var endStart = this.convertToMomentDateWithTime(this.dateRange.controls['endDate'].value);
            this.dateRangeChanged.emit({ startDate: dateStart, endDate: endStart });
        }
    };
    DateRangeWidget.prototype.convertToMomentDateWithTime = function (date) {
        return moment(date, DateRangeWidget_1.FORMAT_DATE_ACTIVITI, true).format(DateRangeWidget_1.FORMAT_DATE_ACTIVITI) + 'T00:00:00.000Z';
    };
    DateRangeWidget.prototype.convertToMomentDate = function (date) {
        if (date) {
            return moment(date).format(DateRangeWidget_1.FORMAT_DATE_ACTIVITI);
        }
        else {
            return moment().format(DateRangeWidget_1.FORMAT_DATE_ACTIVITI);
        }
    };
    DateRangeWidget.prototype.ngOnDestroy = function () {
    };
    return DateRangeWidget;
}(widget_component_1.WidgetComponent));
DateRangeWidget.FORMAT_DATE_ACTIVITI = 'YYYY-MM-DD';
__decorate([
    core_1.ViewChild('startElement'),
    __metadata("design:type", Object)
], DateRangeWidget.prototype, "startElement", void 0);
__decorate([
    core_1.ViewChild('endElement'),
    __metadata("design:type", Object)
], DateRangeWidget.prototype, "endElement", void 0);
__decorate([
    core_1.Input('group'),
    __metadata("design:type", forms_1.FormGroup)
], DateRangeWidget.prototype, "dateRange", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DateRangeWidget.prototype, "field", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DateRangeWidget.prototype, "dateRangeChanged", void 0);
DateRangeWidget = DateRangeWidget_1 = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'date-range-widget',
        template: "<label>{{field.nameKey | translate}}</label><br> <div [formGroup]=\"dateRange\">     <small *ngIf=\"dateRange && dateRange.errors && dateRange.errors.greaterThan\" [hidden]=\"!dateRange.errors\" class=\"text-danger\">         Start date must be less than End date     </small>     <div class=\"mdl-grid\">         <div class=\"mdl-cell mdl-cell--4-col\">             <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">                 <input class=\"mdl-textfield__input\"                        formControlName=\"startDate\"                        type=\"text\"                        (onOk)=\"onOkStart(startElement)\"                        id=\"startDateInput\" #startElement>                 <label class=\"mdl-textfield__label\" for=\"startDateInput\">Start Date</label>                 <small [hidden]=\"dateRange && dateRange.controls.startDate && dateRange.controls.startDate.valid\" class=\"text-danger\">                     Start is required                 </small>             </div>         </div>         <div class=\"mdl-cell mdl-cell--2-col\">             <button id=\"startDateButton\" class=\"mdl-button mdl-js-button mdl-button--fab date-picker-mdl\">                 <i class=\"material-icons\">date_range</i>             </button>         </div>         <div class=\"mdl-cell mdl-cell--4-col\">             <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">                 <input class=\"mdl-textfield__input\"                        formControlName=\"endDate\"                        type=\"text\"                        (onOk)=\"onOkEnd(endElement)\"                        id=\"endDateInput\" #endElement>                 <label class=\"mdl-textfield__label\" for=\"endDateInput\">End Date</label>             </div>         </div>         <div class=\"mdl-cell mdl-cell--2-col\">             <button id=\"endDateButton\" class=\"mdl-button mdl-js-button mdl-button--fab date-picker-mdl\">                 <i class=\"material-icons\">date_range</i>             </button>         </div>     </div> </div> <div *ngIf=\"debug\">     <p>FormGroup : {{dateRange && dateRange.value | json }}</p>     <p>FormGroup valid : {{dateRange && dateRange.valid }}</p>     <p>FormGroup status : {{dateRange && dateRange.errors | json }}</p>     <p>FormGroup start status : {{dateRange && dateRange.controls.startDate && dateRange.controls.startDate.errors | json }}</p>     <p>FormGroup end status: {{dateRange && dateRange.controls.endDate.errors | json }}</p> </div>",
        styles: [".date-picker-mdl {     margin-left: 20px; }"]
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        forms_1.FormBuilder])
], DateRangeWidget);
exports.DateRangeWidget = DateRangeWidget;
var DateRangeWidget_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
