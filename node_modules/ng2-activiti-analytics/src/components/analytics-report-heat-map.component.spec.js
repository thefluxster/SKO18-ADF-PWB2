/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_activiti_diagrams_1 = require("ng2-activiti-diagrams");
var analytics_report_heat_map_component_1 = require("../components/analytics-report-heat-map.component");
var index_1 = require("../components/widgets/index");
var analytics_service_1 = require("../services/analytics.service");
describe('AnalyticsReportHeatMapComponent', function () {
    var componentHandler;
    var component;
    var fixture;
    var debug;
    var element;
    var totalCountPerc = { 'sid-fake-id': 0, 'fake-start-event': 100 };
    var totalTimePerc = { 'sid-fake-id': 10, 'fake-start-event': 30 };
    var avgTimePercentages = { 'sid-fake-id': 5, 'fake-start-event': 50 };
    var totalCountValues = { 'sid-fake-id': 2, 'fake-start-event': 3 };
    var totalTimeValues = { 'sid-fake-id': 1, 'fake-start-event': 4 };
    var avgTimeValues = { 'sid-fake-id': 4, 'fake-start-event': 5 };
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot(),
                ng2_activiti_diagrams_1.DiagramsModule.forRoot()
            ],
            declarations: [
                analytics_report_heat_map_component_1.AnalyticsReportHeatMapComponent
            ].concat(index_1.WIDGET_DIRECTIVES),
            providers: [
                analytics_service_1.AnalyticsService
            ]
        }).compileComponents();
        var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
        spyOn(translateService, 'addTranslationFolder').and.stub();
        spyOn(translateService, 'get').and.callFake(function (key) { return Rx_1.Observable.of(key); });
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(analytics_report_heat_map_component_1.AnalyticsReportHeatMapComponent);
        component = fixture.componentInstance;
        debug = fixture.debugElement;
        element = fixture.nativeElement;
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered'
        ]);
        window['componentHandler'] = componentHandler;
        component.report = {
            totalCountsPercentages: totalCountPerc,
            totalCountValues: totalCountValues,
            totalTimePercentages: totalTimePerc,
            totalTimeValues: totalTimeValues,
            avgTimeValues: avgTimeValues,
            avgTimePercentages: avgTimePercentages
        };
    });
    describe('Rendering tests: Heat Map', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });
        afterEach(function () {
            jasmine.Ajax.uninstall();
        });
        it('should render the dropdown with the metric options', testing_1.async(function () {
            component.report = { totalCountsPercentages: { 'sid-fake-id': 10, 'fake-start-event': 30 } };
            component.onSuccess.subscribe(function () {
                fixture.whenStable().then(function () {
                    var dropDown = element.querySelector('#select-metrics');
                    expect(dropDown).toBeDefined();
                    expect(dropDown.length).toEqual(3);
                    expect(dropDown[0].innerHTML).toEqual('Number of times a step is executed');
                    expect(dropDown[1].innerHTML).toEqual('Total time spent in a process step');
                    expect(dropDown[2].innerHTML).toEqual('Average time spent in a process step');
                });
            });
            fixture.detectChanges();
        }));
        it('should return false when no metrics are defined in the report', testing_1.async(function () {
            component.report = {};
            expect(component.hasMetric()).toBeFalsy();
        }));
        it('should return true when the metrics are defined in the report', testing_1.async(function () {
            expect(component.hasMetric()).toBeTruthy();
        }));
        it('should change the currentmetric width totalCount', testing_1.async(function () {
            var field = { value: 'totalCount' };
            component.onMetricChanges(field);
            expect(component.currentMetric).toEqual(totalCountValues);
            expect(component.currentMetricColors).toEqual(totalCountPerc);
        }));
        it('should change the currentmetric width totalTime', testing_1.async(function () {
            var field = { value: 'totalTime' };
            component.onMetricChanges(field);
            expect(component.currentMetric).toEqual(totalTimeValues);
            expect(component.currentMetricColors).toEqual(totalTimePerc);
        }));
        it('should change the currentmetric width avgTime', testing_1.async(function () {
            var field = { value: 'avgTime' };
            component.onMetricChanges(field);
            expect(component.currentMetric).toEqual(avgTimeValues);
            expect(component.currentMetricColors).toEqual(avgTimePercentages);
        }));
    });
});
//# sourceMappingURL=analytics-report-heat-map.component.spec.js.map