/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var analytics_report_list_component_1 = require("../components/analytics-report-list.component");
var analytics_service_1 = require("../services/analytics.service");
describe('AnalyticsReportListComponent', function () {
    var reportList = [
        { 'id': 2002, 'name': 'Fake Test Process definition heat map' },
        { 'id': 2003, 'name': 'Fake Test Process definition overview' },
        { 'id': 2004, 'name': 'Fake Test Process instances overview' },
        { 'id': 2005, 'name': 'Fake Test Task overview' },
        { 'id': 2006, 'name': 'Fake Test Task service level agreement' }
    ];
    var reportSelected = { 'id': 2003, 'name': 'Fake Test Process definition overview' };
    var component;
    var fixture;
    var debug;
    var element;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot()
            ],
            declarations: [
                analytics_report_list_component_1.AnalyticsReportListComponent
            ],
            providers: [
                analytics_service_1.AnalyticsService
            ]
        }).compileComponents();
        var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
        spyOn(translateService, 'addTranslationFolder').and.stub();
        spyOn(translateService, 'get').and.callFake(function (key) { return Rx_1.Observable.of(key); });
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(analytics_report_list_component_1.AnalyticsReportListComponent);
        component = fixture.componentInstance;
        debug = fixture.debugElement;
        element = fixture.nativeElement;
    });
    describe('Rendering tests', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });
        afterEach(function () {
            jasmine.Ajax.uninstall();
        });
        it('Report return true with undefined reports', function () {
            expect(component.isReportsEmpty()).toBeTruthy();
        });
        it('Report return true with an empty reports', function () {
            component.reports = [];
            expect(component.isReportsEmpty()).toBeTruthy();
        });
        it('should return the default reports when the report list is empty', function (done) {
            jasmine.Ajax.stubRequest('http://localhost:9999/activiti-app/app/rest/reporting/reports').andReturn({
                status: 200,
                contentType: 'json',
                responseText: []
            });
            fixture.detectChanges();
            jasmine.Ajax.stubRequest('http://localhost:9999/activiti-app/app/rest/reporting/default-reports').andReturn({
                status: 200,
                contentType: 'json',
                responseText: []
            });
            jasmine.Ajax.stubRequest('http://localhost:9999/activiti-app/app/rest/reporting/reports').andReturn({
                status: 200,
                contentType: 'json',
                responseText: reportList
            });
            component.onSuccess.subscribe(function () {
                fixture.detectChanges();
                expect(element.querySelector('#report-list-0 > i').innerHTML).toBe('assignment');
                expect(element.querySelector('#report-list-0 > span').innerHTML).toBe('Fake Test Process definition heat map');
                expect(element.querySelector('#report-list-1 > span').innerHTML).toBe('Fake Test Process definition overview');
                expect(element.querySelector('#report-list-2 > span').innerHTML).toBe('Fake Test Process instances overview');
                expect(element.querySelector('#report-list-3 > span').innerHTML).toBe('Fake Test Task overview');
                expect(element.querySelector('#report-list-4 > span').innerHTML).toBe('Fake Test Task service level agreement');
                expect(component.isReportsEmpty()).toBeFalsy();
                done();
            });
        });
        it('Report render the report list relative to a single app', function (done) {
            fixture.detectChanges();
            component.onSuccess.subscribe(function () {
                fixture.detectChanges();
                expect(element.querySelector('#report-list-0 > i').innerHTML).toBe('assignment');
                expect(element.querySelector('#report-list-0 > span').innerHTML).toBe('Fake Test Process definition heat map');
                expect(element.querySelector('#report-list-1 > span').innerHTML).toBe('Fake Test Process definition overview');
                expect(element.querySelector('#report-list-2 > span').innerHTML).toBe('Fake Test Process instances overview');
                expect(element.querySelector('#report-list-3 > span').innerHTML).toBe('Fake Test Task overview');
                expect(element.querySelector('#report-list-4 > span').innerHTML).toBe('Fake Test Task service level agreement');
                expect(component.isReportsEmpty()).toBeFalsy();
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: reportList
            });
        });
        it('Report emit an error with a empty response', function (done) {
            fixture.detectChanges();
            component.onError.subscribe(function (err) {
                expect(err).toBeDefined();
                done();
            });
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 404,
                contentType: 'json',
                responseText: []
            });
        });
        it('Should return the current report when one report is selected', function () {
            component.reportClick.subscribe(function () {
                expect(component.currentReport).toEqual(reportSelected);
            });
            component.selectReport(reportSelected);
        });
    });
});
//# sourceMappingURL=analytics-report-list.component.spec.js.map