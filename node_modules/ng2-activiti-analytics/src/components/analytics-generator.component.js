/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var analytics_service_1 = require("../services/analytics.service");
var report_model_1 = require("../models/report.model");
var AnalyticsGeneratorComponent = (function () {
    function AnalyticsGeneratorComponent(translateService, analyticsService, logService) {
        this.translateService = translateService;
        this.analyticsService = analyticsService;
        this.logService = logService;
        this.reportParamQuery = undefined;
        this.onSuccess = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.showDetails = false;
        this.barChartOptions = {
            responsive: true,
            scales: {
                yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            stepSize: 1
                        }
                    }],
                xAxes: [{
                        ticks: {},
                        stacked: true
                    }]
            }
        };
        logService.info('AnalyticsGeneratorComponent');
        if (translateService) {
            translateService.addTranslationFolder('ng2-activiti-analytics', 'node_modules/ng2-activiti-analytics/src');
        }
    }
    AnalyticsGeneratorComponent.prototype.ngOnChanges = function (changes) {
        if (this.reportId && this.reportParamQuery) {
            this.generateReport(this.reportId, this.reportParamQuery);
        }
        else {
            this.reset();
        }
    };
    AnalyticsGeneratorComponent.prototype.generateReport = function (reportId, reportParamQuery) {
        var _this = this;
        this.analyticsService.getReportsByParams(reportId, reportParamQuery).subscribe(function (res) {
            _this.reports = res;
            _this.onSuccess.emit(res);
        }, function (err) {
            _this.onError.emit(err);
            _this.logService.error(err);
        });
    };
    AnalyticsGeneratorComponent.prototype.reset = function () {
        if (this.reports) {
            this.reports = undefined;
        }
    };
    AnalyticsGeneratorComponent.prototype.refresh = function (report) {
        var clone = JSON.parse(JSON.stringify(report));
        report.datasets = clone.datasets;
    };
    AnalyticsGeneratorComponent.prototype.toggleDetailsTable = function () {
        this.showDetails = !this.showDetails;
    };
    AnalyticsGeneratorComponent.prototype.isShowDetails = function () {
        return this.showDetails;
    };
    return AnalyticsGeneratorComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], AnalyticsGeneratorComponent.prototype, "reportId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", report_model_1.ReportQuery)
], AnalyticsGeneratorComponent.prototype, "reportParamQuery", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AnalyticsGeneratorComponent.prototype, "onSuccess", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AnalyticsGeneratorComponent.prototype, "onError", void 0);
AnalyticsGeneratorComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'activiti-analytics-generator',
        template: "<div *ngIf=\"reports\">     <div *ngFor=\"let report of reports\">         <h4>{{report.title}}</h4>         <div [ngSwitch]=\"report.type\">             <div *ngSwitchCase=\"'pie'\">                 <div class=\"col-md-6\">                     <div *ngIf=\"!report.hasData()\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>                     <div *ngIf=\"report.hasData()\">                         <div *ngIf=\"report.hasZeroValues()\">{{'ANALYTICS.MESSAGES.ZERO-DATA-FOUND' | translate}}</div>                         <base-chart *ngIf=\"!report.hasZeroValues()\" class=\"chart\"                                     [data]=\"report.data\"                                     [labels]=\"report.labels\"                                     [chartType]=\"report.type\"></base-chart>                     </div>                 </div>             </div>             <div *ngSwitchCase=\"'table'\">                 <div *ngIf=\"!report.hasDatasets()\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>                 <div [attr.id]=\"'chart-table-' + report.id\" *ngIf=\"report.hasDatasets()\">                     <table class=\"table table-responsive table-condensed\" style=\"width: 100%\">                         <tr>                             <th *ngFor=\"let label of report.labels\">{{label | translate}}</th>                         </tr>                         <tr *ngFor=\"let rows of report.datasets\" style=\"text-align: center;\">                             <td *ngFor=\"let row of rows\">{{row | translate }}</td>                         </tr>                     </table>                 </div>             </div>             <div *ngSwitchCase=\"'masterDetailTable'\">                 <div *ngIf=\"!report.hasDatasets()\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>                 <div [attr.id]=\"'chart-master-detail-table-' + report.id\" *ngIf=\"report.hasDatasets()\">                     <table class=\"table table-responsive table-condensed\" style=\"width: 100%\">                         <tr>                             <th *ngFor=\"let label of report.labels\">{{label | translate}}</th>                         </tr>                         <tr *ngFor=\"let rows of report.datasets\" class=\"analytics-row__entry\" style=\"text-align: center;\">                             <td *ngFor=\"let row of rows\" (click)=\"toggleDetailsTable()\">{{row | translate }}</td>                         </tr>                     </table>                 </div>                 <div [attr.id]=\"'chart-master-detail-' + report.id\" *ngIf=\"isShowDetails()\">                     <table class=\"table table-responsive table-condensed\" style=\"width: 100%\">                         <tr>                             <th *ngFor=\"let label of report.detailsTable.labels\">{{label | translate}}</th>                         </tr>                         <tr *ngFor=\"let rows of report.detailsTable.datasets\" style=\"text-align: center;\">                             <td *ngFor=\"let row of rows\">{{row | translate }}</td>                         </tr>                     </table>                 </div>             </div>             <div *ngSwitchCase=\"'bar'\">                 <div class=\"col-md-6\">                     <div *ngIf=\"!report.hasDatasets()\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>                     <base-chart *ngIf=\"report.hasDatasets()\" class=\"chart\"                                 [datasets]=\"report.datasets\"                                 [labels]=\"report.labels\"                                 [options]=\"report.options\"                                 [chartType]=\"report.type\"></base-chart>                 </div>             </div>             <div *ngSwitchCase=\"'multiBar'\">                 <div class=\"col-md-6\">                     <div *ngIf=\"!report.hasDatasets()\">{{'ANALYTICS.MESSAGES.NO-DATA-FOUND' | translate}}</div>                     <div *ngIf=\"report.hasDatasets()\">                         <label class=\"mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect\" [attr.for]=\"'stacked-id'\">                             <input type=\"checkbox\" [attr.id]=\"'stacked-id'\" class=\"mdl-checkbox__input\"                                    [checked]=\"report.options.scales.xAxes[0].stacked\"                                    [(ngModel)]=\"report.options.scales.xAxes[0].stacked\"                                    (change)=\"refresh(report)\">                             <span class=\"mdl-checkbox__label\">Stacked</span>                         </label>                         <base-chart class=\"chart\"                                     [datasets]=\"report.datasets\"                                     [labels]=\"report.labels\"                                     [options]=\"report.options\"                                     [chartType]=\"'bar'\"></base-chart>                     </div>                 </div>             </div>             <div *ngSwitchCase=\"'HeatMap'\">                 <analytics-report-heat-map [report]=\"report\"></analytics-report-heat-map>             </div>             <div *ngSwitchDefault>                 <span>{{'ANALYTICS.MESSAGES.UNKNOWN-WIDGET-TYPE' | translate}}: {{report.type}}</span>             </div>         </div>     </div> </div> <br><br><br> <div *ngIf=\"!reports\">{{'ANALYTICS.MESSAGES.FILL-PARAMETER' | translate}}</div>",
        styles: [".chart {display: block; width: 100%;}  .analytics-row__entry {     cursor: pointer; }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        analytics_service_1.AnalyticsService,
        ng2_alfresco_core_1.LogService])
], AnalyticsGeneratorComponent);
exports.AnalyticsGeneratorComponent = AnalyticsGeneratorComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
