/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var analytics_service_1 = require("../services/analytics.service");
var AnalyticsReportListComponent = (function () {
    function AnalyticsReportListComponent(analyticsService, logService) {
        var _this = this;
        this.analyticsService = analyticsService;
        this.logService = logService;
        this.reportClick = new core_1.EventEmitter();
        this.onSuccess = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.reports = [];
        this.report$ = new Rx_1.Observable(function (observer) { return _this.reportObserver = observer; }).share();
    }
    AnalyticsReportListComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.report$.subscribe(function (report) {
            _this.reports.push(report);
        });
        this.getReportList();
    };
    AnalyticsReportListComponent.prototype.reload = function () {
        this.reset();
        this.getReportList();
    };
    AnalyticsReportListComponent.prototype.getReportList = function () {
        var _this = this;
        this.analyticsService.getReportList().subscribe(function (res) {
            if (res && res.length === 0) {
                _this.createDefaultReports();
            }
            else {
                res.forEach(function (report) {
                    _this.reportObserver.next(report);
                });
                _this.onSuccess.emit(res);
            }
        }, function (err) {
            _this.onError.emit(err);
            _this.logService.error(err);
        });
    };
    AnalyticsReportListComponent.prototype.createDefaultReports = function () {
        var _this = this;
        this.analyticsService.createDefaultReports().subscribe(function () {
            _this.analyticsService.getReportList().subscribe(function (response) {
                response.forEach(function (report) {
                    _this.reportObserver.next(report);
                });
                _this.onSuccess.emit(response);
            });
        });
    };
    AnalyticsReportListComponent.prototype.isReportsEmpty = function () {
        return this.reports === undefined || (this.reports && this.reports.length === 0);
    };
    AnalyticsReportListComponent.prototype.reset = function () {
        if (!this.isReportsEmpty()) {
            this.reports = [];
        }
    };
    AnalyticsReportListComponent.prototype.selectReport = function (report) {
        this.currentReport = report;
        this.reportClick.emit(report);
    };
    return AnalyticsReportListComponent;
}());
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], AnalyticsReportListComponent.prototype, "reportClick", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AnalyticsReportListComponent.prototype, "onSuccess", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AnalyticsReportListComponent.prototype, "onError", void 0);
AnalyticsReportListComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'analytics-report-list',
        template: "<div class=\"menu-container\">     <ul class='mdl-list'>         <li class=\"mdl-list__item activiti-filters__entry\" (click)=\"selectReport(report)\" *ngFor=\"let report of reports; let idx = index\"             [class.active]=\"currentReport === report\">             <span [attr.id]=\"'report-list-' + idx\" class=\"mdl-list__item-primary-content\">             <i class=\"material-icons mdl-list__item-icon activiti-filters__entry-icon\" [attr.data-automation-id]=\"report.name + '_filter'\">assignment</i>             <span class=\"text\">{{report.name}}</span>             </span>         </li>     </ul> </div>",
        styles: [".mdl-list__item {     cursor: pointer; }  .activiti-filters__entry {     cursor: pointer; }  .activiti-filters__entry-icon {     margin-right: 12px !important; }  .activiti-filters__entry.active {     color: rgb(68,138,255); }  .activiti-filters__entry.active .activiti-filters__entry-icon {     color: rgb(68,138,255); }"]
    }),
    __metadata("design:paramtypes", [analytics_service_1.AnalyticsService,
        ng2_alfresco_core_1.LogService])
], AnalyticsReportListComponent);
exports.AnalyticsReportListComponent = AnalyticsReportListComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYW5hbHl0aWNzLXJlcG9ydC1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7O0FBRUgsc0NBQXdFO0FBQ3hFLDhCQUErQztBQUMvQyx1REFBK0M7QUFDL0MsbUVBQWlFO0FBU2pFLElBQWEsNEJBQTRCO0lBa0JyQyxzQ0FBb0IsZ0JBQWtDLEVBQ2xDLFVBQXNCO1FBRDFDLGlCQUdDO1FBSG1CLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQWhCMUMsZ0JBQVcsR0FBd0MsSUFBSSxtQkFBWSxFQUF5QixDQUFDO1FBRzdGLGNBQVMsR0FBRyxJQUFJLG1CQUFZLEVBQUUsQ0FBQztRQUcvQixZQUFPLEdBQUcsSUFBSSxtQkFBWSxFQUFFLENBQUM7UUFPN0IsWUFBTyxHQUE0QixFQUFFLENBQUM7UUFJbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGVBQVUsQ0FBd0IsVUFBQSxRQUFRLElBQUksT0FBQSxLQUFJLENBQUMsY0FBYyxHQUFHLFFBQVEsRUFBOUIsQ0FBOEIsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzdHLENBQUM7SUFFRCwrQ0FBUSxHQUFSO1FBQUEsaUJBTUM7UUFMRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQTZCO1lBQ2pELEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFLRCw2Q0FBTSxHQUFOO1FBQ0ksSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFLRCxvREFBYSxHQUFiO1FBQUEsaUJBaUJDO1FBaEJHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxTQUFTLENBQzNDLFVBQUMsR0FBNEI7WUFDekIsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUIsS0FBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDaEMsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFNO29CQUNmLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNyQyxDQUFDLENBQUMsQ0FBQztnQkFDSCxLQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM3QixDQUFDO1FBQ0wsQ0FBQyxFQUNELFVBQUMsR0FBUTtZQUNMLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLEtBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FDSixDQUFDO0lBQ04sQ0FBQztJQUtELDJEQUFvQixHQUFwQjtRQUFBLGlCQWFDO1FBWkcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixFQUFFLENBQUMsU0FBUyxDQUNsRDtZQUNJLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxTQUFTLENBQzNDLFVBQUMsUUFBaUM7Z0JBQzlCLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFNO29CQUNwQixLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDckMsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUNKLENBQUM7UUFDTixDQUFDLENBQ0osQ0FBQztJQUNOLENBQUM7SUFNRCxxREFBYyxHQUFkO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBS08sNENBQUssR0FBYjtRQUNJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUN0QixDQUFDO0lBQ0wsQ0FBQztJQU1NLG1EQUFZLEdBQW5CLFVBQW9CLE1BQVc7UUFDM0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNMLG1DQUFDO0FBQUQsQ0F4R0EsQUF3R0MsSUFBQTtBQXJHRztJQURDLGFBQU0sRUFBRTs4QkFDSSxtQkFBWTtpRUFBb0U7QUFHN0Y7SUFEQyxhQUFNLEVBQUU7OytEQUNzQjtBQUcvQjtJQURDLGFBQU0sRUFBRTs7NkRBQ29CO0FBVHBCLDRCQUE0QjtJQU54QyxnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFBRSx1QkFBdUI7UUFDakMsUUFBUSxFQUFFLDJtQkFBMm1CO1FBQ3JuQixNQUFNLEVBQUUsQ0FBQyxtVUFBbVUsQ0FBQztLQUNoVixDQUFDO3FDQW1Cd0Msb0NBQWdCO1FBQ3RCLDhCQUFVO0dBbkJqQyw0QkFBNEIsQ0F3R3hDO0FBeEdZLG9FQUE0QiIsImZpbGUiOiJjb21wb25lbnRzL2FuYWx5dGljcy1yZXBvcnQtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmVyLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9SeCc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnbmcyLWFsZnJlc2NvLWNvcmUnO1xuaW1wb3J0IHsgQW5hbHl0aWNzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2FuYWx5dGljcy5zZXJ2aWNlJztcbmltcG9ydCB7IFJlcG9ydFBhcmFtZXRlcnNNb2RlbCB9IGZyb20gJy4uL21vZGVscy9yZXBvcnQubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHNlbGVjdG9yOiAnYW5hbHl0aWNzLXJlcG9ydC1saXN0JyxcbiAgICB0ZW1wbGF0ZTogXCI8ZGl2IGNsYXNzPVxcXCJtZW51LWNvbnRhaW5lclxcXCI+ICAgICA8dWwgY2xhc3M9J21kbC1saXN0Jz4gICAgICAgICA8bGkgY2xhc3M9XFxcIm1kbC1saXN0X19pdGVtIGFjdGl2aXRpLWZpbHRlcnNfX2VudHJ5XFxcIiAoY2xpY2spPVxcXCJzZWxlY3RSZXBvcnQocmVwb3J0KVxcXCIgKm5nRm9yPVxcXCJsZXQgcmVwb3J0IG9mIHJlcG9ydHM7IGxldCBpZHggPSBpbmRleFxcXCIgICAgICAgICAgICAgW2NsYXNzLmFjdGl2ZV09XFxcImN1cnJlbnRSZXBvcnQgPT09IHJlcG9ydFxcXCI+ICAgICAgICAgICAgIDxzcGFuIFthdHRyLmlkXT1cXFwiJ3JlcG9ydC1saXN0LScgKyBpZHhcXFwiIGNsYXNzPVxcXCJtZGwtbGlzdF9faXRlbS1wcmltYXJ5LWNvbnRlbnRcXFwiPiAgICAgICAgICAgICA8aSBjbGFzcz1cXFwibWF0ZXJpYWwtaWNvbnMgbWRsLWxpc3RfX2l0ZW0taWNvbiBhY3Rpdml0aS1maWx0ZXJzX19lbnRyeS1pY29uXFxcIiBbYXR0ci5kYXRhLWF1dG9tYXRpb24taWRdPVxcXCJyZXBvcnQubmFtZSArICdfZmlsdGVyJ1xcXCI+YXNzaWdubWVudDwvaT4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInRleHRcXFwiPnt7cmVwb3J0Lm5hbWV9fTwvc3Bhbj4gICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgIDwvbGk+ICAgICA8L3VsPiA8L2Rpdj5cIixcbiAgICBzdHlsZXM6IFtcIi5tZGwtbGlzdF9faXRlbSB7ICAgICBjdXJzb3I6IHBvaW50ZXI7IH0gIC5hY3Rpdml0aS1maWx0ZXJzX19lbnRyeSB7ICAgICBjdXJzb3I6IHBvaW50ZXI7IH0gIC5hY3Rpdml0aS1maWx0ZXJzX19lbnRyeS1pY29uIHsgICAgIG1hcmdpbi1yaWdodDogMTJweCAhaW1wb3J0YW50OyB9ICAuYWN0aXZpdGktZmlsdGVyc19fZW50cnkuYWN0aXZlIHsgICAgIGNvbG9yOiByZ2IoNjgsMTM4LDI1NSk7IH0gIC5hY3Rpdml0aS1maWx0ZXJzX19lbnRyeS5hY3RpdmUgLmFjdGl2aXRpLWZpbHRlcnNfX2VudHJ5LWljb24geyAgICAgY29sb3I6IHJnYig2OCwxMzgsMjU1KTsgfVwiXVxufSlcbmV4cG9ydCBjbGFzcyBBbmFseXRpY3NSZXBvcnRMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgIE9uSW5pdCB7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZXBvcnRDbGljazogRXZlbnRFbWl0dGVyPFJlcG9ydFBhcmFtZXRlcnNNb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPFJlcG9ydFBhcmFtZXRlcnNNb2RlbD4oKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIG9uU3VjY2VzcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEBPdXRwdXQoKVxuICAgIG9uRXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBwcml2YXRlIHJlcG9ydE9ic2VydmVyOiBPYnNlcnZlcjxhbnk+O1xuICAgIHJlcG9ydCQ6IE9ic2VydmFibGU8YW55PjtcblxuICAgIGN1cnJlbnRSZXBvcnQ6IGFueTtcblxuICAgIHJlcG9ydHM6IFJlcG9ydFBhcmFtZXRlcnNNb2RlbFtdID0gW107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFuYWx5dGljc1NlcnZpY2U6IEFuYWx5dGljc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMucmVwb3J0JCA9IG5ldyBPYnNlcnZhYmxlPFJlcG9ydFBhcmFtZXRlcnNNb2RlbD4ob2JzZXJ2ZXIgPT4gdGhpcy5yZXBvcnRPYnNlcnZlciA9IG9ic2VydmVyKS5zaGFyZSgpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnJlcG9ydCQuc3Vic2NyaWJlKChyZXBvcnQ6IFJlcG9ydFBhcmFtZXRlcnNNb2RlbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXBvcnRzLnB1c2gocmVwb3J0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5nZXRSZXBvcnRMaXN0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVsb2FkIHRoZSBjb21wb25lbnRcbiAgICAgKi9cbiAgICByZWxvYWQoKSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgdGhpcy5nZXRSZXBvcnRMaXN0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZXBvcnQgbGlzdFxuICAgICAqL1xuICAgIGdldFJlcG9ydExpc3QoKSB7XG4gICAgICAgIHRoaXMuYW5hbHl0aWNzU2VydmljZS5nZXRSZXBvcnRMaXN0KCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKHJlczogUmVwb3J0UGFyYW1ldGVyc01vZGVsW10pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzICYmIHJlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVEZWZhdWx0UmVwb3J0cygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5mb3JFYWNoKChyZXBvcnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVwb3J0T2JzZXJ2ZXIubmV4dChyZXBvcnQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblN1Y2Nlc3MuZW1pdChyZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IuZW1pdChlcnIpO1xuICAgICAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgZGVmYXVsdCByZXBvcnRzIGFuZCByZXR1cm4gdGhlIHJlcG9ydCBsaXN0XG4gICAgICovXG4gICAgY3JlYXRlRGVmYXVsdFJlcG9ydHMoKSB7XG4gICAgICAgIHRoaXMuYW5hbHl0aWNzU2VydmljZS5jcmVhdGVEZWZhdWx0UmVwb3J0cygpLnN1YnNjcmliZShcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFuYWx5dGljc1NlcnZpY2UuZ2V0UmVwb3J0TGlzdCgpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAgICAgKHJlc3BvbnNlOiBSZXBvcnRQYXJhbWV0ZXJzTW9kZWxbXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZm9yRWFjaCgocmVwb3J0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBvcnRPYnNlcnZlci5uZXh0KHJlcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25TdWNjZXNzLmVtaXQocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgcmVwb3J0IGxpc3QgaXMgZW1wdHlcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxSZXBvcnRQYXJhbWV0ZXJzTW9kZWxbXX1cbiAgICAgKi9cbiAgICBpc1JlcG9ydHNFbXB0eSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwb3J0cyA9PT0gdW5kZWZpbmVkIHx8ICh0aGlzLnJlcG9ydHMgJiYgdGhpcy5yZXBvcnRzLmxlbmd0aCA9PT0gMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIGxpc3RcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlc2V0KCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNSZXBvcnRzRW1wdHkoKSkge1xuICAgICAgICAgICAgdGhpcy5yZXBvcnRzID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3QgdGhlIGN1cnJlbnQgcmVwb3J0XG4gICAgICogQHBhcmFtIHJlcG9ydFxuICAgICAqL1xuICAgIHB1YmxpYyBzZWxlY3RSZXBvcnQocmVwb3J0OiBhbnkpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50UmVwb3J0ID0gcmVwb3J0O1xuICAgICAgICB0aGlzLnJlcG9ydENsaWNrLmVtaXQocmVwb3J0KTtcbiAgICB9XG59XG4iXX0=
