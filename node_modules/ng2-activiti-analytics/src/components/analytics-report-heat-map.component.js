/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var analytics_service_1 = require("../services/analytics.service");
var forms_1 = require("@angular/forms");
var AnalyticsReportHeatMapComponent = (function () {
    function AnalyticsReportHeatMapComponent(translateService, analyticsService, formBuilder) {
        this.translateService = translateService;
        this.analyticsService = analyticsService;
        this.formBuilder = formBuilder;
        this.onSuccess = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.field = {};
        if (translateService) {
            translateService.addTranslationFolder('ng2-activiti-analytics', 'node_modules/ng2-activiti-analytics/src');
        }
    }
    AnalyticsReportHeatMapComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initForm();
        this.field.id = 'metrics';
        this.field.value = 'totalCount';
        this.analyticsService.getMetricValues().subscribe(function (opts) {
            _this.field.options = opts;
            _this.onSuccess.emit(opts);
        });
    };
    AnalyticsReportHeatMapComponent.prototype.onMetricChanges = function (field) {
        if (field.value === 'totalCount') {
            this.currentMetric = this.report.totalCountValues;
            this.currentMetricColors = this.report.totalCountsPercentages;
            this.metricType = 'times';
        }
        else if (field.value === 'totalTime') {
            this.currentMetric = this.report.totalTimeValues;
            this.currentMetricColors = this.report.totalTimePercentages;
            this.metricType = 'hours';
        }
        else if (field.value === 'avgTime') {
            this.currentMetric = this.report.avgTimeValues;
            this.currentMetricColors = this.report.avgTimePercentages;
            this.metricType = 'hours';
        }
    };
    AnalyticsReportHeatMapComponent.prototype.initForm = function () {
        this.metricForm = this.formBuilder.group({
            metricGroup: new forms_1.FormGroup({
                metric: new forms_1.FormControl()
            })
        });
    };
    AnalyticsReportHeatMapComponent.prototype.hasMetric = function () {
        return (this.report.totalCountsPercentages ||
            this.report.totalTimePercentages ||
            this.report.avgTimePercentages) ? true : false;
    };
    return AnalyticsReportHeatMapComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], AnalyticsReportHeatMapComponent.prototype, "report", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AnalyticsReportHeatMapComponent.prototype, "onSuccess", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AnalyticsReportHeatMapComponent.prototype, "onError", void 0);
AnalyticsReportHeatMapComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'analytics-report-heat-map',
        template: "<h4>Process Heat map</h4> <div *ngIf=\"hasMetric()\">     <form [formGroup]=\"metricForm\" novalidate>         <dropdown-widget [field]=\"field\" [group]=\"metricForm.controls.metricGroup\" [controllerName]=\"'metric'\"                          (fieldChanged)=\"onMetricChanges(field)\" [showDefaultOption]=\"false\"></dropdown-widget>     </form>     <activiti-diagram *ngIf=\"currentMetric\" [processDefinitionId]=\"report.processDefinitionId\" [metricPercentages]=\"currentMetric\" [metricColor]=\"currentMetricColors\" [metricType]=\"metricType\"></activiti-diagram> </div> <div *ngIf=\"!hasMetric()\">No metric found</div>"
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        analytics_service_1.AnalyticsService,
        forms_1.FormBuilder])
], AnalyticsReportHeatMapComponent);
exports.AnalyticsReportHeatMapComponent = AnalyticsReportHeatMapComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
