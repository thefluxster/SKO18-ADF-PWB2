/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var testing_1 = require("@angular/core/testing");
var Rx_1 = require("rxjs/Rx");
var ng2_charts_1 = require("ng2-charts/ng2-charts");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ng2_activiti_diagrams_1 = require("ng2-activiti-diagrams");
var analytics_report_list_component_1 = require("../components/analytics-report-list.component");
var analytics_generator_component_1 = require("../components/analytics-generator.component");
var analytics_report_parameters_component_1 = require("../components/analytics-report-parameters.component");
var analytics_report_heat_map_component_1 = require("../components/analytics-report-heat-map.component");
var index_1 = require("../components/widgets/index");
var chart_model_1 = require("../models/chart.model");
var analytics_service_1 = require("../services/analytics.service");
var report_model_1 = require("../models/report.model");
var analyticMock = require("../assets/analyticsComponent.mock");
exports.ANALYTICS_DIRECTIVES = [
    analytics_generator_component_1.AnalyticsGeneratorComponent,
    analytics_report_parameters_component_1.AnalyticsReportParametersComponent,
    analytics_report_list_component_1.AnalyticsReportListComponent,
    analytics_report_heat_map_component_1.AnalyticsReportHeatMapComponent,
    index_1.WIDGET_DIRECTIVES
];
exports.ANALYTICS_PROVIDERS = [
    analytics_service_1.AnalyticsService
];
describe('AnalyticsGeneratorComponent', function () {
    var component;
    var fixture;
    var debug;
    var element;
    var componentHandler;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                ng2_alfresco_core_1.CoreModule.forRoot(),
                ng2_activiti_diagrams_1.DiagramsModule.forRoot()
            ],
            declarations: exports.ANALYTICS_DIRECTIVES.concat(ng2_charts_1.CHART_DIRECTIVES),
            providers: exports.ANALYTICS_PROVIDERS.slice()
        }).compileComponents();
        var translateService = testing_1.TestBed.get(ng2_alfresco_core_1.AlfrescoTranslationService);
        spyOn(translateService, 'addTranslationFolder').and.stub();
        spyOn(translateService, 'get').and.callFake(function (key) { return Rx_1.Observable.of(key); });
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(analytics_generator_component_1.AnalyticsGeneratorComponent);
        component = fixture.componentInstance;
        debug = fixture.debugElement;
        element = fixture.nativeElement;
        fixture.detectChanges();
        componentHandler = jasmine.createSpyObj('componentHandler', [
            'upgradeAllRegistered'
        ]);
        window['componentHandler'] = componentHandler;
    });
    describe('Rendering tests', function () {
        beforeEach(function () {
            jasmine.Ajax.install();
        });
        afterEach(function () {
            jasmine.Ajax.uninstall();
        });
        it('Should render the Process definition overview report ', function (done) {
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(res.length).toEqual(3);
                expect(res[0]).toBeDefined();
                expect(res[0].type).toEqual('table');
                expect(res[0].datasets).toBeDefined();
                expect(res[0].datasets.length).toEqual(4);
                expect(res[0].datasets[0][0]).toEqual('__KEY_REPORTING.DEFAULT-REPORTS.PROCESS-DEFINITION-OVERVIEW.GENERAL-TABLE-TOTAL-PROCESS-DEFINITIONS');
                expect(res[0].datasets[0][1]).toEqual('9');
                expect(res[0].datasets[1][0]).toEqual('__KEY_REPORTING.DEFAULT-REPORTS.PROCESS-DEFINITION-OVERVIEW.GENERAL-TABLE-TOTAL-PROCESS-INSTANCES');
                expect(res[0].datasets[1][1]).toEqual('41');
                expect(res[0].datasets[2][0]).toEqual('__KEY_REPORTING.DEFAULT-REPORTS.PROCESS-DEFINITION-OVERVIEW.GENERAL-TABLE-ACTIVE-PROCESS-INSTANCES');
                expect(res[0].datasets[2][1]).toEqual('3');
                expect(res[0].datasets[3][0]).toEqual('__KEY_REPORTING.DEFAULT-REPORTS.PROCESS-DEFINITION-OVERVIEW.GENERAL-TABLE-COMPLETED-PROCESS-INSTANCES');
                expect(res[0].datasets[3][1]).toEqual('38');
                expect(res[1]).toBeDefined();
                expect(res[1].type).toEqual('pie');
                expect(res[2]).toBeDefined();
                expect(res[2].type).toEqual('table');
                done();
            });
            var reportId = 1001;
            var reportParamQuery = new report_model_1.ReportQuery({ status: 'All' });
            component.generateReport(reportId, reportParamQuery);
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: analyticMock.chartProcessDefOverview
            });
        });
        it('Should render the Task overview report ', function (done) {
            component.onSuccess.subscribe(function (res) {
                expect(res).toBeDefined();
                expect(res.length).toEqual(3);
                expect(res[0]).toBeDefined();
                expect(res[0].type).toEqual('bar');
                expect(res[0].labels).toBeDefined();
                expect(res[0].labels.length).toEqual(2);
                expect(res[0].labels[0]).toEqual('2016-09-30T00:00:00.000+0000');
                expect(res[0].labels[1]).toEqual('2016-10-04T00:00:00.000+0000');
                expect(res[0].datasets[0].label).toEqual('series1');
                expect(res[0].datasets[0].data[0]).toEqual(3);
                expect(res[0].datasets[0].data[1]).toEqual(1);
                expect(res[1]).toBeDefined();
                expect(res[1].type).toEqual('masterDetailTable');
                expect(res[1].datasets).toBeDefined();
                expect(res[1].datasets.length).toEqual(2);
                expect(res[1].datasets[0][0]).toEqual('fake 1 user task');
                expect(res[1].datasets[0][1]).toEqual('1');
                expect(res[1].datasets[0][2]).toEqual('2.0');
                expect(res[1].datasets[0][3]).toEqual('3.0');
                expect(res[1].datasets[0][4]).toEqual('4.0');
                expect(res[1].datasets[0][5]).toEqual('5.0');
                expect(res[1].datasets[0][6]).toEqual('6.0');
                expect(res[1].datasets[1][0]).toEqual('fake 2 user task');
                expect(res[1].datasets[1][1]).toEqual('1');
                expect(res[1].datasets[1][2]).toEqual('2.0');
                expect(res[1].datasets[1][3]).toEqual('3.0');
                expect(res[1].datasets[1][4]).toEqual('4.0');
                expect(res[1].datasets[1][5]).toEqual('5.0');
                expect(res[1].datasets[1][6]).toEqual('6.0');
                expect(res[2]).toBeDefined();
                expect(res[2].type).toEqual('multiBar');
                expect(res[2].labels).toBeDefined();
                expect(res[2].labels.length).toEqual(3);
                expect(res[2].labels[0]).toEqual(1);
                expect(res[2].labels[1]).toEqual(2);
                expect(res[2].labels[2]).toEqual(3);
                expect(res[2].datasets[0].label).toEqual('averages');
                expect(res[2].datasets[0].data[0]).toEqual(0);
                expect(res[2].datasets[0].data[1]).toEqual(5);
                expect(res[2].datasets[0].data[2]).toEqual(2);
                expect(res[2].datasets[1].label).toEqual('minima');
                expect(res[2].datasets[1].data[0]).toEqual(0);
                expect(res[2].datasets[1].data[1]).toEqual(0);
                expect(res[2].datasets[1].data[2]).toEqual(0);
                expect(res[2].datasets[2].label).toEqual('maxima');
                expect(res[2].datasets[2].data[0]).toEqual(0);
                expect(res[2].datasets[2].data[1]).toEqual(29);
                expect(res[2].datasets[2].data[2]).toEqual(29);
                done();
            });
            var reportParamQuery = new report_model_1.ReportQuery({ status: 'All' });
            component.reportId = 1;
            component.generateReport(reportParamQuery);
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                contentType: 'json',
                responseText: analyticMock.chartTaskOverview
            });
        });
        it('Should reset the reports when the onChanged is call', function () {
            component.reports = [new chart_model_1.Chart({ id: 'fake', type: 'fake-type' })];
            component.reportId = 1;
            component.ngOnChanges();
            expect(component.reports).toBeUndefined();
        });
        it('Should emit onError event with a 404 response ', function (done) {
            component.onError.subscribe(function (err) {
                expect(err).toBeDefined();
                done();
            });
            var reportParamQuery = new report_model_1.ReportQuery({ status: 'All' });
            component.reportId = 1;
            component.generateReport(reportParamQuery);
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 404,
                contentType: 'json',
                responseText: []
            });
        });
    });
});
//# sourceMappingURL=analytics-generator.component.spec.js.map