/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var analytics_service_1 = require("../services/analytics.service");
var analytics_generator_component_1 = require("./analytics-generator.component");
var AnalyticsComponent = (function () {
    function AnalyticsComponent(translateService, analyticsService, logService) {
        this.translateService = translateService;
        this.analyticsService = analyticsService;
        this.logService = logService;
        this.debug = false;
        this.editReport = new core_1.EventEmitter();
        logService.info('AnalyticsComponent');
        if (translateService) {
            translateService.addTranslationFolder('ng2-activiti-analytics', 'node_modules/ng2-activiti-analytics/src');
        }
    }
    AnalyticsComponent.prototype.ngOnChanges = function (changes) {
        this.analyticsgenerator.reset();
    };
    AnalyticsComponent.prototype.showReport = function ($event) {
        this.analyticsgenerator.generateReport(this.reportId, $event);
    };
    AnalyticsComponent.prototype.reset = function () {
        this.analyticsgenerator.reset();
    };
    AnalyticsComponent.prototype.onEditReport = function (name) {
        this.editReport.emit(name);
    };
    return AnalyticsComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], AnalyticsComponent.prototype, "appId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], AnalyticsComponent.prototype, "reportId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AnalyticsComponent.prototype, "debug", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AnalyticsComponent.prototype, "editReport", void 0);
__decorate([
    core_1.ViewChild('analyticsgenerator'),
    __metadata("design:type", analytics_generator_component_1.AnalyticsGeneratorComponent)
], AnalyticsComponent.prototype, "analyticsgenerator", void 0);
AnalyticsComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'activiti-analytics',
        template: "<div class=\"col-md-6\">     <analytics-report-parameters [appId]=\"appId\" [reportId]=\"reportId\"                                  (onFormValueChanged)=\"reset()\"                                  (onSuccess)=\"showReport($event)\"                                  (onEdit)=\"onEditReport($event)\">     </analytics-report-parameters>      <activiti-analytics-generator [reportId]=\"reportId\"                                   [reportParamQuery]=\"reportParamQuery\"                                   #analyticsgenerator>     </activiti-analytics-generator> </div>",
        styles: [".chart {display: block; width: 100%;}"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        analytics_service_1.AnalyticsService,
        ng2_alfresco_core_1.LogService])
], AnalyticsComponent);
exports.AnalyticsComponent = AnalyticsComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYW5hbHl0aWNzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7O0FBRUgsc0NBQTRHO0FBQzVHLHVEQUEyRTtBQUMzRSxtRUFBaUU7QUFFakUsaUZBQThFO0FBUTlFLElBQWEsa0JBQWtCO0lBbUIzQiw0QkFBb0IsZ0JBQTRDLEVBQzVDLGdCQUFrQyxFQUNsQyxVQUFzQjtRQUZ0QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQTRCO1FBQzVDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQVoxQyxVQUFLLEdBQVksS0FBSyxDQUFDO1FBR3ZCLGVBQVUsR0FBRyxJQUFJLG1CQUFZLEVBQUUsQ0FBQztRQVU1QixVQUFVLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDdEMsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBQ25CLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLHdCQUF3QixFQUFFLHlDQUF5QyxDQUFDLENBQUM7UUFDL0csQ0FBQztJQUNMLENBQUM7SUFFRCx3Q0FBVyxHQUFYLFVBQVksT0FBc0I7UUFDOUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFTSx1Q0FBVSxHQUFqQixVQUFrQixNQUFNO1FBQ3BCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU0sa0NBQUssR0FBWjtRQUNJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRU0seUNBQVksR0FBbkIsVUFBb0IsSUFBWTtRQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUwseUJBQUM7QUFBRCxDQTVDQSxBQTRDQyxJQUFBO0FBekNHO0lBREMsWUFBSyxFQUFFOztpREFDTTtBQUdkO0lBREMsWUFBSyxFQUFFOztvREFDUztBQUdqQjtJQURDLFlBQUssRUFBRTs7aURBQ2U7QUFHdkI7SUFEQyxhQUFNLEVBQUU7O3NEQUN1QjtBQUdoQztJQURDLGdCQUFTLENBQUMsb0JBQW9CLENBQUM7OEJBQ1osMkRBQTJCOzhEQUFDO0FBZnZDLGtCQUFrQjtJQU45QixnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsUUFBUSxFQUFFLHlqQkFBeWpCO1FBQ25rQixNQUFNLEVBQUUsQ0FBQyx1Q0FBdUMsQ0FBQztLQUNwRCxDQUFDO3FDQW9Cd0MsOENBQTBCO1FBQzFCLG9DQUFnQjtRQUN0Qiw4QkFBVTtHQXJCakMsa0JBQWtCLENBNEM5QjtBQTVDWSxnREFBa0IiLCJmaWxlIjoiY29tcG9uZW50cy9hbmFseXRpY3MuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgSW5wdXQsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcywgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGZyZXNjb1RyYW5zbGF0aW9uU2VydmljZSwgTG9nU2VydmljZSB9IGZyb20gJ25nMi1hbGZyZXNjby1jb3JlJztcbmltcG9ydCB7IEFuYWx5dGljc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hbmFseXRpY3Muc2VydmljZSc7XG5pbXBvcnQgeyBSZXBvcnRRdWVyeSB9IGZyb20gJy4uL21vZGVscy9yZXBvcnQubW9kZWwnO1xuaW1wb3J0IHsgQW5hbHl0aWNzR2VuZXJhdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9hbmFseXRpY3MtZ2VuZXJhdG9yLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgc2VsZWN0b3I6ICdhY3Rpdml0aS1hbmFseXRpY3MnLFxuICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcImNvbC1tZC02XFxcIj4gICAgIDxhbmFseXRpY3MtcmVwb3J0LXBhcmFtZXRlcnMgW2FwcElkXT1cXFwiYXBwSWRcXFwiIFtyZXBvcnRJZF09XFxcInJlcG9ydElkXFxcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAob25Gb3JtVmFsdWVDaGFuZ2VkKT1cXFwicmVzZXQoKVxcXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9uU3VjY2Vzcyk9XFxcInNob3dSZXBvcnQoJGV2ZW50KVxcXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9uRWRpdCk9XFxcIm9uRWRpdFJlcG9ydCgkZXZlbnQpXFxcIj4gICAgIDwvYW5hbHl0aWNzLXJlcG9ydC1wYXJhbWV0ZXJzPiAgICAgIDxhY3Rpdml0aS1hbmFseXRpY3MtZ2VuZXJhdG9yIFtyZXBvcnRJZF09XFxcInJlcG9ydElkXFxcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3JlcG9ydFBhcmFtUXVlcnldPVxcXCJyZXBvcnRQYXJhbVF1ZXJ5XFxcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2FuYWx5dGljc2dlbmVyYXRvcj4gICAgIDwvYWN0aXZpdGktYW5hbHl0aWNzLWdlbmVyYXRvcj4gPC9kaXY+XCIsXG4gICAgc3R5bGVzOiBbXCIuY2hhcnQge2Rpc3BsYXk6IGJsb2NrOyB3aWR0aDogMTAwJTt9XCJdXG59KVxuZXhwb3J0IGNsYXNzIEFuYWx5dGljc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgICBASW5wdXQoKVxuICAgIGFwcElkOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIHJlcG9ydElkOiBudW1iZXI7XG5cbiAgICBASW5wdXQoKVxuICAgIGRlYnVnOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlZGl0UmVwb3J0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgQFZpZXdDaGlsZCgnYW5hbHl0aWNzZ2VuZXJhdG9yJylcbiAgICBhbmFseXRpY3NnZW5lcmF0b3I6IEFuYWx5dGljc0dlbmVyYXRvckNvbXBvbmVudDtcblxuICAgIHJlcG9ydFBhcmFtUXVlcnk6IFJlcG9ydFF1ZXJ5O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2xhdGVTZXJ2aWNlOiBBbGZyZXNjb1RyYW5zbGF0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGFuYWx5dGljc1NlcnZpY2U6IEFuYWx5dGljc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XG4gICAgICAgIGxvZ1NlcnZpY2UuaW5mbygnQW5hbHl0aWNzQ29tcG9uZW50Jyk7XG4gICAgICAgIGlmICh0cmFuc2xhdGVTZXJ2aWNlKSB7XG4gICAgICAgICAgICB0cmFuc2xhdGVTZXJ2aWNlLmFkZFRyYW5zbGF0aW9uRm9sZGVyKCduZzItYWN0aXZpdGktYW5hbHl0aWNzJywgJ25vZGVfbW9kdWxlcy9uZzItYWN0aXZpdGktYW5hbHl0aWNzL3NyYycpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLmFuYWx5dGljc2dlbmVyYXRvci5yZXNldCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93UmVwb3J0KCRldmVudCkge1xuICAgICAgICB0aGlzLmFuYWx5dGljc2dlbmVyYXRvci5nZW5lcmF0ZVJlcG9ydCh0aGlzLnJlcG9ydElkLCAkZXZlbnQpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNldCgpIHtcbiAgICAgICAgdGhpcy5hbmFseXRpY3NnZW5lcmF0b3IucmVzZXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25FZGl0UmVwb3J0KG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmVkaXRSZXBvcnQuZW1pdChuYW1lKTtcbiAgICB9XG5cbn1cbiJdfQ==
