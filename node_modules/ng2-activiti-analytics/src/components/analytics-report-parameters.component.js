/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var moment = require("moment");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var analytics_service_1 = require("../services/analytics.service");
var report_model_1 = require("../models/report.model");
var AnalyticsReportParametersComponent = AnalyticsReportParametersComponent_1 = (function () {
    function AnalyticsReportParametersComponent(translateService, analyticsService, formBuilder, logService) {
        this.translateService = translateService;
        this.analyticsService = analyticsService;
        this.formBuilder = formBuilder;
        this.logService = logService;
        this.debug = false;
        this.onSuccess = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.onEdit = new core_1.EventEmitter();
        this.onFormValueChanged = new core_1.EventEmitter();
        this.onDropdownChanged = new core_1.EventEmitter();
        this.onSuccessReportParams = new core_1.EventEmitter();
        this.onSuccessParamOpt = new core_1.EventEmitter();
        this.isEditable = false;
        this.hideParameters = true;
        if (translateService) {
            translateService.addTranslationFolder('ng2-activiti-analytics', 'node_modules/ng2-activiti-analytics/src');
        }
    }
    AnalyticsReportParametersComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initForm();
        this.dropDownSub = this.onDropdownChanged.subscribe(function (field) {
            var paramDependOn = _this.reportParameters.definition.parameters.find(function (p) { return p.dependsOn === field.id; });
            if (paramDependOn) {
                _this.retrieveParameterOptions(_this.reportParameters.definition.parameters, _this.appId, _this.reportId, field.value);
            }
        });
        this.paramOpts = this.onSuccessReportParams.subscribe(function (report) {
            if (report.hasParameters()) {
                _this.retrieveParameterOptions(report.definition.parameters, _this.appId);
            }
        });
        this.reportForm.valueChanges.subscribe(function (data) { return _this.onValueChanged(data); });
    };
    AnalyticsReportParametersComponent.prototype.ngOnChanges = function (changes) {
        this.isEditable = false;
        var reportId = changes['reportId'];
        if (reportId && reportId.currentValue) {
            this.getReportParams(reportId.currentValue);
        }
        var appId = changes['appId'];
        if (appId && (appId.currentValue || appId.currentValue === null)) {
            this.getReportParams(this.reportId);
        }
    };
    AnalyticsReportParametersComponent.prototype.initForm = function () {
        this.reportForm = this.formBuilder.group({
            dateRange: new forms_1.FormGroup({}),
            statusGroup: new forms_1.FormGroup({
                status: new forms_1.FormControl()
            }),
            processInstanceGroup: new forms_1.FormGroup({
                slowProcessInstanceInteger: new forms_1.FormControl()
            }),
            taskGroup: new forms_1.FormGroup({
                taskName: new forms_1.FormControl()
            }),
            typeFilteringGroup: new forms_1.FormGroup({
                typeFiltering: new forms_1.FormControl()
            }),
            dateIntervalGroup: new forms_1.FormGroup({
                dateRangeInterval: new forms_1.FormControl()
            }),
            durationGroup: new forms_1.FormGroup({
                duration: new forms_1.FormControl()
            }),
            processDefGroup: new forms_1.FormGroup({
                processDefinitionId: new forms_1.FormControl()
            })
        });
    };
    AnalyticsReportParametersComponent.prototype.getReportParams = function (reportId) {
        var _this = this;
        this.reportParamsSub = this.analyticsService.getReportParams(reportId).subscribe(function (res) {
            _this.reportParameters = res;
            if (_this.reportParameters.hasParameters()) {
                _this.onSuccessReportParams.emit(res);
            }
            else {
                _this.onSuccess.emit();
            }
        }, function (err) {
            _this.logService.error(err);
            _this.onError.emit(err);
        });
    };
    AnalyticsReportParametersComponent.prototype.retrieveParameterOptions = function (parameters, appId, reportId, processDefinitionId) {
        var _this = this;
        parameters.forEach(function (param) {
            _this.analyticsService.getParamValuesByType(param.type, appId, reportId, processDefinitionId).subscribe(function (opts) {
                param.options = opts;
                _this.onSuccessParamOpt.emit(opts);
            }, function (err) {
                _this.logService.error(err);
                _this.onError.emit(err);
            });
        });
    };
    AnalyticsReportParametersComponent.prototype.onProcessDefinitionChanges = function (field) {
        if (field.value) {
            this.onDropdownChanged.emit(field);
        }
    };
    AnalyticsReportParametersComponent.prototype.submit = function (values) {
        var reportParamQuery = this.convertFormValuesToReportParamQuery(values);
        this.onSuccess.emit(reportParamQuery);
    };
    AnalyticsReportParametersComponent.prototype.onValueChanged = function (values) {
        this.onFormValueChanged.emit(values);
        if (this.reportForm && this.reportForm.valid) {
            this.submit(values);
        }
    };
    AnalyticsReportParametersComponent.prototype.convertMomentDate = function (date) {
        return moment(date, AnalyticsReportParametersComponent_1.FORMAT_DATE_ACTIVITI, true)
            .format(AnalyticsReportParametersComponent_1.FORMAT_DATE_ACTIVITI) + 'T00:00:00.000Z';
    };
    AnalyticsReportParametersComponent.prototype.convertNumber = function (value) {
        return value != null ? parseInt(value, 10) : 0;
    };
    AnalyticsReportParametersComponent.prototype.convertFormValuesToReportParamQuery = function (values) {
        var reportParamQuery = new report_model_1.ReportQuery();
        reportParamQuery.dateRange.startDate = this.convertMomentDate(values.dateRange.startDate);
        reportParamQuery.dateRange.endDate = this.convertMomentDate(values.dateRange.endDate);
        reportParamQuery.status = values.statusGroup.status;
        reportParamQuery.processDefinitionId = values.processDefGroup.processDefinitionId;
        reportParamQuery.taskName = values.taskGroup.taskName;
        reportParamQuery.duration = values.durationGroup.duration;
        reportParamQuery.dateRangeInterval = values.dateIntervalGroup.dateRangeInterval;
        reportParamQuery.slowProcessInstanceInteger = this.convertNumber(values.processInstanceGroup.slowProcessInstanceInteger);
        reportParamQuery.typeFiltering = values.typeFilteringGroup.typeFiltering;
        return reportParamQuery;
    };
    AnalyticsReportParametersComponent.prototype.ngOnDestroy = function () {
        this.dropDownSub.unsubscribe();
        this.paramOpts.unsubscribe();
        if (this.reportParamsSub) {
            this.reportParamsSub.unsubscribe();
        }
    };
    AnalyticsReportParametersComponent.prototype.editEnable = function () {
        this.isEditable = true;
    };
    AnalyticsReportParametersComponent.prototype.editDisable = function () {
        this.isEditable = false;
    };
    AnalyticsReportParametersComponent.prototype.editTitle = function () {
        var _this = this;
        this.reportParamsSub = this.analyticsService.updateReport(this.reportParameters.id, this.reportParameters.name).subscribe(function (res) {
            _this.editDisable();
            _this.onEdit.emit(_this.reportParameters.name);
        }, function (err) {
            _this.logService.error(err);
            _this.onError.emit(err);
        });
    };
    AnalyticsReportParametersComponent.prototype.ngAfterViewChecked = function () {
        if (componentHandler) {
            componentHandler.upgradeAllRegistered();
        }
    };
    AnalyticsReportParametersComponent.prototype.toggleParameters = function () {
        this.hideParameters = !this.hideParameters;
    };
    AnalyticsReportParametersComponent.prototype.isParametersHide = function () {
        return this.hideParameters;
    };
    return AnalyticsReportParametersComponent;
}());
AnalyticsReportParametersComponent.FORMAT_DATE_ACTIVITI = 'YYYY-MM-DD';
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AnalyticsReportParametersComponent.prototype, "appId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], AnalyticsReportParametersComponent.prototype, "reportId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], AnalyticsReportParametersComponent.prototype, "debug", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AnalyticsReportParametersComponent.prototype, "onSuccess", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AnalyticsReportParametersComponent.prototype, "onError", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AnalyticsReportParametersComponent.prototype, "onEdit", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], AnalyticsReportParametersComponent.prototype, "onFormValueChanged", void 0);
AnalyticsReportParametersComponent = AnalyticsReportParametersComponent_1 = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'analytics-report-parameters',
        template: "<div class=\"report-container\">     <a class=\"mdl-navigation__link setting-button\" data-automation-id=\"settings\">         <button (click)=\"toggleParameters()\" class=\"mdl-button mdl-js-button mdl-button--fab mdl-button--colored\">             <i class=\"material-icons\">settings</i>         </button>         <span class=\"report-container-setting\">{{'ANALYTICS.MESSAGES.SETTING-TITLE' | translate}}</span>     </a>     <div class=\"col-md-6\" [class.is-hide]=\"isParametersHide()\" >         <div *ngIf=\"reportParameters\">             <form [formGroup]=\"reportForm\" novalidate>             <div *ngIf=\"isEditable\">                 <input                         type=\"text\"                         class=\"mdl-textfield__input large\"                         id=\"reportName\"                         autofocus                         data-automation-id=\"reportName\"                         [value]=\"reportParameters.name\"                         (input)=\"reportParameters.name=$event.target.value\"                         (blur)=\"editTitle($event)\"                         />             </div>             <div *ngIf=\"!isEditable\">                 <span class=\"icon-small\">                 <i class=\"material-icons\">mode_edit</i>                 <h4 (click)=\"editEnable()\">{{reportParameters.name}}</h4>                 </span>             </div><hr>             <div *ngFor=\"let field of reportParameters.definition.parameters\">                 <div [ngSwitch]=\"field.type\">                     <div *ngSwitchCase=\"'integer'\">                         <br>                         <number-widget [field]=\"field\" [group]=\"reportForm.controls.processInstanceGroup\" [controllerName]=\"'slowProcessInstanceInteger'\"                                        [required]=\"true\"></number-widget>                     </div>                     <div *ngSwitchCase=\"'duration'\">                         <br>                         <duration-widget [field]=\"field\" [group]=\"reportForm.controls.durationGroup\"                                          [controllerName]=\"'duration'\"></duration-widget>                     </div>                     <div *ngSwitchCase=\"'boolean'\">                         <br>                         <checkbox-widget [field]=\"field\" [group]=\"reportForm.controls.typeFilteringGroup\"                                          [controllerName]=\"'typeFiltering'\"></checkbox-widget>                     </div>                     <div *ngSwitchCase=\"'status'\">                         <br>                         <dropdown-widget [field]=\"field\" [group]=\"reportForm.controls.statusGroup\" [controllerName]=\"'status'\"                                          [required]=\"true\"></dropdown-widget>                     </div>                     <div *ngSwitchCase=\"'processDefinition'\">                         <br>                         <dropdown-widget [field]=\"field\" [group]=\"reportForm.controls.processDefGroup\" [controllerName]=\"'processDefinitionId'\"                                          [required]=\"true\" (fieldChanged)=\"onProcessDefinitionChanges(field)\"></dropdown-widget>                     </div>                     <div *ngSwitchCase=\"'task'\">                         <br>                         <dropdown-widget [field]=\"field\" [group]=\"reportForm.controls.taskGroup\" [controllerName]=\"'taskName'\"                                          [required]=\"true\"></dropdown-widget>                     </div>                     <div *ngSwitchCase=\"'dateRange'\">                         <br>                         <date-range-widget [field]=\"field\" [group]=\"reportForm.controls.dateRange\"></date-range-widget>                     </div>                     <div *ngSwitchCase=\"'dateInterval'\">                         <br>                         <dropdown-widget [field]=\"field\" [group]=\"reportForm.controls.dateIntervalGroup\" [controllerName]=\"'dateRangeInterval'\"                                          [required]=\"true\" [showDefaultOption]=\"false\"></dropdown-widget>                     </div>                     <div *ngSwitchDefault>                         <span>{{'ANALYTICS.MESSAGES.UNKNOWN-WIDGET-TYPE' | translate}}: {{field.type}}</span>                     </div>                 </div>             </div>             <div *ngIf=\"debug\">                 <p>ReportForm valid : {{ reportForm.valid }}</p>                 <p>ReportForm status : {{ reportForm.errors | json }}</p>                 <p>ReportForm FormGroup valid : {{reportForm && reportForm.controls.dateRange.valid | json }}</p>             </div>             </form>         </div>     </div> </div>",
        styles: [".dropdown-widget {     width: 100%; }  .dropdown-widget__select {     width: 100%; }  .dropdown-widget__invalid .dropdown-widget__select {     border-color: #d50000; }  .dropdown-widget__invalid .dropdown-widget__label {     color: #d50000; }  .dropdown-widget__invalid .dropdown-widget__label:after {     background-color: #d50000; }  .dropdown-widget__invalid .mdl-textfield__error {     visibility: visible !important; }  .large {     font-size: x-large;     margin-top: 24px;     margin-left: 12px; }  .icon-small i {     float: left;     margin-right: 10px;     display: none;     position: absolute; }  .icon-small h4 {     clear: left;     margin-left: 26px; }  .icon-small:hover {     color: rgb(68,138,255);     cursor: pointer; }  .icon-small:hover .material-icons {     display: block; }  .is-hide {     height: 0px;     overflow: hidden;     transition: height 0.5s; }  .report-container {     border: solid 1px rgb(212, 212, 212);     padding: 10px 10px 10px 10px; }  .report-container-setting {     padding-left: 10px; }"]
    }),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoTranslationService,
        analytics_service_1.AnalyticsService,
        forms_1.FormBuilder,
        ng2_alfresco_core_1.LogService])
], AnalyticsReportParametersComponent);
exports.AnalyticsReportParametersComponent = AnalyticsReportParametersComponent;
var AnalyticsReportParametersComponent_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
