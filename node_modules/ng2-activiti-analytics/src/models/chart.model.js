/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var moment = require("moment");
var Chart = (function () {
    function Chart(obj) {
        this.id = obj && obj.id || null;
        if (obj && obj.type) {
            this.type = this.convertType(obj.type);
        }
    }
    Chart.prototype.convertType = function (type) {
        var chartType = '';
        switch (type) {
            case 'pieChart':
                chartType = 'pie';
                break;
            case 'table':
                chartType = 'table';
                break;
            case 'line':
                chartType = 'line';
                break;
            case 'barChart':
                chartType = 'bar';
                break;
            case 'multiBarChart':
                chartType = 'multiBar';
                break;
            case 'processDefinitionHeatMap':
                chartType = 'HeatMap';
                break;
            case 'masterDetailTable':
                chartType = 'masterDetailTable';
                break;
            default:
                chartType = 'table';
                break;
        }
        return chartType;
    };
    return Chart;
}());
exports.Chart = Chart;
var LineChart = (function (_super) {
    __extends(LineChart, _super);
    function LineChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.labels = [];
        _this.datasets = [];
        _this.title = obj && obj.title || null;
        _this.titleKey = obj && obj.titleKey || null;
        _this.labels = obj && obj.columnNames.slice(1, obj.columnNames.length);
        obj.rows.forEach(function (value) {
            _this.datasets.push({ data: value.slice(1, value.length), label: value[0] });
        });
        return _this;
    }
    return LineChart;
}(Chart));
exports.LineChart = LineChart;
var BarChart = (function (_super) {
    __extends(BarChart, _super);
    function BarChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.labels = [];
        _this.datasets = [];
        _this.data = [];
        _this.options = {
            responsive: true,
            scales: {
                yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            stepSize: 1
                        }
                    }],
                xAxes: [{
                        ticks: {},
                        stacked: false
                    }]
            }
        };
        _this.xAxisTickFormatFunction = function (xAxisType) {
            return function (value) {
                if (xAxisType !== null && xAxisType !== undefined) {
                    if ('date_day' === xAxisType) {
                        return moment(new Date(value)).format('DD');
                    }
                    else if ('date_month' === xAxisType) {
                        return moment(new Date(value)).format('MMMM');
                    }
                    else if ('date_year' === xAxisType) {
                        return moment(new Date(value)).format('YYYY');
                    }
                }
                return value;
            };
        };
        _this.yAxisTickFormatFunction = function (yAxisType) {
            return function (value) {
                if (yAxisType !== null && yAxisType !== undefined) {
                    if ('count' === yAxisType) {
                        var label = '' + value;
                        if (label.indexOf('.') !== -1) {
                            return '';
                        }
                    }
                }
                return value;
            };
        };
        _this.title = obj && obj.title || null;
        _this.titleKey = obj && obj.titleKey || null;
        _this.xAxisType = obj && obj.xAxisType || null;
        _this.yAxisType = obj && obj.yAxisType || null;
        _this.options.scales.xAxes[0].ticks.callback = _this.xAxisTickFormatFunction(_this.xAxisType);
        _this.options.scales.yAxes[0].ticks.callback = _this.yAxisTickFormatFunction(_this.yAxisType);
        if (obj.values) {
            obj.values.forEach(function (params) {
                var dataValue = [];
                params.values.forEach(function (info) {
                    info.forEach(function (value, index) {
                        if (index % 2 === 0) {
                            if (!_this.labels.includes(value)) {
                                _this.labels.push(value);
                            }
                        }
                        else {
                            dataValue.push(value);
                        }
                    });
                });
                if (dataValue && dataValue.length > 0) {
                    _this.datasets.push({ data: dataValue, label: params.key });
                }
            });
        }
        return _this;
    }
    BarChart.prototype.hasDatasets = function () {
        return this.datasets && this.datasets.length > 0 ? true : false;
    };
    return BarChart;
}(Chart));
exports.BarChart = BarChart;
var MultiBarChart = (function (_super) {
    __extends(MultiBarChart, _super);
    function MultiBarChart(obj) {
        return _super.call(this, obj) || this;
    }
    return MultiBarChart;
}(BarChart));
exports.MultiBarChart = MultiBarChart;
var TableChart = (function (_super) {
    __extends(TableChart, _super);
    function TableChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.labels = [];
        _this.datasets = [];
        _this.title = obj && obj.title || null;
        _this.titleKey = obj && obj.titleKey || null;
        _this.labels = obj && obj.columnNames;
        if (obj.rows) {
            _this.datasets = obj && obj.rows;
        }
        return _this;
    }
    TableChart.prototype.hasDatasets = function () {
        return this.datasets && this.datasets.length > 0 ? true : false;
    };
    return TableChart;
}(Chart));
exports.TableChart = TableChart;
var DetailsTableChart = (function (_super) {
    __extends(DetailsTableChart, _super);
    function DetailsTableChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.showDetails = false;
        if (obj.detailTables) {
            _this.detailsTable = new TableChart(obj.detailTables[0]);
        }
        return _this;
    }
    DetailsTableChart.prototype.hasDetailsTable = function () {
        return this.detailsTable ? true : false;
    };
    return DetailsTableChart;
}(TableChart));
exports.DetailsTableChart = DetailsTableChart;
var HeatMapChart = (function (_super) {
    __extends(HeatMapChart, _super);
    function HeatMapChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.avgTimePercentages = obj && obj.avgTimePercentages || null;
        _this.avgTimeValues = obj && obj.avgTimeValues || null;
        _this.processDefinitionId = obj && obj.processDefinitionId || null;
        _this.totalCountValues = obj && obj.totalCountValues || null;
        _this.titleKey = obj && obj.titleKey || null;
        _this.totalCountsPercentages = obj && obj.totalCountsPercentages || null;
        _this.totalTimePercentages = obj && obj.totalTimePercentages || null;
        _this.totalTimeValues = obj && obj.totalTimeValues || null;
        return _this;
    }
    return HeatMapChart;
}(Chart));
exports.HeatMapChart = HeatMapChart;
var PieChart = (function (_super) {
    __extends(PieChart, _super);
    function PieChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.labels = [];
        _this.data = [];
        _this.title = obj && obj.title || null;
        _this.titleKey = obj && obj.titleKey || null;
        if (obj.values) {
            obj.values.forEach(function (value) {
                _this.add(value.key, value.y);
            });
        }
        return _this;
    }
    PieChart.prototype.add = function (label, data) {
        this.labels.push(label);
        this.data.push(data);
    };
    PieChart.prototype.hasData = function () {
        return this.data && this.data.length > 0 ? true : false;
    };
    PieChart.prototype.hasZeroValues = function () {
        var isZeroValues = false;
        if (this.hasData()) {
            isZeroValues = true;
            this.data.forEach(function (value) {
                if (value.toString() !== '0') {
                    isZeroValues = false;
                }
            });
        }
        return isZeroValues;
    };
    return PieChart;
}(Chart));
exports.PieChart = PieChart;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVscy9jaGFydC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7QUFFSCwrQkFBaUM7QUFFakM7SUFJSSxlQUFZLEdBQVM7UUFDakIsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUM7UUFDaEMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsQ0FBQztJQUNMLENBQUM7SUFFTywyQkFBVyxHQUFuQixVQUFvQixJQUFZO1FBQzVCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1gsS0FBSyxVQUFVO2dCQUNYLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ2xCLEtBQUssQ0FBQztZQUNWLEtBQUssT0FBTztnQkFDUixTQUFTLEdBQUcsT0FBTyxDQUFDO2dCQUNwQixLQUFLLENBQUM7WUFDVixLQUFLLE1BQU07Z0JBQ1AsU0FBUyxHQUFHLE1BQU0sQ0FBQztnQkFDbkIsS0FBSyxDQUFDO1lBQ1YsS0FBSyxVQUFVO2dCQUNYLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ2xCLEtBQUssQ0FBQztZQUNWLEtBQUssZUFBZTtnQkFDaEIsU0FBUyxHQUFHLFVBQVUsQ0FBQztnQkFDdkIsS0FBSyxDQUFDO1lBQ1YsS0FBSywwQkFBMEI7Z0JBQzNCLFNBQVMsR0FBRyxTQUFTLENBQUM7Z0JBQ3RCLEtBQUssQ0FBQztZQUNYLEtBQUssbUJBQW1CO2dCQUNuQixTQUFTLEdBQUcsbUJBQW1CLENBQUM7Z0JBQ2hDLEtBQUssQ0FBQztZQUNWO2dCQUNJLFNBQVMsR0FBRyxPQUFPLENBQUM7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bEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNqQixZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSztnQkFDcEIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQzNCLFlBQVksR0FBRyxLQUFLLENBQUM7Z0JBQ3pCLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7UUFDRCxNQUFNLENBQUMsWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFDTCxlQUFDO0FBQUQsQ0F0Q0EsQUFzQ0MsQ0F0QzZCLEtBQUssR0FzQ2xDO0FBdENZLDRCQUFRIiwiZmlsZSI6Im1vZGVscy9jaGFydC5tb2RlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5leHBvcnQgY2xhc3MgQ2hhcnQge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIHRoaXMuaWQgPSBvYmogJiYgb2JqLmlkIHx8IG51bGw7XG4gICAgICAgIGlmIChvYmogJiYgb2JqLnR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHRoaXMuY29udmVydFR5cGUob2JqLnR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb252ZXJ0VHlwZSh0eXBlOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IGNoYXJ0VHlwZSA9ICcnO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3BpZUNoYXJ0JzpcbiAgICAgICAgICAgICAgICBjaGFydFR5cGUgPSAncGllJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RhYmxlJzpcbiAgICAgICAgICAgICAgICBjaGFydFR5cGUgPSAndGFibGUnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbGluZSc6XG4gICAgICAgICAgICAgICAgY2hhcnRUeXBlID0gJ2xpbmUnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYmFyQ2hhcnQnOlxuICAgICAgICAgICAgICAgIGNoYXJ0VHlwZSA9ICdiYXInO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbXVsdGlCYXJDaGFydCc6XG4gICAgICAgICAgICAgICAgY2hhcnRUeXBlID0gJ211bHRpQmFyJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3Byb2Nlc3NEZWZpbml0aW9uSGVhdE1hcCc6XG4gICAgICAgICAgICAgICAgY2hhcnRUeXBlID0gJ0hlYXRNYXAnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICBjYXNlICdtYXN0ZXJEZXRhaWxUYWJsZSc6XG4gICAgICAgICAgICAgICAgY2hhcnRUeXBlID0gJ21hc3RlckRldGFpbFRhYmxlJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2hhcnRUeXBlID0gJ3RhYmxlJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhcnRUeXBlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIExpbmVDaGFydCBleHRlbmRzIENoYXJ0IHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIHRpdGxlS2V5OiBzdHJpbmc7XG4gICAgbGFiZWxzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGRhdGFzZXRzOiBhbnlbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIHN1cGVyKG9iaik7XG4gICAgICAgIHRoaXMudGl0bGUgPSBvYmogJiYgb2JqLnRpdGxlIHx8IG51bGw7XG4gICAgICAgIHRoaXMudGl0bGVLZXkgPSBvYmogJiYgb2JqLnRpdGxlS2V5IHx8IG51bGw7XG4gICAgICAgIHRoaXMubGFiZWxzID0gb2JqICYmIG9iai5jb2x1bW5OYW1lcy5zbGljZSgxLCBvYmouY29sdW1uTmFtZXMubGVuZ3RoKTtcblxuICAgICAgICBvYmoucm93cy5mb3JFYWNoKCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGFzZXRzLnB1c2goe2RhdGE6IHZhbHVlLnNsaWNlKDEsIHZhbHVlLmxlbmd0aCksIGxhYmVsOiB2YWx1ZVswXX0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCYXJDaGFydCBleHRlbmRzIENoYXJ0IHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIHRpdGxlS2V5OiBzdHJpbmc7XG4gICAgbGFiZWxzOiBhbnkgPSBbXTtcbiAgICBkYXRhc2V0czogYW55W10gPSBbXTtcbiAgICBkYXRhOiBhbnlbXSA9IFtdO1xuICAgIHhBeGlzVHlwZTogc3RyaW5nO1xuICAgIHlBeGlzVHlwZTogc3RyaW5nO1xuICAgIG9wdGlvbnM6IGFueSA9IHtcbiAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICB5QXhlczogW3tcbiAgICAgICAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3RlcFNpemU6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIHhBeGVzOiBbe1xuICAgICAgICAgICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdGFja2VkOiBmYWxzZVxuICAgICAgICAgICAgfV1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBhbnkpIHtcbiAgICAgICAgc3VwZXIob2JqKTtcbiAgICAgICAgdGhpcy50aXRsZSA9IG9iaiAmJiBvYmoudGl0bGUgfHwgbnVsbDtcbiAgICAgICAgdGhpcy50aXRsZUtleSA9IG9iaiAmJiBvYmoudGl0bGVLZXkgfHwgbnVsbDtcbiAgICAgICAgdGhpcy54QXhpc1R5cGUgPSBvYmogJiYgb2JqLnhBeGlzVHlwZSB8fCBudWxsO1xuICAgICAgICB0aGlzLnlBeGlzVHlwZSA9IG9iaiAmJiBvYmoueUF4aXNUeXBlIHx8IG51bGw7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zY2FsZXMueEF4ZXNbMF0udGlja3MuY2FsbGJhY2sgPSB0aGlzLnhBeGlzVGlja0Zvcm1hdEZ1bmN0aW9uKHRoaXMueEF4aXNUeXBlKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnNjYWxlcy55QXhlc1swXS50aWNrcy5jYWxsYmFjayA9IHRoaXMueUF4aXNUaWNrRm9ybWF0RnVuY3Rpb24odGhpcy55QXhpc1R5cGUpO1xuICAgICAgICBpZiAob2JqLnZhbHVlcykge1xuICAgICAgICAgICAgb2JqLnZhbHVlcy5mb3JFYWNoKChwYXJhbXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhVmFsdWUgPSBbXTtcbiAgICAgICAgICAgICAgICBwYXJhbXMudmFsdWVzLmZvckVhY2goKGluZm86IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpbmZvLmZvckVhY2goKHZhbHVlOiBhbnksIGluZGV4OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAlIDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubGFiZWxzLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhYmVscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWYWx1ZS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFWYWx1ZSAmJiBkYXRhVmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzZXRzLnB1c2goe2RhdGE6IGRhdGFWYWx1ZSwgbGFiZWw6IHBhcmFtcy5rZXl9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHhBeGlzVGlja0Zvcm1hdEZ1bmN0aW9uID0gZnVuY3Rpb24gKHhBeGlzVHlwZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoeEF4aXNUeXBlICE9PSBudWxsICYmIHhBeGlzVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCdkYXRlX2RheScgPT09IHhBeGlzVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50KG5ldyBEYXRlKHZhbHVlKSkuZm9ybWF0KCdERCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJ2RhdGVfbW9udGgnID09PSB4QXhpc1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbWVudChuZXcgRGF0ZSh2YWx1ZSkpLmZvcm1hdCgnTU1NTScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJ2RhdGVfeWVhcicgPT09IHhBeGlzVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50KG5ldyBEYXRlKHZhbHVlKSkuZm9ybWF0KCdZWVlZJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICB5QXhpc1RpY2tGb3JtYXRGdW5jdGlvbiA9IGZ1bmN0aW9uICh5QXhpc1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHlBeGlzVHlwZSAhPT0gbnVsbCAmJiB5QXhpc1R5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICgnY291bnQnID09PSB5QXhpc1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhYmVsID0gJycgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsLmluZGV4T2YoJy4nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgaGFzRGF0YXNldHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFzZXRzICYmIHRoaXMuZGF0YXNldHMubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNdWx0aUJhckNoYXJ0IGV4dGVuZHMgQmFyQ2hhcnQge1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIHN1cGVyKG9iaik7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGFibGVDaGFydCBleHRlbmRzIENoYXJ0IHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIHRpdGxlS2V5OiBzdHJpbmc7XG4gICAgbGFiZWxzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGRhdGFzZXRzOiBhbnlbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIHN1cGVyKG9iaik7XG4gICAgICAgIHRoaXMudGl0bGUgPSBvYmogJiYgb2JqLnRpdGxlIHx8IG51bGw7XG4gICAgICAgIHRoaXMudGl0bGVLZXkgPSBvYmogJiYgb2JqLnRpdGxlS2V5IHx8IG51bGw7XG4gICAgICAgIHRoaXMubGFiZWxzID0gb2JqICYmIG9iai5jb2x1bW5OYW1lcztcbiAgICAgICAgaWYgKG9iai5yb3dzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFzZXRzID0gb2JqICYmIG9iai5yb3dzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFzRGF0YXNldHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFzZXRzICYmIHRoaXMuZGF0YXNldHMubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZXRhaWxzVGFibGVDaGFydCBleHRlbmRzIFRhYmxlQ2hhcnQge1xuICAgIGRldGFpbHNUYWJsZTogYW55O1xuICAgIHNob3dEZXRhaWxzOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBhbnkpIHtcbiAgICAgICAgc3VwZXIob2JqKTtcbiAgICAgICAgaWYgKG9iai5kZXRhaWxUYWJsZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGV0YWlsc1RhYmxlID0gbmV3IFRhYmxlQ2hhcnQob2JqLmRldGFpbFRhYmxlc1swXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNEZXRhaWxzVGFibGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRldGFpbHNUYWJsZSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBIZWF0TWFwQ2hhcnQgZXh0ZW5kcyBDaGFydCB7XG4gICAgYXZnVGltZVBlcmNlbnRhZ2VzOiBzdHJpbmc7XG4gICAgYXZnVGltZVZhbHVlczogc3RyaW5nO1xuICAgIHByb2Nlc3NEZWZpbml0aW9uSWQ6IHN0cmluZztcbiAgICB0aXRsZUtleTogc3RyaW5nO1xuICAgIHRvdGFsQ291bnRWYWx1ZXM6IHN0cmluZztcbiAgICB0b3RhbENvdW50c1BlcmNlbnRhZ2VzOiBzdHJpbmc7XG4gICAgdG90YWxUaW1lUGVyY2VudGFnZXM6IHN0cmluZztcbiAgICB0b3RhbFRpbWVWYWx1ZXM6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IGFueSkge1xuICAgICAgICBzdXBlcihvYmopO1xuICAgICAgICB0aGlzLmF2Z1RpbWVQZXJjZW50YWdlcyA9IG9iaiAmJiBvYmouYXZnVGltZVBlcmNlbnRhZ2VzIHx8IG51bGw7XG4gICAgICAgIHRoaXMuYXZnVGltZVZhbHVlcyA9IG9iaiAmJiBvYmouYXZnVGltZVZhbHVlcyB8fCBudWxsO1xuICAgICAgICB0aGlzLnByb2Nlc3NEZWZpbml0aW9uSWQgPSBvYmogJiYgb2JqLnByb2Nlc3NEZWZpbml0aW9uSWQgfHwgbnVsbDtcbiAgICAgICAgdGhpcy50b3RhbENvdW50VmFsdWVzID0gb2JqICYmIG9iai50b3RhbENvdW50VmFsdWVzIHx8IG51bGw7XG4gICAgICAgIHRoaXMudGl0bGVLZXkgPSBvYmogJiYgb2JqLnRpdGxlS2V5IHx8IG51bGw7XG4gICAgICAgIHRoaXMudG90YWxDb3VudHNQZXJjZW50YWdlcyA9IG9iaiAmJiBvYmoudG90YWxDb3VudHNQZXJjZW50YWdlcyB8fCBudWxsO1xuICAgICAgICB0aGlzLnRvdGFsVGltZVBlcmNlbnRhZ2VzID0gb2JqICYmIG9iai50b3RhbFRpbWVQZXJjZW50YWdlcyB8fCBudWxsO1xuICAgICAgICB0aGlzLnRvdGFsVGltZVZhbHVlcyA9IG9iaiAmJiBvYmoudG90YWxUaW1lVmFsdWVzIHx8IG51bGw7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGllQ2hhcnQgZXh0ZW5kcyBDaGFydCB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICB0aXRsZUtleTogc3RyaW5nO1xuICAgIGxhYmVsczogc3RyaW5nW10gPSBbXTtcbiAgICBkYXRhOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIHN1cGVyKG9iaik7XG4gICAgICAgIHRoaXMudGl0bGUgPSBvYmogJiYgb2JqLnRpdGxlIHx8IG51bGw7XG4gICAgICAgIHRoaXMudGl0bGVLZXkgPSBvYmogJiYgb2JqLnRpdGxlS2V5IHx8IG51bGw7XG4gICAgICAgIGlmIChvYmoudmFsdWVzKSB7XG4gICAgICAgICAgICBvYmoudmFsdWVzLmZvckVhY2goKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZCh2YWx1ZS5rZXksIHZhbHVlLnkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGQobGFiZWw6IHN0cmluZywgZGF0YTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubGFiZWxzLnB1c2gobGFiZWwpO1xuICAgICAgICB0aGlzLmRhdGEucHVzaChkYXRhKTtcbiAgICB9XG5cbiAgICBoYXNEYXRhKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhICYmIHRoaXMuZGF0YS5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIGhhc1plcm9WYWx1ZXMoKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBpc1plcm9WYWx1ZXM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuaGFzRGF0YSgpKSB7XG4gICAgICAgICAgICBpc1plcm9WYWx1ZXMgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLnRvU3RyaW5nKCkgIT09ICcwJykge1xuICAgICAgICAgICAgICAgICAgICBpc1plcm9WYWx1ZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNaZXJvVmFsdWVzO1xuICAgIH1cbn1cbiJdfQ==
