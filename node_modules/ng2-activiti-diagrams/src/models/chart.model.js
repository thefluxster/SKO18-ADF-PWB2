/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Chart = (function () {
    function Chart(obj) {
        this.id = obj && obj.id || null;
        if (obj && obj.type) {
            this.type = this.convertType(obj.type);
        }
    }
    Chart.prototype.convertType = function (type) {
        var chartType = '';
        switch (type) {
            case 'pieChart':
                chartType = 'pie';
                break;
            case 'table':
                chartType = 'table';
                break;
            case 'line':
                chartType = 'line';
                break;
            case 'barChart':
                chartType = 'bar';
                break;
            case 'processDefinitionHeatMap':
                chartType = 'HeatMap';
                break;
            default:
                chartType = 'table';
                break;
        }
        return chartType;
    };
    return Chart;
}());
exports.Chart = Chart;
var LineChart = (function (_super) {
    __extends(LineChart, _super);
    function LineChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.labels = [];
        _this.datasets = [];
        _this.title = obj && obj.title || null;
        _this.titleKey = obj && obj.titleKey || null;
        _this.labels = obj && obj.columnNames.slice(1, obj.columnNames.length);
        obj.rows.forEach(function (value) {
            _this.datasets.push({ data: value.slice(1, value.length), label: value[0] });
        });
        return _this;
    }
    return LineChart;
}(Chart));
exports.LineChart = LineChart;
var BarChart = (function (_super) {
    __extends(BarChart, _super);
    function BarChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.labels = [];
        _this.datasets = [];
        _this.data = [];
        _this.options = {
            scales: {
                yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            stepSize: 1
                        }
                    }]
            }
        };
        _this.title = obj && obj.title || null;
        _this.titleKey = obj && obj.titleKey || null;
        obj.values.forEach(function (params) {
            var dataValue = [];
            params.values.forEach(function (info) {
                info.forEach(function (value, index) {
                    if (index % 2 === 0) {
                        _this.labels.push(value);
                    }
                    else {
                        dataValue.push(value);
                    }
                });
            });
            if (dataValue && dataValue.length > 0) {
                _this.datasets.push({ data: dataValue, label: params.key });
            }
        });
        return _this;
    }
    BarChart.prototype.hasDatasets = function () {
        return this.datasets && this.datasets.length > 0 ? true : false;
    };
    return BarChart;
}(Chart));
exports.BarChart = BarChart;
var TableChart = (function (_super) {
    __extends(TableChart, _super);
    function TableChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.labels = [];
        _this.datasets = [];
        _this.title = obj && obj.title || null;
        _this.titleKey = obj && obj.titleKey || null;
        _this.labels = obj && obj.columnNames;
        if (obj.rows) {
            _this.datasets = obj && obj.rows;
        }
        return _this;
    }
    TableChart.prototype.hasDatasets = function () {
        return this.datasets && this.datasets.length > 0 ? true : false;
    };
    return TableChart;
}(Chart));
exports.TableChart = TableChart;
var HeatMapChart = (function (_super) {
    __extends(HeatMapChart, _super);
    function HeatMapChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.avgTimePercentages = obj && obj.avgTimePercentages || null;
        _this.avgTimeValues = obj && obj.avgTimeValues || null;
        _this.processDefinitionId = obj && obj.processDefinitionId || null;
        _this.totalCountValues = obj && obj.totalCountValues || null;
        _this.titleKey = obj && obj.titleKey || null;
        _this.totalCountsPercentages = obj && obj.totalCountsPercentages || null;
        _this.totalTimePercentages = obj && obj.totalTimePercentages || null;
        _this.totalTimeValues = obj && obj.totalTimeValues || null;
        return _this;
    }
    return HeatMapChart;
}(Chart));
exports.HeatMapChart = HeatMapChart;
var PieChart = (function (_super) {
    __extends(PieChart, _super);
    function PieChart(obj) {
        var _this = _super.call(this, obj) || this;
        _this.labels = [];
        _this.data = [];
        _this.title = obj && obj.title || null;
        _this.titleKey = obj && obj.titleKey || null;
        if (obj.values) {
            obj.values.forEach(function (value) {
                _this.add(value.key, value.y);
            });
        }
        return _this;
    }
    PieChart.prototype.add = function (label, data) {
        this.labels.push(label);
        this.data.push(data);
    };
    PieChart.prototype.hasData = function () {
        return this.data && this.data.length > 0 ? true : false;
    };
    return PieChart;
}(Chart));
exports.PieChart = PieChart;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
