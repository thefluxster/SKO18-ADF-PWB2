/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var DiagramModel = (function () {
    function DiagramModel(obj) {
        var _this = this;
        this.elements = [];
        this.flows = [];
        this.pools = [];
        if (obj) {
            this.diagramBeginX = obj.diagramBeginX;
            this.diagramBeginY = obj.diagramBeginY;
            this.diagramHeight = obj.diagramHeight;
            this.diagramWidth = obj.diagramWidth;
            if (obj.elements) {
                obj.elements.forEach(function (element) {
                    _this.elements.push(new DiagramElementModel(element));
                });
            }
            if (obj.flows) {
                obj.flows.forEach(function (flow) {
                    _this.flows.push(new DiagramFlowElementModel(flow));
                });
            }
            if (obj.pools) {
                obj.pools.forEach(function (pool) {
                    _this.pools.push(new DiagramPoolElementModel(pool));
                });
            }
        }
    }
    return DiagramModel;
}());
exports.DiagramModel = DiagramModel;
var DiagramElementModel = (function () {
    function DiagramElementModel(obj) {
        var _this = this;
        this.properties = [];
        this.dataType = '';
        this.taskType = '';
        if (obj) {
            this.height = obj.height || '';
            this.id = obj.id || '';
            this.name = obj.name || '';
            this.type = obj.type || '';
            this.width = obj.width || '';
            this.value = obj.value || '';
            this.x = obj.x || '';
            this.y = obj.y || '';
            this.taskType = obj.taskType || '';
            if (obj.properties) {
                obj.properties.forEach(function (property) {
                    _this.properties.push(new DiagramElementPropertyModel(property));
                });
            }
            this.dataType = obj.dataType || '';
            if (obj.eventDefinition) {
                this.eventDefinition = new DiagramEventDefinitionModel(obj.eventDefinition);
            }
        }
    }
    return DiagramElementModel;
}());
exports.DiagramElementModel = DiagramElementModel;
var DiagramElementPropertyModel = (function () {
    function DiagramElementPropertyModel(obj) {
        if (obj) {
            this.name = obj.name;
            this.type = obj.type;
            this.value = obj.value;
        }
    }
    return DiagramElementPropertyModel;
}());
exports.DiagramElementPropertyModel = DiagramElementPropertyModel;
var DiagramFlowElementModel = (function () {
    function DiagramFlowElementModel(obj) {
        var _this = this;
        this.properties = [];
        this.waypoints = [];
        if (obj) {
            this.id = obj.id;
            this.properties = obj.properties;
            this.sourceRef = obj.sourceRef;
            this.targetRef = obj.targetRef;
            this.type = obj.type;
            if (obj.waypoints) {
                obj.waypoints.forEach(function (waypoint) {
                    _this.waypoints.push(new DiagramWayPointModel(waypoint));
                });
            }
        }
    }
    return DiagramFlowElementModel;
}());
exports.DiagramFlowElementModel = DiagramFlowElementModel;
var DiagramWayPointModel = (function () {
    function DiagramWayPointModel(obj) {
        if (obj) {
            this.x = obj.x;
            this.y = obj.y;
        }
    }
    return DiagramWayPointModel;
}());
exports.DiagramWayPointModel = DiagramWayPointModel;
var DiagramEventDefinitionModel = (function () {
    function DiagramEventDefinitionModel(obj) {
        if (obj) {
            this.timeCycle = obj.timeCycle;
            this.type = obj.type;
        }
    }
    return DiagramEventDefinitionModel;
}());
exports.DiagramEventDefinitionModel = DiagramEventDefinitionModel;
var DiagramPoolElementModel = (function () {
    function DiagramPoolElementModel(obj) {
        var _this = this;
        this.lanes = [];
        if (obj) {
            this.height = obj.height;
            this.id = obj.id;
            this.name = obj.name;
            this.properties = obj.properties;
            this.width = obj.width;
            this.x = obj.x;
            this.y = obj.y;
            if (obj.lanes) {
                obj.lanes.forEach(function (lane) {
                    _this.lanes.push(new DiagramLaneElementModel(lane));
                });
            }
        }
    }
    return DiagramPoolElementModel;
}());
exports.DiagramPoolElementModel = DiagramPoolElementModel;
var DiagramLaneElementModel = (function () {
    function DiagramLaneElementModel(obj) {
        if (obj) {
            this.height = obj.height;
            this.id = obj.id;
            this.name = obj.name;
            this.width = obj.width;
            this.x = obj.x;
            this.y = obj.y;
        }
    }
    return DiagramLaneElementModel;
}());
exports.DiagramLaneElementModel = DiagramLaneElementModel;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
