/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var ReportParametersModel = (function () {
    function ReportParametersModel(obj) {
        this.id = obj && obj.id;
        this.name = obj && obj.name || null;
        if (obj && obj.definition) {
            this.definition = new ReportDefinitionModel(JSON.parse(obj.definition));
        }
        this.created = obj && obj.created || null;
    }
    ReportParametersModel.prototype.hasParameters = function () {
        return (this.definition && this.definition.parameters) ? true : false;
    };
    return ReportParametersModel;
}());
exports.ReportParametersModel = ReportParametersModel;
var ReportDefinitionModel = (function () {
    function ReportDefinitionModel(obj) {
        var _this = this;
        this.parameters = [];
        obj.parameters.forEach(function (params) {
            var reportParamsModel = new ReportParameterDetailsModel(params);
            _this.parameters.push(reportParamsModel);
        });
    }
    ReportDefinitionModel.prototype.findParam = function (name) {
        this.parameters.forEach(function (param) {
            return param.type === name ? param : null;
        });
        return null;
    };
    return ReportDefinitionModel;
}());
exports.ReportDefinitionModel = ReportDefinitionModel;
var ReportParameterDetailsModel = (function () {
    function ReportParameterDetailsModel(obj) {
        this.id = obj && obj.id;
        this.name = obj && obj.name || null;
        this.nameKey = obj && obj.nameKey || null;
        this.type = obj && obj.type || null;
        this.value = obj && obj.value || null;
        this.options = obj && obj.options || null;
        this.dependsOn = obj && obj.dependsOn || null;
    }
    return ReportParameterDetailsModel;
}());
exports.ReportParameterDetailsModel = ReportParameterDetailsModel;
var ParameterValueModel = (function () {
    function ParameterValueModel(obj) {
        this.id = obj && obj.id;
        this.name = obj && obj.name || null;
        this.value = obj && obj.value || null;
        this.version = obj && obj.version || null;
    }
    Object.defineProperty(ParameterValueModel.prototype, "label", {
        get: function () {
            return this.version ? this.name + " (v " + this.version + ") " : this.name;
        },
        enumerable: true,
        configurable: true
    });
    return ParameterValueModel;
}());
exports.ParameterValueModel = ParameterValueModel;
var ReportQuery = (function () {
    function ReportQuery(obj) {
        this.processDefinitionId = obj && obj.processDefinitionId || null;
        this.status = obj && obj.status || null;
        this.taskName = obj && obj.taskName || null;
        this.dateRangeInterval = obj && obj.dateRangeInterval || null;
        this.typeFiltering = obj && obj.typeFiltering || true;
        this.slowProcessInstanceInteger = obj && obj.slowProcessInstanceInteger || 0;
        this.duration = obj && obj.duration || 0;
        this.dateRange = new ReportDateRange(obj);
    }
    return ReportQuery;
}());
exports.ReportQuery = ReportQuery;
var ReportDateRange = (function () {
    function ReportDateRange(obj) {
        this.startDate = obj && obj.startDate || null;
        this.endDate = obj && obj.endDate || null;
    }
    return ReportDateRange;
}());
exports.ReportDateRange = ReportDateRange;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
