/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var DiagramColorService = DiagramColorService_1 = (function () {
    function DiagramColorService() {
    }
    DiagramColorService.prototype.setTotalColors = function (totalColors) {
        this.totalColors = totalColors;
    };
    DiagramColorService.prototype.getFillOpacity = function () {
        return '0.6';
    };
    DiagramColorService.prototype.getFillColour = function (key) {
        if (this.totalColors && this.totalColors.hasOwnProperty(key)) {
            var colorPercentage = this.totalColors[key];
            return this.convertColorToHsb(colorPercentage);
        }
        else {
            return DiagramColorService_1.ACTIVITY_FILL_COLOR;
        }
    };
    DiagramColorService.prototype.getBpmnColor = function (data, defaultColor) {
        if (data.current) {
            return DiagramColorService_1.CURRENT_COLOR;
        }
        else if (data.completed) {
            return DiagramColorService_1.COMPLETED_COLOR;
        }
        else {
            return defaultColor;
        }
    };
    DiagramColorService.prototype.getBpmnStrokeWidth = function (data) {
        if (data.current || data.completed) {
            return DiagramColorService_1.TASK_HIGHLIGHT_STROKE;
        }
        else {
            return DiagramColorService_1.TASK_STROKE;
        }
    };
    DiagramColorService.prototype.convertColorToHsb = function (colorPercentage) {
        var hue = (120.0 - (colorPercentage * 1.2)) / 360.0;
        return 'hsb(' + hue + ', 1, 1)';
    };
    return DiagramColorService;
}());
DiagramColorService.CURRENT_COLOR = '#017501';
DiagramColorService.COMPLETED_COLOR = '#2632aa';
DiagramColorService.ACTIVITY_STROKE_COLOR = '#bbbbbb';
DiagramColorService.MAIN_STROKE_COLOR = '#585858';
DiagramColorService.ACTIVITY_FILL_COLOR = '#f9f9f9';
DiagramColorService.TASK_STROKE = 1;
DiagramColorService.TASK_HIGHLIGHT_STROKE = 2;
DiagramColorService.CALL_ACTIVITY_STROKE = 2;
DiagramColorService = DiagramColorService_1 = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], DiagramColorService);
exports.DiagramColorService = DiagramColorService;
var DiagramColorService_1;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2RpYWdyYW0tY29sb3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7O0FBRUgsc0NBQTJDO0FBRzNDLElBQWEsbUJBQW1CO0lBZTVCO0lBQ0EsQ0FBQztJQUVELDRDQUFjLEdBQWQsVUFBZSxXQUFXO1FBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQ25DLENBQUM7SUFFRCw0Q0FBYyxHQUFkO1FBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsMkNBQWEsR0FBYixVQUFjLEdBQVc7UUFDckIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0QsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25ELENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sQ0FBQyxxQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQztRQUNuRCxDQUFDO0lBQ0wsQ0FBQztJQUVELDBDQUFZLEdBQVosVUFBYSxJQUFJLEVBQUUsWUFBWTtRQUMzQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLE1BQU0sQ0FBQyxxQkFBbUIsQ0FBQyxhQUFhLENBQUM7UUFDN0MsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN4QixNQUFNLENBQUMscUJBQW1CLENBQUMsZUFBZSxDQUFDO1FBQy9DLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDeEIsQ0FBQztJQUNMLENBQUM7SUFFRCxnREFBa0IsR0FBbEIsVUFBbUIsSUFBSTtRQUNuQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxxQkFBbUIsQ0FBQyxxQkFBcUIsQ0FBQztRQUNyRCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMscUJBQW1CLENBQUMsV0FBVyxDQUFDO1FBQzNDLENBQUM7SUFDTCxDQUFDO0lBRUQsK0NBQWlCLEdBQWpCLFVBQWtCLGVBQXVCO1FBQ3JDLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3BELE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQztJQUNwQyxDQUFDO0lBQ0wsMEJBQUM7QUFBRCxDQXpEQSxBQXlEQyxJQUFBO0FBdkRVLGlDQUFhLEdBQUcsU0FBUyxDQUFDO0FBQzFCLG1DQUFlLEdBQUcsU0FBUyxDQUFDO0FBQzVCLHlDQUFxQixHQUFHLFNBQVMsQ0FBQztBQUNsQyxxQ0FBaUIsR0FBRyxTQUFTLENBQUM7QUFFOUIsdUNBQW1CLEdBQUcsU0FBUyxDQUFDO0FBRWhDLCtCQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLHlDQUFxQixHQUFHLENBQUMsQ0FBQztBQUMxQix3Q0FBb0IsR0FBRyxDQUFDLENBQUM7QUFYdkIsbUJBQW1CO0lBRC9CLGlCQUFVLEVBQUU7O0dBQ0EsbUJBQW1CLENBeUQvQjtBQXpEWSxrREFBbUIiLCJmaWxlIjoic2VydmljZXMvZGlhZ3JhbS1jb2xvci5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGlhZ3JhbUNvbG9yU2VydmljZSB7XG5cbiAgICBzdGF0aWMgQ1VSUkVOVF9DT0xPUiA9ICcjMDE3NTAxJztcbiAgICBzdGF0aWMgQ09NUExFVEVEX0NPTE9SID0gJyMyNjMyYWEnO1xuICAgIHN0YXRpYyBBQ1RJVklUWV9TVFJPS0VfQ09MT1IgPSAnI2JiYmJiYic7XG4gICAgc3RhdGljIE1BSU5fU1RST0tFX0NPTE9SID0gJyM1ODU4NTgnO1xuXG4gICAgc3RhdGljIEFDVElWSVRZX0ZJTExfQ09MT1IgPSAnI2Y5ZjlmOSc7XG5cbiAgICBzdGF0aWMgVEFTS19TVFJPS0UgPSAxO1xuICAgIHN0YXRpYyBUQVNLX0hJR0hMSUdIVF9TVFJPS0UgPSAyO1xuICAgIHN0YXRpYyBDQUxMX0FDVElWSVRZX1NUUk9LRSA9IDI7XG5cbiAgICB0b3RhbENvbG9yczogYW55O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgc2V0VG90YWxDb2xvcnModG90YWxDb2xvcnMpIHtcbiAgICAgICAgdGhpcy50b3RhbENvbG9ycyA9IHRvdGFsQ29sb3JzO1xuICAgIH1cblxuICAgIGdldEZpbGxPcGFjaXR5KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnMC42JztcbiAgICB9XG5cbiAgICBnZXRGaWxsQ29sb3VyKGtleTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLnRvdGFsQ29sb3JzICYmIHRoaXMudG90YWxDb2xvcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgbGV0IGNvbG9yUGVyY2VudGFnZSA9IHRoaXMudG90YWxDb2xvcnNba2V5XTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRDb2xvclRvSHNiKGNvbG9yUGVyY2VudGFnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gRGlhZ3JhbUNvbG9yU2VydmljZS5BQ1RJVklUWV9GSUxMX0NPTE9SO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QnBtbkNvbG9yKGRhdGEsIGRlZmF1bHRDb2xvcikge1xuICAgICAgICBpZiAoZGF0YS5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gRGlhZ3JhbUNvbG9yU2VydmljZS5DVVJSRU5UX0NPTE9SO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuY29tcGxldGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gRGlhZ3JhbUNvbG9yU2VydmljZS5DT01QTEVURURfQ09MT1I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdENvbG9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QnBtblN0cm9rZVdpZHRoKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEuY3VycmVudCB8fCBkYXRhLmNvbXBsZXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIERpYWdyYW1Db2xvclNlcnZpY2UuVEFTS19ISUdITElHSFRfU1RST0tFO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIERpYWdyYW1Db2xvclNlcnZpY2UuVEFTS19TVFJPS0U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb252ZXJ0Q29sb3JUb0hzYihjb2xvclBlcmNlbnRhZ2U6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIGxldCBodWUgPSAoMTIwLjAgLSAoY29sb3JQZXJjZW50YWdlICogMS4yKSkgLyAzNjAuMDtcbiAgICAgICAgcmV0dXJuICdoc2IoJyArIGh1ZSArICcsIDEsIDEpJztcbiAgICB9XG59XG4iXX0=
