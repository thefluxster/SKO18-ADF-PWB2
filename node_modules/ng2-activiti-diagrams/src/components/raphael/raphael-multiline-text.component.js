/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var point_1 = require("./models/point");
var raphael_base_1 = require("./raphael-base");
var raphael_service_1 = require("./raphael.service");
var RaphaelMultilineTextDirective = (function (_super) {
    __extends(RaphaelMultilineTextDirective, _super);
    function RaphaelMultilineTextDirective(elementRef, raphaelService, logService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.logService = logService;
        _this.onError = new core_1.EventEmitter();
        _this.TEXT_PADDING = 3;
        return _this;
    }
    RaphaelMultilineTextDirective.prototype.ngOnInit = function () {
        this.logService.log(this.elementRef);
        if (this.text === null || this.text === undefined) {
            this.text = '';
        }
        this.draw(this.position, this.text);
    };
    RaphaelMultilineTextDirective.prototype.draw = function (position, text) {
        var textPaper = this.paper.text(position.x + this.TEXT_PADDING, position.y + this.TEXT_PADDING, text).attr({
            'text-anchor': 'middle',
            'font-family': 'Arial',
            'font-size': '11',
            'fill': '#373e48'
        });
        var formattedText = this.formatText(textPaper, text, this.elementWidth);
        textPaper.attr({
            'text': formattedText
        });
        textPaper.transform(this.transform);
        return textPaper;
    };
    RaphaelMultilineTextDirective.prototype.formatText = function (textPaper, text, elementWidth) {
        var letterWidth = textPaper.getBBox().width / text.length;
        var removedLineBreaks = text.split('\n');
        var actualRowLength = 0, formattedText = [];
        removedLineBreaks.forEach(function (senteces) {
            var words = senteces.split(' ');
            words.forEach(function (word) {
                var length = word.length;
                if (actualRowLength + (length * letterWidth) > elementWidth) {
                    formattedText.push('\n');
                    actualRowLength = 0;
                }
                actualRowLength += length * letterWidth;
                formattedText.push(word + ' ');
            });
            formattedText.push('\n');
            actualRowLength = 0;
        });
        return formattedText.join('');
    };
    return RaphaelMultilineTextDirective;
}(raphael_base_1.RaphaelBase));
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RaphaelMultilineTextDirective.prototype, "paper", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", point_1.Point)
], RaphaelMultilineTextDirective.prototype, "position", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], RaphaelMultilineTextDirective.prototype, "transform", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], RaphaelMultilineTextDirective.prototype, "text", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], RaphaelMultilineTextDirective.prototype, "elementWidth", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], RaphaelMultilineTextDirective.prototype, "onError", void 0);
RaphaelMultilineTextDirective = __decorate([
    core_1.Directive({ selector: 'raphael-multiline-text' }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        raphael_service_1.RaphaelService,
        ng2_alfresco_core_1.LogService])
], RaphaelMultilineTextDirective);
exports.RaphaelMultilineTextDirective = RaphaelMultilineTextDirective;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLW11bHRpbGluZS10ZXh0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFSCxzQ0FBMkY7QUFDM0YsdURBQStDO0FBQy9DLHdDQUF1QztBQUN2QywrQ0FBNkM7QUFDN0MscURBQW1EO0FBR25ELElBQWEsNkJBQTZCO0lBQVMsaURBQVc7SUFxQjFELHVDQUFtQixVQUFzQixFQUM3QixjQUE4QixFQUN0QixVQUFzQjtRQUYxQyxZQUdJLGtCQUFNLFVBQVUsRUFBRSxjQUFjLENBQUMsU0FDcEM7UUFKa0IsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFFckIsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFOMUMsYUFBTyxHQUFHLElBQUksbUJBQVksRUFBRSxDQUFDO1FBRTdCLGtCQUFZLEdBQUcsQ0FBQyxDQUFDOztJQU1qQixDQUFDO0lBRUQsZ0RBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDbkIsQ0FBQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELDRDQUFJLEdBQUosVUFBSyxRQUFlLEVBQUUsSUFBWTtRQUM5QixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN2RyxhQUFhLEVBQUUsUUFBUTtZQUN2QixhQUFhLEVBQUUsT0FBTztZQUN0QixXQUFXLEVBQUUsSUFBSTtZQUNqQixNQUFNLEVBQUUsU0FBUztTQUNwQixDQUFDLENBQUM7UUFFSCxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hFLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDWCxNQUFNLEVBQUUsYUFBYTtTQUN4QixDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFTyxrREFBVSxHQUFsQixVQUFtQixTQUFTLEVBQUUsSUFBSSxFQUFFLFlBQVk7UUFDNUMsSUFBSSxXQUFXLEdBQUcsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFELElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLGVBQWUsR0FBRyxDQUFDLEVBQUUsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUM1QyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsVUFBQSxRQUFRO1lBQzlCLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7Z0JBQ2QsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztnQkFDekIsRUFBRSxDQUFDLENBQUMsZUFBZSxHQUFHLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUM7b0JBQzFELGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3pCLGVBQWUsR0FBRyxDQUFDLENBQUM7Z0JBQ3hCLENBQUM7Z0JBQ0QsZUFBZSxJQUFJLE1BQU0sR0FBRyxXQUFXLENBQUM7Z0JBQ3hDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLENBQUMsQ0FBQyxDQUFDO1lBQ0gsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixlQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNMLG9DQUFDO0FBQUQsQ0F2RUEsQUF1RUMsQ0F2RWtELDBCQUFXLEdBdUU3RDtBQXJFRztJQURDLFlBQUssRUFBRTs7NERBQ0c7QUFHWDtJQURDLFlBQUssRUFBRTs4QkFDRSxhQUFLOytEQUFDO0FBR2hCO0lBREMsWUFBSyxFQUFFOztnRUFDVTtBQUdsQjtJQURDLFlBQUssRUFBRTs7MkRBQ0s7QUFHYjtJQURDLFlBQUssRUFBRTs7bUVBQ2E7QUFHckI7SUFEQyxhQUFNLEVBQUU7OzhEQUNvQjtBQWpCcEIsNkJBQTZCO0lBRHpDLGdCQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQztxQ0FzQmYsaUJBQVU7UUFDYixnQ0FBYztRQUNWLDhCQUFVO0dBdkJqQyw2QkFBNkIsQ0F1RXpDO0FBdkVZLHNFQUE2QiIsImZpbGUiOiJjb21wb25lbnRzL3JhcGhhZWwvcmFwaGFlbC1tdWx0aWxpbmUtdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIE9uSW5pdCwgRWxlbWVudFJlZiwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2dTZXJ2aWNlIH0gZnJvbSAnbmcyLWFsZnJlc2NvLWNvcmUnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL21vZGVscy9wb2ludCc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdyYXBoYWVsLW11bHRpbGluZS10ZXh0JyB9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxNdWx0aWxpbmVUZXh0RGlyZWN0aXZlIGV4dGVuZHMgUmFwaGFlbEJhc2UgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgcGFwZXI6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgcG9zaXRpb246IFBvaW50O1xuXG4gICAgQElucHV0KClcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgdGV4dDogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICBlbGVtZW50V2lkdGg6IG51bWJlcjtcblxuICAgIEBPdXRwdXQoKVxuICAgIG9uRXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBURVhUX1BBRERJTkcgPSAzO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcmFwaGFlbFNlcnZpY2U6IFJhcGhhZWxTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZSkge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCByYXBoYWVsU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMubG9nU2VydmljZS5sb2codGhpcy5lbGVtZW50UmVmKTtcbiAgICAgICAgaWYgKHRoaXMudGV4dCA9PT0gbnVsbCB8fCB0aGlzLnRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmF3KHRoaXMucG9zaXRpb24sIHRoaXMudGV4dCk7XG4gICAgfVxuXG4gICAgZHJhdyhwb3NpdGlvbjogUG9pbnQsIHRleHQ6IHN0cmluZykge1xuICAgICAgICBsZXQgdGV4dFBhcGVyID0gdGhpcy5wYXBlci50ZXh0KHBvc2l0aW9uLnggKyB0aGlzLlRFWFRfUEFERElORywgcG9zaXRpb24ueSArIHRoaXMuVEVYVF9QQURESU5HLCB0ZXh0KS5hdHRyKHtcbiAgICAgICAgICAgICd0ZXh0LWFuY2hvcic6ICdtaWRkbGUnLFxuICAgICAgICAgICAgJ2ZvbnQtZmFtaWx5JzogJ0FyaWFsJyxcbiAgICAgICAgICAgICdmb250LXNpemUnOiAnMTEnLFxuICAgICAgICAgICAgJ2ZpbGwnOiAnIzM3M2U0OCdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGZvcm1hdHRlZFRleHQgPSB0aGlzLmZvcm1hdFRleHQodGV4dFBhcGVyLCB0ZXh0LCB0aGlzLmVsZW1lbnRXaWR0aCk7XG4gICAgICAgIHRleHRQYXBlci5hdHRyKHtcbiAgICAgICAgICAgICd0ZXh0JzogZm9ybWF0dGVkVGV4dFxuICAgICAgICB9KTtcbiAgICAgICAgdGV4dFBhcGVyLnRyYW5zZm9ybSh0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgIHJldHVybiB0ZXh0UGFwZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmb3JtYXRUZXh0KHRleHRQYXBlciwgdGV4dCwgZWxlbWVudFdpZHRoKSB7XG4gICAgICAgIGxldCBsZXR0ZXJXaWR0aCA9IHRleHRQYXBlci5nZXRCQm94KCkud2lkdGggLyB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgbGV0IHJlbW92ZWRMaW5lQnJlYWtzID0gdGV4dC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGxldCBhY3R1YWxSb3dMZW5ndGggPSAwLCBmb3JtYXR0ZWRUZXh0ID0gW107XG4gICAgICAgIHJlbW92ZWRMaW5lQnJlYWtzLmZvckVhY2goc2VudGVjZXMgPT4ge1xuICAgICAgICAgICAgbGV0IHdvcmRzID0gc2VudGVjZXMuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIHdvcmRzLmZvckVhY2god29yZCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGxlbmd0aCA9IHdvcmQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChhY3R1YWxSb3dMZW5ndGggKyAobGVuZ3RoICogbGV0dGVyV2lkdGgpID4gZWxlbWVudFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZFRleHQucHVzaCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgIGFjdHVhbFJvd0xlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFjdHVhbFJvd0xlbmd0aCArPSBsZW5ndGggKiBsZXR0ZXJXaWR0aDtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRUZXh0LnB1c2god29yZCArICcgJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvcm1hdHRlZFRleHQucHVzaCgnXFxuJyk7XG4gICAgICAgICAgICBhY3R1YWxSb3dMZW5ndGggPSAwO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZFRleHQuam9pbignJyk7XG4gICAgfVxufVxuIl19
