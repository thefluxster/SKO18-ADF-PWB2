/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var anchor_1 = require("./anchor");
var Polyline = (function () {
    function Polyline(uuid, points, strokeWidth, paper) {
        this.id = null;
        this.points = [];
        this.path = [];
        this.anchors = [];
        this.strokeWidth = 1;
        this.radius = 1;
        this.showDetails = false;
        this.paper = null;
        this.element = null;
        this.isDefaultConditionAvailable = false;
        this.closePath = false;
        this.points = points;
        this.path = [];
        this.anchors = [];
        if (strokeWidth) {
            this.strokeWidth = strokeWidth;
        }
        this.paper = paper;
        this.closePath = false;
        this.init();
    }
    Polyline.prototype.init = function () {
        var linesCount = this.getLinesCount();
        if (linesCount < 1) {
            return;
        }
        this.normalizeCoordinates();
        this.pushAnchor(anchor_1.Anchor.ANCHOR_TYPE.first, this.getLine(0).x1, this.getLine(0).y1);
        for (var i = 1; i < linesCount; i++) {
            var line1 = this.getLine(i - 1);
            this.pushAnchor(anchor_1.Anchor.ANCHOR_TYPE.main, line1.x2, line1.y2);
        }
        this.pushAnchor(anchor_1.Anchor.ANCHOR_TYPE.last, this.getLine(linesCount - 1).x2, this.getLine(linesCount - 1).y2);
        this.rebuildPath();
    };
    Polyline.prototype.normalizeCoordinates = function () {
        for (var i = 0; i < this.points.length; i++) {
            this.points[i].x = parseFloat(this.points[i].x);
            this.points[i].y = parseFloat(this.points[i].y);
        }
    };
    Polyline.prototype.getLinesCount = function () {
        return this.points.length - 1;
    };
    Polyline.prototype._getLine = function (i) {
        if (this.points.length > i && this.points[i]) {
            return { x1: this.points[i].x, y1: this.points[i].y, x2: this.points[i + 1].x, y2: this.points[i + 1].y };
        }
        else {
            return undefined;
        }
    };
    Polyline.prototype.getLine = function (i) {
        var line = this._getLine(i);
        if (line !== undefined) {
            line.angle = this.getLineAngle(i);
        }
        return line;
    };
    Polyline.prototype.getLineAngle = function (i) {
        var line = this._getLine(i);
        return Math.atan2(line.y2 - line.y1, line.x2 - line.x1);
    };
    Polyline.prototype.getLineLengthX = function (i) {
        var line = this.getLine(i);
        return (line.x2 - line.x1);
    };
    Polyline.prototype.getLineLengthY = function (i) {
        var line = this.getLine(i);
        return (line.y2 - line.y1);
    };
    Polyline.prototype.getLineLength = function (i) {
        return Math.sqrt(Math.pow(this.getLineLengthX(i), 2) + Math.pow(this.getLineLengthY(i), 2));
    };
    Polyline.prototype.getAnchors = function () {
        return this.anchors;
    };
    Polyline.prototype.getAnchorsCount = function (type) {
        if (type === void 0) { type = null; }
        if (!type) {
            return this.anchors.length;
        }
        else {
            var count = 0;
            for (var i = 0; i < this.getAnchorsCount(null); i++) {
                var anchor = this.anchors[i];
                if (anchor.getType() === type) {
                    count++;
                }
            }
            return count;
        }
    };
    Polyline.prototype.pushAnchor = function (type, x, y) {
        var index, typeIndex;
        if (type === anchor_1.Anchor.ANCHOR_TYPE.first) {
            index = 0;
            typeIndex = 0;
        }
        else if (type === anchor_1.Anchor.ANCHOR_TYPE.last) {
            index = this.getAnchorsCount();
            typeIndex = 0;
        }
        else if (!index) {
            index = this.anchors.length;
        }
        else {
            for (var i = 0; i < this.getAnchorsCount(); i++) {
                var anchor = this.anchors[i];
                if (anchor.index > index) {
                    anchor.index++;
                    anchor.typeIndex++;
                }
            }
        }
        var anchor = new anchor_1.Anchor(this.id, anchor_1.Anchor.ANCHOR_TYPE.main, x, y);
        this.anchors.push(anchor);
    };
    Polyline.prototype.getAnchor = function (position) {
        return this.anchors[position];
    };
    Polyline.prototype.getAnchorByType = function (type, position) {
        if (type === anchor_1.Anchor.ANCHOR_TYPE.first) {
            return this.anchors[0];
        }
        if (type === anchor_1.Anchor.ANCHOR_TYPE.last) {
            return this.anchors[this.getAnchorsCount() - 1];
        }
        for (var i = 0; i < this.getAnchorsCount(); i++) {
            var anchor = this.anchors[i];
            if (anchor.type === type) {
                if (position === anchor.position) {
                    return anchor;
                }
            }
        }
        return null;
    };
    Polyline.prototype.addNewPoint = function (position, x, y) {
        for (var i = 0; i < this.getLinesCount(); i++) {
            var line = this.getLine(i);
            if (x > line.x1 && x < line.x2 && y > line.y1 && y < line.y2) {
                this.points.splice(i + 1, 0, { x: x, y: y });
                break;
            }
        }
        this.rebuildPath();
    };
    Polyline.prototype.rebuildPath = function () {
        var path = [];
        for (var i = 0; i < this.getAnchorsCount(); i++) {
            var anchor = this.getAnchor(i);
            var pathType = '';
            if (i === 0) {
                pathType = 'M';
            }
            else {
                pathType = 'L';
            }
            var targetX = anchor.x, targetY = anchor.y;
            if (i > 0 && i < this.getAnchorsCount() - 1) {
                var cx = anchor.x, cy = anchor.y;
                var AO = this.getLineLength(i - 1);
                if (AO < this.radius) {
                    AO = this.radius;
                }
                this.isDefaultConditionAvailable = (this.isDefaultConditionAvailable || (i === 1 && AO > 10));
                var ED = this.getLineLengthY(i - 1) * this.radius / AO;
                var OD = this.getLineLengthX(i - 1) * this.radius / AO;
                targetX = anchor.x - OD;
                targetY = anchor.y - ED;
                if (AO < 2 * this.radius && i > 1) {
                    targetX = anchor.x - this.getLineLengthX(i - 1) / 2;
                    targetY = anchor.y - this.getLineLengthY(i - 1) / 2;
                }
                var AO = this.getLineLength(i);
                if (AO < this.radius) {
                    AO = this.radius;
                }
                var ED = this.getLineLengthY(i) * this.radius / AO;
                var OD = this.getLineLengthX(i) * this.radius / AO;
                var nextSrcX = anchor.x + OD;
                var nextSrcY = anchor.y + ED;
                if (AO < 2 * this.radius && i < this.getAnchorsCount() - 2) {
                    nextSrcX = anchor.x + this.getLineLengthX(i) / 2;
                    nextSrcY = anchor.y + this.getLineLengthY(i) / 2;
                    ;
                }
                var dx0 = (cx - targetX) / 3, dy0 = (cy - targetY) / 3, ax = cx - dx0, ay = cy - dy0, dx1 = (cx - nextSrcX) / 3, dy1 = (cy - nextSrcY) / 3, bx = cx - dx1, by = cy - dy1, zx = nextSrcX, zy = nextSrcY;
            }
            else if (i === 1 && this.getAnchorsCount() === 2) {
                var AO = this.getLineLength(i - 1);
                if (AO < this.radius) {
                    AO = this.radius;
                }
                this.isDefaultConditionAvailable = (this.isDefaultConditionAvailable || (i === 1 && AO > 10));
            }
            if (this.strokeWidth % 2 === 1) {
                targetX += 0.5;
                targetY += 0.5;
            }
            path.push([pathType, targetX, targetY]);
            if (i > 0 && i < this.getAnchorsCount() - 1) {
                path.push(['C', ax, ay, bx, by, zx, zy]);
            }
        }
        if (this.closePath) {
            path.push(['Z']);
        }
        this.path = path;
    };
    Polyline.prototype.transform = function (transformation) {
        this.element.transform(transformation);
    };
    Polyline.prototype.function = function (attrs) {
        this.element.attr(attrs);
    };
    return Polyline;
}());
exports.Polyline = Polyline;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
