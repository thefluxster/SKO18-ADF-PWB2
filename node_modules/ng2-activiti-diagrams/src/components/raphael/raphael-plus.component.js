/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var point_1 = require("./models/point");
var raphael_base_1 = require("./raphael-base");
var raphael_service_1 = require("./raphael.service");
var RaphaelPlusDirective = (function (_super) {
    __extends(RaphaelPlusDirective, _super);
    function RaphaelPlusDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.onError = new core_1.EventEmitter();
        return _this;
    }
    RaphaelPlusDirective.prototype.ngOnInit = function () {
        var opts = { 'stroke-width': this.strokeWidth, 'fill': this.fillColors, 'stroke': this.stroke, 'fill-opacity': this.fillOpacity };
        this.draw(this.center, opts);
    };
    RaphaelPlusDirective.prototype.draw = function (center, opts) {
        var path = this.paper.path('M 6.75,16 L 25.75,16 M 16,6.75 L 16,25.75').attr(opts);
        return path.transform('T' + (center.x + 4) + ',' + (center.y + 4));
    };
    return RaphaelPlusDirective;
}(raphael_base_1.RaphaelBase));
__decorate([
    core_1.Input(),
    __metadata("design:type", point_1.Point)
], RaphaelPlusDirective.prototype, "center", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RaphaelPlusDirective.prototype, "fillColors", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RaphaelPlusDirective.prototype, "stroke", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RaphaelPlusDirective.prototype, "strokeWidth", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RaphaelPlusDirective.prototype, "fillOpacity", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], RaphaelPlusDirective.prototype, "onError", void 0);
RaphaelPlusDirective = __decorate([
    core_1.Directive({ selector: 'raphael-plus' }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        raphael_service_1.RaphaelService])
], RaphaelPlusDirective);
exports.RaphaelPlusDirective = RaphaelPlusDirective;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLXBsdXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7Ozs7Ozs7Ozs7Ozs7OztBQUVILHNDQUEyRjtBQUMzRix3Q0FBdUM7QUFDdkMsK0NBQTZDO0FBQzdDLHFEQUFtRDtBQUduRCxJQUFhLG9CQUFvQjtJQUFTLHdDQUFXO0lBbUJqRCw4QkFBbUIsVUFBc0IsRUFDN0IsY0FBOEI7UUFEMUMsWUFFSSxrQkFBTSxVQUFVLEVBQUUsY0FBYyxDQUFDLFNBQ3BDO1FBSGtCLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBRnpDLGFBQU8sR0FBRyxJQUFJLG1CQUFZLEVBQUUsQ0FBQzs7SUFLN0IsQ0FBQztJQUVELHVDQUFRLEdBQVI7UUFFSSxJQUFJLElBQUksR0FBRyxFQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFDLENBQUM7UUFDaEksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTSxtQ0FBSSxHQUFYLFVBQVksTUFBYSxFQUFFLElBQVU7UUFDakMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsMkNBQTJDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkYsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUNMLDJCQUFDO0FBQUQsQ0FsQ0EsQUFrQ0MsQ0FsQ3lDLDBCQUFXLEdBa0NwRDtBQWhDRztJQURDLFlBQUssRUFBRTs4QkFDQSxhQUFLO29EQUFDO0FBR2Q7SUFEQyxZQUFLLEVBQUU7O3dEQUNRO0FBR2hCO0lBREMsWUFBSyxFQUFFOztvREFDSTtBQUdaO0lBREMsWUFBSyxFQUFFOzt5REFDUztBQUdqQjtJQURDLFlBQUssRUFBRTs7eURBQ1M7QUFHakI7SUFEQyxhQUFNLEVBQUU7O3FEQUNvQjtBQWpCcEIsb0JBQW9CO0lBRGhDLGdCQUFTLENBQUMsRUFBQyxRQUFRLEVBQUUsY0FBYyxFQUFDLENBQUM7cUNBb0JILGlCQUFVO1FBQ2IsZ0NBQWM7R0FwQmpDLG9CQUFvQixDQWtDaEM7QUFsQ1ksb0RBQW9CIiwiZmlsZSI6ImNvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLXBsdXMuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBPbkluaXQsIEVsZW1lbnRSZWYsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL21vZGVscy9wb2ludCc7XG5pbXBvcnQgeyBSYXBoYWVsQmFzZSB9IGZyb20gJy4vcmFwaGFlbC1iYXNlJztcbmltcG9ydCB7IFJhcGhhZWxTZXJ2aWNlIH0gZnJvbSAnLi9yYXBoYWVsLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtzZWxlY3RvcjogJ3JhcGhhZWwtcGx1cyd9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxQbHVzRGlyZWN0aXZlIGV4dGVuZHMgUmFwaGFlbEJhc2UgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgY2VudGVyOiBQb2ludDtcblxuICAgIEBJbnB1dCgpXG4gICAgZmlsbENvbG9yczogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2U6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgc3Ryb2tlV2lkdGg6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgZmlsbE9wYWNpdHk6IGFueTtcblxuICAgIEBPdXRwdXQoKVxuICAgIG9uRXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmFwaGFlbFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIGxldCBvcHRzID0geydzdHJva2Utd2lkdGgnOiB0aGlzLnN0cm9rZVdpZHRoLCAnZmlsbCc6IHRoaXMuZmlsbENvbG9ycywgJ3N0cm9rZSc6IHRoaXMuc3Ryb2tlLCAnZmlsbC1vcGFjaXR5JzogdGhpcy5maWxsT3BhY2l0eX07XG4gICAgICAgIHRoaXMuZHJhdyh0aGlzLmNlbnRlciwgb3B0cyk7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXcoY2VudGVyOiBQb2ludCwgb3B0cz86IGFueSkge1xuICAgICAgICBsZXQgcGF0aCA9IHRoaXMucGFwZXIucGF0aCgnTSA2Ljc1LDE2IEwgMjUuNzUsMTYgTSAxNiw2Ljc1IEwgMTYsMjUuNzUnKS5hdHRyKG9wdHMpO1xuICAgICAgICByZXR1cm4gcGF0aC50cmFuc2Zvcm0oJ1QnICsgKGNlbnRlci54ICsgNCkgKyAnLCcgKyAoY2VudGVyLnkgKyA0KSk7XG4gICAgfVxufVxuIl19
