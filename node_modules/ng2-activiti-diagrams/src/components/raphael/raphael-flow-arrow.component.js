/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var raphael_base_1 = require("./raphael-base");
var raphael_service_1 = require("./raphael.service");
var polyline_1 = require("./polyline");
var RaphaelFlowArrowDirective = (function (_super) {
    __extends(RaphaelFlowArrowDirective, _super);
    function RaphaelFlowArrowDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.onError = new core_1.EventEmitter();
        _this.ARROW_WIDTH = 4;
        _this.SEQUENCEFLOW_STROKE = 1.5;
        return _this;
    }
    RaphaelFlowArrowDirective.prototype.ngOnInit = function () {
        this.draw(this.flow);
    };
    RaphaelFlowArrowDirective.prototype.draw = function (flow) {
        var line = this.drawLine(flow);
        this.drawArrow(line);
    };
    RaphaelFlowArrowDirective.prototype.drawLine = function (flow) {
        var polyline = new polyline_1.Polyline(flow.id, flow.waypoints, this.SEQUENCEFLOW_STROKE, this.paper);
        polyline.element = this.paper.path(polyline.path);
        polyline.element.attr({ 'stroke-width': this.SEQUENCEFLOW_STROKE });
        polyline.element.attr({ 'stroke': '#585858' });
        polyline.element.node.id = this.flow.id;
        var lastLineIndex = polyline.getLinesCount() - 1;
        var line = polyline.getLine(lastLineIndex);
        return line;
    };
    RaphaelFlowArrowDirective.prototype.drawArrow = function (line) {
        var doubleArrowWidth = 2 * this.ARROW_WIDTH;
        var width = this.ARROW_WIDTH / 2 + .5;
        var arrowHead = this.paper.path('M0 0L-' + width + '-' + doubleArrowWidth + 'L' + width + ' -' + doubleArrowWidth + 'z');
        arrowHead.transform('t' + line.x2 + ',' + line.y2);
        var angle = Raphael.deg(line.angle - Math.PI / 2);
        arrowHead.transform('...r' + angle + ' 0 0');
        arrowHead.attr('fill', '#585858');
        arrowHead.attr('stroke-width', this.SEQUENCEFLOW_STROKE);
        arrowHead.attr('stroke', '#585858');
    };
    return RaphaelFlowArrowDirective;
}(raphael_base_1.RaphaelBase));
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RaphaelFlowArrowDirective.prototype, "paper", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], RaphaelFlowArrowDirective.prototype, "flow", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], RaphaelFlowArrowDirective.prototype, "onError", void 0);
RaphaelFlowArrowDirective = __decorate([
    core_1.Directive({ selector: 'raphael-flow-arrow' }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        raphael_service_1.RaphaelService])
], RaphaelFlowArrowDirective);
exports.RaphaelFlowArrowDirective = RaphaelFlowArrowDirective;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLWZsb3ctYXJyb3cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7Ozs7Ozs7Ozs7Ozs7OztBQUVILHNDQUEyRjtBQUMzRiwrQ0FBNkM7QUFDN0MscURBQW1EO0FBQ25ELHVDQUFzQztBQUt0QyxJQUFhLHlCQUF5QjtJQUFTLDZDQUFXO0lBYXRELG1DQUFtQixVQUFzQixFQUM3QixjQUE4QjtRQUQxQyxZQUVJLGtCQUFNLFVBQVUsRUFBRSxjQUFjLENBQUMsU0FDcEM7UUFIa0IsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFMekMsYUFBTyxHQUFHLElBQUksbUJBQVksRUFBRSxDQUFDO1FBRTdCLGlCQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLHlCQUFtQixHQUFHLEdBQUcsQ0FBQzs7SUFLMUIsQ0FBQztJQUVELDRDQUFRLEdBQVI7UUFFSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU0sd0NBQUksR0FBWCxVQUFZLElBQVM7UUFDakIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFTSw0Q0FBUSxHQUFmLFVBQWdCLElBQVM7UUFDckIsSUFBSSxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNGLFFBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xELFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBQyxDQUFDLENBQUM7UUFDbEUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxRQUFRLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQztRQUU3QyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFFeEMsSUFBSSxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNqRCxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLDZDQUFTLEdBQWhCLFVBQWlCLElBQVM7UUFDdEIsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdEMsSUFBSSxTQUFTLEdBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFFOUgsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2xELFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQztRQUU3QyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVsQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN6RCxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUV4QyxDQUFDO0lBQ0wsZ0NBQUM7QUFBRCxDQXhEQSxBQXdEQyxDQXhEOEMsMEJBQVcsR0F3RHpEO0FBdERHO0lBREMsWUFBSyxFQUFFOzt3REFDRztBQUdYO0lBREMsWUFBSyxFQUFFOzt1REFDRTtBQUdWO0lBREMsYUFBTSxFQUFFOzswREFDb0I7QUFScEIseUJBQXlCO0lBRHJDLGdCQUFTLENBQUMsRUFBQyxRQUFRLEVBQUUsb0JBQW9CLEVBQUMsQ0FBQztxQ0FjVCxpQkFBVTtRQUNiLGdDQUFjO0dBZGpDLHlCQUF5QixDQXdEckM7QUF4RFksOERBQXlCIiwiZmlsZSI6ImNvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLWZsb3ctYXJyb3cuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlyZWN0aXZlLCBPbkluaXQsIEVsZW1lbnRSZWYsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmFwaGFlbEJhc2UgfSBmcm9tICcuL3JhcGhhZWwtYmFzZSc7XG5pbXBvcnQgeyBSYXBoYWVsU2VydmljZSB9IGZyb20gJy4vcmFwaGFlbC5zZXJ2aWNlJztcbmltcG9ydCB7IFBvbHlsaW5lIH0gZnJvbSAnLi9wb2x5bGluZSc7XG5cbmRlY2xhcmUgbGV0IFJhcGhhZWw6IGFueTtcblxuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdyYXBoYWVsLWZsb3ctYXJyb3cnfSlcbmV4cG9ydCBjbGFzcyBSYXBoYWVsRmxvd0Fycm93RGlyZWN0aXZlIGV4dGVuZHMgUmFwaGFlbEJhc2UgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgcGFwZXI6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgZmxvdzogYW55O1xuXG4gICAgQE91dHB1dCgpXG4gICAgb25FcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIEFSUk9XX1dJRFRIID0gNDtcbiAgICBTRVFVRU5DRUZMT1dfU1RST0tFID0gMS41O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcmFwaGFlbFNlcnZpY2U6IFJhcGhhZWxTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYsIHJhcGhhZWxTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcblxuICAgICAgICB0aGlzLmRyYXcodGhpcy5mbG93KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdyhmbG93OiBhbnkpIHtcbiAgICAgICAgbGV0IGxpbmUgPSB0aGlzLmRyYXdMaW5lKGZsb3cpO1xuICAgICAgICB0aGlzLmRyYXdBcnJvdyhsaW5lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhd0xpbmUoZmxvdzogYW55KSB7XG4gICAgICAgIGxldCBwb2x5bGluZSA9IG5ldyBQb2x5bGluZShmbG93LmlkLCBmbG93LndheXBvaW50cywgdGhpcy5TRVFVRU5DRUZMT1dfU1RST0tFLCB0aGlzLnBhcGVyKTtcbiAgICAgICAgcG9seWxpbmUuZWxlbWVudCA9IHRoaXMucGFwZXIucGF0aChwb2x5bGluZS5wYXRoKTtcbiAgICAgICAgcG9seWxpbmUuZWxlbWVudC5hdHRyKHsnc3Ryb2tlLXdpZHRoJzogdGhpcy5TRVFVRU5DRUZMT1dfU1RST0tFfSk7XG4gICAgICAgIHBvbHlsaW5lLmVsZW1lbnQuYXR0cih7J3N0cm9rZSc6ICcjNTg1ODU4J30pO1xuXG4gICAgICAgIHBvbHlsaW5lLmVsZW1lbnQubm9kZS5pZCA9IHRoaXMuZmxvdy5pZDtcblxuICAgICAgICBsZXQgbGFzdExpbmVJbmRleCA9IHBvbHlsaW5lLmdldExpbmVzQ291bnQoKSAtIDE7XG4gICAgICAgIGxldCBsaW5lID0gcG9seWxpbmUuZ2V0TGluZShsYXN0TGluZUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYXdBcnJvdyhsaW5lOiBhbnkpIHtcbiAgICAgICAgbGV0IGRvdWJsZUFycm93V2lkdGggPSAyICogdGhpcy5BUlJPV19XSURUSDtcbiAgICAgICAgbGV0IHdpZHRoID0gdGhpcy5BUlJPV19XSURUSCAvIDIgKyAuNTtcbiAgICAgICAgbGV0IGFycm93SGVhZDogYW55ID0gdGhpcy5wYXBlci5wYXRoKCdNMCAwTC0nICsgd2lkdGggKyAnLScgKyBkb3VibGVBcnJvd1dpZHRoICsgJ0wnICsgd2lkdGggKyAnIC0nICsgZG91YmxlQXJyb3dXaWR0aCArICd6Jyk7XG5cbiAgICAgICAgYXJyb3dIZWFkLnRyYW5zZm9ybSgndCcgKyBsaW5lLngyICsgJywnICsgbGluZS55Mik7XG4gICAgICAgIGxldCBhbmdsZSA9IFJhcGhhZWwuZGVnKGxpbmUuYW5nbGUgLSBNYXRoLlBJIC8gMik7XG4gICAgICAgIGFycm93SGVhZC50cmFuc2Zvcm0oJy4uLnInICsgYW5nbGUgKyAnIDAgMCcpO1xuXG4gICAgICAgIGFycm93SGVhZC5hdHRyKCdmaWxsJywgJyM1ODU4NTgnKTtcblxuICAgICAgICBhcnJvd0hlYWQuYXR0cignc3Ryb2tlLXdpZHRoJywgdGhpcy5TRVFVRU5DRUZMT1dfU1RST0tFKTtcbiAgICAgICAgYXJyb3dIZWFkLmF0dHIoJ3N0cm9rZScsICcjNTg1ODU4Jyk7XG5cbiAgICB9XG59XG4iXX0=
