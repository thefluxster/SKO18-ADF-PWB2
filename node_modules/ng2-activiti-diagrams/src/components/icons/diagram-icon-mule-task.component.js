/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var diagram_color_service_1 = require("../../services/diagram-color.service");
var DiagramIconMuleTaskComponent = (function () {
    function DiagramIconMuleTaskComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.onError = new core_1.EventEmitter();
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '' };
    }
    DiagramIconMuleTaskComponent.prototype.ngOnInit = function () {
        this.position = { x: this.data.x + 2, y: this.data.y + 2 };
        this.options.stroke = 'none';
        this.options.fillColors = '#bd4848';
    };
    return DiagramIconMuleTaskComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramIconMuleTaskComponent.prototype, "data", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DiagramIconMuleTaskComponent.prototype, "onError", void 0);
DiagramIconMuleTaskComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'diagram-icon-mule-task',
        template: "<raphael-icon-mule [position]=\"position\" [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"                    [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-icon-mule>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        diagram_color_service_1.DiagramColorService])
], DiagramIconMuleTaskComponent);
exports.DiagramIconMuleTaskComponent = DiagramIconMuleTaskComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvaWNvbnMvZGlhZ3JhbS1pY29uLW11bGUtdGFzay5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOzs7Ozs7Ozs7OztBQUVILHNDQUFtRjtBQUNuRiw4RUFBMkU7QUFPM0UsSUFBYSw0QkFBNEI7SUFXckMsc0NBQW1CLFVBQXNCLEVBQ3JCLG1CQUF3QztRQUR6QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3JCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFQNUQsWUFBTyxHQUFHLElBQUksbUJBQVksRUFBRSxDQUFDO1FBSTdCLFlBQU8sR0FBUSxFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUMsQ0FBQztJQUdmLENBQUM7SUFFaEUsK0NBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUU7UUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFFO0lBQ3pDLENBQUM7SUFDTCxtQ0FBQztBQUFELENBbkJBLEFBbUJDLElBQUE7QUFqQkc7SUFEQyxZQUFLLEVBQUU7OzBEQUNFO0FBR1Y7SUFEQyxhQUFNLEVBQUU7OzZEQUNvQjtBQUxwQiw0QkFBNEI7SUFMeEMsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNuQixRQUFRLEVBQUUsd0JBQXdCO1FBQ2xDLFFBQVEsRUFBRSxnT0FBZ087S0FDN08sQ0FBQztxQ0FZaUMsaUJBQVU7UUFDQSwyQ0FBbUI7R0FabkQsNEJBQTRCLENBbUJ4QztBQW5CWSxvRUFBNEIiLCJmaWxlIjoiY29tcG9uZW50cy9pY29ucy9kaWFncmFtLWljb24tbXVsZS10YXNrLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaWFncmFtQ29sb3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZGlhZ3JhbS1jb2xvci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICBzZWxlY3RvcjogJ2RpYWdyYW0taWNvbi1tdWxlLXRhc2snLFxuICAgIHRlbXBsYXRlOiBcIjxyYXBoYWVsLWljb24tbXVsZSBbcG9zaXRpb25dPVxcXCJwb3NpdGlvblxcXCIgW3N0cm9rZV09XFxcIm9wdGlvbnMuc3Ryb2tlXFxcIiBbc3Ryb2tlV2lkdGhdPVxcXCJvcHRpb25zLnN0cm9rZVdpZHRoXFxcIiAgICAgICAgICAgICAgICAgICAgW2ZpbGxDb2xvcnNdPVxcXCJvcHRpb25zLmZpbGxDb2xvcnNcXFwiIFtmaWxsT3BhY2l0eV09XFxcIm9wdGlvbnMuZmlsbE9wYWNpdHlcXFwiPjwvcmFwaGFlbC1pY29uLW11bGU+XCJcbn0pXG5leHBvcnQgY2xhc3MgRGlhZ3JhbUljb25NdWxlVGFza0NvbXBvbmVudCB7XG4gICAgQElucHV0KClcbiAgICBkYXRhOiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBvbkVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgcG9zaXRpb246IGFueTtcblxuICAgIG9wdGlvbnM6IGFueSA9IHtzdHJva2U6ICcnLCBmaWxsQ29sb3JzOiAnJywgZmlsbE9wYWNpdHk6ICcnLCBzdHJva2VXaWR0aDogJyd9O1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBkaWFncmFtQ29sb3JTZXJ2aWNlOiBEaWFncmFtQ29sb3JTZXJ2aWNlKSB7fVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB7eDogdGhpcy5kYXRhLnggKyAyLCB5OiB0aGlzLmRhdGEueSArIDJ9O1xuICAgICAgICB0aGlzLm9wdGlvbnMuc3Ryb2tlID0gJ25vbmUnIDtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxDb2xvcnMgPSAnI2JkNDg0OCcgO1xuICAgIH1cbn1cbiJdfQ==
