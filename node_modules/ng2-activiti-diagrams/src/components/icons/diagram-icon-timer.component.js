/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var diagram_color_service_1 = require("../../services/diagram-color.service");
var DiagramIconTimerComponent = (function () {
    function DiagramIconTimerComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.onError = new core_1.EventEmitter();
        this.center = {};
        this.circleOptions = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '' };
        this.timerOptions = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '' };
    }
    DiagramIconTimerComponent.prototype.ngOnInit = function () {
        this.center.x = this.data.x + (this.data.width / 2);
        this.center.y = this.data.y + (this.data.height / 2);
        this.circleRadius = 10;
        this.position = { x: this.data.x + 5, y: this.data.y + 5 };
        this.circleOptions.stroke = 'black';
        this.circleOptions.fillColors = 'none';
        this.timerOptions.stroke = 'none';
        this.timerOptions.fillColors = '#585858';
    };
    return DiagramIconTimerComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramIconTimerComponent.prototype, "data", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DiagramIconTimerComponent.prototype, "onError", void 0);
DiagramIconTimerComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'diagram-icon-timer',
        template: "<raphael-circle [center]=\"center\" [radius]=\"circleRadius\" [strokeWidth]=\"circleOptions.strokeWidth\" [stroke]=\"circleOptions.stroke\"                 [fillColors]=\"circleOptions.fillColors\" [fillOpacity]=\"circleOptions.fillOpacity\"></raphael-circle> <raphael-icon-timer [position]=\"position\" [stroke]=\"timerOptions.stroke\" [strokeWidth]=\"timerOptions.strokeWidth\"                       [fillColors]=\"timerOptions.fillColors\" [fillOpacity]=\"timerOptions.fillOpacity\"></raphael-icon-timer> <diagram-tooltip [data]=\"data\"></diagram-tooltip>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        diagram_color_service_1.DiagramColorService])
], DiagramIconTimerComponent);
exports.DiagramIconTimerComponent = DiagramIconTimerComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvaWNvbnMvZGlhZ3JhbS1pY29uLXRpbWVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7O0FBRUgsc0NBQW1GO0FBQ25GLDhFQUEyRTtBQU8zRSxJQUFhLHlCQUF5QjtJQWVsQyxtQ0FBbUIsVUFBc0IsRUFDckIsbUJBQXdDO1FBRHpDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDckIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQVg1RCxZQUFPLEdBQUcsSUFBSSxtQkFBWSxFQUFFLENBQUM7UUFFN0IsV0FBTSxHQUFRLEVBQUUsQ0FBQztRQUtqQixrQkFBYSxHQUFRLEVBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBQyxDQUFDO1FBQ3BGLGlCQUFZLEdBQVEsRUFBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFDLENBQUM7SUFHcEIsQ0FBQztJQUVoRSw0Q0FBUSxHQUFSO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUMsQ0FBQztRQUV6RCxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUU7UUFDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFFO1FBQ3hDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBRTtRQUNuQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUU7SUFDOUMsQ0FBQztJQUNMLGdDQUFDO0FBQUQsQ0E3QkEsQUE2QkMsSUFBQTtBQTNCRztJQURDLFlBQUssRUFBRTs7dURBQ0U7QUFHVjtJQURDLGFBQU0sRUFBRTs7MERBQ29CO0FBTHBCLHlCQUF5QjtJQUxyQyxnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsUUFBUSxFQUFFLGlqQkFBaWpCO0tBQzlqQixDQUFDO3FDQWdCaUMsaUJBQVU7UUFDQSwyQ0FBbUI7R0FoQm5ELHlCQUF5QixDQTZCckM7QUE3QlksOERBQXlCIiwiZmlsZSI6ImNvbXBvbmVudHMvaWNvbnMvZGlhZ3JhbS1pY29uLXRpbWVyLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaWFncmFtQ29sb3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZGlhZ3JhbS1jb2xvci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICBzZWxlY3RvcjogJ2RpYWdyYW0taWNvbi10aW1lcicsXG4gICAgdGVtcGxhdGU6IFwiPHJhcGhhZWwtY2lyY2xlIFtjZW50ZXJdPVxcXCJjZW50ZXJcXFwiIFtyYWRpdXNdPVxcXCJjaXJjbGVSYWRpdXNcXFwiIFtzdHJva2VXaWR0aF09XFxcImNpcmNsZU9wdGlvbnMuc3Ryb2tlV2lkdGhcXFwiIFtzdHJva2VdPVxcXCJjaXJjbGVPcHRpb25zLnN0cm9rZVxcXCIgICAgICAgICAgICAgICAgIFtmaWxsQ29sb3JzXT1cXFwiY2lyY2xlT3B0aW9ucy5maWxsQ29sb3JzXFxcIiBbZmlsbE9wYWNpdHldPVxcXCJjaXJjbGVPcHRpb25zLmZpbGxPcGFjaXR5XFxcIj48L3JhcGhhZWwtY2lyY2xlPiA8cmFwaGFlbC1pY29uLXRpbWVyIFtwb3NpdGlvbl09XFxcInBvc2l0aW9uXFxcIiBbc3Ryb2tlXT1cXFwidGltZXJPcHRpb25zLnN0cm9rZVxcXCIgW3N0cm9rZVdpZHRoXT1cXFwidGltZXJPcHRpb25zLnN0cm9rZVdpZHRoXFxcIiAgICAgICAgICAgICAgICAgICAgICAgW2ZpbGxDb2xvcnNdPVxcXCJ0aW1lck9wdGlvbnMuZmlsbENvbG9yc1xcXCIgW2ZpbGxPcGFjaXR5XT1cXFwidGltZXJPcHRpb25zLmZpbGxPcGFjaXR5XFxcIj48L3JhcGhhZWwtaWNvbi10aW1lcj4gPGRpYWdyYW0tdG9vbHRpcCBbZGF0YV09XFxcImRhdGFcXFwiPjwvZGlhZ3JhbS10b29sdGlwPlwiXG59KVxuZXhwb3J0IGNsYXNzIERpYWdyYW1JY29uVGltZXJDb21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgZGF0YTogYW55O1xuXG4gICAgQE91dHB1dCgpXG4gICAgb25FcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGNlbnRlcjogYW55ID0ge307XG4gICAgcG9zaXRpb246IGFueTtcblxuICAgIGNpcmNsZVJhZGl1czogbnVtYmVyO1xuXG4gICAgY2lyY2xlT3B0aW9uczogYW55ID0ge3N0cm9rZTogJycsIGZpbGxDb2xvcnM6ICcnLCBmaWxsT3BhY2l0eTogJycsIHN0cm9rZVdpZHRoOiAnJ307XG4gICAgdGltZXJPcHRpb25zOiBhbnkgPSB7c3Ryb2tlOiAnJywgZmlsbENvbG9yczogJycsIGZpbGxPcGFjaXR5OiAnJywgc3Ryb2tlV2lkdGg6ICcnfTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgZGlhZ3JhbUNvbG9yU2VydmljZTogRGlhZ3JhbUNvbG9yU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmNlbnRlci54ID0gdGhpcy5kYXRhLnggKyAodGhpcy5kYXRhLndpZHRoIC8gMik7XG4gICAgICAgIHRoaXMuY2VudGVyLnkgPSB0aGlzLmRhdGEueSArICh0aGlzLmRhdGEuaGVpZ2h0IC8gMik7XG4gICAgICAgIHRoaXMuY2lyY2xlUmFkaXVzID0gMTA7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB7eDogdGhpcy5kYXRhLnggKyA1LCB5OiB0aGlzLmRhdGEueSArIDV9O1xuXG4gICAgICAgIHRoaXMuY2lyY2xlT3B0aW9ucy5zdHJva2UgPSAnYmxhY2snIDtcbiAgICAgICAgdGhpcy5jaXJjbGVPcHRpb25zLmZpbGxDb2xvcnMgPSAnbm9uZScgO1xuICAgICAgICB0aGlzLnRpbWVyT3B0aW9ucy5zdHJva2UgPSAnbm9uZScgO1xuICAgICAgICB0aGlzLnRpbWVyT3B0aW9ucy5maWxsQ29sb3JzID0gJyM1ODU4NTgnIDtcbiAgICB9XG59XG4iXX0=
