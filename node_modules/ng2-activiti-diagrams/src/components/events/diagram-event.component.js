/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var diagram_color_service_1 = require("../../services/diagram-color.service");
var DiagramEventComponent = (function () {
    function DiagramEventComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '', radius: '' };
        this.onError = new core_1.EventEmitter();
        this.center = {};
    }
    DiagramEventComponent.prototype.ngOnInit = function () {
        this.center.x = this.data.x + (this.data.width / 2);
        this.center.y = this.data.y + (this.data.height / 2);
    };
    return DiagramEventComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramEventComponent.prototype, "data", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramEventComponent.prototype, "options", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramEventComponent.prototype, "iconFillColor", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DiagramEventComponent.prototype, "onError", void 0);
DiagramEventComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'diagram-event',
        template: "<raphael-circle [elementId]=\"data.id\" [center]=\"center\" [radius]=\"options.radius\" [strokeWidth]=\"options.strokeWidth\" [stroke]=\"options.stroke\"                 [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-circle> <diagram-container-icon-event [data]=\"data\" [type]=\"data.eventDefinition && data.eventDefinition.type\"                               [fillColor]=\"iconFillColor\"></diagram-container-icon-event> <diagram-tooltip [data]=\"data\"></diagram-tooltip>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        diagram_color_service_1.DiagramColorService])
], DiagramEventComponent);
exports.DiagramEventComponent = DiagramEventComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZXZlbnRzL2RpYWdyYW0tZXZlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7Ozs7Ozs7Ozs7QUFFSCxzQ0FBbUY7QUFDbkYsOEVBQTJFO0FBTzNFLElBQWEscUJBQXFCO0lBZTlCLCtCQUFtQixVQUFzQixFQUNyQixtQkFBd0M7UUFEekMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNyQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBWDVELFlBQU8sR0FBUSxFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBQyxDQUFDO1FBTTFGLFlBQU8sR0FBRyxJQUFJLG1CQUFZLEVBQUUsQ0FBQztRQUU3QixXQUFNLEdBQVEsRUFBRSxDQUFDO0lBRzhDLENBQUM7SUFFaEUsd0NBQVEsR0FBUjtRQUVJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0wsNEJBQUM7QUFBRCxDQXZCQSxBQXVCQyxJQUFBO0FBckJHO0lBREMsWUFBSyxFQUFFOzttREFDRTtBQUdWO0lBREMsWUFBSyxFQUFFOztzREFDa0Y7QUFHMUY7SUFEQyxZQUFLLEVBQUU7OzREQUNXO0FBR25CO0lBREMsYUFBTSxFQUFFOztzREFDb0I7QUFYcEIscUJBQXFCO0lBTGpDLGdCQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbkIsUUFBUSxFQUFFLGVBQWU7UUFDekIsUUFBUSxFQUFFLGtnQkFBa2dCO0tBQy9nQixDQUFDO3FDQWdCaUMsaUJBQVU7UUFDQSwyQ0FBbUI7R0FoQm5ELHFCQUFxQixDQXVCakM7QUF2Qlksc0RBQXFCIiwiZmlsZSI6ImNvbXBvbmVudHMvZXZlbnRzL2RpYWdyYW0tZXZlbnQuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpYWdyYW1Db2xvclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kaWFncmFtLWNvbG9yLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHNlbGVjdG9yOiAnZGlhZ3JhbS1ldmVudCcsXG4gICAgdGVtcGxhdGU6IFwiPHJhcGhhZWwtY2lyY2xlIFtlbGVtZW50SWRdPVxcXCJkYXRhLmlkXFxcIiBbY2VudGVyXT1cXFwiY2VudGVyXFxcIiBbcmFkaXVzXT1cXFwib3B0aW9ucy5yYWRpdXNcXFwiIFtzdHJva2VXaWR0aF09XFxcIm9wdGlvbnMuc3Ryb2tlV2lkdGhcXFwiIFtzdHJva2VdPVxcXCJvcHRpb25zLnN0cm9rZVxcXCIgICAgICAgICAgICAgICAgIFtmaWxsQ29sb3JzXT1cXFwib3B0aW9ucy5maWxsQ29sb3JzXFxcIiBbZmlsbE9wYWNpdHldPVxcXCJvcHRpb25zLmZpbGxPcGFjaXR5XFxcIj48L3JhcGhhZWwtY2lyY2xlPiA8ZGlhZ3JhbS1jb250YWluZXItaWNvbi1ldmVudCBbZGF0YV09XFxcImRhdGFcXFwiIFt0eXBlXT1cXFwiZGF0YS5ldmVudERlZmluaXRpb24gJiYgZGF0YS5ldmVudERlZmluaXRpb24udHlwZVxcXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2ZpbGxDb2xvcl09XFxcImljb25GaWxsQ29sb3JcXFwiPjwvZGlhZ3JhbS1jb250YWluZXItaWNvbi1ldmVudD4gPGRpYWdyYW0tdG9vbHRpcCBbZGF0YV09XFxcImRhdGFcXFwiPjwvZGlhZ3JhbS10b29sdGlwPlwiXG59KVxuZXhwb3J0IGNsYXNzIERpYWdyYW1FdmVudENvbXBvbmVudCB7XG4gICAgQElucHV0KClcbiAgICBkYXRhOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIG9wdGlvbnM6IGFueSA9IHtzdHJva2U6ICcnLCBmaWxsQ29sb3JzOiAnJywgZmlsbE9wYWNpdHk6ICcnLCBzdHJva2VXaWR0aDogJycsIHJhZGl1czogJyd9O1xuXG4gICAgQElucHV0KClcbiAgICBpY29uRmlsbENvbG9yOiBhbnk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBvbkVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgY2VudGVyOiBhbnkgPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgZGlhZ3JhbUNvbG9yU2VydmljZTogRGlhZ3JhbUNvbG9yU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIHRoaXMuY2VudGVyLnggPSB0aGlzLmRhdGEueCArICh0aGlzLmRhdGEud2lkdGggLyAyKTtcbiAgICAgICAgdGhpcy5jZW50ZXIueSA9IHRoaXMuZGF0YS55ICsgKHRoaXMuZGF0YS5oZWlnaHQgLyAyKTtcbiAgICB9XG59XG4iXX0=
