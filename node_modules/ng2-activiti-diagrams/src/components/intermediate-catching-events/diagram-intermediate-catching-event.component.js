/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var diagram_color_service_1 = require("../../services/diagram-color.service");
var DiagramIntermediateCatchingEventComponent = (function () {
    function DiagramIntermediateCatchingEventComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.onError = new core_1.EventEmitter();
        this.center = {};
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: 1 };
    }
    DiagramIntermediateCatchingEventComponent.prototype.ngOnInit = function () {
        this.center.x = this.data.x + (this.data.width / 2);
        this.center.y = this.data.y + (this.data.height / 2);
        this.circleRadiusInner = 12;
        this.circleRadiusOuter = 15;
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, diagram_color_service_1.DiagramColorService.MAIN_STROKE_COLOR);
        this.options.fillColors = this.diagramColorService.getFillColour(this.data.id);
        this.options.fillOpacity = this.diagramColorService.getFillOpacity();
    };
    return DiagramIntermediateCatchingEventComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramIntermediateCatchingEventComponent.prototype, "data", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DiagramIntermediateCatchingEventComponent.prototype, "onError", void 0);
DiagramIntermediateCatchingEventComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'diagram-intermediate-catching-event',
        template: "<raphael-circle [center]=\"center\" [radius]=\"circleRadiusInner\" [strokeWidth]=\"options.strokeWidth\" [stroke]=\"options.stroke\"                 [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-circle> <raphael-circle [elementId]=\"data.id\" [center]=\"center\" [radius]=\"circleRadiusOuter\" [strokeWidth]=\"options.strokeWidth\" [stroke]=\"options.stroke\"                 [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-circle> <diagram-container-icon-event [data]=\"data\" [type]=\"data.eventDefinition.type\"></diagram-container-icon-event> <diagram-tooltip [data]=\"data\"></diagram-tooltip>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        diagram_color_service_1.DiagramColorService])
], DiagramIntermediateCatchingEventComponent);
exports.DiagramIntermediateCatchingEventComponent = DiagramIntermediateCatchingEventComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvaW50ZXJtZWRpYXRlLWNhdGNoaW5nLWV2ZW50cy9kaWFncmFtLWludGVybWVkaWF0ZS1jYXRjaGluZy1ldmVudC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOzs7Ozs7Ozs7OztBQUVILHNDQUFtRjtBQUNuRiw4RUFBMkU7QUFPM0UsSUFBYSx5Q0FBeUM7SUFhbEQsbURBQW1CLFVBQXNCLEVBQ3JCLG1CQUF3QztRQUR6QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3JCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFUNUQsWUFBTyxHQUFHLElBQUksbUJBQVksRUFBRSxDQUFDO1FBRTdCLFdBQU0sR0FBUSxFQUFFLENBQUM7UUFDakIsWUFBTyxHQUFRLEVBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBQyxDQUFDO0lBTWQsQ0FBQztJQUVoRSw0REFBUSxHQUFSO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsMkNBQW1CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM5RyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3pFLENBQUM7SUFDTCxnREFBQztBQUFELENBM0JBLEFBMkJDLElBQUE7QUF6Qkc7SUFEQyxZQUFLLEVBQUU7O3VFQUNFO0FBR1Y7SUFEQyxhQUFNLEVBQUU7OzBFQUNvQjtBQUxwQix5Q0FBeUM7SUFMckQsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNuQixRQUFRLEVBQUUscUNBQXFDO1FBQy9DLFFBQVEsRUFBRSxrcUJBQWtxQjtLQUMvcUIsQ0FBQztxQ0FjaUMsaUJBQVU7UUFDQSwyQ0FBbUI7R0FkbkQseUNBQXlDLENBMkJyRDtBQTNCWSw4RkFBeUMiLCJmaWxlIjoiY29tcG9uZW50cy9pbnRlcm1lZGlhdGUtY2F0Y2hpbmctZXZlbnRzL2RpYWdyYW0taW50ZXJtZWRpYXRlLWNhdGNoaW5nLWV2ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaWFncmFtQ29sb3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZGlhZ3JhbS1jb2xvci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICBzZWxlY3RvcjogJ2RpYWdyYW0taW50ZXJtZWRpYXRlLWNhdGNoaW5nLWV2ZW50JyxcbiAgICB0ZW1wbGF0ZTogXCI8cmFwaGFlbC1jaXJjbGUgW2NlbnRlcl09XFxcImNlbnRlclxcXCIgW3JhZGl1c109XFxcImNpcmNsZVJhZGl1c0lubmVyXFxcIiBbc3Ryb2tlV2lkdGhdPVxcXCJvcHRpb25zLnN0cm9rZVdpZHRoXFxcIiBbc3Ryb2tlXT1cXFwib3B0aW9ucy5zdHJva2VcXFwiICAgICAgICAgICAgICAgICBbZmlsbENvbG9yc109XFxcIm9wdGlvbnMuZmlsbENvbG9yc1xcXCIgW2ZpbGxPcGFjaXR5XT1cXFwib3B0aW9ucy5maWxsT3BhY2l0eVxcXCI+PC9yYXBoYWVsLWNpcmNsZT4gPHJhcGhhZWwtY2lyY2xlIFtlbGVtZW50SWRdPVxcXCJkYXRhLmlkXFxcIiBbY2VudGVyXT1cXFwiY2VudGVyXFxcIiBbcmFkaXVzXT1cXFwiY2lyY2xlUmFkaXVzT3V0ZXJcXFwiIFtzdHJva2VXaWR0aF09XFxcIm9wdGlvbnMuc3Ryb2tlV2lkdGhcXFwiIFtzdHJva2VdPVxcXCJvcHRpb25zLnN0cm9rZVxcXCIgICAgICAgICAgICAgICAgIFtmaWxsQ29sb3JzXT1cXFwib3B0aW9ucy5maWxsQ29sb3JzXFxcIiBbZmlsbE9wYWNpdHldPVxcXCJvcHRpb25zLmZpbGxPcGFjaXR5XFxcIj48L3JhcGhhZWwtY2lyY2xlPiA8ZGlhZ3JhbS1jb250YWluZXItaWNvbi1ldmVudCBbZGF0YV09XFxcImRhdGFcXFwiIFt0eXBlXT1cXFwiZGF0YS5ldmVudERlZmluaXRpb24udHlwZVxcXCI+PC9kaWFncmFtLWNvbnRhaW5lci1pY29uLWV2ZW50PiA8ZGlhZ3JhbS10b29sdGlwIFtkYXRhXT1cXFwiZGF0YVxcXCI+PC9kaWFncmFtLXRvb2x0aXA+XCJcbn0pXG5leHBvcnQgY2xhc3MgRGlhZ3JhbUludGVybWVkaWF0ZUNhdGNoaW5nRXZlbnRDb21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgZGF0YTogYW55O1xuXG4gICAgQE91dHB1dCgpXG4gICAgb25FcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGNlbnRlcjogYW55ID0ge307XG4gICAgb3B0aW9uczogYW55ID0ge3N0cm9rZTogJycsIGZpbGxDb2xvcnM6ICcnLCBmaWxsT3BhY2l0eTogJycsIHN0cm9rZVdpZHRoOiAxfTtcblxuICAgIGNpcmNsZVJhZGl1c0lubmVyOiBudW1iZXI7XG4gICAgY2lyY2xlUmFkaXVzT3V0ZXI6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgZGlhZ3JhbUNvbG9yU2VydmljZTogRGlhZ3JhbUNvbG9yU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmNlbnRlci54ID0gdGhpcy5kYXRhLnggKyAodGhpcy5kYXRhLndpZHRoIC8gMik7XG4gICAgICAgIHRoaXMuY2VudGVyLnkgPSB0aGlzLmRhdGEueSArICh0aGlzLmRhdGEuaGVpZ2h0IC8gMik7XG5cbiAgICAgICAgdGhpcy5jaXJjbGVSYWRpdXNJbm5lciA9IDEyO1xuICAgICAgICB0aGlzLmNpcmNsZVJhZGl1c091dGVyID0gMTU7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLnN0cm9rZSA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRCcG1uQ29sb3IodGhpcy5kYXRhLCBEaWFncmFtQ29sb3JTZXJ2aWNlLk1BSU5fU1RST0tFX0NPTE9SKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxDb2xvcnMgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0RmlsbENvbG91cih0aGlzLmRhdGEuaWQpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsbE9wYWNpdHkgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0RmlsbE9wYWNpdHkoKTtcbiAgICB9XG59XG4iXX0=
