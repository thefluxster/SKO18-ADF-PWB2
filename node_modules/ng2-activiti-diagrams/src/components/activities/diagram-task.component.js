/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var diagram_color_service_1 = require("../../services/diagram-color.service");
var DiagramTaskComponent = (function () {
    function DiagramTaskComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.onError = new core_1.EventEmitter();
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '', radius: 4 };
    }
    DiagramTaskComponent.prototype.ngOnInit = function () {
        this.rectLeftCorner = { x: this.data.x, y: this.data.y };
        this.textPosition = { x: this.data.x + (this.data.width / 2), y: this.data.y + (this.data.height / 2) };
        this.options.fillColors = this.diagramColorService.getFillColour(this.data.id);
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, diagram_color_service_1.DiagramColorService.ACTIVITY_STROKE_COLOR);
        this.options.strokeWidth = this.diagramColorService.getBpmnStrokeWidth(this.data);
        this.options.fillOpacity = this.diagramColorService.getFillOpacity();
    };
    return DiagramTaskComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramTaskComponent.prototype, "data", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DiagramTaskComponent.prototype, "onError", void 0);
DiagramTaskComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'diagram-task',
        template: "<raphael-rect [elementId]=\"data.id\" [leftCorner]=\"rectLeftCorner\" [width]=\"data.width\" [height]=\"data.height\" [radius]=\"options.radius\"               [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"               [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-rect> <raphael-multiline-text [text]=\"data.name\" [position]=\"textPosition\" [elementWidth]=\"data.width\"></raphael-multiline-text> <diagram-tooltip [data]=\"data\"></diagram-tooltip>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        diagram_color_service_1.DiagramColorService])
], DiagramTaskComponent);
exports.DiagramTaskComponent = DiagramTaskComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYWN0aXZpdGllcy9kaWFncmFtLXRhc2suY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7Ozs7Ozs7Ozs7QUFFSCxzQ0FBbUY7QUFDbkYsOEVBQTJFO0FBTzNFLElBQWEsb0JBQW9CO0lBVzdCLDhCQUFtQixVQUFzQixFQUNyQixtQkFBd0M7UUFEekMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNyQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBUDVELFlBQU8sR0FBRyxJQUFJLG1CQUFZLEVBQUUsQ0FBQztRQUk3QixZQUFPLEdBQVEsRUFBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUMsQ0FBQztJQUcxQixDQUFDO0lBRWhFLHVDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxZQUFZLEdBQUksRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUUsRUFBQyxDQUFDO1FBRTNHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsMkNBQW1CLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNsSCxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN6RSxDQUFDO0lBQ0wsMkJBQUM7QUFBRCxDQXZCQSxBQXVCQyxJQUFBO0FBckJHO0lBREMsWUFBSyxFQUFFOztrREFDRTtBQUdWO0lBREMsYUFBTSxFQUFFOztxREFDb0I7QUFMcEIsb0JBQW9CO0lBTGhDLGdCQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbkIsUUFBUSxFQUFFLGNBQWM7UUFDeEIsUUFBUSxFQUFFLGdnQkFBZ2dCO0tBQzdnQixDQUFDO3FDQVlpQyxpQkFBVTtRQUNBLDJDQUFtQjtHQVpuRCxvQkFBb0IsQ0F1QmhDO0FBdkJZLG9EQUFvQiIsImZpbGUiOiJjb21wb25lbnRzL2FjdGl2aXRpZXMvZGlhZ3JhbS10YXNrLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEaWFncmFtQ29sb3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZGlhZ3JhbS1jb2xvci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICBzZWxlY3RvcjogJ2RpYWdyYW0tdGFzaycsXG4gICAgdGVtcGxhdGU6IFwiPHJhcGhhZWwtcmVjdCBbZWxlbWVudElkXT1cXFwiZGF0YS5pZFxcXCIgW2xlZnRDb3JuZXJdPVxcXCJyZWN0TGVmdENvcm5lclxcXCIgW3dpZHRoXT1cXFwiZGF0YS53aWR0aFxcXCIgW2hlaWdodF09XFxcImRhdGEuaGVpZ2h0XFxcIiBbcmFkaXVzXT1cXFwib3B0aW9ucy5yYWRpdXNcXFwiICAgICAgICAgICAgICAgW3N0cm9rZV09XFxcIm9wdGlvbnMuc3Ryb2tlXFxcIiBbc3Ryb2tlV2lkdGhdPVxcXCJvcHRpb25zLnN0cm9rZVdpZHRoXFxcIiAgICAgICAgICAgICAgIFtmaWxsQ29sb3JzXT1cXFwib3B0aW9ucy5maWxsQ29sb3JzXFxcIiBbZmlsbE9wYWNpdHldPVxcXCJvcHRpb25zLmZpbGxPcGFjaXR5XFxcIj48L3JhcGhhZWwtcmVjdD4gPHJhcGhhZWwtbXVsdGlsaW5lLXRleHQgW3RleHRdPVxcXCJkYXRhLm5hbWVcXFwiIFtwb3NpdGlvbl09XFxcInRleHRQb3NpdGlvblxcXCIgW2VsZW1lbnRXaWR0aF09XFxcImRhdGEud2lkdGhcXFwiPjwvcmFwaGFlbC1tdWx0aWxpbmUtdGV4dD4gPGRpYWdyYW0tdG9vbHRpcCBbZGF0YV09XFxcImRhdGFcXFwiPjwvZGlhZ3JhbS10b29sdGlwPlwiXG59KVxuZXhwb3J0IGNsYXNzIERpYWdyYW1UYXNrQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIGRhdGE6IGFueTtcblxuICAgIEBPdXRwdXQoKVxuICAgIG9uRXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICByZWN0TGVmdENvcm5lcjogYW55O1xuICAgIHRleHRQb3NpdGlvbjogYW55O1xuICAgIG9wdGlvbnM6IGFueSA9IHtzdHJva2U6ICcnLCBmaWxsQ29sb3JzOiAnJywgZmlsbE9wYWNpdHk6ICcnLCBzdHJva2VXaWR0aDogJycsIHJhZGl1czogNH07XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRpYWdyYW1Db2xvclNlcnZpY2U6IERpYWdyYW1Db2xvclNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5yZWN0TGVmdENvcm5lciA9IHt4OiB0aGlzLmRhdGEueCwgeTogdGhpcy5kYXRhLnl9O1xuICAgICAgICB0aGlzLnRleHRQb3NpdGlvbiA9ICB7eDogdGhpcy5kYXRhLnggKyAoIHRoaXMuZGF0YS53aWR0aCAvIDIgKSwgeTogdGhpcy5kYXRhLnkgKyAoIHRoaXMuZGF0YS5oZWlnaHQgLyAyICl9O1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5maWxsQ29sb3JzID0gdGhpcy5kaWFncmFtQ29sb3JTZXJ2aWNlLmdldEZpbGxDb2xvdXIodGhpcy5kYXRhLmlkKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnN0cm9rZSA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRCcG1uQ29sb3IodGhpcy5kYXRhLCBEaWFncmFtQ29sb3JTZXJ2aWNlLkFDVElWSVRZX1NUUk9LRV9DT0xPUik7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zdHJva2VXaWR0aCA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRCcG1uU3Ryb2tlV2lkdGgodGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxPcGFjaXR5ID0gdGhpcy5kaWFncmFtQ29sb3JTZXJ2aWNlLmdldEZpbGxPcGFjaXR5KCk7XG4gICAgfVxufVxuIl19
