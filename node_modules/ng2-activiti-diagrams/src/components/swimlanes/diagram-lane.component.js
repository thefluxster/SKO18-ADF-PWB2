/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var diagram_color_service_1 = require("../../services/diagram-color.service");
var DiagramLaneComponent = (function () {
    function DiagramLaneComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.onError = new core_1.EventEmitter();
        this.options = { stroke: '#000000', fillColors: 'none', fillOpacity: '', strokeWidth: '1', radius: 0 };
    }
    DiagramLaneComponent.prototype.ngOnInit = function () {
        this.rectLeftCorner = { x: this.lane.x, y: this.lane.y };
        this.width = this.lane.width;
        this.height = this.lane.height;
        this.textPosition = { x: this.lane.x + 10, y: this.lane.y + (this.lane.height / 2) };
        this.text = this.lane.name;
        this.textTransform = 'r270';
    };
    return DiagramLaneComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramLaneComponent.prototype, "lane", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DiagramLaneComponent.prototype, "onError", void 0);
DiagramLaneComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'diagram-lane',
        template: "<raphael-rect [leftCorner]=\"rectLeftCorner\" [width]=\"width\" [height]=\"height\" [radius]=\"options.radius\"               [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"               [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-rect> <raphael-text [text]=\"text\" [position]=\"textPosition\" [transform]=\"textTransform\"></raphael-text>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        diagram_color_service_1.DiagramColorService])
], DiagramLaneComponent);
exports.DiagramLaneComponent = DiagramLaneComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc3dpbWxhbmVzL2RpYWdyYW0tbGFuZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOzs7Ozs7Ozs7OztBQUVILHNDQUFtRjtBQUNuRiw4RUFBMkU7QUFPM0UsSUFBYSxvQkFBb0I7SUFnQjdCLDhCQUFtQixVQUFzQixFQUNyQixtQkFBd0M7UUFEekMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNyQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBWjVELFlBQU8sR0FBRyxJQUFJLG1CQUFZLEVBQUUsQ0FBQztRQVM3QixZQUFPLEdBQVEsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUMsQ0FBQztJQUd0QyxDQUFDO0lBRWhFLHVDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUUvQixJQUFJLENBQUMsWUFBWSxHQUFJLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUUsRUFBQyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUM7SUFDaEMsQ0FBQztJQUNMLDJCQUFDO0FBQUQsQ0E1QkEsQUE0QkMsSUFBQTtBQTFCRztJQURDLFlBQUssRUFBRTs7a0RBQ0U7QUFHVjtJQURDLGFBQU0sRUFBRTs7cURBQ29CO0FBTHBCLG9CQUFvQjtJQUxoQyxnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFBRSxjQUFjO1FBQ3hCLFFBQVEsRUFBRSxpWkFBaVo7S0FDOVosQ0FBQztxQ0FpQmlDLGlCQUFVO1FBQ0EsMkNBQW1CO0dBakJuRCxvQkFBb0IsQ0E0QmhDO0FBNUJZLG9EQUFvQiIsImZpbGUiOiJjb21wb25lbnRzL3N3aW1sYW5lcy9kaWFncmFtLWxhbmUuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpYWdyYW1Db2xvclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kaWFncmFtLWNvbG9yLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHNlbGVjdG9yOiAnZGlhZ3JhbS1sYW5lJyxcbiAgICB0ZW1wbGF0ZTogXCI8cmFwaGFlbC1yZWN0IFtsZWZ0Q29ybmVyXT1cXFwicmVjdExlZnRDb3JuZXJcXFwiIFt3aWR0aF09XFxcIndpZHRoXFxcIiBbaGVpZ2h0XT1cXFwiaGVpZ2h0XFxcIiBbcmFkaXVzXT1cXFwib3B0aW9ucy5yYWRpdXNcXFwiICAgICAgICAgICAgICAgW3N0cm9rZV09XFxcIm9wdGlvbnMuc3Ryb2tlXFxcIiBbc3Ryb2tlV2lkdGhdPVxcXCJvcHRpb25zLnN0cm9rZVdpZHRoXFxcIiAgICAgICAgICAgICAgIFtmaWxsQ29sb3JzXT1cXFwib3B0aW9ucy5maWxsQ29sb3JzXFxcIiBbZmlsbE9wYWNpdHldPVxcXCJvcHRpb25zLmZpbGxPcGFjaXR5XFxcIj48L3JhcGhhZWwtcmVjdD4gPHJhcGhhZWwtdGV4dCBbdGV4dF09XFxcInRleHRcXFwiIFtwb3NpdGlvbl09XFxcInRleHRQb3NpdGlvblxcXCIgW3RyYW5zZm9ybV09XFxcInRleHRUcmFuc2Zvcm1cXFwiPjwvcmFwaGFlbC10ZXh0PlwiXG59KVxuZXhwb3J0IGNsYXNzIERpYWdyYW1MYW5lQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIGxhbmU6IGFueTtcblxuICAgIEBPdXRwdXQoKVxuICAgIG9uRXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICByZWN0TGVmdENvcm5lcjogYW55O1xuICAgIHdpZHRoOiBhbnk7XG4gICAgaGVpZ2h0OiBhbnk7XG5cbiAgICB0ZXh0UG9zaXRpb246IGFueTtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdGV4dFRyYW5zZm9ybTogc3RyaW5nO1xuICAgIG9wdGlvbnM6IGFueSA9IHtzdHJva2U6ICcjMDAwMDAwJywgZmlsbENvbG9yczogJ25vbmUnLCBmaWxsT3BhY2l0eTogJycsIHN0cm9rZVdpZHRoOiAnMScsIHJhZGl1czogMH07XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRpYWdyYW1Db2xvclNlcnZpY2U6IERpYWdyYW1Db2xvclNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5yZWN0TGVmdENvcm5lciA9IHt4OiB0aGlzLmxhbmUueCwgeTogdGhpcy5sYW5lLnl9O1xuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5sYW5lLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMubGFuZS5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy50ZXh0UG9zaXRpb24gPSAge3g6IHRoaXMubGFuZS54ICsgMTAsIHk6IHRoaXMubGFuZS55ICsgKCB0aGlzLmxhbmUuaGVpZ2h0IC8gMiApfTtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy5sYW5lLm5hbWU7XG4gICAgICAgIHRoaXMudGV4dFRyYW5zZm9ybSA9ICdyMjcwJztcbiAgICB9XG59XG4iXX0=
