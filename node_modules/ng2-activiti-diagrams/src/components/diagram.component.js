/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var diagrams_service_1 = require("../services/diagrams.service");
var diagram_color_service_1 = require("../services/diagram-color.service");
var raphael_service_1 = require("./raphael/raphael.service");
var diagram_model_1 = require("../models/diagram.model");
var DiagramComponent = (function () {
    function DiagramComponent(elementRef, translateService, diagramColorService, raphaelService, diagramsService, logService) {
        this.elementRef = elementRef;
        this.translateService = translateService;
        this.diagramColorService = diagramColorService;
        this.raphaelService = raphaelService;
        this.diagramsService = diagramsService;
        this.logService = logService;
        this.metricType = '';
        this.width = 1000;
        this.height = 500;
        this.onSuccess = new core_1.EventEmitter();
        this.onError = new core_1.EventEmitter();
        this.PADDING_WIDTH = 60;
        this.PADDING_HEIGHT = 60;
        if (translateService) {
            translateService.addTranslationFolder('ng2-activiti-diagrams', 'node_modules/ng2-activiti-diagrams/src');
        }
    }
    DiagramComponent.prototype.ngOnChanges = function (changes) {
        this.reset();
        this.diagramColorService.setTotalColors(this.metricColor);
        this.getProcessDefinitionModel(this.processDefinitionId);
    };
    DiagramComponent.prototype.getProcessDefinitionModel = function (processDefinitionId) {
        var _this = this;
        this.diagramsService.getProcessDefinitionModel(processDefinitionId).subscribe(function (res) {
            _this.diagram = new diagram_model_1.DiagramModel(res);
            _this.raphaelService.setting(_this.diagram.diagramWidth + _this.PADDING_WIDTH, _this.diagram.diagramHeight + _this.PADDING_HEIGHT);
            _this.setMetricValueToDiagramElement(_this.diagram, _this.metricPercentages, _this.metricType);
            _this.onSuccess.emit(res);
        }, function (err) {
            _this.onError.emit(err);
            _this.logService.error(err);
        });
    };
    DiagramComponent.prototype.setMetricValueToDiagramElement = function (diagram, metrics, metricType) {
        var _loop_1 = function (key) {
            if (metrics.hasOwnProperty(key)) {
                var foundElement = diagram.elements.find(function (element) { return element.id === key; });
                if (foundElement) {
                    foundElement.value = metrics[key];
                    foundElement.dataType = metricType;
                }
            }
        };
        for (var key in metrics) {
            _loop_1(key);
        }
    };
    DiagramComponent.prototype.reset = function () {
        this.raphaelService.reset();
    };
    return DiagramComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramComponent.prototype, "processDefinitionId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramComponent.prototype, "metricPercentages", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramComponent.prototype, "metricColor", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DiagramComponent.prototype, "metricType", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DiagramComponent.prototype, "width", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number)
], DiagramComponent.prototype, "height", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DiagramComponent.prototype, "onSuccess", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DiagramComponent.prototype, "onError", void 0);
DiagramComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'activiti-diagram',
        styles: [".diagram {     border: 1px solid lightgray; overflow:auto }"],
        template: "<div *ngIf=\"diagram\" class=\"diagram\">     <div *ngFor=\"let element of diagram.elements\">         <div [ngSwitch]=\"element.type\">             <div *ngSwitchCase=\"'StartEvent'\">                 <diagram-start-event [data]=\"element\"></diagram-start-event>             </div>             <div *ngSwitchCase=\"'ExclusiveGateway'\">                 <diagram-exclusive-gateway [data]=\"element\"></diagram-exclusive-gateway>             </div>             <div *ngSwitchCase=\"'InclusiveGateway'\">                 <diagram-inclusive-gateway [data]=\"element\"></diagram-inclusive-gateway>             </div>             <div *ngSwitchCase=\"'EventGateway'\">                 <diagram-event-gateway [data]=\"element\"></diagram-event-gateway>             </div>             <div *ngSwitchCase=\"'ParallelGateway'\">                 <diagram-parallel-gateway [data]=\"element\"></diagram-parallel-gateway>             </div>             <div *ngSwitchCase=\"'EndEvent'\">                 <diagram-end-event [data]=\"element\"></diagram-end-event>             </div>             <div *ngSwitchCase=\"'UserTask'\">                 <diagram-user-task [data]=\"element\"></diagram-user-task>             </div>             <div *ngSwitchCase=\"'ManualTask'\">                 <diagram-manual-task [data]=\"element\"></diagram-manual-task>             </div>             <div *ngSwitchCase=\"'ServiceTask'\">                 <diagram-container-service-task [data]=\"element\"></diagram-container-service-task>             </div>             <div *ngSwitchCase=\"'ReceiveTask'\">                 <diagram-receive-task [data]=\"element\"></diagram-receive-task>             </div>             <div *ngSwitchCase=\"'ScriptTask'\">                 <diagram-script-task [data]=\"element\"></diagram-script-task>             </div>             <div *ngSwitchCase=\"'BusinessRuleTask'\">                 <diagram-business-rule-task [data]=\"element\"></diagram-business-rule-task>             </div>             <div *ngSwitchCase=\"'BoundaryEvent'\">                 <diagram-boundary-event [data]=\"element\"></diagram-boundary-event>             </div>             <div *ngSwitchCase=\"'ThrowEvent'\">                 <diagram-throw-event [data]=\"element\"></diagram-throw-event>             </div>             <div *ngSwitchCase=\"'IntermediateCatchEvent'\">                 <diagram-intermediate-catching-event [data]=\"element\"></diagram-intermediate-catching-event>             </div>             <div *ngSwitchCase=\"'SubProcess'\">                 <diagram-subprocess [data]=\"element\"></diagram-subprocess>             </div>             <div *ngSwitchCase=\"'EventSubProcess'\">                 <diagram-event-subprocess [data]=\"element\"></diagram-event-subprocess>             </div>         </div>     </div>     <div *ngFor=\"let flow of diagram.flows\">         <div [ngSwitch]=\"flow.type\">             <div *ngSwitchCase=\"'sequenceFlow'\">                 <diagram-sequence-flow [flow]=\"flow\"></diagram-sequence-flow>             </div>         </div>     </div>     <div *ngIf=\"diagram.pools\">         <diagram-pools [pools]=\"diagram.pools\"></diagram-pools>     </div> </div>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        ng2_alfresco_core_1.AlfrescoTranslationService,
        diagram_color_service_1.DiagramColorService,
        raphael_service_1.RaphaelService,
        diagrams_service_1.DiagramsService,
        ng2_alfresco_core_1.LogService])
], DiagramComponent);
exports.DiagramComponent = DiagramComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
