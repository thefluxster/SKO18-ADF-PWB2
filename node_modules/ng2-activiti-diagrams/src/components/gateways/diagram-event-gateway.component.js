/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var diagram_color_service_1 = require("../../services/diagram-color.service");
var DiagramEventGatewayComponent = (function () {
    function DiagramEventGatewayComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.onError = new core_1.EventEmitter();
        this.center = {};
        this.centerPentagon = {};
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: 0.5 };
        this.circleRadiusInner = 10.4;
        this.circleRadiusOuter = 11.7;
        this.pentaStrokeWidth = 1.39999998;
    }
    DiagramEventGatewayComponent.prototype.ngOnInit = function () {
        this.center.x = this.data.x + (this.data.width / 2);
        this.center.y = this.data.y + (this.data.height / 2);
        this.centerPentagon.x = this.data.x;
        this.centerPentagon.y = this.data.y;
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, diagram_color_service_1.DiagramColorService.MAIN_STROKE_COLOR);
        this.options.fillColors = this.diagramColorService.getFillColour(this.data.id);
        this.options.fillOpacity = this.diagramColorService.getFillOpacity();
    };
    return DiagramEventGatewayComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramEventGatewayComponent.prototype, "data", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DiagramEventGatewayComponent.prototype, "onError", void 0);
DiagramEventGatewayComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'diagram-event-gateway',
        template: "<diagram-gateway [data]=\"data\"></diagram-gateway> <raphael-circle [center]=\"center\" [radius]=\"circleRadiusInner\" [strokeWidth]=\"options.strokeWidth\" [stroke]=\"options.stroke\"                 [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-circle> <raphael-circle [center]=\"center\" [radius]=\"circleRadiusOuter\" [strokeWidth]=\"options.strokeWidth\" [stroke]=\"options.stroke\"                 [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-circle> <raphael-pentagon [center]=\"centerPentagon\" [strokeWidth]=\"pentaStrokeWidth\" [stroke]=\"options.stroke\"                   [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-pentagon>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        diagram_color_service_1.DiagramColorService])
], DiagramEventGatewayComponent);
exports.DiagramEventGatewayComponent = DiagramEventGatewayComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZ2F0ZXdheXMvZGlhZ3JhbS1ldmVudC1nYXRld2F5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7Ozs7O0FBRUgsc0NBQW1GO0FBQ25GLDhFQUEyRTtBQU8zRSxJQUFhLDRCQUE0QjtJQWdCckMsc0NBQW1CLFVBQXNCLEVBQ3JCLG1CQUF3QztRQUR6QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3JCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFaNUQsWUFBTyxHQUFHLElBQUksbUJBQVksRUFBRSxDQUFDO1FBRTdCLFdBQU0sR0FBUSxFQUFFLENBQUM7UUFDakIsbUJBQWMsR0FBUSxFQUFFLENBQUM7UUFDekIsWUFBTyxHQUFRLEVBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBQyxDQUFDO1FBRS9FLHNCQUFpQixHQUFHLElBQUksQ0FBQztRQUN6QixzQkFBaUIsR0FBRyxJQUFJLENBQUM7UUFFekIscUJBQWdCLEdBQUcsVUFBVSxDQUFDO0lBR2lDLENBQUM7SUFFaEUsK0NBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVwQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsMkNBQW1CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM5RyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3pFLENBQUM7SUFDTCxtQ0FBQztBQUFELENBN0JBLEFBNkJDLElBQUE7QUEzQkc7SUFEQyxZQUFLLEVBQUU7OzBEQUNFO0FBR1Y7SUFEQyxhQUFNLEVBQUU7OzZEQUNvQjtBQUxwQiw0QkFBNEI7SUFMeEMsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNuQixRQUFRLEVBQUUsdUJBQXVCO1FBQ2pDLFFBQVEsRUFBRSxvdkJBQW92QjtLQUNqd0IsQ0FBQztxQ0FpQmlDLGlCQUFVO1FBQ0EsMkNBQW1CO0dBakJuRCw0QkFBNEIsQ0E2QnhDO0FBN0JZLG9FQUE0QiIsImZpbGUiOiJjb21wb25lbnRzL2dhdGV3YXlzL2RpYWdyYW0tZXZlbnQtZ2F0ZXdheS5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlhZ3JhbUNvbG9yU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RpYWdyYW0tY29sb3Iuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgc2VsZWN0b3I6ICdkaWFncmFtLWV2ZW50LWdhdGV3YXknLFxuICAgIHRlbXBsYXRlOiBcIjxkaWFncmFtLWdhdGV3YXkgW2RhdGFdPVxcXCJkYXRhXFxcIj48L2RpYWdyYW0tZ2F0ZXdheT4gPHJhcGhhZWwtY2lyY2xlIFtjZW50ZXJdPVxcXCJjZW50ZXJcXFwiIFtyYWRpdXNdPVxcXCJjaXJjbGVSYWRpdXNJbm5lclxcXCIgW3N0cm9rZVdpZHRoXT1cXFwib3B0aW9ucy5zdHJva2VXaWR0aFxcXCIgW3N0cm9rZV09XFxcIm9wdGlvbnMuc3Ryb2tlXFxcIiAgICAgICAgICAgICAgICAgW2ZpbGxDb2xvcnNdPVxcXCJvcHRpb25zLmZpbGxDb2xvcnNcXFwiIFtmaWxsT3BhY2l0eV09XFxcIm9wdGlvbnMuZmlsbE9wYWNpdHlcXFwiPjwvcmFwaGFlbC1jaXJjbGU+IDxyYXBoYWVsLWNpcmNsZSBbY2VudGVyXT1cXFwiY2VudGVyXFxcIiBbcmFkaXVzXT1cXFwiY2lyY2xlUmFkaXVzT3V0ZXJcXFwiIFtzdHJva2VXaWR0aF09XFxcIm9wdGlvbnMuc3Ryb2tlV2lkdGhcXFwiIFtzdHJva2VdPVxcXCJvcHRpb25zLnN0cm9rZVxcXCIgICAgICAgICAgICAgICAgIFtmaWxsQ29sb3JzXT1cXFwib3B0aW9ucy5maWxsQ29sb3JzXFxcIiBbZmlsbE9wYWNpdHldPVxcXCJvcHRpb25zLmZpbGxPcGFjaXR5XFxcIj48L3JhcGhhZWwtY2lyY2xlPiA8cmFwaGFlbC1wZW50YWdvbiBbY2VudGVyXT1cXFwiY2VudGVyUGVudGFnb25cXFwiIFtzdHJva2VXaWR0aF09XFxcInBlbnRhU3Ryb2tlV2lkdGhcXFwiIFtzdHJva2VdPVxcXCJvcHRpb25zLnN0cm9rZVxcXCIgICAgICAgICAgICAgICAgICAgW2ZpbGxDb2xvcnNdPVxcXCJvcHRpb25zLmZpbGxDb2xvcnNcXFwiIFtmaWxsT3BhY2l0eV09XFxcIm9wdGlvbnMuZmlsbE9wYWNpdHlcXFwiPjwvcmFwaGFlbC1wZW50YWdvbj5cIlxufSlcbmV4cG9ydCBjbGFzcyBEaWFncmFtRXZlbnRHYXRld2F5Q29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIGRhdGE6IGFueTtcblxuICAgIEBPdXRwdXQoKVxuICAgIG9uRXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjZW50ZXI6IGFueSA9IHt9O1xuICAgIGNlbnRlclBlbnRhZ29uOiBhbnkgPSB7fTtcbiAgICBvcHRpb25zOiBhbnkgPSB7c3Ryb2tlOiAnJywgZmlsbENvbG9yczogJycsIGZpbGxPcGFjaXR5OiAnJywgc3Ryb2tlV2lkdGg6IDAuNX07XG5cbiAgICBjaXJjbGVSYWRpdXNJbm5lciA9IDEwLjQ7XG4gICAgY2lyY2xlUmFkaXVzT3V0ZXIgPSAxMS43O1xuXG4gICAgcGVudGFTdHJva2VXaWR0aCA9IDEuMzk5OTk5OTg7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRpYWdyYW1Db2xvclNlcnZpY2U6IERpYWdyYW1Db2xvclNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5jZW50ZXIueCA9IHRoaXMuZGF0YS54ICsgKHRoaXMuZGF0YS53aWR0aCAvIDIpO1xuICAgICAgICB0aGlzLmNlbnRlci55ID0gdGhpcy5kYXRhLnkgKyAodGhpcy5kYXRhLmhlaWdodCAvIDIpO1xuICAgICAgICB0aGlzLmNlbnRlclBlbnRhZ29uLnggPSB0aGlzLmRhdGEueDtcbiAgICAgICAgdGhpcy5jZW50ZXJQZW50YWdvbi55ID0gdGhpcy5kYXRhLnk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLnN0cm9rZSA9IHRoaXMuZGlhZ3JhbUNvbG9yU2VydmljZS5nZXRCcG1uQ29sb3IodGhpcy5kYXRhLCBEaWFncmFtQ29sb3JTZXJ2aWNlLk1BSU5fU1RST0tFX0NPTE9SKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxDb2xvcnMgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0RmlsbENvbG91cih0aGlzLmRhdGEuaWQpO1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsbE9wYWNpdHkgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0RmlsbE9wYWNpdHkoKTtcbiAgICB9XG59XG4iXX0=
