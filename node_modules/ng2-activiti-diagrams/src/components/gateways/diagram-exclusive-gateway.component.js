/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var diagram_color_service_1 = require("../../services/diagram-color.service");
var DiagramExclusiveGatewayComponent = (function () {
    function DiagramExclusiveGatewayComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.onError = new core_1.EventEmitter();
        this.center = {};
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: 3 };
    }
    DiagramExclusiveGatewayComponent.prototype.ngOnInit = function () {
        this.center.x = this.data.x;
        this.center.y = this.data.y;
        this.width = this.data.width;
        this.height = this.data.height;
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, diagram_color_service_1.DiagramColorService.MAIN_STROKE_COLOR);
        this.options.fillColors = this.diagramColorService.getFillColour(this.data.id);
        this.options.fillOpacity = this.diagramColorService.getFillOpacity();
    };
    return DiagramExclusiveGatewayComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramExclusiveGatewayComponent.prototype, "data", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DiagramExclusiveGatewayComponent.prototype, "onError", void 0);
DiagramExclusiveGatewayComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'diagram-exclusive-gateway',
        template: "<diagram-gateway [data]=\"data\"></diagram-gateway> <raphael-cross [center]=\"center\" [width]=\"width\" [height]=\"height\" [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"                [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-cross>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        diagram_color_service_1.DiagramColorService])
], DiagramExclusiveGatewayComponent);
exports.DiagramExclusiveGatewayComponent = DiagramExclusiveGatewayComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZ2F0ZXdheXMvZGlhZ3JhbS1leGNsdXNpdmUtZ2F0ZXdheS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOzs7Ozs7Ozs7OztBQUVILHNDQUFtRjtBQUNuRiw4RUFBMkU7QUFPM0UsSUFBYSxnQ0FBZ0M7SUFZekMsMENBQW1CLFVBQXNCLEVBQ3JCLG1CQUF3QztRQUR6QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3JCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFSNUQsWUFBTyxHQUFHLElBQUksbUJBQVksRUFBRSxDQUFDO1FBRTdCLFdBQU0sR0FBUSxFQUFFLENBQUM7UUFHakIsWUFBTyxHQUFRLEVBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUMsRUFBQyxDQUFDO0lBR2QsQ0FBQztJQUVoRSxtREFBUSxHQUFSO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRS9CLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSwyQ0FBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzlHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDekUsQ0FBQztJQUNMLHVDQUFDO0FBQUQsQ0F6QkEsQUF5QkMsSUFBQTtBQXZCRztJQURDLFlBQUssRUFBRTs7OERBQ0U7QUFHVjtJQURDLGFBQU0sRUFBRTs7aUVBQ29CO0FBTHBCLGdDQUFnQztJQUw1QyxnQkFBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ25CLFFBQVEsRUFBRSwyQkFBMkI7UUFDckMsUUFBUSxFQUFFLDBTQUEwUztLQUN2VCxDQUFDO3FDQWFpQyxpQkFBVTtRQUNBLDJDQUFtQjtHQWJuRCxnQ0FBZ0MsQ0F5QjVDO0FBekJZLDRFQUFnQyIsImZpbGUiOiJjb21wb25lbnRzL2dhdGV3YXlzL2RpYWdyYW0tZXhjbHVzaXZlLWdhdGV3YXkuY29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpYWdyYW1Db2xvclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kaWFncmFtLWNvbG9yLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHNlbGVjdG9yOiAnZGlhZ3JhbS1leGNsdXNpdmUtZ2F0ZXdheScsXG4gICAgdGVtcGxhdGU6IFwiPGRpYWdyYW0tZ2F0ZXdheSBbZGF0YV09XFxcImRhdGFcXFwiPjwvZGlhZ3JhbS1nYXRld2F5PiA8cmFwaGFlbC1jcm9zcyBbY2VudGVyXT1cXFwiY2VudGVyXFxcIiBbd2lkdGhdPVxcXCJ3aWR0aFxcXCIgW2hlaWdodF09XFxcImhlaWdodFxcXCIgW3N0cm9rZV09XFxcIm9wdGlvbnMuc3Ryb2tlXFxcIiBbc3Ryb2tlV2lkdGhdPVxcXCJvcHRpb25zLnN0cm9rZVdpZHRoXFxcIiAgICAgICAgICAgICAgICBbZmlsbENvbG9yc109XFxcIm9wdGlvbnMuZmlsbENvbG9yc1xcXCIgW2ZpbGxPcGFjaXR5XT1cXFwib3B0aW9ucy5maWxsT3BhY2l0eVxcXCI+PC9yYXBoYWVsLWNyb3NzPlwiXG59KVxuZXhwb3J0IGNsYXNzIERpYWdyYW1FeGNsdXNpdmVHYXRld2F5Q29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIGRhdGE6IGFueTtcblxuICAgIEBPdXRwdXQoKVxuICAgIG9uRXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBjZW50ZXI6IGFueSA9IHt9O1xuICAgIHdpZHRoOiBhbnk7XG4gICAgaGVpZ2h0OiBhbnk7XG4gICAgb3B0aW9uczogYW55ID0ge3N0cm9rZTogJycsIGZpbGxDb2xvcnM6ICcnLCBmaWxsT3BhY2l0eTogJycsIHN0cm9rZVdpZHRoOiAzfTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgZGlhZ3JhbUNvbG9yU2VydmljZTogRGlhZ3JhbUNvbG9yU2VydmljZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmNlbnRlci54ID0gdGhpcy5kYXRhLng7XG4gICAgICAgIHRoaXMuY2VudGVyLnkgPSB0aGlzLmRhdGEueTtcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuZGF0YS53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmRhdGEuaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5zdHJva2UgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0QnBtbkNvbG9yKHRoaXMuZGF0YSwgRGlhZ3JhbUNvbG9yU2VydmljZS5NQUlOX1NUUk9LRV9DT0xPUik7XG4gICAgICAgIHRoaXMub3B0aW9ucy5maWxsQ29sb3JzID0gdGhpcy5kaWFncmFtQ29sb3JTZXJ2aWNlLmdldEZpbGxDb2xvdXIodGhpcy5kYXRhLmlkKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxPcGFjaXR5ID0gdGhpcy5kaWFncmFtQ29sb3JTZXJ2aWNlLmdldEZpbGxPcGFjaXR5KCk7XG4gICAgfVxufVxuIl19
