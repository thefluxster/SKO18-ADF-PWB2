/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var diagram_color_service_1 = require("../../services/diagram-color.service");
var DiagramSubprocessComponent = (function () {
    function DiagramSubprocessComponent(elementRef, diagramColorService) {
        this.elementRef = elementRef;
        this.diagramColorService = diagramColorService;
        this.onError = new core_1.EventEmitter();
        this.options = { stroke: '', fillColors: '', fillOpacity: '', strokeWidth: '', radius: 4 };
    }
    DiagramSubprocessComponent.prototype.ngOnInit = function () {
        this.rectLeftCorner = { x: this.data.x, y: this.data.y };
        this.width = this.data.width;
        this.height = this.data.height;
        this.options.fillColors = 'none';
        this.options.stroke = this.diagramColorService.getBpmnColor(this.data, diagram_color_service_1.DiagramColorService.MAIN_STROKE_COLOR);
        this.options.strokeWidth = 1;
    };
    return DiagramSubprocessComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], DiagramSubprocessComponent.prototype, "data", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", Object)
], DiagramSubprocessComponent.prototype, "onError", void 0);
DiagramSubprocessComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'diagram-subprocess',
        template: "<raphael-rect [leftCorner]=\"rectLeftCorner\" [width]=\"width\" [height]=\"height\" [radius]=\"options.radius\"               [stroke]=\"options.stroke\" [strokeWidth]=\"options.strokeWidth\"               [fillColors]=\"options.fillColors\" [fillOpacity]=\"options.fillOpacity\"></raphael-rect> <diagram-tooltip [data]=\"data\"></diagram-tooltip>"
    }),
    __metadata("design:paramtypes", [core_1.ElementRef,
        diagram_color_service_1.DiagramColorService])
], DiagramSubprocessComponent);
exports.DiagramSubprocessComponent = DiagramSubprocessComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc3RydWN0dXJhbC9kaWFncmFtLXN1YnByb2Nlc3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7Ozs7Ozs7Ozs7QUFFSCxzQ0FBbUY7QUFDbkYsOEVBQTJFO0FBTzNFLElBQWEsMEJBQTBCO0lBYW5DLG9DQUFtQixVQUFzQixFQUNyQixtQkFBd0M7UUFEekMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNyQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBVDVELFlBQU8sR0FBRyxJQUFJLG1CQUFZLEVBQUUsQ0FBQztRQU03QixZQUFPLEdBQVEsRUFBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUMsQ0FBQztJQUcxQixDQUFDO0lBRWhFLDZDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUUvQixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLDJDQUFtQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDOUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDTCxpQ0FBQztBQUFELENBekJBLEFBeUJDLElBQUE7QUF2Qkc7SUFEQyxZQUFLLEVBQUU7O3dEQUNFO0FBR1Y7SUFEQyxhQUFNLEVBQUU7OzJEQUNvQjtBQUxwQiwwQkFBMEI7SUFMdEMsZ0JBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtRQUNuQixRQUFRLEVBQUUsb0JBQW9CO1FBQzlCLFFBQVEsRUFBRSw2VkFBNlY7S0FDMVcsQ0FBQztxQ0FjaUMsaUJBQVU7UUFDQSwyQ0FBbUI7R0FkbkQsMEJBQTBCLENBeUJ0QztBQXpCWSxnRUFBMEIiLCJmaWxlIjoiY29tcG9uZW50cy9zdHJ1Y3R1cmFsL2RpYWdyYW0tc3VicHJvY2Vzcy5jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlhZ3JhbUNvbG9yU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RpYWdyYW0tY29sb3Iuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgc2VsZWN0b3I6ICdkaWFncmFtLXN1YnByb2Nlc3MnLFxuICAgIHRlbXBsYXRlOiBcIjxyYXBoYWVsLXJlY3QgW2xlZnRDb3JuZXJdPVxcXCJyZWN0TGVmdENvcm5lclxcXCIgW3dpZHRoXT1cXFwid2lkdGhcXFwiIFtoZWlnaHRdPVxcXCJoZWlnaHRcXFwiIFtyYWRpdXNdPVxcXCJvcHRpb25zLnJhZGl1c1xcXCIgICAgICAgICAgICAgICBbc3Ryb2tlXT1cXFwib3B0aW9ucy5zdHJva2VcXFwiIFtzdHJva2VXaWR0aF09XFxcIm9wdGlvbnMuc3Ryb2tlV2lkdGhcXFwiICAgICAgICAgICAgICAgW2ZpbGxDb2xvcnNdPVxcXCJvcHRpb25zLmZpbGxDb2xvcnNcXFwiIFtmaWxsT3BhY2l0eV09XFxcIm9wdGlvbnMuZmlsbE9wYWNpdHlcXFwiPjwvcmFwaGFlbC1yZWN0PiA8ZGlhZ3JhbS10b29sdGlwIFtkYXRhXT1cXFwiZGF0YVxcXCI+PC9kaWFncmFtLXRvb2x0aXA+XCJcbn0pXG5leHBvcnQgY2xhc3MgRGlhZ3JhbVN1YnByb2Nlc3NDb21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgZGF0YTogYW55O1xuXG4gICAgQE91dHB1dCgpXG4gICAgb25FcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHJlY3RMZWZ0Q29ybmVyOiBhbnk7XG4gICAgd2lkdGg6IGFueTtcbiAgICBoZWlnaHQ6IGFueTtcblxuICAgIG9wdGlvbnM6IGFueSA9IHtzdHJva2U6ICcnLCBmaWxsQ29sb3JzOiAnJywgZmlsbE9wYWNpdHk6ICcnLCBzdHJva2VXaWR0aDogJycsIHJhZGl1czogNH07XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRpYWdyYW1Db2xvclNlcnZpY2U6IERpYWdyYW1Db2xvclNlcnZpY2UpIHt9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5yZWN0TGVmdENvcm5lciA9IHt4OiB0aGlzLmRhdGEueCwgeTogdGhpcy5kYXRhLnl9O1xuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5kYXRhLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuZGF0YS5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxDb2xvcnMgPSAnbm9uZSc7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zdHJva2UgPSB0aGlzLmRpYWdyYW1Db2xvclNlcnZpY2UuZ2V0QnBtbkNvbG9yKHRoaXMuZGF0YSwgRGlhZ3JhbUNvbG9yU2VydmljZS5NQUlOX1NUUk9LRV9DT0xPUik7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zdHJva2VXaWR0aCA9IDE7XG4gICAgfVxufVxuIl19
