/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require("@angular/core");
var RenderingQueueServices = (function () {
    function RenderingQueueServices() {
        this.renderingStates = {
            INITIAL: 0,
            RUNNING: 1,
            PAUSED: 2,
            FINISHED: 3
        };
        this.CLEANUP_TIMEOUT = 30000;
        this.pdfViewer = null;
        this.pdfThumbnailViewer = null;
        this.onIdle = null;
        this.highestPriorityPage = null;
        this.idleTimeout = null;
        this.printing = false;
        this.isThumbnailViewEnabled = false;
    }
    RenderingQueueServices.prototype.setViewer = function (pdfViewer) {
        this.pdfViewer = pdfViewer;
    };
    RenderingQueueServices.prototype.setThumbnailViewer = function (pdfThumbnailViewer) {
        this.pdfThumbnailViewer = pdfThumbnailViewer;
    };
    RenderingQueueServices.prototype.isHighestPriority = function (view) {
        return this.highestPriorityPage === view.renderingId;
    };
    RenderingQueueServices.prototype.renderHighestPriority = function (currentlyVisiblePages) {
        if (this.idleTimeout) {
            clearTimeout(this.idleTimeout);
            this.idleTimeout = null;
        }
        if (this.pdfViewer.forceRendering(currentlyVisiblePages)) {
            return;
        }
        if (this.pdfThumbnailViewer && this.isThumbnailViewEnabled) {
            if (this.pdfThumbnailViewer.forceRendering()) {
                return;
            }
        }
        if (this.printing) {
            return;
        }
        if (this.onIdle) {
            this.idleTimeout = setTimeout(this.onIdle.bind(this), this.CLEANUP_TIMEOUT);
        }
    };
    RenderingQueueServices.prototype.getHighestPriority = function (visible, views, scrolledDown) {
        var visibleViews = visible.views;
        var numVisible = visibleViews.length;
        if (numVisible === 0) {
            return false;
        }
        for (var i = 0; i < numVisible; ++i) {
            var view = visibleViews[i].view;
            if (!this.isViewFinished(view)) {
                return view;
            }
        }
        if (scrolledDown) {
            var nextPageIndex = visible.last.id;
            if (views[nextPageIndex] && !this.isViewFinished(views[nextPageIndex])) {
                return views[nextPageIndex];
            }
        }
        else {
            var previousPageIndex = visible.first.id - 2;
            if (views[previousPageIndex] && !this.isViewFinished(views[previousPageIndex])) {
                return views[previousPageIndex];
            }
        }
        return null;
    };
    RenderingQueueServices.prototype.isViewFinished = function (view) {
        return view.renderingState === this.renderingStates.FINISHED;
    };
    RenderingQueueServices.prototype.renderView = function (view) {
        var state = view.renderingState;
        switch (state) {
            case this.renderingStates.FINISHED:
                return false;
            case this.renderingStates.PAUSED:
                this.highestPriorityPage = view.renderingId;
                view.resume();
                break;
            case this.renderingStates.RUNNING:
                this.highestPriorityPage = view.renderingId;
                break;
            case this.renderingStates.INITIAL:
                this.highestPriorityPage = view.renderingId;
                var continueRendering = function () {
                    this.renderHighestPriority();
                }.bind(this);
                view.draw().then(continueRendering, continueRendering);
                break;
            default:
                break;
        }
        return true;
    };
    return RenderingQueueServices;
}());
RenderingQueueServices = __decorate([
    core_1.Injectable()
], RenderingQueueServices);
exports.RenderingQueueServices = RenderingQueueServices;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL3JlbmRlcmluZy1xdWV1ZS5zZXJ2aWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7Ozs7Ozs7O0FBRUgsc0NBQTJDO0FBUzNDLElBQWEsc0JBQXNCO0lBRG5DO1FBR0ksb0JBQWUsR0FBRztZQUNkLE9BQU8sRUFBRSxDQUFDO1lBQ1YsT0FBTyxFQUFFLENBQUM7WUFDVixNQUFNLEVBQUUsQ0FBQztZQUNULFFBQVEsRUFBRSxDQUFDO1NBQ2QsQ0FBQztRQUVGLG9CQUFlLEdBQVcsS0FBSyxDQUFDO1FBRWhDLGNBQVMsR0FBUSxJQUFJLENBQUM7UUFDdEIsdUJBQWtCLEdBQVEsSUFBSSxDQUFDO1FBQy9CLFdBQU0sR0FBUSxJQUFJLENBQUM7UUFFbkIsd0JBQW1CLEdBQVEsSUFBSSxDQUFDO1FBQ2hDLGdCQUFXLEdBQVEsSUFBSSxDQUFDO1FBQ3hCLGFBQVEsR0FBUSxLQUFLLENBQUM7UUFDdEIsMkJBQXNCLEdBQVEsS0FBSyxDQUFDO0lBOEh4QyxDQUFDO0lBekhHLDBDQUFTLEdBQVQsVUFBVSxTQUFTO1FBQ2YsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDL0IsQ0FBQztJQUtELG1EQUFrQixHQUFsQixVQUFtQixrQkFBa0I7UUFDakMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO0lBQ2pELENBQUM7SUFNRCxrREFBaUIsR0FBakIsVUFBa0IsSUFBUztRQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixLQUFLLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDekQsQ0FBQztJQUVELHNEQUFxQixHQUFyQixVQUFzQixxQkFBcUI7UUFDdkMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDbkIsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUM1QixDQUFDO1FBR0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkQsTUFBTSxDQUFDO1FBQ1gsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1lBQ3pELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLE1BQU0sQ0FBQztZQUNYLENBQUM7UUFDTCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFaEIsTUFBTSxDQUFDO1FBQ1gsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ2hGLENBQUM7SUFDTCxDQUFDO0lBRUQsbURBQWtCLEdBQWxCLFVBQW1CLE9BQU8sRUFBRSxLQUFLLEVBQUUsWUFBWTtRQU8zQyxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBRWpDLElBQUksVUFBVSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDckMsRUFBRSxDQUFDLENBQUMsVUFBVSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNqQixDQUFDO1FBQ0QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNsQyxJQUFJLElBQUksR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ2hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsQ0FBQztRQUNMLENBQUM7UUFHRCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFFcEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JFLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDaEMsQ0FBQztRQUNMLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksaUJBQWlCLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzdDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0UsTUFBTSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3BDLENBQUM7UUFDTCxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNoQixDQUFDO0lBTUQsK0NBQWMsR0FBZCxVQUFlLElBQUk7UUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztJQUNqRSxDQUFDO0lBUUQsMkNBQVUsR0FBVixVQUFXLElBQVM7UUFDaEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUNoQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1osS0FBSyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVE7Z0JBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDakIsS0FBSyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU07Z0JBQzVCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO2dCQUM1QyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2QsS0FBSyxDQUFDO1lBQ1YsS0FBSyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU87Z0JBQzdCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO2dCQUM1QyxLQUFLLENBQUM7WUFDVixLQUFLLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTztnQkFDN0IsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7Z0JBQzVDLElBQUksaUJBQWlCLEdBQUc7b0JBQ3BCLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2dCQUNqQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNiLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztnQkFDdkQsS0FBSyxDQUFDO1lBQ1Y7Z0JBQ0ksS0FBSyxDQUFDO1FBQ2QsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUNMLDZCQUFDO0FBQUQsQ0FoSkEsQUFnSkMsSUFBQTtBQWhKWSxzQkFBc0I7SUFEbEMsaUJBQVUsRUFBRTtHQUNBLHNCQUFzQixDQWdKbEM7QUFoSlksd0RBQXNCIiwiZmlsZSI6InNlcnZpY2VzL3JlbmRlcmluZy1xdWV1ZS5zZXJ2aWNlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKlxuICogUmVuZGVyaW5nUXVldWVTZXJ2aWNlcyByZW5kZXJpbmcgb2YgdGhlIHZpZXdzIGZvciBwYWdlcyBhbmQgdGh1bWJuYWlscy5cbiAqXG4gKiBAcmV0dXJucyB7UmVuZGVyaW5nUXVldWVTZXJ2aWNlc30gLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVuZGVyaW5nUXVldWVTZXJ2aWNlcyB7XG5cbiAgICByZW5kZXJpbmdTdGF0ZXMgPSB7XG4gICAgICAgIElOSVRJQUw6IDAsXG4gICAgICAgIFJVTk5JTkc6IDEsXG4gICAgICAgIFBBVVNFRDogMixcbiAgICAgICAgRklOSVNIRUQ6IDNcbiAgICB9O1xuXG4gICAgQ0xFQU5VUF9USU1FT1VUOiBudW1iZXIgPSAzMDAwMDtcblxuICAgIHBkZlZpZXdlcjogYW55ID0gbnVsbDtcbiAgICBwZGZUaHVtYm5haWxWaWV3ZXI6IGFueSA9IG51bGw7XG4gICAgb25JZGxlOiBhbnkgPSBudWxsO1xuXG4gICAgaGlnaGVzdFByaW9yaXR5UGFnZTogYW55ID0gbnVsbDtcbiAgICBpZGxlVGltZW91dDogYW55ID0gbnVsbDtcbiAgICBwcmludGluZzogYW55ID0gZmFsc2U7XG4gICAgaXNUaHVtYm5haWxWaWV3RW5hYmxlZDogYW55ID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1BERlZpZXdlcn0gcGRmVmlld2VyXG4gICAgICovXG4gICAgc2V0Vmlld2VyKHBkZlZpZXdlcikge1xuICAgICAgICB0aGlzLnBkZlZpZXdlciA9IHBkZlZpZXdlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1BERlRodW1ibmFpbFZpZXdlcn0gcGRmVGh1bWJuYWlsVmlld2VyXG4gICAgICovXG4gICAgc2V0VGh1bWJuYWlsVmlld2VyKHBkZlRodW1ibmFpbFZpZXdlcikge1xuICAgICAgICB0aGlzLnBkZlRodW1ibmFpbFZpZXdlciA9IHBkZlRodW1ibmFpbFZpZXdlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0lSZW5kZXJhYmxlVmlld30gdmlld1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzSGlnaGVzdFByaW9yaXR5KHZpZXc6IGFueSkge1xuICAgICAgICByZXR1cm4gdGhpcy5oaWdoZXN0UHJpb3JpdHlQYWdlID09PSB2aWV3LnJlbmRlcmluZ0lkO1xuICAgIH1cblxuICAgIHJlbmRlckhpZ2hlc3RQcmlvcml0eShjdXJyZW50bHlWaXNpYmxlUGFnZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaWRsZVRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmlkbGVUaW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMuaWRsZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFnZXMgaGF2ZSBhIGhpZ2hlciBwcmlvcml0eSB0aGFuIHRodW1ibmFpbHMsIHNvIGNoZWNrIHRoZW0gZmlyc3QuXG4gICAgICAgIGlmICh0aGlzLnBkZlZpZXdlci5mb3JjZVJlbmRlcmluZyhjdXJyZW50bHlWaXNpYmxlUGFnZXMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm8gcGFnZXMgbmVlZGVkIHJlbmRlcmluZyBzbyBjaGVjayB0aHVtYm5haWxzLlxuICAgICAgICBpZiAodGhpcy5wZGZUaHVtYm5haWxWaWV3ZXIgJiYgdGhpcy5pc1RodW1ibmFpbFZpZXdFbmFibGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wZGZUaHVtYm5haWxWaWV3ZXIuZm9yY2VSZW5kZXJpbmcoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByaW50aW5nKSB7XG4gICAgICAgICAgICAvLyBJZiBwcmludGluZyBpcyBjdXJyZW50bHkgb25nb2luZyBkbyBub3QgcmVzY2hlZHVsZSBjbGVhbnVwLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub25JZGxlKSB7XG4gICAgICAgICAgICB0aGlzLmlkbGVUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLm9uSWRsZS5iaW5kKHRoaXMpLCB0aGlzLkNMRUFOVVBfVElNRU9VVCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRIaWdoZXN0UHJpb3JpdHkodmlzaWJsZSwgdmlld3MsIHNjcm9sbGVkRG93bikge1xuICAgICAgICAvLyBUaGUgc3RhdGUgaGFzIGNoYW5nZWQgZmlndXJlIG91dCB3aGljaCBwYWdlIGhhcyB0aGUgaGlnaGVzdCBwcmlvcml0eSB0b1xuICAgICAgICAvLyByZW5kZXIgbmV4dCAoaWYgYW55KS5cbiAgICAgICAgLy8gUHJpb3JpdHk6XG4gICAgICAgIC8vIDEgdmlzaWJsZSBwYWdlc1xuICAgICAgICAvLyAyIGlmIGxhc3Qgc2Nyb2xsZWQgZG93biBwYWdlIGFmdGVyIHRoZSB2aXNpYmxlIHBhZ2VzXG4gICAgICAgIC8vIDIgaWYgbGFzdCBzY3JvbGxlZCB1cCBwYWdlIGJlZm9yZSB0aGUgdmlzaWJsZSBwYWdlc1xuICAgICAgICBsZXQgdmlzaWJsZVZpZXdzID0gdmlzaWJsZS52aWV3cztcblxuICAgICAgICBsZXQgbnVtVmlzaWJsZSA9IHZpc2libGVWaWV3cy5sZW5ndGg7XG4gICAgICAgIGlmIChudW1WaXNpYmxlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1WaXNpYmxlOyArK2kpIHtcbiAgICAgICAgICAgIGxldCB2aWV3ID0gdmlzaWJsZVZpZXdzW2ldLnZpZXc7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNWaWV3RmluaXNoZWQodmlldykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlldztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFsbCB0aGUgdmlzaWJsZSB2aWV3cyBoYXZlIHJlbmRlcmVkLCB0cnkgdG8gcmVuZGVyIG5leHQvcHJldmlvdXMgcGFnZXMuXG4gICAgICAgIGlmIChzY3JvbGxlZERvd24pIHtcbiAgICAgICAgICAgIGxldCBuZXh0UGFnZUluZGV4ID0gdmlzaWJsZS5sYXN0LmlkO1xuICAgICAgICAgICAgLy8gSUQncyBzdGFydCBhdCAxIHNvIG5vIG5lZWQgdG8gYWRkIDEuXG4gICAgICAgICAgICBpZiAodmlld3NbbmV4dFBhZ2VJbmRleF0gJiYgIXRoaXMuaXNWaWV3RmluaXNoZWQodmlld3NbbmV4dFBhZ2VJbmRleF0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdzW25leHRQYWdlSW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHByZXZpb3VzUGFnZUluZGV4ID0gdmlzaWJsZS5maXJzdC5pZCAtIDI7XG4gICAgICAgICAgICBpZiAodmlld3NbcHJldmlvdXNQYWdlSW5kZXhdICYmICF0aGlzLmlzVmlld0ZpbmlzaGVkKHZpZXdzW3ByZXZpb3VzUGFnZUluZGV4XSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlld3NbcHJldmlvdXNQYWdlSW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEV2ZXJ5dGhpbmcgdGhhdCBuZWVkcyB0byBiZSByZW5kZXJlZCBoYXMgYmVlbi5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtJUmVuZGVyYWJsZVZpZXd9IHZpZXdcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1ZpZXdGaW5pc2hlZCh2aWV3KSB7XG4gICAgICAgIHJldHVybiB2aWV3LnJlbmRlcmluZ1N0YXRlID09PSB0aGlzLnJlbmRlcmluZ1N0YXRlcy5GSU5JU0hFRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXIgYSBwYWdlIG9yIHRodW1ibmFpbCB2aWV3LiBUaGlzIGNhbGxzIHRoZSBhcHByb3ByaWF0ZSBmdW5jdGlvblxuICAgICAqIGJhc2VkIG9uIHRoZSB2aWV3cyBzdGF0ZS4gSWYgdGhlIHZpZXcgaXMgYWxyZWFkeSByZW5kZXJlZCBpdCB3aWxsIHJldHVyblxuICAgICAqIGZhbHNlLlxuICAgICAqIEBwYXJhbSB7SVJlbmRlcmFibGVWaWV3fSB2aWV3XG4gICAgICovXG4gICAgcmVuZGVyVmlldyh2aWV3OiBhbnkpIHtcbiAgICAgICAgbGV0IHN0YXRlID0gdmlldy5yZW5kZXJpbmdTdGF0ZTtcbiAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSB0aGlzLnJlbmRlcmluZ1N0YXRlcy5GSU5JU0hFRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBjYXNlIHRoaXMucmVuZGVyaW5nU3RhdGVzLlBBVVNFRDpcbiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hlc3RQcmlvcml0eVBhZ2UgPSB2aWV3LnJlbmRlcmluZ0lkO1xuICAgICAgICAgICAgICAgIHZpZXcucmVzdW1lKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHRoaXMucmVuZGVyaW5nU3RhdGVzLlJVTk5JTkc6XG4gICAgICAgICAgICAgICAgdGhpcy5oaWdoZXN0UHJpb3JpdHlQYWdlID0gdmlldy5yZW5kZXJpbmdJZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgdGhpcy5yZW5kZXJpbmdTdGF0ZXMuSU5JVElBTDpcbiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hlc3RQcmlvcml0eVBhZ2UgPSB2aWV3LnJlbmRlcmluZ0lkO1xuICAgICAgICAgICAgICAgIGxldCBjb250aW51ZVJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJIaWdoZXN0UHJpb3JpdHkoKTtcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgdmlldy5kcmF3KCkudGhlbihjb250aW51ZVJlbmRlcmluZywgY29udGludWVSZW5kZXJpbmcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG4iXX0=
