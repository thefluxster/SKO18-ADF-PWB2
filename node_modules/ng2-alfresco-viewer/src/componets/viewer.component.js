/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require("@angular/core");
var platform_browser_1 = require("@angular/platform-browser");
var ng2_alfresco_core_1 = require("ng2-alfresco-core");
var ViewerComponent = (function () {
    function ViewerComponent(apiService, element, document, logService) {
        this.apiService = apiService;
        this.element = element;
        this.document = document;
        this.logService = logService;
        this.urlFile = '';
        this.fileNodeId = null;
        this.overlayMode = false;
        this.showViewer = true;
        this.showToolbar = true;
        this.showViewerChange = new core_1.EventEmitter();
        this.loaded = false;
    }
    ViewerComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (this.showViewer) {
            this.hideOtherHeaderBar();
            this.blockOtherScrollBar();
            if (!this.urlFile && !this.fileNodeId) {
                throw new Error('Attribute urlFile or fileNodeId is required');
            }
            return new Promise(function (resolve, reject) {
                var alfrescoApi = _this.apiService.getInstance();
                if (_this.urlFile) {
                    var filenameFromUrl = _this.getFilenameFromUrl(_this.urlFile);
                    _this.displayName = filenameFromUrl ? filenameFromUrl : '';
                    _this.extension = _this.getFileExtension(filenameFromUrl);
                    _this.urlFileContent = _this.urlFile;
                    resolve();
                }
                else if (_this.fileNodeId) {
                    alfrescoApi.nodes.getNodeInfo(_this.fileNodeId).then(function (data) {
                        _this.mimeType = data.content.mimeType;
                        _this.displayName = data.name;
                        _this.urlFileContent = alfrescoApi.content.getContentUrl(data.id);
                        _this.loaded = true;
                        resolve();
                    }, function (error) {
                        reject(error);
                        this.logService.error('This node does not exist');
                    });
                }
            });
        }
    };
    ViewerComponent.prototype.close = function () {
        this.unblockOtherScrollBar();
        if (this.otherMenu) {
            this.otherMenu.hidden = false;
        }
        this.cleanup();
        this.showViewer = false;
        this.showViewerChange.emit(this.showViewer);
    };
    ViewerComponent.prototype.cleanup = function () {
        this.urlFileContent = '';
        this.displayName = '';
        this.fileNodeId = null;
        this.loaded = false;
        this.extension = null;
        this.mimeType = null;
    };
    ViewerComponent.prototype.ngOnDestroy = function () {
        this.cleanup();
    };
    ViewerComponent.prototype.getFilenameFromUrl = function (url) {
        var anchor = url.indexOf('#');
        var query = url.indexOf('?');
        var end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);
        return url.substring(url.lastIndexOf('/', end) + 1, end);
    };
    ViewerComponent.prototype.getFileExtension = function (fileName) {
        return fileName.split('.').pop().toLowerCase();
    };
    ViewerComponent.prototype.isImage = function () {
        return this.isImageExtension() || this.isImageMimeType();
    };
    ViewerComponent.prototype.isMedia = function () {
        return this.isMediaExtension(this.extension) || this.isMediaMimeType();
    };
    ViewerComponent.prototype.isImageExtension = function () {
        return this.extension === 'png' || this.extension === 'jpg' ||
            this.extension === 'jpeg' || this.extension === 'gif' || this.extension === 'bmp';
    };
    ViewerComponent.prototype.isMediaMimeType = function () {
        var mimeExtension;
        if (this.mimeType && this.mimeType.indexOf('/')) {
            mimeExtension = this.mimeType.substr(this.mimeType.indexOf('/') + 1, this.mimeType.length);
        }
        return this.mimeType && this.mimeType.indexOf('video/') === 0 && this.isMediaExtension(mimeExtension);
    };
    ViewerComponent.prototype.isMediaExtension = function (extension) {
        return extension === 'mp4' || extension === 'WebM' || extension === 'Ogg';
    };
    ViewerComponent.prototype.isImageMimeType = function () {
        return this.mimeType && this.mimeType.indexOf('image/') === 0;
    };
    ViewerComponent.prototype.isPdf = function () {
        return this.extension === 'pdf' || this.mimeType === 'application/pdf';
    };
    ViewerComponent.prototype.supportedExtension = function () {
        return this.isImage() || this.isPdf() || this.isMedia();
    };
    ViewerComponent.prototype.handleKeyboardEvent = function (event) {
        var key = event.keyCode;
        if (key === 27 && this.overlayMode) {
            this.close();
        }
    };
    ViewerComponent.prototype.blockOtherScrollBar = function () {
        var mainElements = document.getElementsByTagName('main');
        for (var i = 0; i < mainElements.length; i++) {
            mainElements[i].style.overflow = 'hidden';
        }
    };
    ViewerComponent.prototype.unblockOtherScrollBar = function () {
        var mainElements = document.getElementsByTagName('main');
        for (var i = 0; i < mainElements.length; i++) {
            mainElements[i].style.overflow = '';
        }
    };
    ViewerComponent.prototype.isParentElementHeaderBar = function () {
        return !!this.closestElement(this.element.nativeElement, 'header');
    };
    ViewerComponent.prototype.closestElement = function (elelemnt, nodeName) {
        var parent = elelemnt.parentElement;
        if (parent) {
            if (parent.nodeName.toLowerCase() === nodeName) {
                return parent;
            }
            else {
                return this.closestElement(parent, nodeName);
            }
        }
        else {
            return null;
        }
    };
    ViewerComponent.prototype.hideOtherHeaderBar = function () {
        if (this.overlayMode && !this.isParentElementHeaderBar()) {
            this.otherMenu = document.querySelector('header');
            if (this.otherMenu) {
                this.otherMenu.hidden = true;
            }
        }
    };
    ViewerComponent.prototype.isLoaded = function () {
        return this.fileNodeId ? this.loaded : true;
    };
    return ViewerComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ViewerComponent.prototype, "urlFile", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], ViewerComponent.prototype, "fileNodeId", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ViewerComponent.prototype, "overlayMode", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ViewerComponent.prototype, "showViewer", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], ViewerComponent.prototype, "showToolbar", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], ViewerComponent.prototype, "showViewerChange", void 0);
__decorate([
    core_1.HostListener('document:keydown', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [KeyboardEvent]),
    __metadata("design:returntype", void 0)
], ViewerComponent.prototype, "handleKeyboardEvent", null);
ViewerComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'alfresco-viewer',
        template: "<div id=\"viewer\" *ngIf=\"showViewer\" [ngClass]=\"{'all-space': !overlayMode }\">     <div *ngIf=\"overlayMode\">         <div id=\"viewer-shadow-transparent\" class=\"viewer-shadow-transparent\"></div>     </div>      <div id=\"viewer-main-container\" class=\"all-space\" [ngClass]=\"{'viewer-overlay-view': overlayMode }\">          <!-- Start Layout -->         <div [ngClass]=\"{'mdl-layout mdl-js-layout mdl-layout--fixed-header': overlayMode, 'all-space': !overlayMode}\">              <header *ngIf=\"overlayMode\" class=\"mdl-layout__header\">                 <div class=\"mdl-layout__header-row\">                      <!-- File Title -->                     <span id=\"viewer-name-file\" class=\"mdl-layout-title viewer-name-file\">{{displayName}}</span>                      <span class=\"vertical-divider\"></span>                      <div class=\"mdl-layout-spacer\"></div>                      <!-- Start Navigation -->                     <nav class=\"mdl-navigation\">                         <div id=\"viewer-toolbar-view-options\">                             <button *ngIf=\"overlayMode\"                                     class=\"mdl-color--black mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored\"                                     (click)=\"close()\">                                 <i id=\"viewer-close-button\" class=\"icon material-icons\">close</i>                             </button>                         </div>                     </nav>                     <!-- End Navigation -->                 </div>             </header>             <!--<div class=\"mdl-layout__drawer\">-->             <!--<span class=\"mdl-layout-title\">Thumbnail</span>-->             <!--</div>-->             <main id=\"page-content\" class=\"mdl-layout__content\" [ngClass]=\"{'all-space': !overlayMode }\">                  <div class=\"mdl-grid\">                     <!--<div id=\"viewer-previous-file-button\" class=\"center-element mdl-cell mdl-cell&#45;&#45;2-col mdl-cell&#45;&#45;hide-tablet mdl-cell&#45;&#45;hide-phone\">-->                     <!--<button  *ngIf=\"false\"-->                     <!--class=\"center-element mdl-color&#45;&#45;black mdl-button mdl-js-button mdl-button&#45;&#45;fab mdl-button&#45;&#45;mini-fab mdl-button&#45;&#45;colored\"-->                     <!--(click)=\"previousFile()\">-->                     <!--<i class=\"icon material-icons \">keyboard_arrow_left</i>-->                     <!--</button>-->                     <!--</div>-->                      <div id=\"viewer-content-container\" *ngIf=\"isLoaded()\"                          class=\"center-element mdl-cell mdl-cell--12-col\">                          <!-- Start View Switch-->                         <div *ngIf=\"isPdf()\">                             <pdf-viewer [showToolbar]=\"showToolbar\" [urlFile]=\"urlFileContent\"                                         [nameFile]=\"displayName\"></pdf-viewer>                         </div>                         <div class=\"center-element\" *ngIf=\"isImage()\">                             <img-viewer [urlFile]=\"urlFileContent\" [nameFile]=\"displayName\"></img-viewer>                         </div>                         <div class=\"center-element\" *ngIf=\"isMedia()\">                             <media-player [urlFile]=\"urlFileContent\" [mimeType]=\"mimeType\"                                           [nameFile]=\"displayName\"></media-player>                         </div>                         <div *ngIf=\"!supportedExtension()\">                             <not-supported-format [urlFile]=\"urlFileContent\"                                                   [nameFile]=\"displayName\"></not-supported-format>                         </div>                         <!-- End View Switch -->                      </div>                      <!--<div id=\"viewer-next-file-button\" class=\"center-element mdl-cell mdl-cell&#45;&#45;2-col mdl-cell&#45;&#45;hide-tablet mdl-cell&#45;&#45;hide-phone\">-->                     <!--<button *ngIf=\"false\"-->                     <!--class=\"center-element mdl-color&#45;&#45;black mdl-button mdl-js-button mdl-button&#45;&#45;fab mdl-button&#45;&#45;mini-fab mdl-button&#45;&#45;colored\"-->                     <!--(click)=\"nextFile()\">-->                     <!--<i class=\"icon material-icons\">keyboard_arrow_right</i>-->                     <!--</button>-->                     <!--</div>-->                  </div>             </main>         </div>         <!-- End Layout -->     </div> </div>",
        styles: [".button-container {     padding: 0 40px; }  .left {     float: left; }  #page-content {     display: flex;     flex-direction: row;     flex-wrap: wrap;     flex: 1; }  .mdl-grid {     width: 100vw;     padding: 0px !important; }  .viewer-name-file {     width: 100%;     height: 21px;     overflow: hidden !important;     text-overflow: ellipsis;     white-space: nowrap;     padding-right: 60px;     margin-right: -40px; }  .viewer-shadow-transparent {     z-index: 1000;     background-color: #3E3E3E;     position: fixed;     top: 0;     bottom: 0;     left: 0;     right: 0;     opacity: .90; }  .viewer-overlay-view {     position: fixed;     top: 0px;     left: 0px;     z-index: 1000; }  img-viewer {     height: 100%; }  .center-element {     display: flex;     align-items: center;     justify-content: center; }  .all-space{     width: 100%;     height: 100%;     background-color: #515151; }"]
    }),
    __param(2, core_1.Inject(platform_browser_1.DOCUMENT)),
    __metadata("design:paramtypes", [ng2_alfresco_core_1.AlfrescoApiService,
        core_1.ElementRef, Object, ng2_alfresco_core_1.LogService])
], ViewerComponent);
exports.ViewerComponent = ViewerComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
